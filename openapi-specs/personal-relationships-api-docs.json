{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "Personal Relationships API",
    "description" : "API for the management of contacts, their relationships to prisoners and restrictions.",
    "contact" : {
      "name" : "HMPPS Digital Studio",
      "email" : "feedback@digital.justice.gov.uk"
    },
    "version" : "2025-05-19.1605.fb808e7"
  },
  "servers" : [ {
    "url" : "/",
    "description" : "Default - This environment"
  }, {
    "url" : "https://personal-relationships-api-dev.hmpps.service.justice.gov.uk",
    "description" : "Development"
  }, {
    "url" : "https://personal-relationships-api-preprod.hmpps.service.justice.gov.uk",
    "description" : "Pre-production"
  }, {
    "url" : "https://personal-relationships-api.hmpps.service.justice.gov.uk",
    "description" : "Production"
  } ],
  "security" : [ {
    "bearer-jwt" : [ "read", "write" ]
  } ],
  "tags" : [ {
    "name" : "Contacts",
    "description" : "Endpoints for creating and managing contacts."
  }, {
    "name" : "Prisoner relationships",
    "description" : "Endpoints for creating and managing the relationships between contacts and prisoners."
  }, {
    "name" : "Restrictions",
    "description" : "Endpoints for creating and managing restrictions. Two kinds of restrictions are supported:\n - Estate wide restrictions (known as global or contact restrictions), which apply to all the contact's relationships.\n - Prisoner-contact restrictions, which apply to a specific relationship between a prisoner and a contact.\nThere are also restrictions that can apply to a prisoner (and all of their relationships) but these are not supported here."
  }, {
    "name" : "Reference data",
    "description" : "Endpoints for accessing the reference data used in this service"
  }, {
    "name" : "Migrate and sync",
    "description" : "Endpoints for migrating and synchronising data to and from NOMIS"
  }, {
    "name" : "Sync admin",
    "description" : "Endpoints use by synchronisation for administrative purposes"
  } ],
  "paths" : {
    "/sync/{prisonerNumber}/number-of-children" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the number of children for a prisoner by prisonerNumber",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the number of children for one prisoner.\n      ",
        "operationId" : "syncGetNumberOfChildrenByPrisonerNumber",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the number of children",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerNumberOfChildrenResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the number of children for this prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Create or Updates the number of children for a prisoner",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a prisoner's number of children.\n      ",
        "operationId" : "syncUpdateNumberOfChildren",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdatePrisonerNumberOfChildrenRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created/updated Prisoner's number of children",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerNumberOfChildrenResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/{prisonerNumber}/domestic-status" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the domestic status for a prisoner by prisonerNumber",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the domestic status for one prisoner.\n      ",
        "operationId" : "syncGetDomesticStatusByPrisonerNumber",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the domestic status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerDomesticStatusResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No active domestic status found for the requested prisoner.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Create or Updates the domestic status for a prisoner",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a prisoner's domestic status.\n      ",
        "operationId" : "syncUpdateDomesticStatus",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdatePrisonerDomesticStatusRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully created/updated domestic status for the requested prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerDomesticStatusResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the reference data for the supplied domestic status code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data provided in the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact/{prisonerContactId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a prisoner contact by prisonerContactId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one prisoner contact.\n      ",
        "operationId" : "syncGetPrisonerContactById",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The internal ID for a prisoner contact.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the prisoner contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "404" : {
            "description" : "No prisoner contact reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a prisoner contact with new or extra detail",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a prisoner contact.\n      ",
        "operationId" : "syncUpdatePrisonerContact",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The internal ID for the prisoner contact.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdatePrisonerContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated prisoner contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner contact not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes one prisoner contact by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a prisoner contact.\n      ",
        "operationId" : "syncDeletePrisonerContactById",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The internal ID for the prisoner contact.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted prisoner contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "404" : {
            "description" : "No prisoner contact reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact-restriction/{prisonerContactRestrictionId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a prisoner contact restriction by id",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one prisoner contact restriction.\n      ",
        "operationId" : "syncGetPrisonerContactRestrictionById",
        "parameters" : [ {
          "name" : "prisonerContactRestrictionId",
          "in" : "path",
          "description" : "The internal ID for a prisoner contact restriction.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the prisoner contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "404" : {
            "description" : "No prisoner contact restriction reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a prisoner contact restriction with new or extra detail",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a prisoner contact restriction.\n      ",
        "operationId" : "syncUpdatePrisonerContactRestriction",
        "parameters" : [ {
          "name" : "prisonerContactRestrictionId",
          "in" : "path",
          "description" : "The internal ID for the prisoner contact restriction.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated prisoner contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner contact restriction or relationship was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes one prisoner contact restriction by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a prisoner contact restriction.\n      ",
        "operationId" : "syncDeletePrisonerContactRestrictionById",
        "parameters" : [ {
          "name" : "prisonerContactRestrictionId",
          "in" : "path",
          "description" : "The internal ID for the prisoner contact restriction.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted prisoner contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "404" : {
            "description" : "No prisoner contact restriction reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/employment/{employmentId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for an employment record by employmentId",
        "description" : "Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Used to get the details for one employment record.",
        "operationId" : "syncGetEmploymentById",
        "parameters" : [ {
          "name" : "employmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The details of the employment record",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmploymentEntity"
                }
              }
            }
          },
          "404" : {
            "description" : "No employment record with this ID could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncEmployment"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates an employment record",
        "description" : "Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Used to update an employment record.",
        "operationId" : "syncUpdateEmployment",
        "parameters" : [ {
          "name" : "employmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateEmploymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated an employment record",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncEmployment"
                }
              }
            }
          },
          "404" : {
            "description" : "The employment record was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncEmployment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data provided in the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes an employment record by internal ID",
        "description" : "Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Delete an employment record by internal ID.",
        "operationId" : "syncDeleteEmploymentById",
        "parameters" : [ {
          "name" : "employmentId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted an employment record"
          },
          "404" : {
            "description" : "No employment record with this ID could be found"
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact/{contactId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a contact by contactId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one contact.\n      ",
        "operationId" : "syncGetContactById",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The internal ID for a contact.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a contact with new or extra detail",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a contact.\n      ",
        "operationId" : "syncUpdateContact",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The internal ID for the contact.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "404" : {
            "description" : "Contact not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes one contact by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a contact.\n      ",
        "operationId" : "syncDeleteContactById",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The internal ID for the contact.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted contact"
          },
          "404" : {
            "description" : "No contact reference with that id could be found"
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-restriction/{contactRestrictionId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a contact restriction by contactRestrictionId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one contact restriction.\n      ",
        "operationId" : "syncGetContactRestrictionById",
        "parameters" : [ {
          "name" : "contactRestrictionId",
          "in" : "path",
          "description" : "The internal ID for a contact restriction.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact restriction reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a contact restriction with new or extra detail",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a contact restriction.\n      ",
        "operationId" : "syncUpdateContactRestriction",
        "parameters" : [ {
          "name" : "contactRestrictionId",
          "in" : "path",
          "description" : "The internal ID for the contact restriction.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "404" : {
            "description" : "Contact restriction not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes one contact restriction by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a contact restriction.\n      ",
        "operationId" : "syncDeleteContactRestrictionById",
        "parameters" : [ {
          "name" : "contactRestrictionId",
          "in" : "path",
          "description" : "The internal ID for the contact restriction.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact restriction reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-phone/{contactPhoneId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a contact phone by contactPhoneId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one contact phone.\n      ",
        "operationId" : "syncGetContactPhoneById",
        "parameters" : [ {
          "name" : "contactPhoneId",
          "in" : "path",
          "description" : "The internal ID for a contact phone.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a phone number for a contact",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a contact's phone number.\n      ",
        "operationId" : "syncUpdateContactPhone",
        "parameters" : [ {
          "name" : "contactPhoneId",
          "in" : "path",
          "description" : "The internal ID for the contact phone.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateContactPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contact phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "404" : {
            "description" : "Contact phone not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes one contact phone by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a contact phone.\n      ",
        "operationId" : "syncDeleteContactPhoneById",
        "parameters" : [ {
          "name" : "contactPhoneId",
          "in" : "path",
          "description" : "The internal ID for the contact phone.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted contact phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact phone with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-identity/{contactIdentityId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a contact identity by contactIdentityId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one contact identity.\n      ",
        "operationId" : "syncGetContactIdentityById",
        "parameters" : [ {
          "name" : "contactIdentityId",
          "in" : "path",
          "description" : "The internal ID for a contact identity.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact identity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact identity with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a contact identity with new or extra detail",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a contact identity.\n      ",
        "operationId" : "syncUpdateContactIdentity",
        "parameters" : [ {
          "name" : "contactIdentityId",
          "in" : "path",
          "description" : "The internal ID for the contact identity.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateContactIdentityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contact identity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "404" : {
            "description" : "Contact identity not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes one contact identity by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a contact identity.\n      ",
        "operationId" : "syncDeleteContactIdentityById",
        "parameters" : [ {
          "name" : "contactIdentityId",
          "in" : "path",
          "description" : "The internal ID for the contact identity.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted contact identity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact identity with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-email/{contactEmailId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a contact email by contactEmailId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one contact email.\n      ",
        "operationId" : "syncGetContactEmailById",
        "parameters" : [ {
          "name" : "contactEmailId",
          "in" : "path",
          "description" : "The internal ID for a contact email.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact email",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact email reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a contact email with new or extra detail",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a contact email.\n      ",
        "operationId" : "syncUpdateContactEmail",
        "parameters" : [ {
          "name" : "contactEmailId",
          "in" : "path",
          "description" : "The internal ID for the contact email.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateContactEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contact email",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "404" : {
            "description" : "Contact email not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes one contact email by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a contact email.\n      ",
        "operationId" : "syncDeleteContactEmailById",
        "parameters" : [ {
          "name" : "contactEmailId",
          "in" : "path",
          "description" : "The internal ID for the contact email.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted contact email",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact email reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address/{contactAddressId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for a contact address by contactAddressId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one contact address.\n      ",
        "operationId" : "syncGetContactAddressById",
        "parameters" : [ {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The internal ID for a contact address.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact address",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact address reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates a contact address with new or extra detail",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update a contact address.\n      ",
        "operationId" : "syncUpdateContactAddress",
        "parameters" : [ {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The internal ID for the contact address.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateContactAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated contact address",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "404" : {
            "description" : "Contact address not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes a contact address by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to delete a contact address.\n      ",
        "operationId" : "syncDeleteContactAddressById",
        "parameters" : [ {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The internal ID for the contact address.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted contact address",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact address reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address-phone/{contactAddressPhoneId}" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Returns the data for an address-soecific phone number by contactAddressPhoneId",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to get the details for one address-specific phone number.\n      ",
        "operationId" : "syncGetContactPhoneById_1",
        "parameters" : [ {
          "name" : "contactAddressPhoneId",
          "in" : "path",
          "description" : "The internal ID for an address-specific phone number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "The details of the address-specific phone number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "404" : {
            "description" : "No address-specific phone number with this ID could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Updates an address-specific phone number",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to update an address-specific phone number for a contact.\n      ",
        "operationId" : "syncUpdateContactAddressPhone",
        "parameters" : [ {
          "name" : "contactAddressPhoneId",
          "in" : "path",
          "description" : "The internal ID for an address-specific phone number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncUpdateContactAddressPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully updated an address-specific phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "404" : {
            "description" : "The address-specific phone number was not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data provided in the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Deletes an addres-specific phone number by internal ID",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Delete an address-specific phone number by internal ID.\n      ",
        "operationId" : "syncDeleteContactAddressPhoneById",
        "parameters" : [ {
          "name" : "contactAddressPhoneId",
          "in" : "path",
          "description" : "The internal ID for the address-specific phone number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Successfully deleted an address-specific phone number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "404" : {
            "description" : "No address-specific phone number with this ID could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonerNumber}/number-of-children" : {
      "get" : {
        "tags" : [ "Prisoner Number Of Children" ],
        "summary" : "Get prisoner number of children",
        "operationId" : "getNumberOfChildren",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Prisoner number of children retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerNumberOfChildrenResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the number of children for this prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Prisoner Number Of Children" ],
        "summary" : "Create or update prisoner number of children",
        "operationId" : "createOrUpdateNumberOfChildren",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrUpdatePrisonerNumberOfChildrenRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Prisoner number of children created/updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerNumberOfChildrenResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonerNumber}/domestic-status" : {
      "get" : {
        "tags" : [ "Prisoner Domestic Status" ],
        "summary" : "Get prisoner domestic status",
        "operationId" : "getDomesticStatus",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Prisoner domestic status retrieved successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerDomesticStatusResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the active domestic status for prisoner.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Prisoner Domestic Status" ],
        "summary" : "Create or update prisoner domestic status",
        "operationId" : "createOrUpdateDomesticStatus",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateOrUpdatePrisonerDomesticStatusRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Prisoner domestic status created/updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerDomesticStatusResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid input data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the prisoner or an active domestic status value.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact/{prisonerContactId}/restriction/{prisonerContactRestrictionId}" : {
      "put" : {
        "tags" : [ "Restrictions" ],
        "summary" : "Update prisoner contact restriction",
        "description" : "Updates a prisoner contact restriction for the specified prisoner contact relationship and restriction ids",
        "operationId" : "updatePrisonerContactRestriction",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The id of the prisoner contact relationship",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "prisonerContactRestrictionId",
          "in" : "path",
          "description" : "The id of the  restriction",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated the prisoner contact restriction successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerContactRestrictionDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the prisoner contact relationship or prisoner contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merge/keep/{keepingPrisonerNumber}/remove/{removedPrisonerNumber}" : {
      "put" : {
        "tags" : [ "Offender merge" ],
        "summary" : "Handle the details of a prisoner when merging prisoner records",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to merge a prisoner's records.\n      ",
        "operationId" : "merge",
        "parameters" : [ {
          "name" : "keepingPrisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "removedPrisonerNumber",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successfully merged Prisoner's records",
            "content" : {
              "application/json" : { }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/restriction/{contactRestrictionId}" : {
      "put" : {
        "tags" : [ "Restrictions" ],
        "summary" : "Update global restriction for a contact",
        "description" : "Updates a global (estate-wide) restriction for the specified contact and restriction id",
        "operationId" : "updateContactGlobalRestriction",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactRestrictionId",
          "in" : "path",
          "description" : "The id of the global restriction",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated the global restriction successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactRestrictionDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or global restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/phone/{contactPhoneId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get a phone number",
        "description" : "Gets a contacts phone number by id",
        "operationId" : "getPhone",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactPhoneId",
          "in" : "path",
          "description" : "The id of the contact phone",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the phone successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or phone this request is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update contact phone number",
        "description" : "Updates an existing contact phone by id",
        "operationId" : "updatePhone",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactPhoneId",
          "in" : "path",
          "description" : "The id of the contact phone",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated the contact phone successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or phone by their ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete contact phone number",
        "description" : "Deletes an existing contact phone by id",
        "operationId" : "deletePhone",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactPhoneId",
          "in" : "path",
          "description" : "The id of the contact phone",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted the contact phone successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or phone by their ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/identity/{contactIdentityId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get an identity",
        "description" : "Gets a contacts identity by id",
        "operationId" : "getIdentityNumber",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactIdentityId",
          "in" : "path",
          "description" : "The id of the contact identity",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the identity successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or identity this request is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update contact identity",
        "description" : "Updates an existing contact identity by id",
        "operationId" : "updateIdentityNumber",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactIdentityId",
          "in" : "path",
          "description" : "The id of the contact identity",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateIdentityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated the contact identity successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or identity by their ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete contact identity",
        "description" : "Deletes an existing contact identity by id",
        "operationId" : "deleteIdentityNumber",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactIdentityId",
          "in" : "path",
          "description" : "The id of the contact identity",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted the contact identity successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or identity by their ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/employment/{employmentId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get an employment",
        "description" : "Get a single employment by id",
        "operationId" : "getEmployment",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "employmentId",
          "in" : "path",
          "description" : "The id of the employment",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "responses" : {
          "200" : {
            "description" : "The employment was found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmploymentDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact or employment with that id could be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update employment",
        "description" : "Update a single employment for a contact",
        "operationId" : "updateEmployment",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "employmentId",
          "in" : "path",
          "description" : "The id of the employment",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateEmploymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The employment was updated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmploymentDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact or employment with that id could be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete employment",
        "description" : "Delete a single employment for a contact",
        "operationId" : "deleteEmployment",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "employmentId",
          "in" : "path",
          "description" : "The id of the employment",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "responses" : {
          "204" : {
            "description" : "The employment was deleted successfully"
          },
          "404" : {
            "description" : "No contact or employment with that id could be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/email/{contactEmailId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get an email",
        "description" : "Gets a contacts email by id",
        "operationId" : "getEmailAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactEmailId",
          "in" : "path",
          "description" : "The id of the contact email",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the email successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or email this request is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update contact email",
        "description" : "Updates an existing contact email by id",
        "operationId" : "updateEmailAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactEmailId",
          "in" : "path",
          "description" : "The id of the contact email",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated the contact email successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or email by their ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete contact email",
        "description" : "Deletes an existing contact email by id",
        "operationId" : "deleteEmailAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactEmailId",
          "in" : "path",
          "description" : "The id of the contact email",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 987654
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted the contact email successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or email by their ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/address/{contactAddressId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get a contact address",
        "description" : "Get a contact address by its ID",
        "operationId" : "getContactAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The contact ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The contact address ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 122
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the address successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or address by their IDs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update a contact address",
        "description" : "Updates an existing contact address by its ID",
        "operationId" : "updateContactAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The contact ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The contact address ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1233
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateContactAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated the contact address successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or address by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete contact address",
        "description" : "Deletes a contact address by its ID",
        "operationId" : "deleteContactAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The contact ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The contact address ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 456
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted the contact address successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or address by the provided IDs",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Contacts" ],
        "summary" : "Patch a contact address individual fields as a patch",
        "description" : "Patches an existing contact address by its ID",
        "operationId" : "patchContactAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The contact ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The contact address ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 1233
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchContactAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Patched the contact address successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or address by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/address/{contactAddressId}/phone/{contactAddressPhoneId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get an address-specific phone number",
        "description" : "Get an address-specific phone number by its ID",
        "operationId" : "getContactAddressPhone",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The contact ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The contact address ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 122
        }, {
          "name" : "contactAddressPhoneId",
          "in" : "path",
          "description" : "The address-specific phone ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 979
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the address-specific phone number successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressPhoneDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact, address or phone number by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update an address-specific phone number",
        "description" : "Updates an address-specific phone number by its ID",
        "operationId" : "updateContactAddressPhone",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The contact ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The contact address ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 878
        }, {
          "name" : "contactAddressPhoneId",
          "in" : "path",
          "description" : "The address-specific phone ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 979
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateContactAddressPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated the address-specific phone number successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressPhoneDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact, address or phone number by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Contacts" ],
        "summary" : "Delete an address-specific phone number",
        "description" : "Deletes an address-specific phone number by its ID",
        "operationId" : "deleteContactAddress_1",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The contact ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The contact address ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 456
        }, {
          "name" : "contactAddressPhoneId",
          "in" : "path",
          "description" : "The address-specific phone ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 979
        } ],
        "responses" : {
          "204" : {
            "description" : "Deleted the address-specific phone number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressPhoneDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact, address or address specific phone number by ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new prisoner contact",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a prisoner contact.\n      ",
        "operationId" : "syncCreatePrisonerContact",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreatePrisonerContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created prisoner contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "The requested combination of prisoner, contact and relationship to prisoner already exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact-restriction" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new prisoner contact restriction",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a prisoner contact restriction.\n      ",
        "operationId" : "syncCreatePrisonerContactRestriction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created prisoner contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/employment" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new employment record",
        "description" : "Requires role: PERSONAL_RELATIONSHIPS_MIGRATION. Used to create a new employment record.",
        "operationId" : "syncCreateEmployment",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateEmploymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created an employment record",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncEmployment"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data provided in the request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new contact",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a contact and associate it with a contact.\n      ",
        "operationId" : "syncCreateContact",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict. The personId provided in the request already exists as a contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-restriction" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new contact restriction",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a contact restriction and associate it with a contact.\n      ",
        "operationId" : "syncCreateContactRestriction",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contact restriction",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-phone" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new contact phone",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a contact phone and associate it with a contact.\n      ",
        "operationId" : "syncCreateContactPhone",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateContactPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contact phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-identity" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new contact identity",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a contact identity and associate it with a contact.\n      ",
        "operationId" : "syncCreateContactIdentity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateContactIdentityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contact identity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-email" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new contact email",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a contact email and associate it with a contact.\n      ",
        "operationId" : "syncCreateContactEmail",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateContactEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contact email",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new contact address",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create a contact address and associate it with a contact.\n      ",
        "operationId" : "syncCreateContactAddress",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateContactAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created contact address",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address-phone" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Creates a new address-specific phone number",
        "description" : "\n      Requires role: PERSONAL_RELATIONSHIPS_MIGRATION.\n      Used to create an address-specific phone number.\n      ",
        "operationId" : "syncCreateContactAddressPhone",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SyncCreateContactAddressPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created an address-specific phone number",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The contact address phone number was not found for the provided ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/admin/reset" : {
      "post" : {
        "tags" : [ "Sync admin" ],
        "summary" : "Removes and recreates relationships and restrictions for one prisoner to reset them to match what exists in NOMIS.",
        "description" : "Similar to a merge but for one prisoner, catering for events like booking moves, new bookings, and reinstated bookings",
        "operationId" : "resetPrisonerContacts",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ResetPrisonerContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The relationships and restrictions were successfully replaced",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResetPrisonerContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request failed validation with invalid or missing data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/admin/merge" : {
      "post" : {
        "tags" : [ "Sync admin" ],
        "summary" : "Removes and recreates relationships and restrictions after a prisoner merge in NOMIS",
        "description" : "Relationships are removed for the old and new numbers, and then recreated for new number only",
        "operationId" : "mergePrisonerContacts",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MergePrisonerContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The relationships and restrictions were successfully replaced",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MergePrisonerContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request failed validation with invalid or missing data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact" : {
      "post" : {
        "tags" : [ "Prisoner relationships" ],
        "summary" : "Add a new prisoner contact relationship",
        "description" : "Creates a new relationship between the contact and a prisoner.",
        "operationId" : "addContactRelationship",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddContactRelationshipRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the relationship successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerContactRelationshipDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the prisoner or contact that this relationship relates to",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "The requested combination of prisoner, contact and relationship to prisoner already exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact/{prisonerContactId}/restriction" : {
      "get" : {
        "tags" : [ "Restrictions" ],
        "summary" : "Get the prisoner contact restrictions",
        "description" : "\n      Get the restrictions that apply for this relationship.\n      \n      This includes prisoner-contact restrictions for this specific relationship only and any global (estate-wide) restrictions for the contact.\n      \n      If the prisoner and contact have multiple relationships, the prisoner-contact restrictions for the other relationships will not be returned. \n    ",
        "operationId" : "getPrisonerContactRestrictionsByPrisonerContactId",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The id of the prisoner contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : "1L"
        } ],
        "responses" : {
          "200" : {
            "description" : "Prisoner Contact relationship",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerContactRestrictionsResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The Prisoner contact relationship was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Restrictions" ],
        "summary" : "Create new prisoner contact restriction",
        "description" : "Creates a new prisoner contact restriction for the specified prisoner contact relationship",
        "operationId" : "createPrisonerContactRestriction",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The id of the prisoner contact relationship",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the prisoner contact restriction successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerContactRestrictionDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the prisoner contact relationship this prisoner contact restriction is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/migrate/number-of-children" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Migrate number of children for prisoner",
        "description" : "Migrate a prisoner's number of children from NOMIS.",
        "operationId" : "migrateNumberOfChildren",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MigratePrisonerNumberOfChildrenRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The prisoner's number of children was migrated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerNumberOfChildrenMigrationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/migrate/domestic-status" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Migrate domestic status for prisoner",
        "description" : "Migrate a prisoner's domestic status from NOMIS.",
        "operationId" : "migrateDomesticStatus",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MigratePrisonerDomesticStatusRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The domestic status was migrated successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerDomesticStatusMigrationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request failed validation with invalid or missing data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find reference data for the supplied domestic status code",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/migrate/contact" : {
      "post" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Migrate a contact",
        "description" : "Migrate a contact from NOMIS with all of its associated data.",
        "operationId" : "migrateContact",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MigrateContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The contact and associated data was created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/MigrateContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request failed validation with invalid or missing data supplied",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Conflict. The request contained a personId which already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create a new contact",
        "description" : "Creates a new contact that is not yet associated with any prisoner.",
        "operationId" : "createContact",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the contact successfully",
            "headers" : {
              "Location" : {
                "description" : "The URL where you can load the contact",
                "style" : "simple",
                "example" : "/contact/123456"
              }
            },
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactCreationResult"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the prisoner that this contact has a relationship to",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/restriction" : {
      "get" : {
        "tags" : [ "Restrictions" ],
        "summary" : "Get a contacts global restrictions",
        "description" : "\n      Get a contacts global restrictions only. Global restrictions apply to all of a contacts relationships and are known as estate-wide restrictions in NOMIS.\n\n      Additional restrictions between the contact and specific prisoners may also apply.\n      ",
        "operationId" : "getContactGlobalRestrictions",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact and their restrictions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ContactRestrictionDetails"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "No contact with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Restrictions" ],
        "summary" : "Create new global restriction",
        "description" : "Creates a new global (estate-wide) restriction for the specified contact",
        "operationId" : "createContactGlobalRestriction",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContactRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the global restriction successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactRestrictionDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact this global restriction is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/phones" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create multiple new contact phone numbers",
        "description" : "Creates one or more phone numbers for the specified contact",
        "operationId" : "createMultipleContactPhoneNumber",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMultiplePhoneNumbersRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created all the contact phone numbers successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ContactPhoneDetails"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact this phone is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/phone" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create new contact phone number",
        "description" : "Creates a new phone number for the specified contact",
        "operationId" : "createPhone",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the contact phone successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact this phone is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/identity" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create new contact identity",
        "description" : "Creates a new identity for the specified contact",
        "operationId" : "createIdentityNumber",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateIdentityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the contact identity successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact this identity is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/identities" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create multiple contact identities",
        "description" : "Creates one or more new identities for the specified contact",
        "operationId" : "createMultipleIdentities",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMultipleIdentitiesRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created all identities successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ContactIdentityDetails"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact this identity is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/employment" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create employment",
        "description" : "Create a single employment for a contact",
        "operationId" : "createEmployment",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEmploymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "The employment was created successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/EmploymentDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact with that id could be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Contacts" ],
        "summary" : "Patch employments",
        "description" : "Allows several updates to employments in one go. Includes creating new employments, updating existing employments and removing existing employments.",
        "operationId" : "patchEmployment",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchEmploymentsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The changes were applied successfully. Returns full list of employments after update.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/EmploymentDetails"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact with that id could be found or employments for update or delete could not be found or an organisation could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/emails" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create multiple contact email addresses",
        "description" : "Creates one or more new email addresses for the specified contact",
        "operationId" : "createMultipleEmailAddresses",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMultipleEmailsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created all the contact email addresses successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ContactEmailDetails"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact this email is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/email" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create new contact email",
        "description" : "Creates a new email for the specified contact",
        "operationId" : "createEmailAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the contact email successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact this email is for",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/address" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create new contact address",
        "description" : "Creates a new address for the specified contact",
        "operationId" : "createContactAddress",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContactAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the contact address successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the address",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/address/{contactAddressId}/phones" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create multiple address-specific phone numbers",
        "description" : "Creates one or more address-specific phone numbers",
        "operationId" : "createMultipleContactAddressPhones",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 111
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The id of the address",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 222
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateMultiplePhoneNumbersRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created all the address-specific phone numbers successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ContactAddressPhoneDetails"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or address provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/address/{contactAddressId}/phone" : {
      "post" : {
        "tags" : [ "Contacts" ],
        "summary" : "Create new address-specific phone number",
        "description" : "Creates a new address-specific phone number",
        "operationId" : "createContactAddressPhone",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 111
        }, {
          "name" : "contactAddressId",
          "in" : "path",
          "description" : "The id of the address",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 222
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContactAddressPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created the address-specific phone number successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactAddressPhoneDetails"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact or address provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact/{prisonerContactId}" : {
      "get" : {
        "tags" : [ "Prisoner relationships" ],
        "summary" : "Endpoint to get a prisoner contact relationship by relationship id",
        "operationId" : "getPrisonerContactById",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The id of the prisoner contact relationship to be returned",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : "1L"
        } ],
        "responses" : {
          "200" : {
            "description" : "Prisoner Contact relationship",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerContactRelationshipDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "The Prisoner contact relationship was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Prisoner relationships" ],
        "summary" : "Update prisoner contact relationship",
        "description" : "Update the relationship between the contact and a prisoner.",
        "operationId" : "patchContactRelationship",
        "parameters" : [ {
          "name" : "prisonerContactId",
          "in" : "path",
          "description" : "The id of the prisoner contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchRelationshipRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Updated the relationship successfully",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "400" : {
            "description" : "The request has invalid or missing fields",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the prisoner contact that this relationship relates to",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "The requested combination of prisoner, contact and relationship to prisoner already exists.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get contact",
        "description" : "Gets a contact by their id",
        "operationId" : "getContact",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Contacts" ],
        "summary" : "Update a contact",
        "description" : "Update a contact",
        "operationId" : "patchContact",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "The contact was updated.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PatchContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner/{prisonerNumber}/reconcile" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Reconciliation endpoint for a single prisoner by prisoner number",
        "description" : "Get all the relationships, active and inactive, and their restrictions for one prisoner",
        "operationId" : "reconcileSinglePrisoner",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "description" : "The internal ID for the contact.",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Reconciliation object for one contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncPrisonerReconcile"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact/{contactId}/reconcile" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Reconciliation endpoint for a single contact by ID",
        "description" : "Get a minimal version of a contact and its main sub-entities to reconcile against",
        "operationId" : "reconcileSingleContact",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The internal ID for the contact.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Reconciliation object for one contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SyncContactReconcile"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact/reconcile" : {
      "get" : {
        "tags" : [ "Migrate and sync" ],
        "summary" : "Reconciliation endpoint",
        "description" : "Get a paged list of existing contact IDs to reconcile against",
        "operationId" : "reconcileContacts",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Zero-based page index (0..N)",
          "schema" : {
            "type" : "integer",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The size of the page to be returned",
          "schema" : {
            "type" : "integer",
            "default" : 20
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable contact IDs returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedModelSyncContactId"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reference-codes/group/{groupCode}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Endpoint to return reference data for a provided group key. Sorted by display order then description by default.",
        "operationId" : "getReferenceDataByGroup",
        "parameters" : [ {
          "name" : "groupCode",
          "in" : "path",
          "description" : "The group code of the reference codes to load",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/ReferenceCodeGroup"
          },
          "example" : "PHONE_TYPE"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sort configuration - default displayOrder, description",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Sort"
          }
        }, {
          "name" : "activeOnly",
          "in" : "query",
          "description" : "Whether to only return active codes or not, defaults to true",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "List of reference data codes/values",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonNumber}/contact" : {
      "get" : {
        "tags" : [ "Prisoner relationships" ],
        "summary" : "Fetch contact relationships by prisoner number with the requested filtering applied with pagination",
        "operationId" : "getAllContacts",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "The prison number of the prisoner who's contacts will be returned",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A1234BC"
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "If specified and true then only relationships that are active will be returned, or if false only inactive ones. If omitted, then all relationships will be returned.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "relationshipType",
          "in" : "query",
          "description" : "If specified then only relationships of that type will be returned. If omitted, then all relationship types will be returned. Use \"S\" for Social and \"O\" for Official relationships.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "S", "O" ],
            "pattern" : "[SO]"
          }
        }, {
          "name" : "emergencyContact",
          "in" : "query",
          "description" : "If specified and true only returns results where the contact is listed as an emergency contact for the prisoner or is not an emergency contact if false",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "nextOfKin",
          "in" : "query",
          "description" : "If specified and true only returns results where the contact is listed as next of kin for the prisoner or is not next of kin if false",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "emergencyContactOrNextOfKin",
          "in" : "query",
          "description" : "If specified and true only includes results that are listed as either an emergency contact or next of kin for the prisoner. If false then only returns contacts that are neither next of kin or emergency contact.",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Zero-based page index (0..N)",
          "schema" : {
            "type" : "integer",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The size of the page to be returned",
          "schema" : {
            "type" : "integer",
            "default" : 20
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "A page of matching contact relationships for the prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedModelPrisonerContactSummary"
                }
              }
            }
          },
          "404" : {
            "description" : "The Prisoner was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonNumber}/contact/{contactId}" : {
      "get" : {
        "tags" : [ "Prisoner relationships" ],
        "summary" : "Get all relationships between a specific prisoner and contact",
        "description" : "Prisoners can have multiple relationships defined with a single contact which is a security risk and highly discouraged.\n      |This API should be used to help dissuade users from creating multiple relationships between a single prisoner and contact wherever possible.\n    ",
        "operationId" : "getAllSummariesForPrisonerAndContact",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "The prison number of the prisoner who's contacts will be returned",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A1234BC"
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "responses" : {
          "200" : {
            "description" : "A page of matching contact relationships for the prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerContactSummary"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "The Prisoner was not found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonNumber}/contact/count" : {
      "get" : {
        "tags" : [ "Prisoner relationships" ],
        "summary" : "Count of a prisoner's active contact relationships for their current term by relationship type",
        "operationId" : "getContactRelationshipCount",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "The prison number of the prisoner who's contacts will be returned",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A1234BC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Count of active prisoner contact relationships",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerContactRelationshipCount"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get language reference",
        "description" : "Gets all language references",
        "operationId" : "getAllLanguages",
        "responses" : {
          "200" : {
            "description" : "Found the language reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/language-reference/{id}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get language reference",
        "description" : "Gets a language reference by their id",
        "operationId" : "getLanguageById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the language reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "404" : {
            "description" : "No language reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/language-reference/nomis-code/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get language reference",
        "description" : "Gets a language reference by their nomis code",
        "operationId" : "getLanguageByNomisCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the language reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "404" : {
            "description" : "No language reference with that nomis code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/language-reference/iso-alpha3/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get language reference",
        "description" : "Gets a language reference by their by ISO Alpha 3 code",
        "operationId" : "getLanguageByIsoAlpha3",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the language reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "404" : {
            "description" : "No language reference with that ISO Alpha 3 code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/language-reference/iso-alpha2/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get language reference",
        "description" : "Gets a language reference by their ISO Alpha 2 code",
        "operationId" : "getLanguageByIsoAlpha2",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the language reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "404" : {
            "description" : "No language reference with that ISO Alpha 2 code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Language"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/county-reference" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get county reference",
        "description" : "Gets all county references",
        "operationId" : "getAllCounties",
        "responses" : {
          "200" : {
            "description" : "Found the county reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/County"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/county-reference/{id}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get county reference",
        "description" : "Gets a county reference by their id",
        "operationId" : "getCountyById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the county reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/County"
                }
              }
            }
          },
          "404" : {
            "description" : "No county reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/County"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/county-reference/nomis-code/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get county reference",
        "description" : "Gets a county reference by their nomis code",
        "operationId" : "getCountyByNomisCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the county reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/County"
                }
              }
            }
          },
          "404" : {
            "description" : "No county reference with that nomis code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/County"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/country-reference" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get country reference",
        "description" : "Gets all country references",
        "operationId" : "getAllCountries",
        "responses" : {
          "200" : {
            "description" : "Found the country reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/country-reference/{id}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get country reference",
        "description" : "Gets a country reference by their id",
        "operationId" : "getCountryById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the country reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "404" : {
            "description" : "No country reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/country-reference/nomis-code/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get country reference",
        "description" : "Gets a country reference by their nomis code",
        "operationId" : "getCountryByNomisCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the country reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "404" : {
            "description" : "No country reference with that nomis code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/country-reference/iso-alpha3/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get country reference",
        "description" : "Gets a country reference by their by ISO Alpha 3 code",
        "operationId" : "getCountryByIsoAlpha3",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the country reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "404" : {
            "description" : "No country reference with that ISO Alpha 3 code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/country-reference/iso-alpha2/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get country reference",
        "description" : "Gets a country reference by their ISO Alpha 2 code",
        "operationId" : "getCountryByIsoAlpha2",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the country reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "404" : {
            "description" : "No country reference with that ISO Alpha 2 code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Country"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/contact/{contactId}/name" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get contact name",
        "description" : "Gets a contacts name details by their id. Includes title code, description, first name, middle names and last name.",
        "operationId" : "getContactName",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactNameDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "No contact with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/linked-prisoners" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Get linked prisoners",
        "description" : "Gets a list of prisoners that have an active relationship with the contact. Sorted by prisoner lastName, firstName, middleNames and the prisoner number.",
        "operationId" : "getContactLinkedPrisoners",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "The id of the contact",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 123456
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Zero-based page index (0..N)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The size of the page to be returned",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 20
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the the linked prisoners successfully. Can be an empty list.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedModelLinkedPrisonerDetails"
                }
              }
            }
          },
          "404" : {
            "description" : "Could not find the the contact",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/search" : {
      "get" : {
        "tags" : [ "Contacts" ],
        "summary" : "Search contacts",
        "description" : "Search all contacts by their last name or first name or middle name or date of birth",
        "operationId" : "searchContacts",
        "parameters" : [ {
          "name" : "lastName",
          "in" : "query",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1,
            "pattern" : "[a-zA-Z\\s,.'-]*"
          }
        }, {
          "name" : "firstName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "pattern" : "[a-zA-Z\\s,.'-]*"
          }
        }, {
          "name" : "middleNames",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "pattern" : "[a-zA-Z\\s,.'-]*"
          }
        }, {
          "name" : "dateOfBirth",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Zero-based page index (0..N)",
          "schema" : {
            "type" : "integer",
            "default" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The size of the page to be returned",
          "schema" : {
            "type" : "integer",
            "default" : 20
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found contacts",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagedModelContactSearchResultItem"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/city-reference" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get city reference",
        "description" : "Gets all city references",
        "operationId" : "getAllCities",
        "responses" : {
          "200" : {
            "description" : "Found the city reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/City"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/city-reference/{id}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get city reference",
        "description" : "Gets a city reference by their id",
        "operationId" : "getCityById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the city reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/City"
                }
              }
            }
          },
          "404" : {
            "description" : "No city reference with that id could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/City"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/city-reference/nomis-code/{code}" : {
      "get" : {
        "tags" : [ "Reference data" ],
        "summary" : "Get city reference",
        "description" : "Gets a city reference by their nomis code",
        "operationId" : "getCityByNomisCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Found the city reference",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/City"
                }
              }
            }
          },
          "404" : {
            "description" : "No city reference with that nomis code could be found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/City"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorised, requires a valid Oauth2 token",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    }
  },
  "components" : {
    "schemas" : {
      "SyncUpdatePrisonerNumberOfChildrenRequest" : {
        "type" : "object",
        "description" : "Request to update a prisoner's number of children",
        "properties" : {
          "numberOfChildren" : {
            "type" : "string",
            "description" : "The number of children",
            "example" : 1,
            "maxLength" : 50,
            "minLength" : 0
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the person who created the record",
            "example" : "JSMITH_ADM"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the record was created"
          }
        },
        "required" : [ "createdBy", "createdTime" ]
      },
      "SyncPrisonerNumberOfChildrenResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier of the prisoner's number of children",
            "example" : 1
          },
          "numberOfChildren" : {
            "type" : "string",
            "description" : "The number of children of the prisoner"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is this the active number of children of the prisoner"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Creation date and time"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the creator"
          }
        },
        "required" : [ "active", "id" ]
      },
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "integer",
            "format" : "int32"
          },
          "errorCode" : {
            "type" : "string"
          },
          "userMessage" : {
            "type" : "string"
          },
          "developerMessage" : {
            "type" : "string"
          },
          "moreInfo" : {
            "type" : "string"
          }
        },
        "required" : [ "status" ]
      },
      "SyncUpdatePrisonerDomesticStatusRequest" : {
        "type" : "object",
        "description" : "Request to update a prisoner's domestic status",
        "properties" : {
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The domestic status code value",
            "example" : 1,
            "maxLength" : 12,
            "minLength" : 0
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the person who created the record",
            "example" : "JSMITH_ADM"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the record was created"
          }
        },
        "required" : [ "createdBy", "createdTime" ]
      },
      "SyncPrisonerDomesticStatusResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier of the prisoner's domestic status",
            "example" : 1
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The domestic status value of the prisoner"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is this the active domestic status code of the prisoner"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Creation date and time"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the creator"
          }
        },
        "required" : [ "active", "id" ]
      },
      "SyncUpdatePrisonerContactRequest" : {
        "type" : "object",
        "description" : "Request object to update prisoner contact details",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the prisoner contact",
            "example" : 12345
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "contactType" : {
            "type" : "string",
            "description" : "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value from the group code CONTACT_TYPE in reference data.\n      Known values are (S) Social or (O) official.\n      ",
            "example" : "S"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "The type of relationship",
            "example" : "Friend"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is next of kin",
            "example" : true
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an emergency contact",
            "example" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments about the prisoner contact",
            "example" : "Close family friend"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is active",
            "example" : true
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an approved visitor",
            "example" : false
          },
          "currentTerm" : {
            "type" : "boolean",
            "description" : "Indicates if this relationship applies to the latest booking",
            "example" : true
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The expiry date of the prisoner contact",
            "example" : "2025-01-01"
          },
          "createdAtPrison" : {
            "type" : "string",
            "description" : "The prison where the prisoner contact was created",
            "example" : "HMP Belmarsh"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The user who last updated the prisoner contact",
            "example" : "adminUser"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the prisoner contact was changed",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "active", "approvedVisitor", "contactId", "contactType", "currentTerm", "emergencyContact", "nextOfKin", "prisonerNumber", "relationshipType", "updatedTime" ]
      },
      "SyncPrisonerContact" : {
        "type" : "object",
        "description" : "Response object with prisoner contact details",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the prisoner contact",
            "example" : 12345
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "contactType" : {
            "type" : "string",
            "description" : "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value (from the group code CONTACT_TYPE in reference data).\n      Known values are (S) Social or (O) official.\n      ",
            "example" : "S"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "The relationship code from reference data",
            "example" : "Friend"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is next of kin",
            "example" : true
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an emergency contact",
            "example" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments about the prisoner contact",
            "example" : "Close family friend"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is active",
            "example" : true
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an approved visitor",
            "example" : true
          },
          "currentTerm" : {
            "type" : "boolean",
            "description" : "Indicates if this relationship applies to the latest booking",
            "example" : true
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The expiry date of the prisoner contact",
            "example" : "2025-01-01"
          },
          "createdAtPrison" : {
            "type" : "string",
            "description" : "The prison where the prisoner contact was created",
            "example" : "HMP Belmarsh"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The user who created the prisoner contact",
            "example" : "system"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp when the prisoner contact was created",
            "example" : "2024-01-01T12:00:00"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The user who last updated the prisoner contact",
            "example" : "adminUser"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp when the prisoner contact was last updated",
            "example" : "2024-02-01T16:00:00Z"
          }
        },
        "required" : [ "active", "approvedVisitor", "contactId", "contactType", "createdBy", "createdTime", "currentTerm", "emergencyContact", "id", "nextOfKin", "prisonerNumber", "relationshipType" ]
      },
      "SyncUpdatePrisonerContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request object to update te  prisoner contact restriction details",
        "properties" : {
          "restrictionType" : {
            "type" : "string",
            "description" : "Type of restriction applied",
            "example" : "NoContact"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start date of the restriction",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Expiry date of the restriction, if applicable",
            "example" : "2024-12-31"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments regarding the restriction",
            "example" : "Restriction applied due to safety concerns"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who last updated the restriction record",
            "example" : "editor"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the restriction record was last updated",
            "example" : "2024-10-02T15:30:00Z"
          }
        },
        "required" : [ "restrictionType" ]
      },
      "SyncPrisonerContactRestriction" : {
        "type" : "object",
        "description" : "Response object with prisoner contact restriction details",
        "properties" : {
          "prisonerContactRestrictionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the prisoner contact restriction",
            "example" : 232
          },
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the prisoner contact (relationship) to which the restriction applies",
            "example" : 12345
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the contact (person) to which the restriction applies",
            "example" : 12345
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number involved in this relationship restriction",
            "example" : "A1234AA"
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example" : "NONCON"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start date of the restriction",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Expiry date of the restriction, if applicable",
            "example" : "2024-12-31"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments regarding the restriction",
            "example" : "Restriction applied due to safety concerns"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the restriction record",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the restriction record was created",
            "example" : "2024-10-01T12:00:00Z"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who last updated the restriction record",
            "example" : "editor"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the restriction record was last updated",
            "example" : "2024-10-02T15:30:00Z"
          }
        },
        "required" : [ "contactId", "prisonerContactId", "prisonerContactRestrictionId", "prisonerNumber" ]
      },
      "SyncUpdateEmploymentRequest" : {
        "type" : "object",
        "description" : "The request to update details of an employment record via sync",
        "properties" : {
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the organization associated with the employment",
            "example" : 12345
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the contact associated with the employment",
            "example" : 67890
          },
          "active" : {
            "type" : "boolean",
            "description" : "If the employment is active",
            "example" : true
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The username of the person who made the update",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time when the update was made",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "active", "contactId", "organisationId", "updatedBy", "updatedTime" ]
      },
      "SyncEmployment" : {
        "type" : "object",
        "description" : "The response of an employment record via sync",
        "properties" : {
          "employmentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the employment",
            "example" : 12345
          },
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the organization associated with the employment",
            "example" : 12345
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the contact associated with the employment",
            "example" : 67890
          },
          "active" : {
            "type" : "boolean",
            "description" : "If the employment is active",
            "example" : true
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the employment record",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the employment record was created",
            "example" : "2024-10-01T12:00:00Z"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who last updated the employment record",
            "example" : "editor"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the employment record was last updated",
            "example" : "2024-10-02T15:30:00Z"
          }
        },
        "required" : [ "active", "contactId", "employmentId", "organisationId" ]
      },
      "SyncUpdateContactRequest" : {
        "type" : "object",
        "description" : "Request to update a new contact ",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "\n    The title code for the contact.\n    This is a coded value (from the group code TITLE in reference data).\n    Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n    ",
            "example" : "MR"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John"
          },
          "middleName" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "remitter" : {
            "type" : "boolean",
            "description" : "Whether the contact is a remitter",
            "example" : false
          },
          "deceasedFlag" : {
            "type" : "boolean",
            "description" : "Whether the contact is deceased",
            "example" : false
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the contact was deceased, if applicable",
            "example" : "2023-05-01"
          },
          "gender" : {
            "type" : "string",
            "description" : "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "example" : "M"
          },
          "domesticStatus" : {
            "type" : "string",
            "description" : "The domestic status code of the contact",
            "example" : "S"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "The language code of the contact",
            "example" : "EN"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Whether an interpreter is required",
            "example" : false
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who updated the contact",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was changed",
            "example" : "2024-01-01T00:00:00Z"
          },
          "staff" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "required" : [ "firstName", "isStaff", "lastName", "remitter", "updatedBy", "updatedTime" ]
      },
      "SyncContact" : {
        "type" : "object",
        "description" : "The details of a contact as an individual",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "title" : {
            "type" : "string",
            "description" : "\n    The title code for the contact.\n    This is a coded value (from the group code TITLE in reference data).\n    Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n    ",
            "example" : "MR"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John"
          },
          "middleName" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "remitter" : {
            "type" : "boolean",
            "description" : "Whether the contact is a remitter",
            "example" : false
          },
          "deceasedFlag" : {
            "type" : "boolean",
            "description" : "Whether the contact is deceased",
            "example" : false
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the contact was deceased, if applicable",
            "example" : "2023-05-01"
          },
          "gender" : {
            "type" : "string",
            "description" : "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "example" : "M"
          },
          "domesticStatus" : {
            "type" : "string",
            "description" : "The domestic status code of the contact",
            "example" : "S"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "The language code of the contact",
            "example" : "EN"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Whether an interpreter is required",
            "example" : false
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          },
          "staff" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "required" : [ "createdBy", "createdTime", "firstName", "id", "isStaff", "lastName", "remitter" ]
      },
      "SyncUpdateContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to update a contact restriction ",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Type of restriction",
            "example" : "MOBILE"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction start date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date ",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Any comments about the restriction ",
            "example" : "N/A"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who updated the contact restriction",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact restriction was changed",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "restrictionType", "updatedBy", "updatedTime" ]
      },
      "SyncContactRestriction" : {
        "type" : "object",
        "description" : "Restriction related to a contact",
        "properties" : {
          "contactRestrictionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact restriction",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Type of restriction",
            "example" : "MOBILE"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction created date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date ",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction ",
            "example" : "N/A"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "contactRestrictionId", "createdBy", "createdTime", "restrictionType" ]
      },
      "SyncUpdateContactPhoneRequest" : {
        "type" : "object",
        "description" : "Request to update a new contact phone number for sync API",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who updated the contact phone",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact phone was changed",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "phoneNumber", "phoneType", "updatedBy", "updatedTime" ]
      },
      "SyncContactPhone" : {
        "type" : "object",
        "description" : "Phone related to a contact for sync API",
        "properties" : {
          "contactPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact phone",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "contactPhoneId", "createdBy", "createdTime", "phoneNumber", "phoneType" ]
      },
      "SyncUpdateContactIdentityRequest" : {
        "type" : "object",
        "description" : "Request to update a new contact identity ",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "DL"
          },
          "identityValue" : {
            "type" : "string",
            "description" : "Identity ",
            "example" : "S99PH898989L"
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "Issuing authority",
            "example" : "DVLA",
            "maxLength" : 40
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who updated the contact identity",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact identity was changed",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "identityType", "identityValue", "updatedBy", "updatedTime" ]
      },
      "SyncContactIdentity" : {
        "type" : "object",
        "description" : "Identity related to a contact",
        "properties" : {
          "contactIdentityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact identity",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "DL"
          },
          "identityValue" : {
            "type" : "string",
            "description" : "Identity ",
            "example" : "DL090 0909 909"
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "Issuing authority",
            "example" : "DVLA"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "contactIdentityId", "createdBy", "createdTime", "identityType", "identityValue" ]
      },
      "SyncUpdateContactEmailRequest" : {
        "type" : "object",
        "description" : "Request to update a contact email address by sync with NOMIS",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who updated the contact email",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact email was changed",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "emailAddress", "updatedBy", "updatedTime" ]
      },
      "SyncContactEmail" : {
        "type" : "object",
        "description" : "Email related to a contact",
        "properties" : {
          "contactEmailId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact email",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactEmailId", "contactId", "createdBy", "createdTime", "emailAddress" ]
      },
      "SyncUpdateContactAddressRequest" : {
        "type" : "object",
        "description" : "Request to update a contact address",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact linked to this address",
            "example" : 123456
          },
          "addressType" : {
            "type" : "string",
            "description" : "\n    The type of address.\n    This is a coded value (from the group code ADDRESS_TYPE in reference data).\n    The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B"
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House"
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue"
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code - from NOMIS reference data",
            "example" : "BIRM"
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code - from NOMIS reference data",
            "example" : "WMIDS"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code - from NOMIS reference data",
            "example" : "UK"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Whether the address can be used for mailing",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address can be considered active from",
            "example" : "2023-01-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address can be considered active until",
            "example" : "2023-01-12"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate this address should be considered as no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who updated the address",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the address was changed",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "primaryAddress", "updatedBy", "updatedTime", "verified" ]
      },
      "SyncContactAddress" : {
        "type" : "object",
        "description" : "An address related to a contact",
        "properties" : {
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact address",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "addressType" : {
            "type" : "string",
            "description" : "\n    The type of address.\n    This is a coded value (from the group code ADDRESS_TYPE in reference data).\n    The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B"
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House"
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue"
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code - from NOMIS",
            "example" : "BIRM"
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code - from NOMIS",
            "example" : "WMIDS"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code - from NOMIS",
            "example" : "UK"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "verifiedBy" : {
            "type" : "string",
            "description" : "Which username ran the postcode lookup check",
            "example" : "NJKG44D"
          },
          "verifiedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the postcode lookup was done",
            "example" : "2024-01-01T00:00:00Z"
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether mail is allowed to be sent to this address",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address is to be considered active from",
            "example" : "2024-01-01"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address is to be considered no longer active",
            "example" : "2024-01-01"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether this address indicates no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The id of the user who created the contact",
            "example" : "JD000001"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was created",
            "example" : "2024-01-01T00:00:00Z"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who last updated the contact address",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact address was last updated",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactAddressId", "contactId", "createdBy", "createdTime", "mailFlag", "noFixedAddress", "primaryAddress", "verified" ]
      },
      "SyncUpdateContactAddressPhoneRequest" : {
        "type" : "object",
        "description" : "Request to update an address-specific phone number via sync",
        "properties" : {
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The username of the person who made the update",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time when the update was made",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "phoneNumber", "phoneType", "updatedBy", "updatedTime" ]
      },
      "SyncContactAddressPhone" : {
        "type" : "object",
        "description" : "An address-specific phone number used in sync",
        "properties" : {
          "contactAddressPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the address-specific phone number",
            "example" : 1
          },
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the address to which this phone number is linked",
            "example" : 1
          },
          "contactPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the phone record",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact linked to this address",
            "example" : 1
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactAddressId", "contactAddressPhoneId", "contactId", "contactPhoneId", "createdBy", "createdTime", "phoneNumber", "phoneType" ]
      },
      "CreateOrUpdatePrisonerNumberOfChildrenRequest" : {
        "type" : "object",
        "description" : "Request to update prisoner number of children",
        "properties" : {
          "numberOfChildren" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of children",
            "example" : 1,
            "maximum" : 99,
            "minimum" : 0
          }
        }
      },
      "PrisonerNumberOfChildrenResponse" : {
        "type" : "object",
        "description" : "Response object containing prisoner number of children information",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier of the number of children",
            "example" : 1
          },
          "numberOfChildren" : {
            "type" : "string",
            "description" : "The number of children of the prisoner"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is this the active number of children of the prisoner"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Creation date and time"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the creator"
          }
        },
        "required" : [ "active", "id" ]
      },
      "CreateOrUpdatePrisonerDomesticStatusRequest" : {
        "type" : "object",
        "description" : "Request to create or update prisoner domestic status",
        "properties" : {
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The domestic status code for DOMESTIC_STS group code",
            "example" : "M",
            "maxLength" : 12,
            "minLength" : 0
          }
        }
      },
      "PrisonerDomesticStatusResponse" : {
        "type" : "object",
        "description" : "Response object containing prisoner domestic status information",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier of the domestic status",
            "example" : 1
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The domestic status code of the prisoner"
          },
          "domesticStatusDescription" : {
            "type" : "string",
            "description" : "The domestic status description of the prisoner"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is this the active domestic status code of the prisoner"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Creation date and time"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the creator"
          }
        },
        "required" : [ "active", "id" ]
      },
      "UpdatePrisonerContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to update an existing new restriction between a prisoner and a contact",
        "properties" : {
          "restrictionType" : {
            "type" : "string",
            "description" : "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example" : "BAN"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction start date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction",
            "example" : "N/A",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "restrictionType", "startDate" ]
      },
      "PrisonerContactRestrictionDetails" : {
        "type" : "object",
        "description" : "Restriction related to a prisoner and contacts relationship",
        "properties" : {
          "prisonerContactRestrictionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the prisoner contact restriction",
            "example" : 123456
          },
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the prisoner contact",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the contact",
            "example" : 123456
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example" : "BAN"
          },
          "restrictionTypeDescription" : {
            "type" : "string",
            "description" : "The description of restrictionType",
            "example" : "Banned"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction created date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date ",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction ",
            "example" : "N/A"
          },
          "enteredByUsername" : {
            "type" : "string",
            "description" : "The username of either the person who created the restriction or the last person to update it if it has been modified.",
            "example" : "admin"
          },
          "enteredByDisplayName" : {
            "type" : "string",
            "description" : "The display name of either the person who created the restriction or the last person to update it if it has been modified.",
            "example" : "John Smith"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "createdBy", "createdTime", "enteredByDisplayName", "enteredByUsername", "prisonerContactId", "prisonerContactRestrictionId", "prisonerNumber", "restrictionType", "restrictionTypeDescription" ]
      },
      "UpdateContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to update an existing global restriction on a contact, a.k.a an estate-wide restriction",
        "properties" : {
          "restrictionType" : {
            "type" : "string",
            "description" : "\n    The coded type of restriction that applies to this contact.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example" : "BAN"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction start date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction",
            "example" : "N/A",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "restrictionType", "startDate" ]
      },
      "ContactRestrictionDetails" : {
        "type" : "object",
        "description" : "Global restriction related to a contact, a.k.a estate-wide restrictions",
        "properties" : {
          "contactRestrictionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact restriction",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "\n    The coded type of restriction that applies to this contact.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example" : "BAN"
          },
          "restrictionTypeDescription" : {
            "type" : "string",
            "description" : "The description of restrictionType",
            "example" : "Banned"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction created date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date ",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction ",
            "example" : "N/A"
          },
          "enteredByUsername" : {
            "type" : "string",
            "description" : "The username of either the person who created the restriction or the last person to update it if it has been modified.",
            "example" : "admin"
          },
          "enteredByDisplayName" : {
            "type" : "string",
            "description" : "The display name of either the person who created the restriction or the last person to update it if it has been modified.",
            "example" : "John Smith"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "contactRestrictionId", "createdBy", "createdTime", "enteredByDisplayName", "enteredByUsername", "restrictionType", "restrictionTypeDescription" ]
      },
      "UpdatePhoneRequest" : {
        "type" : "object",
        "description" : "Request to update an existing phone number",
        "properties" : {
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB",
            "maxLength" : 12,
            "minLength" : 0
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890",
            "maxLength" : 40,
            "minLength" : 0
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123,
            "maxLength" : 7,
            "minLength" : 0
          }
        },
        "required" : [ "phoneNumber", "phoneType" ]
      },
      "ContactPhoneDetails" : {
        "type" : "object",
        "description" : "A phone number related to a contact with descriptions of all reference data",
        "properties" : {
          "contactPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact phone",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneTypeDescription" : {
            "type" : "string",
            "description" : "Description of the type of phone",
            "example" : "Mobile"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "contactPhoneId", "createdBy", "createdTime", "phoneNumber", "phoneType", "phoneTypeDescription" ]
      },
      "UpdateIdentityRequest" : {
        "type" : "object",
        "description" : "Request to update an existing contact identity",
        "properties" : {
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "DL",
            "maxLength" : 12,
            "minLength" : 0
          },
          "identityValue" : {
            "type" : "string",
            "description" : "The identity value such as driving licence number",
            "example" : "DL123456789",
            "maxLength" : 20,
            "minLength" : 0
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "The authority who issued the identity",
            "example" : "DVLA",
            "maxLength" : 40,
            "minLength" : 0
          }
        },
        "required" : [ "identityType", "identityValue" ]
      },
      "ContactIdentityDetails" : {
        "type" : "object",
        "description" : "Identity related to a contact",
        "properties" : {
          "contactIdentityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact identity",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "PASS"
          },
          "identityTypeDescription" : {
            "type" : "string",
            "description" : "Description of the type of identity",
            "example" : "Passport number"
          },
          "identityTypeIsActive" : {
            "type" : "boolean",
            "description" : "Whether this type of identity is still active. If not active, the identity cannot be updated.",
            "example" : true
          },
          "identityValue" : {
            "type" : "string",
            "description" : "Identity ",
            "example" : "GB123456789"
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "The authority who issued the identity ",
            "example" : "UK Passport Office"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "contactIdentityId", "createdBy", "createdTime", "identityTypeIsActive" ]
      },
      "UpdateEmploymentRequest" : {
        "type" : "object",
        "description" : "Request to update an existing employment's employer or active flag.",
        "properties" : {
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The organisation id",
            "example" : 123456789
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether this is a current employment or not"
          }
        },
        "required" : [ "isActive", "organisationId" ]
      },
      "EmploymentDetails" : {
        "type" : "object",
        "description" : "The details of an employment for a contact including a summary of the employing organisation.",
        "properties" : {
          "employmentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id for this employment",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "This id for this contact",
            "example" : 654321
          },
          "employer" : {
            "$ref" : "#/components/schemas/OrganisationSummary",
            "description" : "A summary of the employing organisation"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether this is a current employment or not"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactId", "createdBy", "createdTime", "employer", "employmentId", "isActive" ]
      },
      "OrganisationSummary" : {
        "type" : "object",
        "properties" : {
          "organisationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "organisationName" : {
            "type" : "string"
          },
          "organisationActive" : {
            "type" : "boolean"
          },
          "flat" : {
            "type" : "string"
          },
          "property" : {
            "type" : "string"
          },
          "street" : {
            "type" : "string"
          },
          "area" : {
            "type" : "string"
          },
          "cityCode" : {
            "type" : "string"
          },
          "cityDescription" : {
            "type" : "string"
          },
          "countyCode" : {
            "type" : "string"
          },
          "countyDescription" : {
            "type" : "string"
          },
          "postcode" : {
            "type" : "string"
          },
          "countryCode" : {
            "type" : "string"
          },
          "countryDescription" : {
            "type" : "string"
          },
          "businessPhoneNumber" : {
            "type" : "string"
          },
          "businessPhoneNumberExtension" : {
            "type" : "string"
          }
        },
        "required" : [ "organisationActive", "organisationId", "organisationName" ]
      },
      "UpdateEmailRequest" : {
        "type" : "object",
        "description" : "Request to update an email address",
        "properties" : {
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "emailAddress" ]
      },
      "ContactEmailDetails" : {
        "type" : "object",
        "description" : "Email related to a contact",
        "properties" : {
          "contactEmailId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact email",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactEmailId", "contactId", "createdBy", "createdTime", "emailAddress" ]
      },
      "UpdateContactAddressRequest" : {
        "type" : "object",
        "description" : "Request to update a contact address",
        "properties" : {
          "addressType" : {
            "type" : "string",
            "description" : "\n    The type of address.\n    This is a coded value (from the group code ADDRESS_TYPE in reference data).\n    The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME",
            "maxLength" : 12,
            "minLength" : 0
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B",
            "maxLength" : 30,
            "minLength" : 0
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House",
            "maxLength" : 50,
            "minLength" : 0
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue",
            "maxLength" : 160,
            "minLength" : 0
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights",
            "maxLength" : 70,
            "minLength" : 0
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code - from NOMIS reference data",
            "example" : "BIRM",
            "maxLength" : 12,
            "minLength" : 0
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code - from NOMIS reference data",
            "example" : "WMIDS",
            "maxLength" : 12,
            "minLength" : 0
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH",
            "maxLength" : 12,
            "minLength" : 0
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code - from NOMIS reference data",
            "example" : "UK",
            "maxLength" : 12,
            "minLength" : 0
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Whether the address can be used for mailing",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address can be considered active from",
            "example" : "2023-01-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address can be considered active until",
            "example" : "2023-01-12"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate this address should be considered as no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "countryCode", "primaryAddress", "verified" ]
      },
      "ContactAddressResponse" : {
        "type" : "object",
        "description" : "A contact address response",
        "properties" : {
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact address",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "phoneNumberIds" : {
            "type" : "array",
            "description" : "The IDs of the contact's address phone numbers",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "addressType" : {
            "type" : "string",
            "description" : "\n      The type of address (optional).\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B"
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House"
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue"
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code",
            "example" : 25343
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code",
            "example" : "S.YORKSHIRE"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code",
            "example" : "ENG"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "verifiedBy" : {
            "type" : "string",
            "description" : "Which username ran the postcode lookup check",
            "example" : "NJKG44D"
          },
          "verifiedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the postcode lookup was done",
            "example" : "2024-01-01T00:00:00Z"
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether mail is allowed to be sent to this address",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address is to be considered active from",
            "example" : "2024-01-01"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address is to be considered no longer active",
            "example" : "2024-01-01"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether this address indicates no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The id of the user who created the contact",
            "example" : "JD000001"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was created",
            "example" : "2024-01-01T00:00:00Z"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who last updated the contact address",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact address was last updated",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactAddressId", "contactId", "createdBy", "createdTime", "mailFlag", "noFixedAddress", "phoneNumberIds", "primaryAddress", "verified" ]
      },
      "UpdateContactAddressPhoneRequest" : {
        "type" : "object",
        "description" : "Request to update an address-specific phone number",
        "properties" : {
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB",
            "maxLength" : 12,
            "minLength" : 0
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890",
            "maxLength" : 40,
            "minLength" : 0
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123,
            "maxLength" : 7,
            "minLength" : 0
          }
        },
        "required" : [ "phoneNumber", "phoneType" ]
      },
      "ContactAddressPhoneDetails" : {
        "type" : "object",
        "description" : "An address-specific phone number",
        "properties" : {
          "contactAddressPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the address-specific phone number",
            "example" : 1
          },
          "contactPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the phone number",
            "example" : 1
          },
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the linked address",
            "example" : 1
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone code",
            "example" : "MOB"
          },
          "phoneTypeDescription" : {
            "type" : "string",
            "description" : "Type of phone description",
            "example" : "Mobile phone"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          }
        },
        "required" : [ "contactAddressId", "contactAddressPhoneId", "contactId", "contactPhoneId", "createdBy", "createdTime", "phoneNumber", "phoneType", "phoneTypeDescription" ]
      },
      "SyncCreatePrisonerContactRequest" : {
        "type" : "object",
        "description" : "Request object to create a prisoner contact details",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the prisoner contact",
            "example" : 12345
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "contactType" : {
            "type" : "string",
            "description" : "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value (from the group code CONTACT_TYPE in reference data).\n      Known values are (S) Social or (O) official.\n      ",
            "example" : "S"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "The type of relationship",
            "example" : "Friend"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is next of kin",
            "example" : true
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an emergency contact",
            "example" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments about the prisoner contact",
            "example" : "Close family friend"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The user who created the prisoner contact",
            "example" : "system"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp when the prisoner contact was created",
            "example" : "2024-01-01T12:00:00"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is active",
            "example" : true
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an approved visitor",
            "example" : false
          },
          "currentTerm" : {
            "type" : "boolean",
            "description" : "Indicates if this relationship is current and applies to the latest booking",
            "example" : true
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The expiry date of the prisoner contact",
            "example" : "2025-01-01"
          },
          "createdAtPrison" : {
            "type" : "string",
            "description" : "The prison where the prisoner contact was created",
            "example" : "HMP Belmarsh"
          }
        },
        "required" : [ "contactId", "contactType", "createdBy", "createdTime", "emergencyContact", "nextOfKin", "prisonerNumber", "relationshipType" ]
      },
      "SyncCreatePrisonerContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request object to create a prisoner contact restriction",
        "properties" : {
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the prisoner contact (relationship) on which the restriction applies",
            "example" : 12345
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Type of restriction applied",
            "example" : "NoContact"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start date of the restriction",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Expiry date of the restriction, if applicable",
            "example" : "2024-12-31"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments regarding the restriction",
            "example" : "Restriction applied due to safety concerns"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the restriction record",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Time when the restriction record was created",
            "example" : "2024-10-01T12:00:00Z"
          }
        },
        "required" : [ "createdBy", "createdTime", "prisonerContactId", "restrictionType" ]
      },
      "SyncCreateEmploymentRequest" : {
        "type" : "object",
        "description" : "Request object for creating a new employment record",
        "properties" : {
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the organization associated with the employment",
            "example" : 12345
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the contact associated with the employment",
            "example" : 67890
          },
          "active" : {
            "type" : "boolean",
            "description" : "If the employment is active",
            "example" : true
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          }
        },
        "required" : [ "active", "contactId", "createdBy", "createdTime", "organisationId" ]
      },
      "ContactRelationship" : {
        "type" : "object",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number (NOMS ID)",
            "example" : "A1234BC"
          },
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "The relationship between the prisoner and the contact - for social(S) or official(O)",
            "example" : "S"
          },
          "relationshipToPrisonerCode" : {
            "type" : "string",
            "description" : "The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.",
            "example" : "FRI"
          },
          "isNextOfKin" : {
            "type" : "boolean",
            "description" : "Whether they are the next of kin for the prisoner",
            "example" : true
          },
          "isEmergencyContact" : {
            "type" : "boolean",
            "description" : "Whether they are the emergency contact for the prisoner",
            "example" : true
          },
          "isApprovedVisitor" : {
            "type" : "boolean",
            "description" : "Is this a approved visitor for the prisoner?",
            "example" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments about the contacts relationship with the prisoner",
            "example" : "Some additional information",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "isApprovedVisitor", "isEmergencyContact", "isNextOfKin", "prisonerNumber", "relationshipToPrisonerCode", "relationshipTypeCode" ]
      },
      "SyncCreateContactRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The person ID from NOMIS",
            "example" : 1233323
          },
          "title" : {
            "type" : "string",
            "description" : "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n      ",
            "example" : "MR",
            "maxLength" : 12
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe",
            "maxLength" : 35
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John",
            "maxLength" : 35
          },
          "middleName" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William",
            "maxLength" : 35
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "relationship" : {
            "$ref" : "#/components/schemas/ContactRelationship",
            "description" : "A description of the relationship if the contact should be linked to a prisoner"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "remitter" : {
            "type" : "boolean",
            "description" : "Whether the contact is a remitter",
            "example" : false
          },
          "deceasedFlag" : {
            "type" : "boolean",
            "description" : "Whether the contact is deceased",
            "example" : false
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the contact was deceased, if applicable",
            "example" : "2023-05-01"
          },
          "gender" : {
            "type" : "string",
            "description" : "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "example" : "M"
          },
          "domesticStatus" : {
            "type" : "string",
            "description" : "The domestic status code of the contact",
            "example" : "S"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "The language code of the contact",
            "example" : "EN"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Whether an interpreter is required",
            "example" : false
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The id of the user creating the contact",
            "example" : "JD000001",
            "maxLength" : 100
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was created",
            "example" : "2024-01-01T00:00:00Z"
          },
          "staff" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "required" : [ "createdBy", "createdTime", "firstName", "isStaff", "lastName", "personId", "remitter" ]
      },
      "SyncCreateContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact restriction ",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Type of restriction",
            "example" : "MOBILE"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction start date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date ",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction ",
            "example" : "N/A"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the restriction was created",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "createdBy", "createdTime", "restrictionType" ]
      },
      "SyncCreateContactPhoneRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact phone number for sync API",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the phone was created",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "createdBy", "createdTime", "phoneNumber", "phoneType" ]
      },
      "SyncCreateContactIdentityRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact identity ",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "DL"
          },
          "identityValue" : {
            "type" : "string",
            "description" : "Identity number or reference",
            "example" : "HP9909SM1883"
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "Issuing authority ",
            "example" : "DVLA"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "JJ99821"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the identity was created",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "createdBy", "createdTime", "identityType", "identityValue" ]
      },
      "SyncCreateContactEmailRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact email address by sync with NOMIS",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact",
            "example" : 123
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the email was created",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "createdBy", "createdTime", "emailAddress" ]
      },
      "SyncCreateContactAddressRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact address",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact this address is linked with",
            "example" : 123456
          },
          "addressType" : {
            "type" : "string",
            "description" : "\n      The type of address.\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B"
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House"
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue"
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code - from NOMIS",
            "example" : 13232
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code - from NOMIS",
            "example" : "WMIDS"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code - from NOMIS",
            "example" : "UK"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Whether the address can be used for mailing",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address can be considered active from",
            "example" : "2023-01-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address can be considered active until",
            "example" : "2023-01-12"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate this address should be considered as no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The id of the user who created the contact",
            "example" : "JD000001"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was created",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactId", "createdBy", "createdTime", "primaryAddress" ]
      },
      "SyncCreateContactAddressPhoneRequest" : {
        "type" : "object",
        "description" : "Request to create a new address-linked phone number via sync",
        "properties" : {
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact address",
            "example" : 123
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the phone was created",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactAddressId", "createdBy", "createdTime", "phoneNumber", "phoneType" ]
      },
      "CodedValue" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "A coded value from NOMIS reference data",
            "example" : "CODE",
            "maxLength" : 12,
            "minLength" : 0
          },
          "description" : {
            "type" : "string",
            "description" : "The description for this coded value in NOMIS",
            "example" : "Description"
          }
        },
        "required" : [ "code", "description" ]
      },
      "ResetPrisonerContactRequest" : {
        "type" : "object",
        "description" : "The request to remove and replace relationships and relationship restrictions for a prisoner",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number to reset relationships for"
          },
          "prisonerContacts" : {
            "type" : "array",
            "description" : "The list of relationships to create in place of the existing",
            "items" : {
              "$ref" : "#/components/schemas/SyncPrisonerRelationship"
            }
          }
        },
        "required" : [ "prisonerContacts", "prisonerNumber" ]
      },
      "SyncPrisonerRelationship" : {
        "type" : "object",
        "description" : "A single prisoner relationship",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID for this relationship in NOMIS",
            "example" : 123
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The contactId which this relationship is with"
          },
          "contactType" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value (from the group code CONTACT_TYPE in reference data).\n      Known values are (S) Social or (O) official.\n    ",
            "example" : "S"
          },
          "relationshipType" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Coded value indicating the type of relationship - from reference data"
          },
          "currentTerm" : {
            "type" : "boolean",
            "description" : "True if this relationship applies to the latest or current term in prison, false if a previous term",
            "example" : true
          },
          "active" : {
            "type" : "boolean",
            "description" : "The relationship is active",
            "example" : true
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this relationship expired",
            "example" : "2024-03-01"
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "Approved visitor",
            "example" : true
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "Next of kin",
            "example" : true
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "Emergency contact",
            "example" : true
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment on this relationship",
            "example" : "This is an optional comment"
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number (NOMS ID) related",
            "example" : "A1234AA"
          },
          "restrictions" : {
            "type" : "array",
            "description" : "The restrictions for this prisoner contact relationship",
            "items" : {
              "$ref" : "#/components/schemas/SyncRelationshipRestriction"
            }
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "active", "approvedVisitor", "contactId", "contactType", "currentTerm", "emergencyContact", "id", "nextOfKin", "prisonerNumber", "relationshipType", "restrictions" ]
      },
      "SyncRelationshipRestriction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of this restriction in NOMIS",
            "example" : 123
          },
          "restrictionType" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Coded value indicating the restriction type from reference data"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment on this restriction",
            "example" : "Comment on restriction"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this restriction took effect",
            "example" : "2024-03-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this restriction expires",
            "example" : "2024-03-01"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "id", "restrictionType", "startDate" ]
      },
      "IdPair" : {
        "type" : "object",
        "properties" : {
          "elementType" : {
            "type" : "string",
            "description" : "The category of information returned",
            "enum" : [ "CONTACT", "PHONE", "EMAIL", "ADDRESS", "ADDRESS_PHONE", "IDENTITY", "RESTRICTION", "PRISONER_CONTACT", "PRISONER_CONTACT_RESTRICTION", "EMPLOYMENT", "ORGANISATION", "WEB_ADDRESS" ],
            "example" : "PHONE"
          },
          "nomisId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique ID for this piece of data provided in the request",
            "example" : 123435
          },
          "dpsId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique ID created in the DPS contacts service",
            "example" : 1234
          }
        },
        "required" : [ "dpsId", "elementType", "nomisId" ]
      },
      "PrisonerContactAndRestrictionIds" : {
        "type" : "object",
        "description" : "Contains the IDs of the contact, relationships and restrictions created during a prisoner merge",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The contactId that this relationship is with"
          },
          "relationship" : {
            "$ref" : "#/components/schemas/IdPair",
            "description" : "The unique IDs in NOMIS and DPS for this relationship or prisoner contact"
          },
          "restrictions" : {
            "type" : "array",
            "description" : "The pairs of IDs in NOMIS and DPS for relationship-specific restrictions",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          }
        },
        "required" : [ "contactId", "relationship", "restrictions" ]
      },
      "PrisonerRelationshipIds" : {
        "type" : "object",
        "description" : "Contains the details of the relationships and restrictions removed during a prisoner merge",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number in NOMIS",
            "example" : "A1234AA"
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the contact this relationship is with",
            "example" : 12345
          },
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of relationship",
            "example" : 12345
          },
          "prisonerContactRestrictionIds" : {
            "type" : "array",
            "description" : "A list of relationship restriction IDs",
            "example" : [ 1234, 2345, 3456 ],
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "contactId", "prisonerContactId", "prisonerContactRestrictionIds", "prisonerNumber" ]
      },
      "ResetPrisonerContactResponse" : {
        "type" : "object",
        "description" : "The response object for a reset of relationships for a prisoner",
        "properties" : {
          "relationshipsCreated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerContactAndRestrictionIds"
            }
          },
          "relationshipsRemoved" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerRelationshipIds"
            }
          }
        },
        "required" : [ "relationshipsCreated", "relationshipsRemoved" ]
      },
      "MergePrisonerContactRequest" : {
        "type" : "object",
        "description" : "The request to replace the relationships for a prisoner",
        "properties" : {
          "retainedPrisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number that was retained in NOMIS"
          },
          "prisonerContacts" : {
            "type" : "array",
            "description" : "The list of relationships to create",
            "items" : {
              "$ref" : "#/components/schemas/SyncPrisonerRelationship"
            }
          },
          "removedPrisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number that was removed from NOMIS"
          }
        },
        "required" : [ "prisonerContacts", "removedPrisonerNumber", "retainedPrisonerNumber" ]
      },
      "MergePrisonerContactResponse" : {
        "type" : "object",
        "description" : "The response object for a prisoner merge request",
        "properties" : {
          "relationshipsCreated" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerContactAndRestrictionIds"
            }
          },
          "relationshipsRemoved" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerRelationshipIds"
            }
          }
        },
        "required" : [ "relationshipsCreated", "relationshipsRemoved" ]
      },
      "AddContactRelationshipRequest" : {
        "type" : "object",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact this relationship is for",
            "example" : 123456
          },
          "relationship" : {
            "$ref" : "#/components/schemas/ContactRelationship",
            "description" : "A description of the contacts relationship to a prisoner"
          }
        },
        "required" : [ "contactId", "relationship" ]
      },
      "PrisonerContactRelationshipDetails" : {
        "type" : "object",
        "description" : "Describes the prisoner contact relationship",
        "properties" : {
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the prisoner contact",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the contact",
            "example" : 654321
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number (NOMS ID)",
            "example" : "A1234BC"
          },
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value from the group code CONTACT_TYPE in reference data.\n      Known values are (S) Social or (O) official.\n      ",
            "example" : "S"
          },
          "relationshipTypeDescription" : {
            "type" : "string",
            "description" : "The description of the contact relationship type. Description from reference data Official or Social",
            "example" : "Official"
          },
          "relationshipToPrisonerCode" : {
            "type" : "string",
            "description" : "The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.",
            "example" : "FRI"
          },
          "relationshipToPrisonerDescription" : {
            "type" : "string",
            "description" : "The description of the relationship",
            "example" : "Friend"
          },
          "isEmergencyContact" : {
            "type" : "boolean",
            "description" : "Is this contact the prisoner's emergency contact?",
            "example" : true
          },
          "isNextOfKin" : {
            "type" : "boolean",
            "description" : "Is this contact the prisoner's next of kin?",
            "example" : false
          },
          "isApprovedVisitor" : {
            "type" : "boolean",
            "description" : "Is this a approved visitor for the prisoner?",
            "example" : true
          },
          "isRelationshipActive" : {
            "type" : "boolean",
            "description" : "Is this prisoner's contact relationship active?",
            "example" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional comments",
            "example" : "Close family friend"
          }
        },
        "required" : [ "contactId", "isApprovedVisitor", "isEmergencyContact", "isNextOfKin", "isRelationshipActive", "prisonerContactId", "prisonerNumber", "relationshipToPrisonerCode", "relationshipToPrisonerDescription", "relationshipTypeCode", "relationshipTypeDescription" ]
      },
      "CreatePrisonerContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to create a new restriction between a prisoner and a contact",
        "properties" : {
          "restrictionType" : {
            "type" : "string",
            "description" : "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example" : "BAN"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction start date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction",
            "example" : "N/A",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "restrictionType", "startDate" ]
      },
      "MigratePrisonerNumberOfChildrenRequest" : {
        "type" : "object",
        "description" : "Request to migrate a prisoner's number of children",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "current" : {
            "$ref" : "#/components/schemas/NumberOfChildrenDetailsRequest",
            "description" : "Current number of children details"
          },
          "history" : {
            "type" : "array",
            "description" : "Historical number of children records",
            "items" : {
              "$ref" : "#/components/schemas/NumberOfChildrenDetailsRequest"
            }
          }
        },
        "required" : [ "history", "prisonerNumber" ]
      },
      "NumberOfChildrenDetailsRequest" : {
        "type" : "object",
        "description" : "Details of a number of children record",
        "properties" : {
          "numberOfChildren" : {
            "type" : "string",
            "description" : "The number of children",
            "example" : 1,
            "maxLength" : 50,
            "minLength" : 0
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the person who created the record",
            "example" : "JSMITH_ADM"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the record was created"
          }
        },
        "required" : [ "createdBy", "createdTime" ]
      },
      "PrisonerNumberOfChildrenMigrationResponse" : {
        "type" : "object",
        "description" : "Response object for prisoner's number of children migration",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "current" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The current number of children"
          },
          "history" : {
            "type" : "array",
            "description" : "Historical number of children records",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "history", "prisonerNumber" ]
      },
      "DomesticStatusDetailsRequest" : {
        "type" : "object",
        "description" : "Details of a domestic status record",
        "properties" : {
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The domestic status code",
            "example" : "M",
            "maxLength" : 12,
            "minLength" : 0
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of the person who created the record",
            "example" : "JSMITH_ADM"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the record was created"
          }
        },
        "required" : [ "createdBy", "createdTime" ]
      },
      "MigratePrisonerDomesticStatusRequest" : {
        "type" : "object",
        "description" : "Request to migrate a prisoner's domestic status",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "current" : {
            "$ref" : "#/components/schemas/DomesticStatusDetailsRequest",
            "description" : "Current domestic status details"
          },
          "history" : {
            "type" : "array",
            "description" : "Historical domestic status records",
            "items" : {
              "$ref" : "#/components/schemas/DomesticStatusDetailsRequest"
            }
          }
        },
        "required" : [ "history", "prisonerNumber" ]
      },
      "PrisonerDomesticStatusMigrationResponse" : {
        "type" : "object",
        "description" : "Response object for prisoner's domestic status migration",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "current" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The current domestic status"
          },
          "history" : {
            "type" : "array",
            "description" : "Historical domestic status records",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "history", "prisonerNumber" ]
      },
      "Corporate" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The corporate ID in NOMIS",
            "example" : 123
          }
        },
        "required" : [ "id" ]
      },
      "MigrateAddress" : {
        "type" : "object",
        "properties" : {
          "addressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique address ID in NOMIS",
            "example" : 123
          },
          "type" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Address type coded value (from reference data)"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or identifier",
            "example" : "1B"
          },
          "premise" : {
            "type" : "string",
            "description" : "House name or number",
            "example" : 43
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road",
            "example" : "Main Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postCode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "BD12 8RD"
          },
          "city" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "City - code and description (from reference data)"
          },
          "county" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "County - code and description (from reference data)"
          },
          "country" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Country - code and description (from reference data)"
          },
          "validatedPAF" : {
            "type" : "boolean",
            "description" : "Address validated by postcode lookup",
            "example" : false
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "If true this address should be considered as no fixed address",
            "example" : false
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "If true this address should be considered as the primary residential address",
            "example" : true
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "If true this address should be considered for sending mail to",
            "example" : true
          },
          "comment" : {
            "type" : "string",
            "description" : "Comments relating to this address",
            "example" : "A comment"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date this address should be considered valid from",
            "example" : "2018-10-01"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date this address should be considered valid to",
            "example" : "2022-04-04"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "A list of phone numbers which are linked to this address",
            "items" : {
              "$ref" : "#/components/schemas/MigratePhoneNumber"
            }
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "addressId", "mailAddress", "noFixedAddress", "phoneNumbers", "primaryAddress", "validatedPAF" ]
      },
      "MigrateContactRequest" : {
        "type" : "object",
        "description" : "Request to migrate a contact and all of its sub-elements from NOMIS into this service",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The person ID from NOMIS",
            "example" : 1233323
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John",
            "maxLength" : 35,
            "minLength" : 0
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe",
            "maxLength" : 35,
            "minLength" : 0
          },
          "middleName" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William",
            "maxLength" : 35,
            "minLength" : 0
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "gender" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "The gender of the contact"
          },
          "title" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "The title of the contact, if any"
          },
          "language" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "The main language spoken by this contact"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Interpreter required"
          },
          "domesticStatus" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "The domestic status coded value"
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date this persons was marked as deceased"
          },
          "staff" : {
            "type" : "boolean",
            "description" : "This person is staff"
          },
          "remitter" : {
            "type" : "boolean",
            "description" : "This person is a remitter"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "Telephone numbers",
            "items" : {
              "$ref" : "#/components/schemas/MigratePhoneNumber"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "Addresses",
            "items" : {
              "$ref" : "#/components/schemas/MigrateAddress"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "description" : "Email addresses",
            "items" : {
              "$ref" : "#/components/schemas/MigrateEmailAddress"
            }
          },
          "employments" : {
            "type" : "array",
            "description" : "Employments for official contacts only",
            "items" : {
              "$ref" : "#/components/schemas/MigrateEmployment"
            }
          },
          "identifiers" : {
            "type" : "array",
            "description" : "Proofs of identity",
            "items" : {
              "$ref" : "#/components/schemas/MigrateIdentifier"
            }
          },
          "contacts" : {
            "type" : "array",
            "description" : "The relationships with prisoners including specific restrictions for each",
            "items" : {
              "$ref" : "#/components/schemas/MigrateRelationship"
            }
          },
          "restrictions" : {
            "type" : "array",
            "description" : "The restrictions which apply to this person only",
            "items" : {
              "$ref" : "#/components/schemas/MigrateRestriction"
            }
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "addresses", "contacts", "emailAddresses", "employments", "firstName", "identifiers", "interpreterRequired", "lastName", "personId", "phoneNumbers", "remitter", "restrictions", "staff" ]
      },
      "MigrateEmailAddress" : {
        "type" : "object",
        "properties" : {
          "emailAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique email ID in NOMIS",
            "example" : 123
          },
          "email" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "email", "emailAddressId" ]
      },
      "MigrateEmployment" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique sequence ID in NOMIS for this employment",
            "example" : 123
          },
          "corporate" : {
            "$ref" : "#/components/schemas/Corporate",
            "description" : "The corporate organisation this person works for"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Comments relating to this restriction",
            "example" : true
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "active", "corporate", "sequence" ]
      },
      "MigrateIdentifier" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique sequence ID in NOMIS",
            "example" : 123
          },
          "type" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Coded value for proof of ID type"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The identifying information e.g. driving licence number",
            "example" : "KJ 45544 JFKJK"
          },
          "issuedAuthority" : {
            "type" : "string",
            "description" : "The issuing authority for this identifier",
            "example" : "DVLA"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "identifier", "sequence", "type" ]
      },
      "MigratePhoneNumber" : {
        "type" : "object",
        "properties" : {
          "phoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique phone ID in NOMIS",
            "example" : 123
          },
          "number" : {
            "type" : "string",
            "description" : "Telephone number",
            "example" : "098989 98989893"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension number (optional)",
            "example" : 100
          },
          "type" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Type of phone number (from reference data)"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "number", "phoneId", "type" ]
      },
      "MigratePrisonerContactRestriction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID in NOMIS",
            "example" : 123
          },
          "restrictionType" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Coded value indicating the restriction type from reference data"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment on this restriction",
            "example" : "Comment on restriction"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this restriction took effect",
            "example" : "2024-03-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this restriction expires",
            "example" : "2024-03-01"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "id", "restrictionType", "startDate" ]
      },
      "MigrateRelationship" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID in NOMIS",
            "example" : 123
          },
          "contactType" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "\n    Coded value indicating either a social or official contact (mandatory).\n    This is a coded value (from the group code CONTACT_TYPE in reference data).\n    Known values are (S) Social or (O) official.\n    ",
            "example" : "S"
          },
          "relationshipType" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Coded value indicating the type of relationship - from reference data"
          },
          "currentTerm" : {
            "type" : "boolean",
            "description" : "True if this relationship applies to the latest or current term in prison, false if a previous term",
            "example" : true
          },
          "active" : {
            "type" : "boolean",
            "description" : "The relationship is active",
            "example" : true
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this relationship expired",
            "example" : "2024-03-01"
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "Approved visitor",
            "example" : true
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "Next of kin",
            "example" : true
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "Emergency contact",
            "example" : true
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment on this relationship",
            "example" : "This is an optional comment"
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number (NOMS ID) related",
            "example" : "A1234AA"
          },
          "restrictions" : {
            "type" : "array",
            "description" : "The restrictions for this prisoner contact relationship",
            "items" : {
              "$ref" : "#/components/schemas/MigratePrisonerContactRestriction"
            }
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "active", "approvedVisitor", "contactType", "currentTerm", "emergencyContact", "id", "nextOfKin", "prisonerNumber", "relationshipType", "restrictions" ]
      },
      "MigrateRestriction" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique ID in NOMIS for this restriction",
            "example" : 123
          },
          "type" : {
            "$ref" : "#/components/schemas/CodedValue",
            "description" : "Coded value for this restriction type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comments relating to this restriction",
            "example" : "A comment"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this restriction is effective from",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date that this restriction expires and stops being enforced",
            "example" : "2024-03-01"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createUsername" : {
            "type" : "string"
          },
          "modifyDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifyUsername" : {
            "type" : "string"
          }
        },
        "required" : [ "effectiveDate", "id", "type" ]
      },
      "AddressAndPhones" : {
        "type" : "object",
        "properties" : {
          "address" : {
            "$ref" : "#/components/schemas/IdPair",
            "description" : "The unique IDs in NOMIS and DPS for this address"
          },
          "phones" : {
            "type" : "array",
            "description" : "The pairs of IDs in NOMIS and DPS for address-specific phone numbers",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          }
        },
        "required" : [ "address", "phones" ]
      },
      "ContactsAndRestrictions" : {
        "type" : "object",
        "properties" : {
          "relationship" : {
            "$ref" : "#/components/schemas/IdPair",
            "description" : "The unique IDs in NOMIS and DPS for this relationship"
          },
          "restrictions" : {
            "type" : "array",
            "description" : "The pairs of IDs in NOMIS and DPS for relationship-specific restrictions",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          }
        },
        "required" : [ "relationship", "restrictions" ]
      },
      "MigrateContactResponse" : {
        "type" : "object",
        "description" : "The migration response for a contact/person and all of its sub-entities",
        "properties" : {
          "contact" : {
            "$ref" : "#/components/schemas/IdPair",
            "description" : "The pair of IDs for this person in NOMIS",
            "example" : 123456
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact created",
            "example" : "Doe"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of Nomis and DPS IDs for person phone numbers",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "List of Nomis and DPS IDs for addresses and address-specific phone numbers",
            "items" : {
              "$ref" : "#/components/schemas/AddressAndPhones"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "description" : "List of Nomis and DPS IDs for person email addresses",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          },
          "identities" : {
            "type" : "array",
            "description" : "List of Nomis and DPS IDs for person proofs of identity",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          },
          "restrictions" : {
            "type" : "array",
            "description" : "List of Nomis and DPS IDs for person restrictions (visitor restrictions)",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          },
          "relationships" : {
            "type" : "array",
            "description" : "List of Nomis and DPS IDs for relationships and relationship-specific restrictions",
            "items" : {
              "$ref" : "#/components/schemas/ContactsAndRestrictions"
            }
          },
          "employments" : {
            "type" : "array",
            "description" : "List of Nomis and DPS IDs for employments (official contact types only)",
            "items" : {
              "$ref" : "#/components/schemas/IdPair"
            }
          }
        },
        "required" : [ "addresses", "contact", "emailAddresses", "identities", "lastName", "phoneNumbers", "relationships", "restrictions" ]
      },
      "Address" : {
        "type" : "object",
        "properties" : {
          "addressType" : {
            "type" : "string",
            "description" : "\n      The type of address.\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME",
            "maxLength" : 12,
            "minLength" : 0
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B",
            "maxLength" : 30,
            "minLength" : 0
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House",
            "maxLength" : 50,
            "minLength" : 0
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue",
            "maxLength" : 160,
            "minLength" : 0
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights",
            "maxLength" : 70,
            "minLength" : 0
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code - from NOMIS",
            "example" : 13232,
            "maxLength" : 12,
            "minLength" : 0
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code - from NOMIS",
            "example" : "WMIDS",
            "maxLength" : 12,
            "minLength" : 0
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH",
            "maxLength" : 12,
            "minLength" : 0
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code - from NOMIS",
            "example" : "UK",
            "maxLength" : 12,
            "minLength" : 0
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Whether the address can be used for mailing",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address can be considered active from",
            "example" : "2023-01-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address can be considered active until",
            "example" : "2023-01-12"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate this address should be considered as no fixed address",
            "example" : false
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "Any phone numbers that are specific to this address",
            "items" : {
              "$ref" : "#/components/schemas/PhoneNumber"
            }
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "countryCode", "phoneNumbers", "primaryAddress" ]
      },
      "CreateContactRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact",
        "properties" : {
          "titleCode" : {
            "type" : "string",
            "description" : "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n      ",
            "example" : "MR",
            "maxLength" : 12,
            "minLength" : 0
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe",
            "maxLength" : 35,
            "minLength" : 0
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John",
            "maxLength" : 35,
            "minLength" : 0
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle names of the contact, if any",
            "example" : "William",
            "maxLength" : 35,
            "minLength" : 0
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "languageCode" : {
            "type" : "string",
            "description" : "\n      The primary language of the contact.\n      This is a coded value (from the group code LANGUAGE in reference data).\n      ",
            "example" : "ENG",
            "maxLength" : 12,
            "minLength" : 0
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Whether an interpreter is required for this contact",
            "example" : true
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "\n      The domestic status of the contact.\n      This is a coded value (from the group code DOMESTIC_STS in reference data).\n      ",
            "example" : "S",
            "maxLength" : 12,
            "minLength" : 0
          },
          "genderCode" : {
            "type" : "string",
            "description" : "\n      The domestic status of the contact.\n      This is a coded value (from the group code GENDER in reference data).\n      ",
            "examples" : [ "M", "F" ],
            "maxLength" : 12,
            "minLength" : 0
          },
          "relationship" : {
            "$ref" : "#/components/schemas/ContactRelationship",
            "description" : "A description of the relationship if the contact should be linked to a prisoner"
          },
          "identities" : {
            "type" : "array",
            "description" : "Identity documents",
            "items" : {
              "$ref" : "#/components/schemas/IdentityDocument"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "Addresses",
            "items" : {
              "$ref" : "#/components/schemas/Address"
            }
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "Phone numbers",
            "items" : {
              "$ref" : "#/components/schemas/PhoneNumber"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "description" : "Email addresses",
            "items" : {
              "$ref" : "#/components/schemas/EmailAddress"
            }
          },
          "employments" : {
            "type" : "array",
            "description" : "Employments",
            "items" : {
              "$ref" : "#/components/schemas/Employment"
            }
          },
          "staff" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "required" : [ "firstName", "interpreterRequired", "isStaff", "lastName" ]
      },
      "EmailAddress" : {
        "type" : "object",
        "description" : "A single email address",
        "properties" : {
          "emailAddress" : {
            "type" : "string",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "emailAddress" ]
      },
      "Employment" : {
        "type" : "object",
        "description" : "Request to create a new employment with an employer and whether it is active or inactive",
        "properties" : {
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The organisation id",
            "example" : 123456789
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether this is a current employment or not"
          }
        },
        "required" : [ "isActive", "organisationId" ]
      },
      "IdentityDocument" : {
        "type" : "object",
        "description" : "An identity document",
        "properties" : {
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "DL",
            "maxLength" : 12,
            "minLength" : 0
          },
          "identityValue" : {
            "type" : "string",
            "description" : "The identity value such as driving licence number",
            "example" : "DL123456789",
            "maxLength" : 20,
            "minLength" : 0
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "The authority who issued the identity",
            "example" : "DVLA",
            "maxLength" : 40,
            "minLength" : 0
          }
        },
        "required" : [ "identityType", "identityValue" ]
      },
      "PhoneNumber" : {
        "type" : "object",
        "description" : "A single contact or address phone number",
        "properties" : {
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB",
            "maxLength" : 12,
            "minLength" : 0
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890",
            "maxLength" : 40,
            "minLength" : 0
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123,
            "maxLength" : 7,
            "minLength" : 0
          }
        },
        "required" : [ "phoneNumber", "phoneType" ]
      },
      "ContactAddressDetails" : {
        "type" : "object",
        "description" : "An address related to a contact with descriptions of all reference data",
        "properties" : {
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact address",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "addressType" : {
            "type" : "string",
            "description" : "\n      The type of address (optional).\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME"
          },
          "addressTypeDescription" : {
            "type" : "string",
            "description" : "The description of the address type",
            "example" : "HOME"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B"
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House"
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue"
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code",
            "example" : 25343
          },
          "cityDescription" : {
            "type" : "string",
            "description" : "The description of city code",
            "example" : "Sheffield"
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code",
            "example" : "S.YORKSHIRE"
          },
          "countyDescription" : {
            "type" : "string",
            "description" : "The description of county code",
            "example" : "South Yorkshire"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code",
            "example" : "ENG"
          },
          "countryDescription" : {
            "type" : "string",
            "description" : "The description of country code",
            "example" : "England"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "verifiedBy" : {
            "type" : "string",
            "description" : "Which username ran the postcode lookup check",
            "example" : "NJKG44D"
          },
          "verifiedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the postcode lookup was done",
            "example" : "2024-01-01T00:00:00Z"
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether mail is allowed to be sent to this address",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address is to be considered active from",
            "example" : "2024-01-01"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address is to be considered no longer active",
            "example" : "2024-01-01"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether this address indicates no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "Phone numbers that are related to this address",
            "items" : {
              "$ref" : "#/components/schemas/ContactAddressPhoneDetails"
            }
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The id of the user who created the contact",
            "example" : "JD000001"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was created",
            "example" : "2024-01-01T00:00:00Z"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The id of the user who last updated the contact address",
            "example" : "JD000001"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact address was last updated",
            "example" : "2024-01-01T00:00:00Z"
          }
        },
        "required" : [ "contactAddressId", "contactId", "createdBy", "createdTime", "mailFlag", "noFixedAddress", "phoneNumbers", "primaryAddress", "verified" ]
      },
      "ContactCreationResult" : {
        "type" : "object",
        "description" : "The result of creating a contact and optionally a new relationship to a prisoner",
        "properties" : {
          "createdContact" : {
            "$ref" : "#/components/schemas/ContactDetails",
            "description" : "The details of a contact as an individual"
          },
          "createdRelationship" : {
            "$ref" : "#/components/schemas/PrisonerContactRelationshipDetails",
            "description" : "Describes the prisoner contact relationship if one was created with the contact"
          }
        },
        "required" : [ "createdContact" ]
      },
      "ContactDetails" : {
        "type" : "object",
        "description" : "The details of a contact as an individual",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "titleCode" : {
            "type" : "string",
            "description" : "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n      ",
            "example" : "MR"
          },
          "titleDescription" : {
            "type" : "string",
            "description" : "The description of the title code, if present",
            "example" : "Mr"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John"
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the contact deceased, if known",
            "example" : "1980-01-01"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "The NOMIS code for the contacts language",
            "example" : "ENG"
          },
          "languageDescription" : {
            "type" : "string",
            "description" : "The description of the language code",
            "example" : "English"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Whether an interpreter is required for this contact",
            "example" : true
          },
          "addresses" : {
            "type" : "array",
            "description" : "All addresses for the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactAddressDetails"
            }
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "All phone numbers for the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactPhoneDetails"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "description" : "All email addresses for the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactEmailDetails"
            }
          },
          "identities" : {
            "type" : "array",
            "description" : "All identities for the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactIdentityDetails"
            }
          },
          "employments" : {
            "type" : "array",
            "description" : "All employments for the contact",
            "items" : {
              "$ref" : "#/components/schemas/EmploymentDetails"
            }
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The NOMIS code for the contacts domestic status",
            "example" : "S"
          },
          "domesticStatusDescription" : {
            "type" : "string",
            "description" : "The description of the domestic status code",
            "example" : "Single"
          },
          "genderCode" : {
            "type" : "string",
            "description" : "The NOMIS code for the contacts gender. See reference data with group code 'GENDER'",
            "examples" : [ "M", "F" ]
          },
          "genderDescription" : {
            "type" : "string",
            "description" : "The description of gender code. See reference data with group code 'GENDER'",
            "examples" : [ "Male", "Female" ]
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The id of the user who created the contact",
            "example" : "JD000001"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was created",
            "example" : "2024-01-01T00:00:00Z"
          },
          "staff" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "required" : [ "addresses", "createdBy", "createdTime", "emailAddresses", "employments", "firstName", "id", "identities", "interpreterRequired", "isStaff", "lastName", "phoneNumbers" ]
      },
      "CreateContactRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to create a new global restriction on a contact, a.k.a an estate-wide restriction",
        "properties" : {
          "restrictionType" : {
            "type" : "string",
            "description" : "\n    The coded type of restriction that applies to this contact.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example" : "BAN"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction start date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date",
            "example" : "2024-01-01"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments for the restriction",
            "example" : "N/A",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "restrictionType", "startDate" ]
      },
      "CreateMultiplePhoneNumbersRequest" : {
        "type" : "object",
        "description" : "Request to create multiple phone numbers for a contact or an address",
        "properties" : {
          "phoneNumbers" : {
            "type" : "array",
            "description" : "Phone numbers",
            "items" : {
              "$ref" : "#/components/schemas/PhoneNumber"
            },
            "maxItems" : 2147483647,
            "minItems" : 1
          }
        },
        "required" : [ "phoneNumbers" ]
      },
      "CreatePhoneRequest" : {
        "type" : "object",
        "description" : "Request to create a new phone number",
        "properties" : {
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB",
            "maxLength" : 12,
            "minLength" : 0
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890",
            "maxLength" : 40,
            "minLength" : 0
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123,
            "maxLength" : 7,
            "minLength" : 0
          }
        },
        "required" : [ "phoneNumber", "phoneType" ]
      },
      "CreateIdentityRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact identity",
        "properties" : {
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "DL",
            "maxLength" : 12,
            "minLength" : 0
          },
          "identityValue" : {
            "type" : "string",
            "description" : "The identity value such as driving licence number",
            "example" : "DL123456789",
            "maxLength" : 20,
            "minLength" : 0
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "The authority who issued the identity",
            "example" : "DVLA",
            "maxLength" : 40,
            "minLength" : 0
          }
        },
        "required" : [ "identityType", "identityValue" ]
      },
      "CreateMultipleIdentitiesRequest" : {
        "type" : "object",
        "description" : "Request to create multiple contact identity documents",
        "properties" : {
          "identities" : {
            "type" : "array",
            "description" : "Identity documents",
            "items" : {
              "$ref" : "#/components/schemas/IdentityDocument"
            },
            "maxItems" : 2147483647,
            "minItems" : 1
          }
        },
        "required" : [ "identities" ]
      },
      "CreateEmploymentRequest" : {
        "type" : "object",
        "description" : "Request to create a new employment with an employer and whether it is active or inactive",
        "properties" : {
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The organisation id",
            "example" : 123456789
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether this is a current employment or not"
          }
        },
        "required" : [ "isActive", "organisationId" ]
      },
      "CreateMultipleEmailsRequest" : {
        "type" : "object",
        "description" : "Request to create a new email address",
        "properties" : {
          "emailAddresses" : {
            "type" : "array",
            "description" : "Email addresses",
            "items" : {
              "$ref" : "#/components/schemas/EmailAddress"
            },
            "maxItems" : 2147483647,
            "minItems" : 1
          }
        },
        "required" : [ "emailAddresses" ]
      },
      "CreateEmailRequest" : {
        "type" : "object",
        "description" : "Request to create a new email address",
        "properties" : {
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "emailAddress" ]
      },
      "CreateContactAddressRequest" : {
        "type" : "object",
        "description" : "Request to create a new contact address",
        "properties" : {
          "addressType" : {
            "type" : "string",
            "description" : "\n      The type of address.\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME",
            "maxLength" : 12,
            "minLength" : 0
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B",
            "maxLength" : 30,
            "minLength" : 0
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House",
            "maxLength" : 50,
            "minLength" : 0
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue",
            "maxLength" : 160,
            "minLength" : 0
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights",
            "maxLength" : 70,
            "minLength" : 0
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code - from NOMIS",
            "example" : 13232,
            "maxLength" : 12,
            "minLength" : 0
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code - from NOMIS",
            "example" : "WMIDS",
            "maxLength" : 12,
            "minLength" : 0
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH",
            "maxLength" : 12,
            "minLength" : 0
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code - from NOMIS",
            "example" : "UK",
            "maxLength" : 12,
            "minLength" : 0
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Whether the address can be used for mailing",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date when this address can be considered active from",
            "example" : "2023-01-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The end date when this address can be considered active until",
            "example" : "2023-01-12"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate this address should be considered as no fixed address",
            "example" : false
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of new address-specific phone numbers to create",
            "items" : {
              "$ref" : "#/components/schemas/PhoneNumber"
            }
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "countryCode", "phoneNumbers", "primaryAddress" ]
      },
      "CreateContactAddressPhoneRequest" : {
        "type" : "object",
        "description" : "Request to create a new address-linked phone number",
        "properties" : {
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact address",
            "example" : 123
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB",
            "maxLength" : 12,
            "minLength" : 0
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890",
            "maxLength" : 40,
            "minLength" : 0
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123,
            "maxLength" : 7,
            "minLength" : 0
          }
        },
        "required" : [ "contactAddressId", "phoneNumber", "phoneType" ]
      },
      "PatchRelationshipRequest" : {
        "type" : "object",
        "description" : "Request to update an existing relationship details",
        "properties" : {
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "The code representing the relationship type as social or official",
            "example" : "S"
          },
          "relationshipToPrisonerCode" : {
            "type" : "string",
            "description" : "The relationship reference code between the prisoner and the contact",
            "example" : "FRI"
          },
          "isEmergencyContact" : {
            "type" : "boolean",
            "description" : "Whether they are the emergency contact for the prisoner",
            "example" : true
          },
          "isApprovedVisitor" : {
            "type" : "boolean",
            "description" : "Whether they are approved to visit the prisoner",
            "example" : true
          },
          "isNextOfKin" : {
            "type" : "boolean",
            "description" : "Whether they are the next of kin for the prisoner",
            "example" : true
          },
          "isRelationshipActive" : {
            "type" : "boolean",
            "description" : "Whether the relationship is active",
            "example" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments about the contacts relationship with the prisoner",
            "example" : "Some additional information",
            "maxLength" : 240,
            "minLength" : 0
          }
        }
      },
      "PatchContactRequest" : {
        "type" : "object",
        "description" : "Request to patch a new contact. firstName and lastName are not updatable so are intentionally missing from this request.",
        "properties" : {
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The domestic status code of the contact",
            "example" : "S"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Whether an interpreter is required",
            "example" : false
          },
          "languageCode" : {
            "type" : "string",
            "description" : "The language code of the contact",
            "example" : "EN"
          },
          "dateOfBirth" : {
            "type" : "string",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "titleCode" : {
            "type" : "string",
            "description" : "The title code for the contact, if any",
            "example" : "MR",
            "maxLength" : 12,
            "minLength" : 0
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle names of the contact, if any",
            "example" : "William",
            "maxLength" : 35,
            "minLength" : 0
          },
          "genderCode" : {
            "type" : "string",
            "description" : "\n    The optional gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "example" : "M"
          },
          "deceasedDate" : {
            "type" : "string",
            "description" : "The date the contact deceased, if known",
            "example" : "1980-01-01"
          }
        }
      },
      "PatchContactResponse" : {
        "type" : "object",
        "description" : "The details of a updated contact as an individual",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "titleCode" : {
            "type" : "string",
            "description" : "\n    The title code for the contact.\n    This is a coded value (from the group code TITLE in reference data).\n    Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n    ",
            "example" : "MR"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John"
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the contact was deceased, if applicable",
            "example" : "2023-05-01"
          },
          "genderCode" : {
            "type" : "string",
            "description" : "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "example" : "M"
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "The domestic status code of the contact",
            "example" : "S"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "The language code of the contact",
            "example" : "EN"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "Whether an interpreter is required",
            "example" : false
          },
          "createdBy" : {
            "type" : "string",
            "description" : "User who created the entry",
            "example" : "admin"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was created",
            "example" : "2023-09-23T10:15:30"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User who updated the entry",
            "example" : "admin2"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Timestamp when the entry was updated",
            "example" : "2023-09-24T12:00:00"
          },
          "staff" : {
            "type" : "boolean",
            "writeOnly" : true
          }
        },
        "required" : [ "createdBy", "createdTime", "firstName", "id", "isStaff", "lastName" ]
      },
      "PatchEmploymentsRequest" : {
        "type" : "object",
        "description" : "Request allowing several changes to employments in a single request.",
        "properties" : {
          "createEmployments" : {
            "type" : "array",
            "description" : "List of new employments to create",
            "items" : {
              "$ref" : "#/components/schemas/Employment"
            }
          },
          "updateEmployments" : {
            "type" : "array",
            "description" : "List of updates to apply to existing employments",
            "items" : {
              "$ref" : "#/components/schemas/PatchEmploymentsUpdateEmployment"
            }
          },
          "deleteEmployments" : {
            "type" : "array",
            "description" : "List of ids for employments to delete",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "createEmployments", "deleteEmployments", "updateEmployments" ]
      },
      "PatchEmploymentsUpdateEmployment" : {
        "type" : "object",
        "description" : "Request to update an existing employment's employer or active flag.",
        "properties" : {
          "employmentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id for this employment",
            "example" : 123456
          },
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The organisation id",
            "example" : 123456789
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether this is a current employment or not"
          }
        },
        "required" : [ "employmentId", "isActive", "organisationId" ]
      },
      "JsonNullableString" : {
        "type" : "object",
        "properties" : {
          "present" : {
            "type" : "boolean"
          }
        }
      },
      "PatchContactAddressRequest" : {
        "type" : "object",
        "description" : "Request to patch a contact address",
        "properties" : {
          "addressType" : {
            "$ref" : "#/components/schemas/JsonNullableString",
            "description" : "\n    The type of address.\n    This is a coded value (from the group code ADDRESS_TYPE in reference data).\n    The known values are HOME, WORK or BUS (business address).\n    ",
            "example" : "HOME",
            "maxLength" : 12
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number or name",
            "example" : "Flat 2B",
            "maxLength" : 30,
            "minLength" : 0
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House",
            "maxLength" : 50,
            "minLength" : 0
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue",
            "maxLength" : 160,
            "minLength" : 0
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights",
            "maxLength" : 70,
            "minLength" : 0
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code - from NOMIS reference data",
            "example" : "BIRM",
            "maxLength" : 12,
            "minLength" : 0
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code - from NOMIS reference data",
            "example" : "WMIDS",
            "maxLength" : 12,
            "minLength" : 0
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postcode",
            "example" : "S13 4FH",
            "maxLength" : 12,
            "minLength" : 0
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code - from NOMIS reference data",
            "example" : "UK",
            "maxLength" : 12,
            "minLength" : 0
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Whether the address has been verified by postcode lookup",
            "example" : false
          },
          "mailFlag" : {
            "type" : "boolean",
            "description" : "Whether the address can be used for mailing",
            "example" : false
          },
          "startDate" : {
            "type" : "string",
            "description" : "The start date when this address can be considered active from",
            "example" : "2023-01-12"
          },
          "endDate" : {
            "type" : "string",
            "description" : "The end date when this address can be considered active until",
            "example" : "2023-01-12"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate this address should be considered as no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information",
            "maxLength" : 240,
            "minLength" : 0
          }
        }
      },
      "ReconcilePrisonerRelationship" : {
        "type" : "object",
        "description" : "Prisoner single relationship reconciliation",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the contact",
            "example" : 12345
          },
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the prisoner contact",
            "example" : 12345
          },
          "firstName" : {
            "type" : "string",
            "description" : "Contact first name",
            "example" : "Bob"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Contact last name",
            "example" : "Smith"
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "Social or official contact",
            "example" : "S"
          },
          "relationshipToPrisoner" : {
            "type" : "string",
            "description" : "The relationship code from reference data",
            "example" : "FRIEND"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is next of kin",
            "example" : true
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an emergency contact",
            "example" : true
          },
          "active" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is active",
            "example" : true
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an approved visitor",
            "example" : true
          },
          "restrictions" : {
            "type" : "array",
            "description" : "The list of restrictions on this relationship",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileRelationshipRestriction"
            }
          }
        },
        "required" : [ "active", "approvedVisitor", "contactId", "emergencyContact", "nextOfKin", "prisonerContactId", "prisonerNumber", "relationshipToPrisoner", "relationshipTypeCode", "restrictions" ]
      },
      "ReconcileRelationshipRestriction" : {
        "type" : "object",
        "description" : "Contact relationship restriction reconciliation",
        "properties" : {
          "prisonerContactRestrictionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the prisoner contact restriction",
            "example" : 12345
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Type of restriction",
            "example" : "MOBILE"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction created date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date ",
            "example" : "2024-01-01"
          }
        },
        "required" : [ "prisonerContactRestrictionId", "restrictionType" ]
      },
      "SyncPrisonerReconcile" : {
        "type" : "object",
        "description" : "Prisoner relationship reconciliation",
        "properties" : {
          "relationships" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcilePrisonerRelationship"
            }
          }
        },
        "required" : [ "relationships" ]
      },
      "EmploymentEntity" : {
        "type" : "object",
        "properties" : {
          "employmentId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "organisationId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "active" : {
            "type" : "boolean"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "updatedBy" : {
            "type" : "string"
          },
          "updatedTime" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "required" : [ "active", "contactId", "createdBy", "createdTime", "employmentId", "organisationId" ]
      },
      "ReconcileAddress" : {
        "type" : "object",
        "description" : "Contact address reconciliation",
        "properties" : {
          "contactAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact address",
            "example" : 123456
          },
          "addressType" : {
            "type" : "string",
            "description" : "The coded value for type of address",
            "example" : "HOME"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "True if this is the primary address otherwise false",
            "example" : true
          },
          "property" : {
            "type" : "string",
            "description" : "Building or house number or name",
            "example" : "Mansion House"
          },
          "street" : {
            "type" : "string",
            "description" : "Street or road name",
            "example" : "Acacia Avenue"
          },
          "area" : {
            "type" : "string",
            "description" : "Area",
            "example" : "Morton Heights"
          },
          "addressPhones" : {
            "type" : "array",
            "description" : "Address-specific phone numbers",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileAddressPhone"
            }
          }
        },
        "required" : [ "addressPhones", "contactAddressId", "primaryAddress" ]
      },
      "ReconcileAddressPhone" : {
        "type" : "object",
        "description" : "Contact address phone reconciliation",
        "properties" : {
          "contactAddressPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact address phone",
            "example" : 1
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          }
        },
        "required" : [ "contactAddressPhoneId", "phoneNumber", "phoneType" ]
      },
      "ReconcileEmail" : {
        "type" : "object",
        "description" : "Contact email reconciliation",
        "properties" : {
          "contactEmailId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact email",
            "example" : 1
          },
          "emailAddress" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@example.com"
          }
        },
        "required" : [ "contactEmailId", "emailAddress" ]
      },
      "ReconcileEmployment" : {
        "type" : "object",
        "description" : "Contact employment reconciliation",
        "properties" : {
          "employmentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the employment",
            "example" : 12345
          },
          "organisationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the organization associated with the employment",
            "example" : 12345
          },
          "active" : {
            "type" : "boolean",
            "description" : "If the employment is active",
            "example" : true
          }
        },
        "required" : [ "active", "employmentId", "organisationId" ]
      },
      "ReconcileIdentity" : {
        "type" : "object",
        "description" : "Contact identity reconciliation",
        "properties" : {
          "contactIdentityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact identity",
            "example" : 1
          },
          "identityType" : {
            "type" : "string",
            "description" : "Type of identity",
            "example" : "DL"
          },
          "identityValue" : {
            "type" : "string",
            "description" : "Identity ",
            "example" : "DL090 0909 909"
          },
          "issuingAuthority" : {
            "type" : "string",
            "description" : "Issuing authority",
            "example" : "DVLA"
          }
        },
        "required" : [ "contactIdentityId", "identityType", "identityValue" ]
      },
      "ReconcilePhone" : {
        "type" : "object",
        "description" : "Contact phone reconciliation",
        "properties" : {
          "contactPhoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for the contact phone",
            "example" : 1
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of phone",
            "example" : "MOB"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "Phone number",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "Extension number",
            "example" : 123
          }
        },
        "required" : [ "contactPhoneId", "phoneNumber", "phoneType" ]
      },
      "ReconcileRelationship" : {
        "type" : "object",
        "description" : "Prisoner contact relationship reconciliation",
        "properties" : {
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the prisoner contact",
            "example" : 12345
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "The prisoner number",
            "example" : "A1234BC"
          },
          "contactType" : {
            "type" : "string",
            "description" : "Social or official contact",
            "example" : "S"
          },
          "relationshipType" : {
            "type" : "string",
            "description" : "The relationship code from reference data",
            "example" : "Friend"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is next of kin",
            "example" : true
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an emergency contact",
            "example" : true
          },
          "active" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is active",
            "example" : true
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "Indicates if the prisoner contact is an approved visitor",
            "example" : true
          },
          "relationshipRestrictions" : {
            "type" : "array",
            "description" : "The list of restrictions on this relationship",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileRelationshipRestriction"
            }
          }
        },
        "required" : [ "active", "approvedVisitor", "contactType", "emergencyContact", "nextOfKin", "prisonerContactId", "prisonerNumber", "relationshipRestrictions", "relationshipType" ]
      },
      "ReconcileRestriction" : {
        "type" : "object",
        "description" : "Contact restriction reconciliation",
        "properties" : {
          "contactRestrictionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID of the contact restriction",
            "example" : 12345
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Type of restriction",
            "example" : "MOBILE"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction created date",
            "example" : "2024-01-01"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Restriction end date ",
            "example" : "2024-01-01"
          }
        },
        "required" : [ "contactRestrictionId", "restrictionType" ]
      },
      "SyncContactReconcile" : {
        "type" : "object",
        "description" : "Reconciliation data for one contact",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier for a contact",
            "example" : 1111
          },
          "firstName" : {
            "type" : "string",
            "description" : "Contact first name",
            "example" : "Bob"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Contact last name",
            "example" : "Smith"
          },
          "middleNames" : {
            "type" : "string",
            "description" : "Contact middle names",
            "example" : "David"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "Contact data of birth",
            "example" : "2001-02-01"
          },
          "staffFlag" : {
            "type" : "boolean",
            "description" : "Staff indicator",
            "example" : false
          },
          "phones" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcilePhone"
            }
          },
          "addresses" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileAddress"
            }
          },
          "emails" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileEmail"
            }
          },
          "identities" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileIdentity"
            }
          },
          "restrictions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileRestriction"
            }
          },
          "relationships" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileRelationship"
            }
          },
          "employments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReconcileEmployment"
            }
          }
        },
        "required" : [ "addresses", "contactId", "emails", "employments", "firstName", "identities", "lastName", "phones", "relationships", "restrictions", "staffFlag" ]
      },
      "PageMetadata" : {
        "type" : "object",
        "properties" : {
          "size" : {
            "type" : "integer",
            "format" : "int64"
          },
          "number" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int64"
          }
        }
      },
      "PagedModelSyncContactId" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SyncContactId"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageMetadata"
          }
        }
      },
      "SyncContactId" : {
        "type" : "object",
        "description" : "Response object for sync reconciliation",
        "properties" : {
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The ID for an contact",
            "example" : 111111
          }
        },
        "required" : [ "contactId" ]
      },
      "ReferenceCodeGroup" : {
        "type" : "string",
        "enum" : [ "DOMESTIC_STS", "OFFICIAL_RELATIONSHIP", "ID_TYPE", "LANGUAGE", "GENDER", "SOCIAL_RELATIONSHIP", "CITY", "COUNTY", "RELATIONSHIP_TYPE", "COUNTRY", "ADDRESS_TYPE", "PHONE_TYPE", "RESTRICTION", "TITLE", "TEST_TYPE" ]
      },
      "Sort" : {
        "type" : "object",
        "properties" : {
          "sort" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "ReferenceCode" : {
        "type" : "object",
        "description" : "Describes the details of a reference code",
        "properties" : {
          "referenceCodeId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "An internally-generated unique identifier for this reference code.",
            "example" : 12345
          },
          "groupCode" : {
            "$ref" : "#/components/schemas/ReferenceCodeGroup",
            "description" : "The group name for related reference codes.",
            "example" : "PHONE_TYPE"
          },
          "code" : {
            "type" : "string",
            "description" : "The code for this reference data",
            "example" : "MOB"
          },
          "description" : {
            "type" : "string",
            "description" : "A fuller description of the reference code",
            "example" : "Mobile"
          },
          "displayOrder" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The default order configured for the reference code, lowest number first.",
            "example" : 5
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "Whether the reference code is still in use. Old reference codes are maintained for compatability with legacy data.",
            "example" : true
          }
        },
        "required" : [ "code", "description", "displayOrder", "groupCode", "isActive", "referenceCodeId" ]
      },
      "PagedModelPrisonerContactSummary" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerContactSummary"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageMetadata"
          }
        }
      },
      "PrisonerContactSummary" : {
        "type" : "object",
        "description" : "Describes the details of a prisoner's contact",
        "properties" : {
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the prisoner contact",
            "example" : 123456
          },
          "contactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the contact",
            "example" : 654321
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number (NOMS ID)",
            "example" : "A1234BC"
          },
          "titleCode" : {
            "type" : "string",
            "description" : "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      ",
            "example" : "MR"
          },
          "titleDescription" : {
            "type" : "string",
            "description" : "The description of the title code, if present",
            "example" : "Mr"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John"
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle names of the contact, if any",
            "example" : "William"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact",
            "example" : "1980-01-01"
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the contact deceased, if known",
            "example" : "1980-01-01"
          },
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value from the group code CONTACT_TYPE in reference data.\n      Known values are (S) Social or (O) official.\n      ",
            "example" : "S"
          },
          "relationshipTypeDescription" : {
            "type" : "string",
            "description" : "The description of the relationship type",
            "example" : "Friend"
          },
          "relationshipToPrisonerCode" : {
            "type" : "string",
            "description" : "The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.",
            "example" : "FRI"
          },
          "relationshipToPrisonerDescription" : {
            "type" : "string",
            "description" : "The description of the relationship to the prisoner",
            "example" : "Friend"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat number in the address, if any",
            "example" : "Flat 1"
          },
          "property" : {
            "type" : "string",
            "description" : "Property name or number",
            "example" : 123
          },
          "street" : {
            "type" : "string",
            "description" : "Street name",
            "example" : "Baker Street"
          },
          "area" : {
            "type" : "string",
            "description" : "Area or locality, if any",
            "example" : "Marylebone"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code",
            "example" : 25343
          },
          "cityDescription" : {
            "type" : "string",
            "description" : "The description of city code",
            "example" : "Sheffield"
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code",
            "example" : "S.YORKSHIRE"
          },
          "countyDescription" : {
            "type" : "string",
            "description" : "The description of county code",
            "example" : "South Yorkshire"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Postal code",
            "example" : "NW1 6XE"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code",
            "example" : "ENG"
          },
          "countryDescription" : {
            "type" : "string",
            "description" : "The description of country code",
            "example" : "England"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "Flag to indicate whether this address indicates no fixed address",
            "example" : false
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "If true this address should be considered as the primary residential address",
            "example" : true
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "If true this address should be considered for sending mail to",
            "example" : true
          },
          "phoneType" : {
            "type" : "string",
            "description" : "Type of the latest phone number",
            "example" : "MOB"
          },
          "phoneTypeDescription" : {
            "type" : "string",
            "description" : "Description of the type of the latest phone number",
            "example" : "Mobile"
          },
          "phoneNumber" : {
            "type" : "string",
            "description" : "The latest phone number, if there are any",
            "example" : "+1234567890"
          },
          "extNumber" : {
            "type" : "string",
            "description" : "The extension number of the latest phone number",
            "example" : 123
          },
          "isApprovedVisitor" : {
            "type" : "boolean",
            "description" : "Indicates whether the contact is an approved visitor",
            "example" : true
          },
          "isNextOfKin" : {
            "type" : "boolean",
            "description" : "Is this contact the prisoner's next of kin?",
            "example" : false
          },
          "isEmergencyContact" : {
            "type" : "boolean",
            "description" : "Is this contact the prisoner's emergency contact?",
            "example" : true
          },
          "isRelationshipActive" : {
            "type" : "boolean",
            "description" : "Is this prisoner's contact relationship active?",
            "example" : true
          },
          "currentTerm" : {
            "type" : "boolean",
            "description" : "Is this relationship active for the current booking?",
            "example" : true
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional comments",
            "example" : "Close family friend"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "Whether the contact is a staff member",
            "example" : false
          },
          "restrictionSummary" : {
            "$ref" : "#/components/schemas/RestrictionsSummary"
          }
        },
        "required" : [ "contactId", "currentTerm", "firstName", "isApprovedVisitor", "isEmergencyContact", "isNextOfKin", "isRelationshipActive", "isStaff", "lastName", "prisonerContactId", "prisonerNumber", "relationshipToPrisonerCode", "relationshipToPrisonerDescription", "relationshipTypeCode", "relationshipTypeDescription", "restrictionSummary" ]
      },
      "RestrictionTypeDetails" : {
        "type" : "object",
        "properties" : {
          "restrictionType" : {
            "type" : "string"
          },
          "restrictionTypeDescription" : {
            "type" : "string"
          }
        },
        "required" : [ "restrictionType", "restrictionTypeDescription" ]
      },
      "RestrictionsSummary" : {
        "type" : "object",
        "properties" : {
          "active" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RestrictionTypeDetails"
            },
            "uniqueItems" : true
          },
          "totalActive" : {
            "type" : "integer",
            "format" : "int32"
          },
          "totalExpired" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "active", "totalActive", "totalExpired" ]
      },
      "PrisonerContactRelationshipCount" : {
        "type" : "object",
        "description" : "A count of a prisoners contact relationships",
        "properties" : {
          "social" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The number of active social relationships"
          },
          "official" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The number of active official relationships"
          }
        },
        "required" : [ "official", "social" ]
      },
      "PrisonerContactRestrictionsResponse" : {
        "type" : "object",
        "description" : "Restriction related to a specific relationship between a prisoner and contact",
        "properties" : {
          "prisonerContactRestrictions" : {
            "type" : "array",
            "description" : "Relationship specific restrictions",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerContactRestrictionDetails"
            }
          },
          "contactGlobalRestrictions" : {
            "type" : "array",
            "description" : "Global (estate-wide) restrictions for the contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactRestrictionDetails"
            }
          }
        },
        "required" : [ "contactGlobalRestrictions", "prisonerContactRestrictions" ]
      },
      "Language" : {
        "type" : "object",
        "description" : "Language reference entity",
        "properties" : {
          "languageId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the language",
            "example" : 1
          },
          "nomisCode" : {
            "type" : "string",
            "description" : "Nomis code of the language",
            "example" : "GBR"
          },
          "nomisDescription" : {
            "type" : "string",
            "description" : "Nomis description of the language",
            "example" : "United Kingdom"
          },
          "isoAlpha2" : {
            "type" : "string",
            "description" : "ISO Alpha-2 code of the language",
            "example" : "GB"
          },
          "isoAlpha3" : {
            "type" : "string",
            "description" : "ISO Alpha-3 code of the language",
            "example" : "GBR"
          },
          "isoLanguageDesc" : {
            "type" : "string",
            "description" : "ISO language description",
            "example" : "United Kingdom of Great Britain and Northern Ireland"
          },
          "displaySequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Display sequence for the language",
            "example" : 1
          }
        },
        "required" : [ "displaySequence", "isoAlpha2", "isoAlpha3", "isoLanguageDesc", "languageId", "nomisCode", "nomisDescription" ]
      },
      "County" : {
        "type" : "object",
        "description" : "County reference entity",
        "properties" : {
          "countyId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the county",
            "example" : 1
          },
          "nomisCode" : {
            "type" : "string",
            "description" : "Nomis code of the county",
            "example" : "GBR"
          },
          "nomisDescription" : {
            "type" : "string",
            "description" : "Nomis description of the county",
            "example" : "United Kingdom"
          },
          "displaySequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Display sequence for the county",
            "example" : 1
          }
        },
        "required" : [ "countyId", "displaySequence", "nomisCode", "nomisDescription" ]
      },
      "Country" : {
        "type" : "object",
        "description" : "Country reference entity",
        "properties" : {
          "countryId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the country",
            "example" : 1
          },
          "nomisCode" : {
            "type" : "string",
            "description" : "Nomis code of the country",
            "example" : "GBR"
          },
          "nomisDescription" : {
            "type" : "string",
            "description" : "Nomis description of the country",
            "example" : "United Kingdom"
          },
          "isoNumeric" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "ISO numeric code of the country",
            "example" : 826
          },
          "isoAlpha2" : {
            "type" : "string",
            "description" : "ISO Alpha-2 code of the country",
            "example" : "GB"
          },
          "isoAlpha3" : {
            "type" : "string",
            "description" : "ISO Alpha-3 code of the country",
            "example" : "GBR"
          },
          "isoCountryDesc" : {
            "type" : "string",
            "description" : "ISO country description",
            "example" : "United Kingdom of Great Britain and Northern Ireland"
          },
          "displaySequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Display sequence for the country",
            "example" : 1
          }
        },
        "required" : [ "countryId", "displaySequence", "isoAlpha2", "isoAlpha3", "isoCountryDesc", "isoNumeric", "nomisCode", "nomisDescription" ]
      },
      "ContactNameDetails" : {
        "type" : "object",
        "properties" : {
          "titleCode" : {
            "type" : "string",
            "description" : "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n      ",
            "example" : "MR"
          },
          "titleDescription" : {
            "type" : "string",
            "description" : "The description of the title code, if present",
            "example" : "Mr"
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John"
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William"
          }
        },
        "required" : [ "firstName", "lastName" ]
      },
      "LinkedPrisonerDetails" : {
        "type" : "object",
        "description" : "The details of a single relationship between a prisoner and a contact",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number (NOMS ID)",
            "example" : "A1234BC"
          },
          "prisonerContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier for the prisoner contact relationship",
            "example" : 123456
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the prisoner. Nullable in the case the prisoners details are unavailable.",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the prisoner. Nullable in the case the prisoners details are unavailable.",
            "example" : "John"
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle names of the prisoner, if any",
            "example" : "William"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "The id of the prisoners current prison",
            "example" : "BXI"
          },
          "prisonName" : {
            "type" : "string",
            "description" : "The name of the prisoners current prison",
            "example" : "Brixton (HMP)"
          },
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value from the group code CONTACT_TYPE in reference data.\n      Known values are (S) Social or (O) official.\n      ",
            "example" : "S"
          },
          "relationshipTypeDescription" : {
            "type" : "string",
            "description" : "The description of the contact relationship type. Description from reference data Official or Social",
            "example" : "Official"
          },
          "relationshipToPrisonerCode" : {
            "type" : "string",
            "description" : "The relationship to the prisoner. A code from SOCIAL_RELATIONSHIP or OFFICIAL_RELATIONSHIP reference data groups depending on the relationship type.",
            "example" : "FRI"
          },
          "relationshipToPrisonerDescription" : {
            "type" : "string",
            "description" : "The description of the relationship",
            "example" : "Friend"
          },
          "isRelationshipActive" : {
            "type" : "boolean",
            "description" : "Is this prisoner's contact relationship active?",
            "example" : true
          }
        },
        "required" : [ "isRelationshipActive", "prisonerContactId", "prisonerNumber", "relationshipToPrisonerCode", "relationshipTypeCode", "relationshipTypeDescription" ]
      },
      "PagedModelLinkedPrisonerDetails" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LinkedPrisonerDetails"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageMetadata"
          }
        }
      },
      "ContactSearchResultItem" : {
        "type" : "object",
        "description" : "The details of a contact as an individual",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the contact",
            "example" : 123456
          },
          "lastName" : {
            "type" : "string",
            "description" : "The last name of the contact",
            "example" : "Doe"
          },
          "firstName" : {
            "type" : "string",
            "description" : "The first name of the contact",
            "example" : "John"
          },
          "middleNames" : {
            "type" : "string",
            "description" : "The middle name of the contact, if any",
            "example" : "William"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of birth of the contact, if known",
            "example" : "1980-01-01"
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the contact deceased, if known",
            "example" : "1980-01-01"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The id of the user who created the contact",
            "example" : "JD000001"
          },
          "createdTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The timestamp of when the contact was created",
            "example" : "2024-01-01T00:00:00Z"
          },
          "flat" : {
            "type" : "string",
            "description" : "The flat of the contact address, if known",
            "example" : "01"
          },
          "property" : {
            "type" : "string",
            "description" : "The property of the contact address, if known",
            "example" : "01"
          },
          "street" : {
            "type" : "string",
            "description" : "The street of the contact address, if known",
            "example" : "Bluebell Crescent"
          },
          "area" : {
            "type" : "string",
            "description" : "The area of the contact address, if known",
            "example" : "Birmingham"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "The city code of the contact address, if known",
            "example" : 25343
          },
          "cityDescription" : {
            "type" : "string",
            "description" : "The description of city code, if known",
            "example" : "Sheffield"
          },
          "countyCode" : {
            "type" : "string",
            "description" : "The county code of the contact address, if known",
            "example" : "S.YORKSHIRE"
          },
          "countyDescription" : {
            "type" : "string",
            "description" : "The description of county code, if known",
            "example" : "South Yorkshire"
          },
          "postcode" : {
            "type" : "string",
            "description" : "The postcode of the contact address, if known",
            "example" : "B42 2QJ"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "The country code of the contact address, if known",
            "example" : "ENG"
          },
          "countryDescription" : {
            "type" : "string",
            "description" : "The description of country code, if known",
            "example" : "England"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "If true this address should be considered for sending mail to",
            "example" : true
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date from which this address can be considered active",
            "example" : "2022-10-01"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date after which this address should be considered inactive",
            "example" : "2023-10-02"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "A flag to indicate that this address is effectively no fixed address",
            "example" : false
          },
          "comments" : {
            "type" : "string",
            "description" : "Any additional information or comments about the address",
            "example" : "Some additional information"
          }
        },
        "required" : [ "firstName", "id", "lastName" ]
      },
      "PagedModelContactSearchResultItem" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ContactSearchResultItem"
            }
          },
          "page" : {
            "$ref" : "#/components/schemas/PageMetadata"
          }
        }
      },
      "City" : {
        "type" : "object",
        "description" : "City reference entity",
        "properties" : {
          "cityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique identifier of the city",
            "example" : 1
          },
          "nomisCode" : {
            "type" : "string",
            "description" : "Nomis code of the city",
            "example" : "GBR"
          },
          "nomisDescription" : {
            "type" : "string",
            "description" : "Nomis description of the city",
            "example" : "United Kingdom"
          },
          "displaySequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Display sequence for the city",
            "example" : 1
          }
        },
        "required" : [ "cityId", "displaySequence", "nomisCode", "nomisDescription" ]
      }
    },
    "securitySchemes" : {
      "bearer-jwt" : {
        "type" : "http",
        "name" : "Authorization",
        "in" : "header",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}