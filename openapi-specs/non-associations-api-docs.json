{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "Non-Associations API",
    "description" : "API for viewing and managing non-associations for prisoners",
    "contact" : {
      "name" : "HMPPS Digital Studio",
      "email" : "feedback@digital.justice.gov.uk"
    },
    "license" : {
      "name" : "MIT",
      "identifier" : "MIT"
    },
    "version" : "2025-03-10.8405.ac80ef4"
  },
  "servers" : [ {
    "url" : "/",
    "description" : "Current url"
  } ],
  "security" : [ {
    "bearer-jwt" : [ "read", "write" ]
  }, {
    "hmpps-auth" : [ ]
  } ],
  "tags" : [ {
    "name" : "Non-Associations",
    "description" : "Endpoints to get/create/update prisoners' non-associations"
  }, {
    "name" : "Legacy non-associations-details",
    "description" : "Mimics the NOMIS/Prison API interface for retrieving non-associations. <em>**IMPORTANT**</em>: Use new `GET /prisoner/{prisonerNumber}/non-associations` endpoint if possible"
  } ],
  "paths" : {
    "/queue-admin/retry-dlq/{dlqName}" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "retryDlq",
        "parameters" : [ {
          "name" : "dlqName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetryDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-all-dlqs" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "retryAllDlqs",
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RetryDlqResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/purge-queue/{queueName}" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "purgeQueue",
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurgeQueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}/reopen" : {
      "put" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Re-open a non-association",
        "description" : "Requires REOPEN_NON_ASSOCIATIONS role with write scope.\n**Please note**: This is a special endpoint which should NOT be exposed to regular users, they should instead create a new non-association.",
        "operationId" : "reopenNonAssociation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The non-association ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The non-association ID",
            "example" : 42
          },
          "example" : 42
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReopenNonAssociationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the REOPEN_NON_ASSOCIATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Non-association re-opened",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Non-association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}/close" : {
      "put" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Close a non-association",
        "description" : "Requires WRITE_NON_ASSOCIATIONS role with write scope.",
        "operationId" : "closeNonAssociation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The non-association ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The non-association ID",
            "example" : 42
          },
          "example" : 42
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CloseNonAssociationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the NON_ASSOCIATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Non-association updated and returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Non-association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations" : {
      "get" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Get non-associations, filtered and paged",
        "description" : "Requires READ_NON_ASSOCIATIONS role",
        "operationId" : "getNonAssociations",
        "parameters" : [ {
          "name" : "includeOpen",
          "in" : "query",
          "description" : "Whether to include open non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Whether to include open non-associations or not",
            "example" : false
          },
          "example" : false
        }, {
          "name" : "includeClosed",
          "in" : "query",
          "description" : "Whether to include closed non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether to include closed non-associations or not",
            "example" : true
          },
          "example" : true
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Zero-based page index (0..N)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The size of the page to be returned",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 20,
            "minimum" : 1
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "default" : [ "id,ASC" ],
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "When input parameters are not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the READ_NON_ASSOCIATIONS role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "A page of non-associations are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageNonAssociation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Creates a non-association between two prisoners.",
        "description" : "Requires WRITE_NON_ASSOCIATIONS role with write scope.",
        "operationId" : "createNonAssociation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateNonAssociationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Invalid request body",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required privileges. Requires the NON_ASSOCIATIONS role with write scope",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns the created non-association",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Some of the prisoners were not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Open non-association already exists or some prisoner’s location is null.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}/delete" : {
      "post" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Delete a non-association",
        "description" : "Requires DELETE_NON_ASSOCIATIONS role with write scope.\n**Please note**: This is a special endpoint which should NOT be exposed to regular users, they should instead close non-associations.",
        "operationId" : "deleteNonAssociation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The non-association ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The non-association ID",
            "example" : 42
          },
          "example" : 42
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteNonAssociationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the DELETE_NON_ASSOCIATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "Non-association deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Non-association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/involving" : {
      "post" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Get non-associations involving any of the given prisoners. Either person in the non-association must be in the provided list.",
        "description" : "Requires READ_NON_ASSOCIATIONS role.",
        "operationId" : "getNonAssociationsInvolvingPrisoners",
        "parameters" : [ {
          "name" : "includeOpen",
          "in" : "query",
          "description" : "Whether to include open non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Whether to include open non-associations or not",
            "example" : false
          },
          "example" : false
        }, {
          "name" : "includeClosed",
          "in" : "query",
          "description" : "Whether to include closed non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether to include closed non-associations or not",
            "example" : true
          },
          "example" : true
        }, {
          "name" : "prisonId",
          "in" : "query",
          "description" : "When provided return only non-associations where both prisoners are in the given prison",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "null",
            "description" : "When provided return only non-associations where both prisoners are in the given prison",
            "example" : "MDI"
          },
          "example" : "MDI"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "One or more distinct prisoner numbers",
                "items" : {
                  "type" : "string",
                  "description" : "Prisoner number",
                  "example" : "A1234BC"
                },
                "minItems" : 1,
                "uniqueItems" : true
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "When fewer than one distinct prisoner numbers are provided or neither open nor closed non-associations are included",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the non-associations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NonAssociation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Any of the prisoners could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/between" : {
      "post" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Get non-associations between two or more prisoners by prisoner number. Both people in the non-associations must be in the provided list.",
        "description" : "Requires READ_NON_ASSOCIATIONS role.",
        "operationId" : "getNonAssociationsBetweenPrisoners",
        "parameters" : [ {
          "name" : "includeOpen",
          "in" : "query",
          "description" : "Whether to include open non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Whether to include open non-associations or not",
            "example" : false
          },
          "example" : false
        }, {
          "name" : "includeClosed",
          "in" : "query",
          "description" : "Whether to include closed non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether to include closed non-associations or not",
            "example" : true
          },
          "example" : true
        }, {
          "name" : "prisonId",
          "in" : "query",
          "description" : "When provided return only non-associations where both prisoners are in the given prison",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "null",
            "description" : "When provided return only non-associations where both prisoners are in the given prison",
            "example" : "MDI"
          },
          "example" : "MDI"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "Two or more distinct prisoner numbers",
                "items" : {
                  "type" : "string",
                  "description" : "Prisoner number",
                  "example" : "A1234BC"
                },
                "minItems" : 2,
                "uniqueItems" : true
              }
            }
          }
        },
        "responses" : {
          "400" : {
            "description" : "When fewer than two distinct prisoner numbers are provided or neither open nor closed non-associations are included",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the non-associations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NonAssociation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Any of the prisoners could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/{id}" : {
      "get" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Get a non-association between two prisoners by ID.",
        "description" : "Requires READ_NON_ASSOCIATIONS role.",
        "operationId" : "getNonAssociation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The non-association ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The non-association ID",
            "example" : 42
          },
          "example" : 42
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the non-association",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Non-association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Partial update of a non-association by ID.",
        "description" : "Requires WRITE_NON_ASSOCIATIONS role with write scope.",
        "operationId" : "patchNonAssociation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The non-association ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The non-association ID",
            "example" : 42
          },
          "example" : 42
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchNonAssociationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the NON_ASSOCIATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Non-association updated and returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NonAssociation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Non-association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subject-access-request" : {
      "get" : {
        "tags" : [ "Subject Access Request" ],
        "summary" : "Provides content for a prisoner to satisfy the needs of a subject access request on their behalf",
        "description" : "Requires role SAR_DATA_ACCESS or additional role as specified by hmpps.sar.additionalAccessRole configuration.",
        "operationId" : "getSarContentByReference",
        "parameters" : [ {
          "name" : "prn",
          "in" : "query",
          "description" : "NOMIS Prison Reference Number",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crn",
          "in" : "query",
          "description" : "nDelius Case Reference Number",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Optional parameter denoting minimum date of event occurrence which should be returned in the response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Optional parameter denoting maximum date of event occurrence which should be returned in the response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error occurred",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successfully processed - content found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HmppsSubjectAccessRequestContent"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successfully processed - no content found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "209" : {
            "description" : "Subject Identifier is not recognised by this service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "401" : {
            "description" : "The client does not have authorisation to make this request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}/{reportVariantId}" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiDataset",
        "parameters" : [ {
          "name" : "selectedPage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 1,
            "minimum" : 1
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 10,
            "minimum" : 1
          }
        }, {
          "name" : "sortColumn",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortedAsc",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "additionalProperties" : {
                      "type" : "object"
                    }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/{fieldId}" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiDynamicFilter",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 10,
            "minimum" : 1
          }
        }, {
          "name" : "sortedAsc",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "prefix",
          "in" : "query",
          "description" : "The value to match the start of the fieldId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Lond"
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The name of the schema field which will be used as a dynamic filter.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "name"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/count" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiCount",
        "parameters" : [ {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/queue-admin/get-dlq-messages/{dlqName}" : {
      "get" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "getDlqMessages",
        "parameters" : [ {
          "name" : "dlqName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "maxMessages",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonerNumber}/non-associations" : {
      "get" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "Get non-associations by prisoner number",
        "description" : "Requires READ_NON_ASSOCIATIONS role.",
        "operationId" : "getPrisonerNonAssociations",
        "parameters" : [ {
          "name" : "prisonerNumber",
          "in" : "path",
          "description" : "The offender prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The offender prisoner number",
            "example" : "A1234BC",
            "pattern" : "[a-zA-Z][0-9]{4}[a-zA-Z]{2}"
          },
          "example" : "A1234BC"
        }, {
          "name" : "includeOpen",
          "in" : "query",
          "description" : "Whether to include open non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Whether to include open non-associations or not",
            "example" : false
          },
          "example" : false
        }, {
          "name" : "includeClosed",
          "in" : "query",
          "description" : "Whether to include closed non-associations or not",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether to include closed non-associations or not",
            "example" : true
          },
          "example" : true
        }, {
          "name" : "includeOtherPrisons",
          "in" : "query",
          "description" : "Whether to include non-associations with prisoners in other prisons",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether to include non-associations with prisoners in other prisons",
            "example" : true
          },
          "example" : true
        }, {
          "name" : "sortBy",
          "in" : "query",
          "description" : "Sort non-associations by",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "WHEN_CREATED",
            "description" : "Sort non-associations by",
            "enum" : [ "WHEN_CREATED", "WHEN_UPDATED", "WHEN_CLOSED", "LAST_NAME", "FIRST_NAME", "PRISONER_NUMBER", "PRISON_ID", "PRISON_NAME", "CELL_LOCATION", "WHEN_CREATED", "WHEN_UPDATED", "WHEN_CLOSED", "LAST_NAME", "FIRST_NAME", "PRISONER_NUMBER", "PRISON_ID", "PRISON_NAME", "CELL_LOCATION" ],
            "example" : "LAST_NAME"
          },
          "example" : "LAST_NAME"
        }, {
          "name" : "sortDirection",
          "in" : "query",
          "description" : "Sort direction (fallback depends on sortBy)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "DESC",
            "description" : "Sort direction (fallback depends on sortBy)",
            "enum" : [ "ASC", "DESC", "ASC", "DESC" ],
            "example" : "DESC"
          },
          "example" : "DESC"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad request; for example including neither open nor closed non-associations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the NON_ASSOCIATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns non-association details for this prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerNonAssociations"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Any of the prisoners could not be found.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/legacy/api/non-associations/{id}" : {
      "get" : {
        "tags" : [ "Legacy non-associations-details" ],
        "summary" : "Get a non-association between two prisoners by ID in NOMIS/Prison API format",
        "description" : "Requires NON_ASSOCIATIONS_SYNC role.",
        "operationId" : "getLegacyById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The non-association ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The non-association ID",
            "example" : 42
          },
          "example" : 42
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Missing required role. Requires the NON_ASSOCIATIONS_SYNC role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the non-association",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegacyNonAssociation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Non-association not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/definitions" : {
      "get" : {
        "tags" : [ "Report Definition API" ],
        "description" : "Gets summaries of all report definitions",
        "operationId" : "definitions",
        "parameters" : [ {
          "name" : "renderMethod",
          "in" : "query",
          "description" : "Set this parameter to filter the list to only include reports for the given rendering method.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "HTML", "PDF", "SVG" ]
          },
          "example" : "HTML"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportDefinitionSummary"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/definitions/{reportId}/{variantId}" : {
      "get" : {
        "tags" : [ "Report Definition API" ],
        "description" : "Gets report definition containing a single variant.",
        "operationId" : "definition",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The ID of the report definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "external-movements"
        }, {
          "name" : "variantId",
          "in" : "path",
          "description" : "The ID of the variant definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "list"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleVariantReportDefinition"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/definitions/{dataProductDefinitionId}/dashboards/{dashboardId}" : {
      "get" : {
        "tags" : [ "Metric Definition API" ],
        "description" : "Gets the metric dashboard definition.",
        "operationId" : "dashboardDefinition",
        "parameters" : [ {
          "name" : "dataProductDefinitionId",
          "in" : "path",
          "description" : "The ID of the Data Product Definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "external-movements"
        }, {
          "name" : "dashboardId",
          "in" : "path",
          "description" : "The ID of the dashboard.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "dashboardId"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDefinition"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/constants" : {
      "get" : {
        "tags" : [ "Non-Associations" ],
        "summary" : "List codes and descriptions for enumerated field types",
        "operationId" : "constants",
        "responses" : {
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorResponse" : {
        "type" : "object",
        "description" : "Error response",
        "properties" : {
          "status" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "HTTP status code",
            "example" : 500
          },
          "userMessage" : {
            "type" : "string",
            "description" : "User message for the error",
            "example" : "No non-association found for ID `324234`"
          },
          "developerMessage" : {
            "type" : "string",
            "description" : "More detailed error message",
            "example" : "[Details, sometimes a stack trace]"
          },
          "errorCode" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "When present, uniquely identifies the type of error making it easier for clients to discriminate without relying on error description or HTTP status code; see `uk.gov.justice.digital.hmpps.hmppsnonassociationsapi.config.ErrorCode` enumeration in hmpps-non-associations-api",
            "example" : 101
          },
          "moreInfo" : {
            "type" : "string",
            "description" : "More information about the error",
            "example" : "[Rarely used, error-specific]"
          }
        },
        "required" : [ "developerMessage", "status", "userMessage" ]
      },
      "RetryDlqResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "messagesFoundCount" ]
      },
      "PurgeQueueResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "messagesFoundCount" ]
      },
      "ReopenNonAssociationRequest" : {
        "type" : "object",
        "description" : "Request to re-open a non-association",
        "properties" : {
          "reopenReason" : {
            "type" : "string",
            "description" : "Reason for re-opening the non-association",
            "example" : "Prisoners are fighting again",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "reopenedAt" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "now",
            "description" : "Date and time of the re-open, if not provided will default to today's time",
            "example" : "2023-06-07T10:30:00"
          },
          "reopenedBy" : {
            "type" : "string",
            "description" : "The username of the member of staff requesting the re-open, if not provided will use the user in the JWT access token",
            "example" : "AJONES",
            "maxLength" : 60,
            "minLength" : 1
          }
        },
        "required" : [ "reopenReason", "reopenedBy" ]
      },
      "NonAssociation" : {
        "type" : "object",
        "description" : "Non-association",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the non-association",
            "example" : 42
          },
          "firstPrisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number to not associate",
            "example" : "A1234BC"
          },
          "firstPrisonerRole" : {
            "type" : "string",
            "description" : "This prisoner’s role code in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "VICTIM"
          },
          "firstPrisonerRoleDescription" : {
            "type" : "string",
            "description" : "This prisoner’s role description in the non-association",
            "example" : "Victim"
          },
          "secondPrisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number to not associate",
            "example" : "D5678EF"
          },
          "secondPrisonerRole" : {
            "type" : "string",
            "description" : "Other prisoner’s role code in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "PERPETRATOR"
          },
          "secondPrisonerRoleDescription" : {
            "type" : "string",
            "description" : "Other prisoner’s role description in the non-association",
            "example" : "Perpetrator"
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason code why these prisoners should be kept apart",
            "enum" : [ "BULLYING", "GANG_RELATED", "ORGANISED_CRIME", "LEGAL_REQUEST", "THREAT", "VIOLENCE", "OTHER" ],
            "example" : "BULLYING"
          },
          "reasonDescription" : {
            "type" : "string",
            "description" : "Reason description why these prisoners should be kept apart",
            "example" : "Bullying"
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Location-based restriction code",
            "enum" : [ "CELL", "LANDING", "WING" ],
            "example" : "CELL"
          },
          "restrictionTypeDescription" : {
            "type" : "string",
            "description" : "Location-based restriction description",
            "example" : "Cell only"
          },
          "comment" : {
            "type" : "string",
            "description" : "Explanation of why prisoners are non-associated",
            "example" : "John and Luke always end up fighting"
          },
          "whenCreated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the non-association was created",
            "example" : "2021-12-31T12:34:56.789012"
          },
          "whenUpdated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the non-association was last updated",
            "example" : "2022-01-03T12:34:56.789012"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User ID of the person who last updated the non-association",
            "example" : "OFF3_GEN"
          },
          "isClosed" : {
            "type" : "boolean",
            "description" : "Whether the non-association is closed or is in effect",
            "example" : false
          },
          "closedBy" : {
            "type" : "string",
            "description" : "User ID of the person who closed the non-association. Only present when the non-association is closed, null for open non-associations",
            "example" : null
          },
          "closedReason" : {
            "type" : "string",
            "description" : "Reason why the non-association was closed. Only present when the non-association is closed, null for open non-associations",
            "example" : null
          },
          "closedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of when the non-association was closed. Only present when the non-association is closed, null for open non-associations",
            "example" : null
          },
          "isOpen" : {
            "type" : "boolean"
          }
        },
        "required" : [ "comment", "firstPrisonerNumber", "firstPrisonerRole", "firstPrisonerRoleDescription", "id", "isClosed", "isOpen", "reason", "reasonDescription", "restrictionType", "restrictionTypeDescription", "secondPrisonerNumber", "secondPrisonerRole", "secondPrisonerRoleDescription", "updatedBy", "whenCreated", "whenUpdated" ]
      },
      "CloseNonAssociationRequest" : {
        "type" : "object",
        "description" : "Request to close a non-association",
        "properties" : {
          "closedReason" : {
            "type" : "string",
            "description" : "Reason for closing the non-association",
            "example" : "They are friends now",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "closedAt" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "now",
            "description" : "Date and time of the closure, if not provided will default to today's time",
            "example" : "2023-06-07"
          },
          "closedBy" : {
            "type" : "string",
            "description" : "The username of the member of staff requesting the closure, if not provided will use the user in the JWT access token",
            "example" : "ASMITH",
            "maxLength" : 60,
            "minLength" : 1
          }
        },
        "required" : [ "closedReason" ]
      },
      "CreateNonAssociationRequest" : {
        "type" : "object",
        "description" : "Request format for creating a new, open, non-association between two prisoners",
        "properties" : {
          "firstPrisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number to not associate",
            "example" : "A1234BC",
            "maxLength" : 10,
            "pattern" : "[a-zA-Z][0-9]{4}[a-zA-Z]{2}"
          },
          "firstPrisonerRole" : {
            "type" : "string",
            "description" : "This prisoner’s role in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "VICTIM"
          },
          "secondPrisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number to not associate",
            "example" : "D5678EF",
            "maxLength" : 10,
            "pattern" : "[a-zA-Z][0-9]{4}[a-zA-Z]{2}"
          },
          "secondPrisonerRole" : {
            "type" : "string",
            "description" : "Other prisoner’s role in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "PERPETRATOR"
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason why these prisoners should be kept apart",
            "enum" : [ "BULLYING", "GANG_RELATED", "ORGANISED_CRIME", "LEGAL_REQUEST", "THREAT", "VIOLENCE", "OTHER" ],
            "example" : "BULLYING"
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Location-based restriction code",
            "enum" : [ "CELL", "LANDING", "WING" ],
            "example" : "CELL"
          },
          "comment" : {
            "type" : "string",
            "description" : "Explanation of why prisoners are non-associated",
            "example" : "John and Luke always end up fighting",
            "maxLength" : 2147483647,
            "minLength" : 1
          }
        },
        "required" : [ "comment", "firstPrisonerNumber", "firstPrisonerRole", "reason", "restrictionType", "secondPrisonerNumber", "secondPrisonerRole" ]
      },
      "DeleteNonAssociationRequest" : {
        "type" : "object",
        "description" : "Request to delete a non-association",
        "properties" : {
          "deletionReason" : {
            "type" : "string",
            "description" : "Reason for deleting the non-association",
            "example" : "Created in error and removed on requested from OMU team",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "staffUserNameRequestingDeletion" : {
            "type" : "string",
            "description" : "The username of the member of staff requesting the deletion",
            "example" : "AJONES",
            "maxLength" : 60,
            "minLength" : 1
          }
        },
        "required" : [ "deletionReason", "staffUserNameRequestingDeletion" ]
      },
      "PatchNonAssociationRequest" : {
        "type" : "object",
        "description" : "Request format for updating a non-association between two prisoners",
        "properties" : {
          "firstPrisonerRole" : {
            "type" : "string",
            "description" : "This prisoner’s role in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "VICTIM"
          },
          "secondPrisonerRole" : {
            "type" : "string",
            "description" : "Other prisoner’s role in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "PERPETRATOR"
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason why these prisoners should be kept apart",
            "enum" : [ "BULLYING", "GANG_RELATED", "ORGANISED_CRIME", "LEGAL_REQUEST", "THREAT", "VIOLENCE", "OTHER" ],
            "example" : "BULLYING"
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Location-based restriction code",
            "enum" : [ "CELL", "LANDING", "WING" ],
            "example" : "CELL"
          },
          "comment" : {
            "type" : "string",
            "description" : "Explanation of why prisoners are non-associated",
            "example" : "John and Luke always end up fighting",
            "maxLength" : 2147483647,
            "minLength" : 1
          }
        }
      },
      "HmppsSubjectAccessRequestContent" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "type" : "object",
            "description" : "The content of the subject access request response"
          }
        },
        "required" : [ "content" ]
      },
      "Count" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The total number of records",
            "example" : 501
          }
        },
        "required" : [ "count" ]
      },
      "DlqMessage" : {
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object"
            }
          },
          "messageId" : {
            "type" : "string"
          }
        },
        "required" : [ "body", "messageId" ]
      },
      "GetDlqResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messagesReturnedCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DlqMessage"
            }
          }
        },
        "required" : [ "messages", "messagesFoundCount", "messagesReturnedCount" ]
      },
      "OtherPrisonerDetails" : {
        "type" : "object",
        "description" : "Other prisoner’s details for an item in a list of non-associations",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number",
            "example" : "D5678EF"
          },
          "role" : {
            "type" : "string",
            "description" : "Other prisoner’s role code in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "PERPETRATOR"
          },
          "roleDescription" : {
            "type" : "string",
            "description" : "Other prisoner’s role description in the non-association",
            "example" : "Perpetrator"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name",
            "example" : "Joseph"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name",
            "example" : "Bloggs"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "ID of the prison the prisoner is assigned to",
            "example" : "MDI"
          },
          "prisonName" : {
            "type" : "string",
            "description" : "Name of the prison the prisoner is assigned to",
            "example" : "Moorland (HMP & YOI)"
          },
          "cellLocation" : {
            "type" : "string",
            "description" : "Cell the prisoner is assigned to",
            "example" : "B-2-007"
          }
        },
        "required" : [ "firstName", "lastName", "prisonerNumber", "role", "roleDescription" ]
      },
      "PrisonerNonAssociation" : {
        "type" : "object",
        "description" : "An item in a list of non-associations for a given prisoner",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the non-association",
            "example" : 42
          },
          "role" : {
            "type" : "string",
            "description" : "This prisoner’s role code in the non-association",
            "enum" : [ "VICTIM", "PERPETRATOR", "NOT_RELEVANT", "UNKNOWN" ],
            "example" : "VICTIM"
          },
          "roleDescription" : {
            "type" : "string",
            "description" : "This prisoner’s role description in the non-association",
            "example" : "Victim"
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason code why these prisoners should be kept apart",
            "enum" : [ "BULLYING", "GANG_RELATED", "ORGANISED_CRIME", "LEGAL_REQUEST", "THREAT", "VIOLENCE", "OTHER" ],
            "example" : "BULLYING"
          },
          "reasonDescription" : {
            "type" : "string",
            "description" : "Reason description why these prisoners should be kept apart",
            "example" : "Bullying"
          },
          "restrictionType" : {
            "type" : "string",
            "description" : "Location-based restriction code",
            "enum" : [ "CELL", "LANDING", "WING" ],
            "example" : "CELL"
          },
          "restrictionTypeDescription" : {
            "type" : "string",
            "description" : "Location-based restriction description",
            "example" : "Cell only"
          },
          "comment" : {
            "type" : "string",
            "description" : "Explanation of why prisoners are non-associated",
            "example" : "John and Luke always end up fighting"
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "User ID of the person who created the non-association. NOTE: For records migrated from NOMIS/Prison API this is free text and may not be a valid User ID. Additionally, migrated records might use an internal system username. It can be an empty string",
            "example" : "OFF3_GEN"
          },
          "whenCreated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the non-association was created",
            "example" : "2021-12-31T12:34:56.789012"
          },
          "whenUpdated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the non-association was last updated",
            "example" : "2022-01-03T12:34:56.789012"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "User ID of the person who last updated the non-association",
            "example" : "OFF3_GEN"
          },
          "isClosed" : {
            "type" : "boolean",
            "description" : "Whether the non-association is closed or is in effect",
            "example" : false
          },
          "closedBy" : {
            "type" : "string",
            "description" : "User ID of the person who closed the non-association. Only present when the non-association is closed, null for open non-associations",
            "example" : null
          },
          "closedReason" : {
            "type" : "string",
            "description" : "Reason why the non-association was closed. Only present when the non-association is closed, null for open non-associations",
            "example" : null
          },
          "closedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of when the non-association was closed. Only present when the non-association is closed, null for open non-associations",
            "example" : null
          },
          "otherPrisonerDetails" : {
            "$ref" : "#/components/schemas/OtherPrisonerDetails",
            "description" : "Details about the other person in the non-association."
          },
          "isOpen" : {
            "type" : "boolean"
          }
        },
        "required" : [ "authorisedBy", "comment", "id", "isClosed", "isOpen", "otherPrisonerDetails", "reason", "reasonDescription", "restrictionType", "restrictionTypeDescription", "role", "roleDescription", "updatedBy", "whenCreated", "whenUpdated" ]
      },
      "PrisonerNonAssociations" : {
        "type" : "object",
        "description" : "List of non-associations for a given prisoner",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner number",
            "example" : "A1234BC"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name",
            "example" : "James"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name",
            "example" : "Hall"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "ID of the prison the prisoner is assigned to",
            "example" : "MDI"
          },
          "prisonName" : {
            "type" : "string",
            "description" : "Name of the prison the prisoner is assigned to",
            "example" : "Moorland (HMP & YOI)"
          },
          "cellLocation" : {
            "type" : "string",
            "description" : "Cell the prisoner is assigned to",
            "example" : "A-1-002"
          },
          "openCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of open non-associations (follows includeOtherPrisons filter)",
            "example" : 1,
            "minimum" : 0
          },
          "closedCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of closed non-associations (follows includeOtherPrisons filter)",
            "example" : 0,
            "minimum" : 0
          },
          "nonAssociations" : {
            "type" : "array",
            "description" : "Non-associations with other prisoners",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerNonAssociation"
            }
          }
        },
        "required" : [ "closedCount", "firstName", "lastName", "nonAssociations", "openCount", "prisonerNumber" ]
      },
      "PageNonAssociation" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NonAssociation"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageableObject" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        }
      },
      "SortObject" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          }
        }
      },
      "LegacyNonAssociation" : {
        "type" : "object",
        "description" : "Non-association in NOMIS/Prison API format",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the non-association",
            "example" : 42
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "Prisoner number",
            "example" : "A1234BC"
          },
          "reasonCode" : {
            "type" : "string",
            "description" : "Reason code for the non-association",
            "enum" : [ "BUL", "PER", "RIV", "VIC", "NOT_REL", "UNKNOWN" ],
            "example" : "VIC"
          },
          "reasonDescription" : {
            "type" : "string",
            "description" : "Reason for the non-association",
            "example" : "Victim"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "The non-association type code",
            "enum" : [ "CELL", "LAND", "WING" ],
            "example" : "WING"
          },
          "typeDescription" : {
            "type" : "string",
            "description" : "The non-association type description",
            "example" : "Do Not Locate on Same Wing"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the non-association is effective from. In Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example" : "2021-07-05T00:00:00"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the non-association expires. In Europe/London (ISO 8601) format without timezone offset e.g. YYYY-MM-DDTHH:MM:SS.",
            "example" : "2021-07-05T00:00:00"
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "The person who authorised the non-association (free text).",
            "example" : "Officer Alice B."
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional free text comments related to the non-association.",
            "example" : "Mr. Bloggs assaulted Mr. Hall"
          },
          "offenderNonAssociation" : {
            "$ref" : "#/components/schemas/LegacyNonAssociationOtherPrisonerDetails",
            "description" : "Details about the other non-association person"
          }
        },
        "required" : [ "comments", "effectiveDate", "id", "offenderNo", "offenderNonAssociation", "reasonCode", "reasonDescription", "typeCode", "typeDescription" ]
      },
      "LegacyNonAssociationOtherPrisonerDetails" : {
        "type" : "object",
        "description" : "Details about the other non-association person in NOMIS/Prison API format",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "Prisoner number",
            "example" : "B1234CD"
          },
          "reasonCode" : {
            "type" : "string",
            "description" : "Reason code for the non-association",
            "enum" : [ "BUL", "PER", "RIV", "VIC", "NOT_REL", "UNKNOWN" ],
            "example" : "PER"
          },
          "reasonDescription" : {
            "type" : "string",
            "description" : "Reason for the non-association",
            "example" : "Perpetrator"
          }
        },
        "required" : [ "offenderNo", "reasonCode", "reasonDescription" ]
      },
      "DashboardDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        },
        "required" : [ "description", "id", "name" ]
      },
      "ReportDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VariantDefinitionSummary"
            }
          },
          "dashboards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardDefinitionSummary"
            }
          },
          "authorised" : {
            "type" : "boolean"
          }
        },
        "required" : [ "authorised", "id", "name", "variants" ]
      },
      "VariantDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        },
        "required" : [ "id", "name" ]
      },
      "ChildVariantDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "specification" : {
            "$ref" : "#/components/schemas/Specification"
          },
          "joinFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "id", "joinFields", "name", "resourceName" ]
      },
      "DynamicFilterOption" : {
        "type" : "object",
        "properties" : {
          "minimumLength" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "FieldDefinition" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "wordWrap" : {
            "type" : "string",
            "enum" : [ "none", "normal", "break-words" ]
          },
          "filter" : {
            "$ref" : "#/components/schemas/FilterDefinition"
          },
          "sortable" : {
            "type" : "boolean"
          },
          "defaultsort" : {
            "type" : "boolean"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "boolean", "date", "double", "HTML", "long", "string", "time" ]
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "visible" : {
            "type" : "boolean"
          },
          "calculated" : {
            "type" : "boolean"
          },
          "header" : {
            "type" : "boolean"
          }
        },
        "required" : [ "calculated", "defaultsort", "display", "header", "mandatory", "name", "sortable", "type", "visible" ]
      },
      "FilterDefinition" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Radio", "Select", "multiselect", "daterange", "autocomplete", "text", "date", "granulardaterange" ]
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "pattern" : {
            "type" : "string"
          },
          "staticOptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilterOption"
            }
          },
          "dynamicOptions" : {
            "$ref" : "#/components/schemas/DynamicFilterOption"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "min" : {
            "type" : "string"
          },
          "max" : {
            "type" : "string"
          },
          "interactive" : {
            "type" : "boolean"
          },
          "defaultGranularity" : {
            "type" : "string",
            "enum" : [ "hourly", "daily", "weekly", "monthly", "quarterly", "annually" ]
          },
          "defaultQuickFilterValue" : {
            "type" : "string",
            "enum" : [ "today", "yesterday", "last-seven-days", "last-thirty-days", "last-month", "last-full-month", "last-ninety-days", "last-three-months", "last-full-three-months", "last-year", "last-full-year", "tomorrow", "next-seven-days", "next-thirty-days", "next-month", "next-full-month", "next-ninety-days", "next-three-months", "next-full-three-months", "next-year", "next-full-year" ]
          }
        },
        "required" : [ "mandatory", "type" ]
      },
      "FilterOption" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          }
        },
        "required" : [ "display", "name" ]
      },
      "ReportSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "template" : {
            "type" : "string",
            "enum" : [ "table-header", "table-footer", "section-header", "section-footer", "page-header", "page-footer" ]
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SummaryField"
            }
          }
        },
        "required" : [ "fields", "id", "template" ]
      },
      "SingleVariantReportDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "variant" : {
            "$ref" : "#/components/schemas/VariantDefinition"
          }
        },
        "required" : [ "id", "name", "variant" ]
      },
      "Specification" : {
        "type" : "object",
        "properties" : {
          "template" : {
            "type" : "string",
            "enum" : [ "list", "list-section", "list-tab", "summary", "summary-section", "parent-child" ]
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "fields", "sections", "template" ]
      },
      "SummaryField" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "boolean", "date", "double", "HTML", "long", "string", "time" ]
          },
          "header" : {
            "type" : "boolean"
          },
          "mergeRows" : {
            "type" : "boolean"
          }
        },
        "required" : [ "name" ]
      },
      "VariantDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "specification" : {
            "$ref" : "#/components/schemas/Specification"
          },
          "classification" : {
            "type" : "string"
          },
          "printable" : {
            "type" : "boolean"
          },
          "summaries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportSummary"
            }
          },
          "interactive" : {
            "type" : "boolean"
          },
          "childVariants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChildVariantDefinition"
            }
          }
        },
        "required" : [ "id", "name", "resourceName" ]
      },
      "DashboardDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardSectionDefinition"
            }
          },
          "filterFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          }
        },
        "required" : [ "description", "id", "name", "sections" ]
      },
      "DashboardSectionDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "visualisations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationDefinition"
            }
          }
        },
        "required" : [ "id", "visualisations" ]
      },
      "DashboardVisualisationColumnDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "aggregate" : {
            "type" : "string",
            "enum" : [ "sum", "average" ]
          },
          "unit" : {
            "type" : "string",
            "enum" : [ "NUMBER", "PERCENTAGE" ]
          },
          "displayValue" : {
            "type" : "boolean"
          },
          "axis" : {
            "type" : "string"
          }
        },
        "required" : [ "display", "id" ]
      },
      "DashboardVisualisationColumnsDefinition" : {
        "type" : "object",
        "properties" : {
          "keys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationColumnDefinition"
            }
          },
          "measures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationColumnDefinition"
            }
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ValueVisualisationColumnDefinition"
            }
          },
          "expectNulls" : {
            "type" : "boolean"
          }
        },
        "required" : [ "expectNulls", "measures" ]
      },
      "DashboardVisualisationDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "list", "doughnut", "bar", "bar-timeseries", "line", "scorecard", "scorecard-group" ]
          },
          "display" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "columns" : {
            "$ref" : "#/components/schemas/DashboardVisualisationColumnsDefinition"
          }
        },
        "required" : [ "columns", "id", "type" ]
      },
      "ValueVisualisationColumnDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "equals" : {
            "type" : "string"
          }
        },
        "required" : [ "equals", "id" ]
      },
      "Constant" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        },
        "required" : [ "code", "description" ]
      }
    },
    "securitySchemes" : {
      "bearer-jwt" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "hmpps-auth" : {
        "type" : "oauth2",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://sign-in.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes" : {
              "read" : "Allows read of data",
              "write" : "Allows write of data"
            }
          },
          "authorizationCode" : {
            "authorizationUrl" : "https://sign-in.hmpps.service.justice.gov.uk/auth/oauth/authorize",
            "tokenUrl" : "https://sign-in.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes" : {
              "read" : "Allows read of data",
              "write" : "Allows write of data"
            }
          }
        }
      }
    }
  }
}