{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "NOMIS Synchronisation API",
    "description" : "Controls writing Prisoner information back to NOMIS for data synchronisation (not intended for general usage)",
    "contact" : {
      "name" : "HMPPS Digital Studio",
      "email" : "feedback@digital.justice.gov.uk"
    },
    "version" : "2025-08-12.391.cedb0b0"
  },
  "servers" : [ {
    "url" : "https://nomis-prisoner-api-dev.prison.service.justice.gov.uk",
    "description" : "Development"
  }, {
    "url" : "https://nomis-prisoner-api-preprod.prison.service.justice.gov.uk",
    "description" : "PreProd"
  }, {
    "url" : "https://nomis-prisoner-api.prison.service.justice.gov.uk",
    "description" : "Prod"
  }, {
    "url" : "http://localhost:8080",
    "description" : "Local"
  } ],
  "security" : [ {
    "bearer-jwt" : [ "read", "write" ]
  } ],
  "paths" : {
    "/sentence-adjustments/{adjustmentId}" : {
      "get" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "get specific sentence adjustment",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id",
        "operationId" : "getSentenceAdjustment",
        "parameters" : [ {
          "name" : "adjustmentId",
          "in" : "path",
          "description" : "Sentence adjustment id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence adjustment id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the sentence adjustment details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentenceAdjustmentResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjustment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "Updates specific sentence adjustment. The related booking and sentence can not be changed",
        "description" : "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId" : "updateSentenceAdjustment",
        "parameters" : [ {
          "name" : "adjustmentId",
          "in" : "path",
          "description" : "Sentence adjustment id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence adjustment id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateSentenceAdjustmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the sentence adjustment has been updated"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "deletes specific sentence adjustment",
        "description" : "Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id",
        "operationId" : "deleteSentenceAdjustment",
        "parameters" : [ {
          "name" : "adjustmentId",
          "in" : "path",
          "description" : "Sentence adjustment id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence adjustment id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "204" : {
            "description" : "the sentence adjustment has been deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{courseScheduleId}/booking/{bookingId}/attendance" : {
      "put" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Creates or updates an attendance record",
        "description" : "Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId" : "upsertAttendance",
        "parameters" : [ {
          "name" : "courseScheduleId",
          "in" : "path",
          "description" : "Course schedule id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course schedule id"
          }
        }, {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertAttendanceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Attendance updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertAttendanceResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Deletes an attendance record",
        "description" : "Deletes an attendance for the course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId" : "deleteAttendance",
        "parameters" : [ {
          "name" : "courseScheduleId",
          "in" : "path",
          "description" : "Course schedule id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course schedule id"
          }
        }, {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Attendance deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonNumber}/visit-balance" : {
      "get" : {
        "tags" : [ "visit-balance-resource" ],
        "summary" : "Get visit order balance data for a prisoner",
        "description" : "Retrieves visit order balance details for a prisoner. Requires ROLE_NOMIS_VISIT_BALANCE",
        "operationId" : "getVisitBalanceForPrisoner",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "Prison number aka Offender No.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison number aka Offender No.",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "responses" : {
          "200" : {
            "description" : "Visit balance returned or null if no visit balance exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VisitBalanceResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "visit-balance-resource" ],
        "summary" : "Updates a visit order balance for an offender",
        "description" : "Updates a visit order balance on the prisoner's latest booking or creates one if it doesn't already exist. Requires ROLE_NOMIS_VISIT_BALANCE",
        "operationId" : "updateVisitBalance",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "Offender no (aka prisoner number)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no (aka prisoner number)",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateVisitBalanceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Visit balance updated"
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}" : {
      "put" : {
        "tags" : [ "visit-resource" ],
        "summary" : "Updates an existing visit",
        "description" : "Updates details of an existing visit such as the visitors and time slot",
        "operationId" : "updateVisit",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender Noms Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender Noms Id",
            "example" : "A1234ZZ",
            "pattern" : "[A-Z]\\d{4}[A-Z]{2}"
          },
          "example" : "A1234ZZ"
        }, {
          "name" : "visitId",
          "in" : "path",
          "description" : "Nomis visit Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Nomis visit Id",
            "example" : 123456
          },
          "example" : 123456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateVisitRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Visit information updated"
          },
          "400" : {
            "description" : "Person ids do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "offenderNo or visits id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}/cancel" : {
      "put" : {
        "tags" : [ "visit-resource" ],
        "summary" : "Cancel a visit",
        "operationId" : "cancelVisit",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender Noms Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender Noms Id",
            "example" : "A1234ZZ",
            "pattern" : "[A-Z]\\d{4}[A-Z]{2}"
          },
          "example" : "A1234ZZ"
        }, {
          "name" : "visitId",
          "in" : "path",
          "description" : "Nomis Visit Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Nomis Visit Id"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CancelVisitRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Visit cancelled"
          },
          "400" : {
            "description" : "Invalid cancellation reason",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "VSIP visit id not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances/{eventId}" : {
      "put" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Updates Court Appearance",
        "description" : "Required role NOMIS_SENTENCING Updates a new Court Appearance for the offender and given Court Case",
        "operationId" : "updateCourtAppearance",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AB1234A"
          },
          "example" : "AB1234A"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 34565
          },
          "example" : 34565
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Case appearance Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case appearance Id",
            "example" : 34565
          },
          "example" : 34565
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CourtAppearanceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Court Appearance updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCourtAppearanceResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Court appearance does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Deletes Court Appearance",
        "description" : "Required role NOMIS_SENTENCING Deletes s Court Appearance for the offender.",
        "operationId" : "deleteCourtAppearance",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AB1234A"
          },
          "example" : "AB1234A"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 34565
          },
          "example" : 34565
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Case appearance Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case appearance Id",
            "example" : 34565
          },
          "example" : 34565
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CourtAppearanceRequest"
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "description" : "Court Appearance deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances/{courtEventId}/charges/{chargeId}" : {
      "put" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Updates Charge",
        "description" : "Required role NOMIS_SENTENCING Updates a Court Event Charge for the offender and given Appearance and Court Case (latest booking)",
        "operationId" : "updateCharge",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AB1234A"
          },
          "example" : "AB1234A"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 34565
          },
          "example" : 34565
        }, {
          "name" : "chargeId",
          "in" : "path",
          "description" : "Charge Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Charge Id",
            "example" : 34565
          },
          "example" : 34565
        }, {
          "name" : "courtEventId",
          "in" : "path",
          "description" : "Court event Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Court event Id",
            "example" : 34565
          },
          "example" : 34565
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OffenderChargeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Offender Charge updated"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Court case does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentences/recall" : {
      "put" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Updates Recalls Sentences",
        "description" : "Required role NOMIS_SENTENCING Recalls sentences for the offender",
        "operationId" : "updateRecallSentences",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRecallRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Recall Sentences updated"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "One or more sentence does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Recalls Sentences by convert the specified sentences to the requested recall sentence",
        "description" : "Required role NOMIS_SENTENCING Recalls sentences for the offender",
        "operationId" : "convertToRecallSentences",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConvertToRecallRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Sentences converted to recall",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ConvertToRecallResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "One or more sentence does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentences/recall/restore-previous" : {
      "put" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Deletes Recalls Sentences and replaces with previous recall sentence",
        "description" : "Required role NOMIS_SENTENCING replaces recall sentences for the offender",
        "operationId" : "revertRecallSentences",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RevertRecallRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Recall Sentences deleted and replaced with previous recall sentences"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "One or more sentence does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentences/recall/restore-original" : {
      "put" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Deletes Recalls Sentences and replaces with original sentence",
        "description" : "Required role NOMIS_SENTENCING replaces recall sentences for the offender",
        "operationId" : "deleteRecallSentences",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeleteRecallRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Recall Sentences deleted and replaced with original sentences"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "One or more sentence does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/restriction/{prisonerRestrictionId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a prisoner restriction",
        "description" : "Updates a prisoner restriction. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePrisonerRestriction",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No aka prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No aka prisoner number",
            "example" : "A1234KT"
          },
          "example" : "A1234KT"
        }, {
          "name" : "prisonerRestrictionId",
          "in" : "path",
          "description" : "Prisoner restriction Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Prisoner restriction Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePrisonerRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Prisoner Restriction Updated"
          },
          "400" : {
            "description" : "The request contains bad data or the restriction does not belong to the prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner or Restriction does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a prisoner restriction",
        "description" : "Deletes a prisoner restriction. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePrisonerRestriction",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No aka prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No aka prisoner number",
            "example" : "A1234KT"
          },
          "example" : "A1234KT"
        }, {
          "name" : "prisonerRestrictionId",
          "in" : "path",
          "description" : "Prisoner restriction Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Prisoner restriction Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "204" : {
            "description" : "Prisoner Restriction Deleted"
          },
          "400" : {
            "description" : "The restriction does not belong to the prisoner",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/profile-details" : {
      "get" : {
        "tags" : [ "profile-details-resource" ],
        "summary" : "Get profile details for a prisoner",
        "description" : "Retrieves profile details for a prisoner and all of their aliases and bookings. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getProfileDetails",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender number",
            "example" : "A1234AA"
          },
          "example" : "A1234AA"
        }, {
          "name" : "profileTypes",
          "in" : "query",
          "description" : "Profile types",
          "required" : false,
          "schema" : {
            "type" : "array",
            "description" : "Profile types",
            "example" : "HAIR",
            "items" : {
              "type" : "string",
              "description" : "Profile types",
              "example" : "HAIR"
            }
          },
          "example" : "HAIR"
        }, {
          "name" : "bookingId",
          "in" : "query",
          "description" : "Booking ID",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking ID",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "latestBookingOnly",
          "in" : "query",
          "description" : "Latest booking only?",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "description" : "Latest booking only?",
            "example" : true
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Profile Details Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerProfileDetailsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "profile-details-resource" ],
        "summary" : "Upsert profile details for a prisoner",
        "description" : "Upserts profile details on the latest booking for a prisoner, if it exists. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "upsertPhysicalAttributes",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender number",
            "example" : "A1234AA"
          },
          "example" : "A1234AA"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertProfileDetailsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Physical Attributes Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertProfileDetailsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist or has no bookings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/court-cases/{caseId}/sentences/{sequence}" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get sentences for an offender using the given case.booking id and sentence sequence",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId" : "getOffenderSentence",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 4565456
          },
          "example" : 4565456
        }, {
          "name" : "sequence",
          "in" : "path",
          "description" : "Sentence sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "the sentence details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentenceResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender booking not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Updates Sentence",
        "description" : "Required role NOMIS_SENTENCING Updates a Sentence for the offender and case",
        "operationId" : "updateSentence",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 4565456
          },
          "example" : 4565456
        }, {
          "name" : "sequence",
          "in" : "path",
          "description" : "Sentence sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSentenceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Sentence updated"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Sentence does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "deletes a specific sentence",
        "description" : "Requires role NOMIS_SENTENCING. Deletes a sentence by case.booking and sentence sequence",
        "operationId" : "deleteSentence",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 4565456
          },
          "example" : 4565456
        }, {
          "name" : "sequence",
          "in" : "path",
          "description" : "Sentence sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "204" : {
            "description" : "the sentence has been deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/court-cases/{caseId}/sentences/{sentenceSequence}/sentence-terms/{termSequence}" : {
      "put" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Updates Sentence Term",
        "description" : "Required role NOMIS_SENTENCING Updates a Sentence Term for the offender",
        "operationId" : "updateSentenceTerm",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 4565456
          },
          "example" : 4565456
        }, {
          "name" : "sentenceSequence",
          "in" : "path",
          "description" : "Sentence sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "example" : 1
          },
          "example" : 1
        }, {
          "name" : "termSequence",
          "in" : "path",
          "description" : "term sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "term sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSentenceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Sentence updated"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Sentence term does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "deletes a specific sentence",
        "description" : "Requires role NOMIS_SENTENCING. Deletes a sentence by case.booking, sentence sequence and term sequence",
        "operationId" : "deleteSentenceTerm",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 4565456
          },
          "example" : 4565456
        }, {
          "name" : "sentenceSequence",
          "in" : "path",
          "description" : "Sentence sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "example" : 1
          },
          "example" : 1
        }, {
          "name" : "termSequence",
          "in" : "path",
          "description" : "Term sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Term sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "204" : {
            "description" : "the sentence term has been deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/alerts/{alertSequence}" : {
      "get" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "get an alert by bookingId and alert sequence",
        "description" : "Retrieves an prisoner alert. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "getAlert",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "alertSequence",
          "in" : "path",
          "description" : "Alert sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Alert sequence",
            "example" : 3
          },
          "example" : 3
        } ],
        "responses" : {
          "200" : {
            "description" : "Alert Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlertResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Updates an alert on a prisoner",
        "description" : "Updates an alert on the specified prisoner's booking which should be the latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "updateAlert",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id",
            "example" : 1234567
          },
          "example" : 1234567
        }, {
          "name" : "alertSequence",
          "in" : "path",
          "description" : "Alert sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Alert sequence",
            "example" : 3
          },
          "example" : 3
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateAlertRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Alert Updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AlertResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Deletes an alert by bookingId and alert sequence",
        "description" : "Deletes an prisoner alert. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "deleteAlert",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "alertSequence",
          "in" : "path",
          "description" : "Alert sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Alert sequence",
            "example" : 3
          },
          "example" : 3
        } ],
        "responses" : {
          "204" : {
            "description" : "Alert Deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Get a person by person Id",
        "description" : "Retrieves a person and related contacts. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getPerson",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Person Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person",
        "description" : "Updates core person data but leaves any associated data e.g contact relationships, addresses. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePerson",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Updated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person",
        "description" : "Deletes a person and any associated data e.g contact relationships, addresses. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePerson",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "204" : {
            "description" : "Person Deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/restriction/{personRestrictionId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a global person restriction",
        "description" : "Updates a person restriction; the restriction is estate wide. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonRestriction",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "personRestrictionId",
          "in" : "path",
          "description" : "Person restrictions Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person restrictions Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateContactPersonRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "The request contains bad data for example restriction type does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Restriction or Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a global person restriction",
        "description" : "Deletes a person restriction; the restriction is estate wide. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonRestriction",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "personRestrictionId",
          "in" : "path",
          "description" : "Person restrictions Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person restrictions Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Restrictions exists but not for this person",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/persons/{personId}/phone/{phoneId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updated a person global phone",
        "description" : "Updates a person global phone in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonPhone",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Phone Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Phone Id",
            "example" : 35355
          },
          "example" : 35355
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Phone ID Updated"
          },
          "400" : {
            "description" : "Invalid request data, e.g type is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or phone does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deleted a person global phone",
        "description" : "Deletes a person global phone in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonPhone",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Phone Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Phone Id",
            "example" : 35355
          },
          "example" : 35355
        } ],
        "responses" : {
          "204" : {
            "description" : "Person Phone ID Deleted"
          },
          "400" : {
            "description" : "Phone exists but not for this person",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/identifier/{sequence}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person identifier",
        "description" : "Updates a person identifier in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonIdentifier",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "sequence",
          "in" : "path",
          "description" : "Identifier sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Identifier sequence",
            "example" : 4
          },
          "example" : 4
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonIdentifierRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Identifier updated"
          },
          "400" : {
            "description" : "Invalid request data, e.g type is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or identifier does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person identifier",
        "description" : "Deletes a person identifier in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonIdentifier",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "sequence",
          "in" : "path",
          "description" : "Identifier sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Identifier sequence",
            "example" : 4
          },
          "example" : 4
        } ],
        "responses" : {
          "204" : {
            "description" : "Person Identifier deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/employment/{sequence}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person employment",
        "description" : "Updates a person employment in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonEmployment",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "sequence",
          "in" : "path",
          "description" : "Employment sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Employment sequence",
            "example" : 4
          },
          "example" : 4
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonEmploymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Employment updated"
          },
          "400" : {
            "description" : "Invalid request data, e.g type is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or employment does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person employment",
        "description" : "Deletes a person employment in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonEmployment",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "sequence",
          "in" : "path",
          "description" : "Employment sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Employment sequence",
            "example" : 4
          },
          "example" : 4
        } ],
        "responses" : {
          "204" : {
            "description" : "Person Employment deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/email/{emailAddressId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person email",
        "description" : "Updates a person email in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonEmail",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "emailAddressId",
          "in" : "path",
          "description" : "Email address Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Email address Id",
            "example" : 76554
          },
          "example" : 76554
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Email ID aka InternetAddressId Update"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or email address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person email",
        "description" : "Deletes a person email in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonEmail",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "emailAddressId",
          "in" : "path",
          "description" : "Email address Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Email address Id",
            "example" : 76554
          },
          "example" : 76554
        } ],
        "responses" : {
          "204" : {
            "description" : "Person Email ID aka InternetAddressId Delete"
          },
          "400" : {
            "description" : "The email exist but not for this person",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or email address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/contact/{contactId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person contact",
        "description" : "Updates a person contact; the relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonContact",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Contact Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contact Id",
            "example" : 75675
          },
          "example" : 75675
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Contact Updated"
          },
          "400" : {
            "description" : "The request contains bad for example prisoner does not exist or contact / relationship types do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or contact does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Contact with the specified relationship and type already exists for this prisoner's latest booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person contact",
        "description" : "Deletes a person contact; the relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonContact",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Contact Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contact Id",
            "example" : 75675
          },
          "example" : 75675
        } ],
        "responses" : {
          "204" : {
            "description" : "Person Contact Updated, returned if in contact does not exist"
          },
          "400" : {
            "description" : "Contact does belong to person",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/contact/{contactId}/restriction/{contactRestrictionId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person contact restriction for a specific relationship",
        "description" : "Updates a person contact restriction; the restriction is for a specific relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonContactRestriction",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Contact Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contact Id",
            "example" : 67899
          },
          "example" : 67899
        }, {
          "name" : "contactRestrictionId",
          "in" : "path",
          "description" : "Restriction Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Restriction Id",
            "example" : 38383
          },
          "example" : 38383
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateContactPersonRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "The request contains bad data for example restriction type does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or contact or restriction does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person contact restriction for a specific relationship",
        "description" : "Deletes a person contact restriction; the restriction is for a specific relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonContactRestriction",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Contact Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contact Id",
            "example" : 67899
          },
          "example" : 67899
        }, {
          "name" : "contactRestrictionId",
          "in" : "path",
          "description" : "Restriction Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Restriction Id",
            "example" : 38383
          },
          "example" : 38383
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content"
          },
          "400" : {
            "description" : "The personId, ContactId or restrictionId exist but on other relationships",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/address/{addressId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person address",
        "description" : "Updates a person address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatePersonAddress",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "addressId",
          "in" : "path",
          "description" : "Address Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Address Id",
            "example" : 47474
          },
          "example" : 47474
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Address Updated"
          },
          "400" : {
            "description" : "The request contains bad for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person address",
        "description" : "Deletes a person address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletePersonAddress",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "addressId",
          "in" : "path",
          "description" : "Address Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Address Id",
            "example" : 47474
          },
          "example" : 47474
        } ],
        "responses" : {
          "202" : {
            "description" : "Person Address Deleted"
          },
          "400" : {
            "description" : "The address exist but not for this person",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/persons/{personId}/address/{addressId}/phone/{phoneId}" : {
      "put" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Updates a person address phone",
        "description" : "Updates a person phone associated with an address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updatedPersonAddressPhone",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "addressId",
          "in" : "path",
          "description" : "Address Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Address Id",
            "example" : 56789
          },
          "example" : 56789
        }, {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Phone Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Phone Id",
            "example" : 585850
          },
          "example" : 585850
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePersonPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Person Phone ID Updates"
          },
          "400" : {
            "description" : "Invalid request data, e.g type is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Deletes a person address phone",
        "description" : "Deletes a person phone associated with an address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deletedPersonAddressPhone",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "addressId",
          "in" : "path",
          "description" : "Address Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Address Id",
            "example" : 56789
          },
          "example" : 56789
        }, {
          "name" : "phoneId",
          "in" : "path",
          "description" : "Phone Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Phone Id",
            "example" : 585850
          },
          "example" : 585850
        } ],
        "responses" : {
          "204" : {
            "description" : "Person Phone ID Deletes"
          },
          "400" : {
            "description" : "Phone exists but not for this address or address exists but not for this person",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}" : {
      "put" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "Updates an existing non-association",
        "description" : "Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId" : "updateNonAssociation",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A3456GH"
        }, {
          "name" : "nsOffenderNo",
          "in" : "path",
          "description" : "Non-association offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A4578ED"
        }, {
          "name" : "typeSequence",
          "in" : "path",
          "description" : "Sequence number. Amend this specific detail record",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateNonAssociationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Successfully amended non-association"
          },
          "404" : {
            "description" : "Non-association does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data such as reason or type do not exist etc.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "Deletes a non-association",
        "description" : "Deletes the specified non-association detail record. if there was only one, the parent NA record is deleted too. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId" : "deleteNonAssociation",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A3456GH"
        }, {
          "name" : "nsOffenderNo",
          "in" : "path",
          "description" : "Non-association offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A4578ED"
        }, {
          "name" : "typeSequence",
          "in" : "path",
          "description" : "Sequence number. Close this specific detail record",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Non-association does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}/close" : {
      "put" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "Closes an existing non-association",
        "description" : "Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId" : "closeNonAssociation",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A3456GH"
        }, {
          "name" : "nsOffenderNo",
          "in" : "path",
          "description" : "Non-association offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A4578ED"
        }, {
          "name" : "typeSequence",
          "in" : "path",
          "description" : "Sequence number. Close this specific detail record",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Non-association does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Non-association is already closed",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}" : {
      "put" : {
        "tags" : [ "location-resource" ],
        "summary" : "Updates an existing location",
        "description" : "Updates an existing location. Requires role NOMIS_LOCATIONS",
        "operationId" : "updateLocation",
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "NOMIS location Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS location Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Location id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data such as location or subtype do not exist etc.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/reactivate" : {
      "put" : {
        "tags" : [ "location-resource" ],
        "summary" : "Reactivates a deactivated location",
        "description" : "Requires role NOMIS_LOCATIONS",
        "operationId" : "reactivateLocation",
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "NOMIS location Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS location Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Location id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Location was already active",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/deactivate" : {
      "put" : {
        "tags" : [ "location-resource" ],
        "summary" : "Deactivates an existing location",
        "description" : "Requires role NOMIS_LOCATIONS",
        "operationId" : "deactivateLocation",
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "NOMIS location Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS location Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeactivateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Location id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Reason code does not exist, or already deactivated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/certification" : {
      "put" : {
        "tags" : [ "location-resource" ],
        "summary" : "Update location certification",
        "description" : "Requires role NOMIS_LOCATIONS",
        "operationId" : "updateCertification",
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "NOMIS location Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS location Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCertificationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Location id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/capacity" : {
      "put" : {
        "tags" : [ "location-resource" ],
        "summary" : "Update location capacity",
        "description" : "Requires role NOMIS_LOCATIONS",
        "operationId" : "updateCapacity",
        "parameters" : [ {
          "name" : "locationId",
          "in" : "path",
          "description" : "NOMIS location Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS location Id",
            "example" : 1234567
          },
          "example" : 1234567
        }, {
          "name" : "ignoreOperationalCapacity",
          "in" : "query",
          "description" : "If true leave the operational capacity unchanged",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "description" : "If true leave the operational capacity unchanged"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCapacityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Location id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/key-date-adjustments/{adjustmentId}" : {
      "get" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "get specific key date adjustment",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id",
        "operationId" : "getKeyDateAdjustment",
        "parameters" : [ {
          "name" : "adjustmentId",
          "in" : "path",
          "description" : "Key date adjustment id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Key date adjustment id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the key date adjustment details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/KeyDateAdjustmentResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjustment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "Updates specific key date adjustment. The related booking can not be changed",
        "description" : "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId" : "updateKeyDateAdjustment",
        "parameters" : [ {
          "name" : "adjustmentId",
          "in" : "path",
          "description" : "Key date adjustment id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Key date adjustment id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateKeyDateAdjustmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "the key date adjustment has been updated"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjustment not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "deletes specific key date adjustment",
        "description" : "Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id",
        "operationId" : "deleteKeyDateAdjustment",
        "parameters" : [ {
          "name" : "adjustmentId",
          "in" : "path",
          "description" : "Key date adjustment id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Key date adjustment id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "204" : {
            "description" : "the key date adjustment has been deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/{incidentId}" : {
      "get" : {
        "tags" : [ "incident-resource" ],
        "summary" : "Get incident details",
        "description" : "Gets incident details. Requires role NOMIS_INCIDENTS",
        "operationId" : "getIncident",
        "parameters" : [ {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Incident id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "incident-resource" ],
        "summary" : "create or update an incident using the specified id",
        "description" : "Create or update an incident. Requires ROLE_NOMIS_INCIDENTS",
        "operationId" : "upsertIncident",
        "parameters" : [ {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Incident id"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertIncidentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Incident created or updated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Incident already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "incident-resource" ],
        "summary" : "Delete an incident using the specified id",
        "description" : "Delete an incident. Requires ROLE_NOMIS_INCIDENTS",
        "operationId" : "deleteIncident",
        "parameters" : [ {
          "name" : "incidentId",
          "in" : "path",
          "description" : "Incident id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Incident id"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Incident delete"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Incident does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/{code}" : {
      "get" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Gets the global incentive level by code",
        "description" : "Gets a global incentive level by provided code and domain of IEP_LEVEL",
        "operationId" : "getGlobalIncentiveLevel",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Incentive reference code",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Incentive reference code",
            "example" : "STD"
          },
          "example" : "STD"
        } ],
        "responses" : {
          "200" : {
            "description" : "return the Global Incentive level",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Global Incentive Level does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Updates an existing global incentive level",
        "description" : "Updates an existing global incentive level, updateable fields are description and active",
        "operationId" : "updateGlobalIncentiveLevel",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "description" : "Incentive reference code",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Incentive reference code",
            "example" : "STD"
          },
          "example" : "STD"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated Global Incentive level",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Global incentive level not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}/code/{code}" : {
      "get" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Gets the prison incentive level",
        "description" : "Gets prison incentive level data by provided code and prison",
        "operationId" : "getPrisonIncentiveLevel",
        "parameters" : [ {
          "name" : "prison",
          "in" : "path",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id",
            "example" : "MDI"
          },
          "example" : "MDI"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Incentive level code",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Incentive level code",
            "example" : "STD"
          },
          "example" : "STD"
        } ],
        "responses" : {
          "200" : {
            "description" : "return the Prison Incentive level",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prison Incentive Level does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Prison Incentive level data",
        "description" : "Creates incentive level data associated with a Prison",
        "operationId" : "updatePrisonIncentiveLevelData",
        "parameters" : [ {
          "name" : "prison",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI"
          },
          "example" : "MDI"
        }, {
          "name" : "code",
          "in" : "path",
          "description" : "Incentive level code",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Incentive level code",
            "example" : "STD"
          },
          "example" : "STD"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Prison Incentive level data updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip" : {
      "put" : {
        "tags" : [ "csip-resource" ],
        "summary" : "Creates or updates a csip",
        "description" : "Creates or updates a csip report and its children. Requires ROLE_NOMIS_CSIP",
        "operationId" : "upsertCSIP",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertCSIPRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "CSIP Updated or created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertCSIPResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}" : {
      "get" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Get a corporate by corporateId Id",
        "description" : "Retrieves a corporate and details. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getCorporateById",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "description" : "Corporate Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Corporate Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Corporate Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CorporateOrganisation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Update corporate organisation",
        "description" : "Updates an existing corporate record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updateCorporate",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorporateOrganisationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate updated"
          },
          "400" : {
            "description" : "Caseload does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Delete corporate organisation",
        "description" : "Deletes an existing corporate record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deleteCorporate",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Corporate deleted or did not exist"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/web-address/{webAddressId}" : {
      "put" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Update a corporate web address",
        "description" : "Updates a corporate web address record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updateCorporateWebAddress",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "webAddressId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorporateWebAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate web address updated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate or web address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Delete a corporate web address",
        "description" : "Deletes a corporate web record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deleteCorporateWebAddress",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "webAddressId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Corporate web address deleted"
          },
          "400" : {
            "description" : "The web address exists but not for the supplied corporate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/type" : {
      "put" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Update the corporate types",
        "description" : "Updates the set of corporate types. This might result in some types being added and others being deleted. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updateCorporateTypes",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorporateTypesRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate types updated"
          },
          "400" : {
            "description" : "One or more of the type codes are not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Create a corporate type",
        "description" : "Creates a new corporate type record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createCorporateType",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCorporateTypeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Corporate type created (or already exists)"
          },
          "400" : {
            "description" : "Type code is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/phone/{phoneId}" : {
      "put" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Update a corporate phone",
        "description" : "Updates a corporate phone record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updateCorporatePhone",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "phoneId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorporatePhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate phone updated"
          },
          "400" : {
            "description" : "The request contains bad data for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate or phone does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Delete a corporate phone",
        "description" : "Deletes a corporate phone record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deleteCorporatePhone",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "phoneId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Corporate phone deleted"
          },
          "400" : {
            "description" : "The phone exists but not for the supplied corporate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/email/{emailId}" : {
      "put" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Update a corporate email",
        "description" : "Updates a corporate email record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updateCorporateEmail",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "emailId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorporateEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate email updated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate or email does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Delete a corporate email",
        "description" : "Deletes a corporate email record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deleteCorporateEmail",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "emailId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Corporate email deleted"
          },
          "400" : {
            "description" : "The email exists but not for the supplied corporate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/address/{addressId}" : {
      "put" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Update a corporate address",
        "description" : "Updates a corporate address record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updateCorporateAddress",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "addressId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorporateAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate address updated"
          },
          "400" : {
            "description" : "The request contains bad data for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate or address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Delete a corporate address",
        "description" : "Deletes a corporate address record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deleteCorporateAddress",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "addressId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Corporate address deleted"
          },
          "400" : {
            "description" : "The address exists but not for the supplied corporate",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/address/{addressId}/phone/{phoneId}" : {
      "put" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Update a corporate address phone",
        "description" : "Updates a corporate address phone record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "updateCorporateAddressPhone",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "addressId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "phoneId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorporatePhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate address phone updated"
          },
          "400" : {
            "description" : "The request contains bad data for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate or address or phone does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/casenotes/{caseNoteId}" : {
      "get" : {
        "tags" : [ "case-notes-resource" ],
        "summary" : "get a case note by id",
        "description" : "Retrieves a prisoner case note. Requires ROLE_NOMIS_CASENOTES",
        "operationId" : "getCaseNote",
        "parameters" : [ {
          "name" : "caseNoteId",
          "in" : "path",
          "description" : "Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Id",
            "example" : 1234578
          },
          "example" : 1234578
        } ],
        "responses" : {
          "200" : {
            "description" : "CaseNote Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CaseNoteResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "CaseNote does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "case-notes-resource" ],
        "summary" : "Updates a case note on a prisoner",
        "description" : "Updates the specified case note. Requires ROLE_NOMIS_CASENOTES",
        "operationId" : "updateCaseNote",
        "parameters" : [ {
          "name" : "caseNoteId",
          "in" : "path",
          "description" : "Case note id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case note id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCaseNoteRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "CaseNote Updated"
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "CaseNote does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "case-notes-resource" ],
        "summary" : "Deletes a case note",
        "description" : "Deletes the specified case note. Requires ROLE_NOMIS_CASENOTES",
        "operationId" : "deleteCaseNote",
        "parameters" : [ {
          "name" : "caseNoteId",
          "in" : "path",
          "description" : "Case note id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case note id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "responses" : {
          "201" : {
            "description" : "CaseNote Deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "CaseNote does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "No Content"
          }
        }
      }
    },
    "/appointments/{nomisEventId}" : {
      "put" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Updates an existing appointment",
        "description" : "Updates an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId" : "updateAppointment",
        "parameters" : [ {
          "name" : "nomisEventId",
          "in" : "path",
          "description" : "NOMIS event Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS event Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateAppointmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Event id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data such as location or subtype do not exist etc.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Deletes an existing appointment",
        "description" : "Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS",
        "operationId" : "deleteAppointment",
        "parameters" : [ {
          "name" : "nomisEventId",
          "in" : "path",
          "description" : "NOMIS event Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS event Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "responses" : {
          "204" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Event id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}/uncancel" : {
      "put" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Undoes an appointment cancellation",
        "description" : "Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS",
        "operationId" : "uncancelAppointment",
        "parameters" : [ {
          "name" : "nomisEventId",
          "in" : "path",
          "description" : "NOMIS event Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS event Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Event id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}/cancel" : {
      "put" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Cancels an existing appointment",
        "description" : "Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId" : "cancelAppointment",
        "parameters" : [ {
          "name" : "nomisEventId",
          "in" : "path",
          "description" : "NOMIS event Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS event Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "responses" : {
          "200" : {
            "description" : "Success"
          },
          "404" : {
            "description" : "Event id does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types/{code}" : {
      "put" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Update an alert type",
        "description" : "Updates an alert type in the NOMIS reference data, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "updateAlertType",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateAlertType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Alert type updated"
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert type does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types/{code}/reactivate" : {
      "put" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Update an alert type to be active",
        "description" : "Updates an alert type in the NOMIS reference data to be active, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "reactivateAlertType",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Alert code reactivated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types/{code}/deactivate" : {
      "put" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Update an alert type to be inactive",
        "description" : "Updates an alert type in the NOMIS reference data to be inactive, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "deactivateAlertType",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Alert type deactivated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert type does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes/{code}" : {
      "put" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Update an alert code",
        "description" : "Updates an alert code in the NOMIS reference data, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "updateAlertCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateAlertCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Alert code updated"
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes/{code}/reactivate" : {
      "put" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Update an alert code to be active",
        "description" : "Updates an alert code in the NOMIS reference data to be active, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "reactivateAlertCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Alert code reactivated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes/{code}/deactivate" : {
      "put" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Update an alert code to be inactive",
        "description" : "Updates an alert code in the NOMIS reference data to be inactive, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "deactivateAlertCode",
        "parameters" : [ {
          "name" : "code",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Alert code deactivated"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Alert code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/repairs" : {
      "put" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Updates repairs (aka damages) for a given adjudication",
        "description" : "List of repairs are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "updateRepairs",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateRepairsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Repairs updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateRepairsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}" : {
      "put" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Updates a hearing",
        "description" : "Updates a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "updateHearing",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "hearingId",
          "in" : "path",
          "description" : "Hearing Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Hearing Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateHearingRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Updated Hearing Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateHearingRequest"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Hearing does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Deletes a hearing",
        "description" : "Deletes a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "deleteHearing",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "hearingId",
          "in" : "path",
          "description" : "Hearing Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Hearing Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Hearing deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/evidence" : {
      "put" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Updates evidence for a given adjudication",
        "description" : "List of evidence items are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "updateEvidence",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateEvidenceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Evidence updated",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateEvidenceResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/unquash" : {
      "put" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "updates adjudication charge outcome and awards to the requested state before a quash",
        "description" : "The latest hearing result is set to back to the supplied value along with all awards associated with this charge. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "unquashHearingResultAndAwards",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UnquashHearingResultAwardRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Hearing result award IDs created and awards deleted. These list should be empty unless there was a previous synchronisation issue that meant the NOMIS awards are not in the correct state",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateHearingResultAwardResponses"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Charge does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/quash" : {
      "put" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "updates adjudication charge outcome and awards to quashed",
        "description" : "The latest hearing result is set to quashed along with all awards associated with this charge (that may be associated with other hearings). Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "quashHearingResultAndAwards",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Hearing result and awards quashed"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Charge does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/awards" : {
      "put" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "updates a batch of hearing result awards for a given adjudication",
        "description" : "Creates a hearing result awards that have been added, updates those that have changed and deletes ones that are absent for the booking associated with the adjudication. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "updateCreateAndDeleteHearingResultAwards",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateHearingResultAwardRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Hearing result award IDs created and awards deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateHearingResultAwardResponses"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Charge does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "creates a hearing result award for a given adjudication",
        "description" : "Creates a hearing result award. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "createHearingResultAward",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateHearingResultAwardRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Hearing result award IDs created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateHearingResultAwardResponses"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Charge does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Deletes hearing result awards for a given adjudication and charge sequence",
        "description" : "Deletes hearing result awards for a given adjudication and charge sequence. Returns list of deleted award keys. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "deleteHearingResultAwards",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Hearing result awards deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteHearingResultAwardResponses"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Charge does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Get activity details",
        "description" : "Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId" : "getActivity",
        "parameters" : [ {
          "name" : "courseActivityId",
          "in" : "path",
          "description" : "Course activity id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course activity id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetActivityResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Updates an activity",
        "description" : "Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId" : "updateActivity",
        "parameters" : [ {
          "name" : "courseActivityId",
          "in" : "path",
          "description" : "Course activity id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course activity id"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateActivityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Activity information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateActivityResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Prison, location, program service or iep value do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Activity Not Found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Delete a NOMIS course activity",
        "description" : "Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES",
        "operationId" : "deleteActivity",
        "parameters" : [ {
          "name" : "courseActivityId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Activity is deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/schedule" : {
      "put" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Updates a course schedule",
        "description" : "Updates a course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId" : "updateCourseSchedule",
        "parameters" : [ {
          "name" : "courseActivityId",
          "in" : "path",
          "description" : "Course activity id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course activity id"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CourseScheduleRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpdateCourseScheduleResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The course schedule does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/end" : {
      "put" : {
        "tags" : [ "activities-resource" ],
        "summary" : "End a course activity",
        "description" : "Ends a course activity and all active attendances with end date today. Requires role NOMIS_ACTIVITIES",
        "operationId" : "endActivity",
        "parameters" : [ {
          "name" : "courseActivityId",
          "in" : "path",
          "description" : "Course activity id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course activity id"
          }
        }, {
          "name" : "endComment",
          "in" : "query",
          "description" : "End comment",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "End comment"
          }
        }, {
          "name" : "endDate",
          "in" : "query",
          "description" : "End date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "description" : "End date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Activity ended"
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/allocation" : {
      "put" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Creates or Updates a prisoner's allocation to an activity",
        "description" : "Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES",
        "operationId" : "upsertAllocation",
        "parameters" : [ {
          "name" : "courseActivityId",
          "in" : "path",
          "description" : "Course activity id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course activity id"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpsertAllocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Success",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/UpsertAllocationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "There was an error with the request, see the response for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/move-end-date" : {
      "put" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Move the end date of multiple course activities",
        "description" : "Move the end date of course activities and allocations if they end on the oldEndDate passed. Requires role NOMIS_ACTIVITIES",
        "operationId" : "moveActivitiesEndDate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/MoveActivityEndDateRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Activities ended"
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/end" : {
      "put" : {
        "tags" : [ "activities-resource" ],
        "summary" : "End multiple course activities",
        "description" : "Ends course activities and all active allocations with end date today. Requires role NOMIS_ACTIVITIES",
        "operationId" : "endActivities",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/EndActivitiesRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Activities ended"
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonNumber}/visit-balance-adjustments" : {
      "post" : {
        "tags" : [ "visit-balance-resource" ],
        "summary" : "Inserts a visit balance adjustment for an offender",
        "description" : "Creates a visit balance adjustment on the prisoner's latest booking. Requires ROLE_NOMIS_VISIT_BALANCE",
        "operationId" : "createVisitBalanceAdjustment",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "Offender no (aka prisoner number)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no (aka prisoner number)",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateVisitBalanceAdjustmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Visit balance adjustment created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateVisitBalanceAdjustmentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits" : {
      "post" : {
        "tags" : [ "visit-resource" ],
        "summary" : "Creates a new visit",
        "description" : "Creates a new visit and decrements the visit balance.",
        "operationId" : "createVisit",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender Noms Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender Noms Id",
            "example" : "A1234ZZ",
            "pattern" : "[A-Z]\\d{4}[A-Z]{2}"
          },
          "example" : "A1234ZZ"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateVisitRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Visit information with created id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateVisitResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Prison or person ids do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "offenderNo does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "visit already exists exist. The moreInfo contains the NOMIS visitId for the existing visit",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get court cases for an offender",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId" : "getCourtCasesByOffender",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : "AA12345"
          },
          "example" : "AA12345"
        } ],
        "responses" : {
          "200" : {
            "description" : "the list of court cases",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CourtCaseResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Creates a new Court Case",
        "description" : "Required role NOMIS_SENTENCING Creates a new Court Case for the offender and latest booking",
        "operationId" : "createCourtCase",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : "AK1234B"
          },
          "example" : "AK1234B"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCourtCaseRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created Court case",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCourtCaseResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances" : {
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Creates a new Court Appearance",
        "description" : "Required role NOMIS_SENTENCING Creates a new Court Appearance for the offender and given Court Case",
        "operationId" : "createCourtAppearance",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AB1234A"
          },
          "example" : "AB1234A"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 34565
          },
          "example" : 34565
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CourtAppearanceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created Court Appearance",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCourtAppearanceResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Court case does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/charges" : {
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Creates a new Offender Charge",
        "description" : "Required role NOMIS_SENTENCING Creates a new Offender Charge for the offender and latest booking. Will not associate with a Court Event",
        "operationId" : "createCourtCharge",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : "AK1234B"
          },
          "example" : "AK1234B"
        }, {
          "name" : "caseId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/OffenderChargeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created Charge",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OffenderChargeIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/case-identifiers" : {
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Refreshes the list of Case identifiers associated with the case",
        "description" : "Required role NOMIS_SENTENCING Refreshes the list of Case identifiers associated with the case (identifier type CASE/INFO#)",
        "operationId" : "refreshCaseIdentifiers",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AB1234A"
          },
          "example" : "AB1234A"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 34565
          },
          "example" : 34565
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CaseIdentifierRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Case Identifiers Refreshed"
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Court case does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/restriction" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a prisoner restriction",
        "description" : "Creates a prisoner restriction. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPrisonerRestriction",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No aka prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No aka prisoner number",
            "example" : "A1234KT"
          },
          "example" : "A1234KT"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePrisonerRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Prisoner Restriction ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePrisonerRestrictionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad data for example restriction type does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/court-cases/{caseId}/sentences" : {
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Creates a new Sentence",
        "description" : "Required role NOMIS_SENTENCING Creates a new Sentence for the offender booking associated with the court case",
        "operationId" : "createSentence",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender number",
            "example" : "AB1234K"
          },
          "example" : "AB1234K"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 4565456
          },
          "example" : 4565456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSentenceRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created Sentence",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateSentenceResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/court-cases/{caseId}/sentences/{sentenceSequence}/sentence-terms" : {
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Creates a new Sentence term",
        "description" : "Required role NOMIS_SENTENCING Creates a new sentence term for the specified sentence",
        "operationId" : "createSentenceTerm",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender number",
            "example" : "AB1234K"
          },
          "example" : "AB1234K"
        }, {
          "name" : "caseId",
          "in" : "path",
          "description" : "Case Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Case Id",
            "example" : 4565456
          },
          "example" : 4565456
        }, {
          "name" : "sentenceSequence",
          "in" : "path",
          "description" : "Sentence sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "example" : 4565456
          },
          "example" : 4565456
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SentenceTermRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created Sentence Term",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateSentenceTermResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/casenotes" : {
      "get" : {
        "tags" : [ "case-notes-resource" ],
        "summary" : "Gets all case notes for a prisoner",
        "description" : "Retrieves all case notes for a specific prisoner, for migration or merge. Requires ROLE_NOMIS_CASENOTES",
        "operationId" : "getCaseNotesForPrisoner",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No AKA prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No AKA prisoner number",
            "example" : "A3745XD"
          },
          "example" : "A3745XD"
        } ],
        "responses" : {
          "200" : {
            "description" : "Case notes Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerCaseNotesResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "case-notes-resource" ],
        "summary" : "Creates a case note on a prisoner",
        "description" : "Creates a case note on the prisoner's latest booking. Requires ROLE_NOMIS_CASENOTES",
        "operationId" : "createCaseNote",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no (aka prisoner number)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no (aka prisoner number)",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCaseNoteRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "CaseNote Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCaseNoteResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts" : {
      "post" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Creates an alert on a prisoner",
        "description" : "Creates an alert on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "createAlert",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no (aka prisoner number)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no (aka prisoner number)",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAlertRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Alert Created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateAlertResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Active alert of this type already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts/resynchronise" : {
      "post" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Replaces an alerts on a prisoner",
        "description" : "Replaces all alerts on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "resynchroniseAlerts",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no (aka prisoner number)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no (aka prisoner number)",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "$ref" : "#/components/schemas/CreateAlertRequest"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Alerts replaces",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CreateAlertResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/adjudications" : {
      "post" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "creates an adjudication on the latest booking of a prisoner",
        "description" : "Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "createAdjudication",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender Noms Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender Noms Id",
            "example" : "A1234ZZ",
            "pattern" : "[A-Z]\\d{4}[A-Z]{2}"
          },
          "example" : "A1234ZZ"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAdjudicationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Adjudication Created Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Adjudication already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/bookings" : {
      "post" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets prisoner details for a list of bookings",
        "description" : "Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW.",
        "operationId" : "getPrisonerBookings",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "A list of prisoner details",
                "items" : {
                  "type" : "integer",
                  "format" : "int64",
                  "description" : "A list of prisoner details"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "list of prisoner details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerDetails"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentencing/court-cases/clone" : {
      "post" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Clones court cases from the supplied booking to the current booking",
        "description" : "Required role NOMIS_SENTENCING. Court cases and all child elements including adjustments are copied to the current booking",
        "operationId" : "cloneCourtCasesFromBooking",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id",
            "example" : 1233
          },
          "example" : 1233
        } ],
        "responses" : {
          "200" : {
            "description" : "Created Court cases",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingCourtCaseCloneResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Booking id supplied is already the latest booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments" : {
      "post" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "Creates a new sentence adjustment",
        "description" : "Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation",
        "operationId" : "createSentenceAdjustment",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "sentenceSequence",
          "in" : "path",
          "description" : "Sentence sequence number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence number",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateSentenceAdjustmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created Sentence adjustment id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking or sentence sequence do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/incentives" : {
      "post" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Creates a new incentive",
        "description" : "Creates a new incentive using next sequence no.",
        "operationId" : "createIncentive",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Offender Booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Offender Booking Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Incentive information with created sequence",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateIncentiveResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Prison or iep value do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "booking does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/incentives/reorder" : {
      "post" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Reorder a existing incentives to match time order",
        "description" : "Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order",
        "operationId" : "reorderCurrentIncentives",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Offender Booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Offender Booking Id",
            "example" : 1234567
          },
          "example" : 1234567
        } ],
        "responses" : {
          "200" : {
            "description" : "Incentives successfully reordered"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Access this endpoint forbidden, incorrect role. Must have NOMIS_INCENTIVES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "booking does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/adjustments" : {
      "post" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "Creates a new key date adjustment",
        "description" : "Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation",
        "operationId" : "createKeyDateAdjustment",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateKeyDateAdjustmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Created key date adjustment",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person",
        "description" : "Creates a person, typically a person who will become a contact of a prisoners. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPerson",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Person already exists with the same ID",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/restriction" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a global person restriction",
        "description" : "Creates a person restriction; the restriction is estate wide. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonRestriction",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContactPersonRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Contact ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateContactPersonRestrictionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad data for example restriction type does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/phone" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person global phone",
        "description" : "Creates a person global phone in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonPhone",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Phone ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonPhoneResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request data, e.g type is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/identifier" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person identifier",
        "description" : "Creates a person identifier in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonIdentifier",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonIdentifierRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Identifier sequence returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonIdentifierResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request data, e.g type is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/employment" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person employment",
        "description" : "Creates a person employment in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonEmployment",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonEmploymentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Employment sequence returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonEmploymentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request data, e.g corporate is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/email" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person email",
        "description" : "Creates a person email in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonEmail",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Email ID aka InternetAddressId Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonEmailResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/contact" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person contact",
        "description" : "Creates a person contact; the relationship between a prisoner and a person. Typically a prospective visitor. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonContact",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonContactRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Contact ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonContactResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad for example prisoner does not exist or contact / relationship types do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Contact with the specified relationship and type already exists for this prisoner's latest booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/contact/{contactId}/restriction" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person contact restriction for a specific relationship",
        "description" : "Creates a person contact restriction; the restriction is for a specific relationship between a prisoner and a person. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonContactRestriction",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "contactId",
          "in" : "path",
          "description" : "Contact Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contact Id",
            "example" : 67899
          },
          "example" : 67899
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateContactPersonRestrictionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Contact ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateContactPersonRestrictionResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad data for example restriction type does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or contact does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/address" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person address",
        "description" : "Creates a person address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonAddress",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Address ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonAddressResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/address/{addressId}/phone" : {
      "post" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Creates a person address phone",
        "description" : "Creates a person phone associated with an address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createPersonAddressPhone",
        "parameters" : [ {
          "name" : "personId",
          "in" : "path",
          "description" : "Person Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Person Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "addressId",
          "in" : "path",
          "description" : "Address Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Address Id",
            "example" : 56789
          },
          "example" : 56789
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePersonPhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Person Phone ID Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreatePersonPhoneResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request data, e.g type is not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Person or address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations" : {
      "post" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "Creates a new non-association",
        "description" : "Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId" : "createNonAssociation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateNonAssociationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created non-association",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateNonAssociationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data such as booking or location do not exist etc.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations" : {
      "post" : {
        "tags" : [ "location-resource" ],
        "summary" : "Creates a new location",
        "description" : "Creates a new location. Requires role ROLE_NOMIS_LOCATIONS",
        "operationId" : "createLocation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Successfully created location with created id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocationIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data such as prison or parent do not exist etc.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes" : {
      "post" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Creates a new global incentive level",
        "description" : "Creates a new global incentive level",
        "operationId" : "createGlobalIncentiveLevel",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Global Incentive level",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/reorder" : {
      "post" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "reorders all global incentive levels",
        "description" : "reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index",
        "operationId" : "reorderGlobalIncentiveLevels",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReorderRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "description" : "Reorder successful"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}" : {
      "post" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "Prison Incentive level data",
        "description" : "Creates incentive level data associated with a Prison",
        "operationId" : "createPrisonIncentiveLevelData",
        "parameters" : [ {
          "name" : "prison",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI"
          },
          "example" : "MDI"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Prison Incentive level data created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates" : {
      "post" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Creates a corporate organisation",
        "description" : "Creates a new corporate record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createCorporate",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCorporateOrganisationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "204" : {
            "description" : "Corporate creates"
          },
          "400" : {
            "description" : "Caseload does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Created"
          }
        }
      }
    },
    "/corporates/{corporateId}/web-address" : {
      "post" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Create a corporate web address",
        "description" : "Creates a new corporate web address record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createCorporateWebAddress",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCorporateWebAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Corporate web address created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCorporateWebAddressResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/phone" : {
      "post" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Create a corporate phone",
        "description" : "Creates a new corporate phone record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createCorporatePhone",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCorporatePhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Corporate phone created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCorporatePhoneResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad data for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/email" : {
      "post" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Create a corporate email",
        "description" : "Creates a new corporate email record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createCorporateEmail",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCorporateEmailRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Corporate email created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCorporateEmailResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/address" : {
      "post" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Creates a corporate address",
        "description" : "Creates a new corporate address record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createCorporateAddress",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCorporateAddressRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Corporate address created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCorporateAddressResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad data for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/address/{addressId}/phone" : {
      "post" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Creates a corporate address phone",
        "description" : "Creates a new corporate address phone record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "createCorporateAddressPhone",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "addressId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateCorporatePhoneRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Corporate address phone created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateCorporatePhoneResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "The request contains bad data for example type code does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate or address does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments" : {
      "post" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Creates a new appointment",
        "description" : "Creates a new appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId" : "createAppointment",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAppointmentRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Appointment information with created id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateAppointmentResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid data such as booking or location do not exist etc.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types" : {
      "post" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Creates an alert type",
        "description" : "Creates an alert type in the NOMIS reference data. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "createAlertType",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAlertType"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Alert type Created"
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Type already exits",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes" : {
      "post" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Creates an alert code",
        "description" : "Creates an alert code in the NOMIS reference data. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "createAlertCode",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateAlertCode"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Alert code Created"
          },
          "400" : {
            "description" : "One or more fields in the request contains invalid data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Code already exits",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/agency-switches/{serviceCode}/agency/{agencyId}" : {
      "get" : {
        "tags" : [ "service-agency-switches-resource" ],
        "summary" : "Returns if the service is switched on for the specified service code / agency id.",
        "description" : "Returns 204 if the service is switched on for the service code / agency id combination.\n    If the service is not switched on then 404 is returned.\n    This endpoint also takes into account the special `*ALL*` agency id - if the service code has a agency entry of\n    `*ALL*` then the service is deemed to be switched on for all agencies and will therefore return 204 irrespective of the\n    agency id that is passed in.\n    Requires role NOMIS_ACTIVITIES or ROLE_NOMIS_PRISONER_API__SYNCHRONISATION__RW",
        "operationId" : "checkServiceAgency",
        "parameters" : [ {
          "name" : "serviceCode",
          "in" : "path",
          "description" : "The code of the service from the EXTERNAL_SERVICES table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The code of the service from the EXTERNAL_SERVICES table",
            "example" : "ACTIVITY"
          },
          "example" : "ACTIVITY"
        }, {
          "name" : "agencyId",
          "in" : "path",
          "description" : "The id of the agency",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The id of the agency",
            "example" : "MDI"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "204" : {
            "description" : "Service is switched on for the service code and agency id."
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "The service code does not exist or the service is not switched on for the agency.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "service-agency-switches-resource" ],
        "summary" : "Turn on a service for a agency",
        "description" : "Turn on a service for a agency. Requires role NOMIS_ACTIVITIES",
        "operationId" : "createServiceAgency",
        "parameters" : [ {
          "name" : "serviceCode",
          "in" : "path",
          "description" : "The code of the service from the EXTERNAL_SERVICES table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The code of the service from the EXTERNAL_SERVICES table",
            "example" : "ACTIVITY"
          },
          "example" : "ACTIVITY"
        }, {
          "name" : "agencyId",
          "in" : "path",
          "description" : "The id of the agency",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The id of the agency",
            "example" : "MDI"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "201" : {
            "description" : "Created"
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found, the service or agency do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/hearings" : {
      "post" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "creates a hearing for a given adjudication",
        "description" : "Creates a hearing for a given adjudication. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "createHearing",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateHearingRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Hearing Created Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateHearingResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}/charge/{chargeSequence}/result" : {
      "post" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "creates or updates a hearing result for a given hearing and charge.",
        "description" : "Creates a (or updates the existing) hearing result for a given hearing and charge. DPS only supports 1 result per hearing. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "upsertHearingResult",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "hearingId",
          "in" : "path",
          "description" : "Nomis Hearing Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Nomis Hearing Id",
            "example" : 123
          },
          "example" : 123
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateHearingResultRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Hearing result created",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateHearingResultResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Hearing does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Deletes a hearing result",
        "description" : "Deletes a hearing result for a given adjudication and hearing Id. Returns list of any deleted award Ids to allow removal of award mappings in the sync service. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "deleteHearingResult",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "hearingId",
          "in" : "path",
          "description" : "Hearing Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Hearing Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Hearing result deleted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DeleteHearingResultResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/result" : {
      "post" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "creates or updates a result for a given charge. This requires a dummy hearing to be created",
        "description" : "Creates or updates a result for a charge. DPS allows results to be created without hearings eg: Refer to Police. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "createResultWithDummyHearing",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateHearingResultRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Result created"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Deletes a result",
        "description" : "Deletes a result for a given adjudication and charge sequence. The result will be associated with a dummy hearing used by DPS to record referrals. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "deleteResult",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "result deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities" : {
      "post" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Creates a new activity",
        "description" : "Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId" : "createActivity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateActivityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "201" : {
            "description" : "Activity information with created id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CreateActivityResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Prison, location, program service or iep value do not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/{visitId}" : {
      "get" : {
        "tags" : [ "visit-resource" ],
        "summary" : "get visit",
        "description" : "Retrieves a visit by id.",
        "operationId" : "getVisit",
        "parameters" : [ {
          "name" : "visitId",
          "in" : "path",
          "description" : "Nomis Visit Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Nomis Visit Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Visit Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VisitResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "visit does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/rooms/usage-count" : {
      "get" : {
        "tags" : [ "visit-resource" ],
        "summary" : "get future visit room usage by filter",
        "description" : "Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included",
        "operationId" : "getVisitRoomCountsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "prisonIds",
          "in" : "query",
          "description" : "Filter results by prison ids (returns all prisons if not specified)",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "['MDI','LEI']"
        }, {
          "name" : "visitTypes",
          "in" : "query",
          "description" : "Filter results by visitType (returns all types if not specified)",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "['SCON','OFFI']"
        }, {
          "name" : "fromDateTime",
          "in" : "query",
          "description" : "Filter results by visits that were created on or after the given timestamp",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          },
          "example" : "2021-11-03T09:00:00"
        }, {
          "name" : "toDateTime",
          "in" : "query",
          "description" : "Filter results by visits that were created on or before the given timestamp",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          },
          "example" : "2021-11-03T09:00:00"
        }, {
          "name" : "futureVisitsOnly",
          "in" : "query",
          "description" : "Filter results by restricting to future visit usage only",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "list of visit room and count is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/VisitRoomCountResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/ids" : {
      "get" : {
        "tags" : [ "visit-resource" ],
        "summary" : "get visits by filter",
        "description" : "Retrieves a paged list of visits by filter",
        "operationId" : "getVisitsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "prisonIds",
          "in" : "query",
          "description" : "Filter results by prison ids (returns all prisons if not specified)",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "['MDI','LEI']"
        }, {
          "name" : "visitTypes",
          "in" : "query",
          "description" : "Filter results by visitType (returns all types if not specified)",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "['SCON','OFFI']"
        }, {
          "name" : "fromDateTime",
          "in" : "query",
          "description" : "Filter results by visits that were created on or after the given timestamp",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          },
          "example" : "2021-11-03T09:00:00"
        }, {
          "name" : "toDateTime",
          "in" : "query",
          "description" : "Filter results by visits that were created on or before the given timestamp",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date-time"
          },
          "example" : "2021-11-03T09:00:00"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of visit ids is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageVisitIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visit-balances/{visitBalanceId}" : {
      "get" : {
        "tags" : [ "visit-balance-resource" ],
        "summary" : "Get visit balance data for a booking",
        "description" : "Retrieves visit order balance for a booking . Requires ROLE_NOMIS_VISIT_BALANCE",
        "operationId" : "getVisitBalanceByIdToMigrate",
        "parameters" : [ {
          "name" : "visitBalanceId",
          "in" : "path",
          "description" : "Visit balance (offender booking) id.",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Visit balance (offender booking) id.",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Visit balance returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VisitBalanceDetailResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Visit Balance does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visit-balances/visit-balance-adjustment/{visitBalanceAdjustmentId}" : {
      "get" : {
        "tags" : [ "visit-balance-resource" ],
        "summary" : "Get specific offender visit balance adjustment",
        "description" : "Retrieves offender visit balance adjustment. Requires ROLE_NOMIS_VISIT_BALANCE",
        "operationId" : "getVisitBalanceAdjustment",
        "parameters" : [ {
          "name" : "visitBalanceAdjustmentId",
          "in" : "path",
          "description" : "Visit balance adjustment id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Visit balance adjustment id",
            "example" : 5
          },
          "example" : 5
        } ],
        "responses" : {
          "200" : {
            "description" : "Visit balance adjustment returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VisitBalanceAdjustmentResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjustment does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visit-balances/ids" : {
      "get" : {
        "tags" : [ "visit-balance-resource" ],
        "summary" : "Find paged visit balance ids",
        "description" : "\n      Returns the visit balance ids (which are booking ids) for the latest booking for offenders with balance entries.\n      Requires role NOMIS_VISIT_BALANCE",
        "operationId" : "findVisitBalanceIds",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "prisonId",
          "in" : "query",
          "description" : "Prison id",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageVisitBalanceIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_VISIT_BALANCE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}" : {
      "get" : {
        "tags" : [ "transactions-resource" ],
        "summary" : "get a transaction group by id",
        "description" : "Retrieves transactions (all in sequence) identified by id. Requires NOMIS_TRANSACTIONS",
        "operationId" : "getTransaction",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Id",
            "example" : 123456789
          },
          "example" : 123456789
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/OffenderTransactionDto"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires NOMIS_TRANSACTIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Transaction does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{transactionId}/general-ledger" : {
      "get" : {
        "tags" : [ "transactions-resource" ],
        "summary" : "get a transaction by id and sequence number",
        "description" : "Retrieves a prisoner transaction. Requires NOMIS_TRANSACTIONS",
        "operationId" : "getGLTransaction",
        "parameters" : [ {
          "name" : "transactionId",
          "in" : "path",
          "description" : "Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Id",
            "example" : 123456789
          },
          "example" : 123456789
        } ],
        "responses" : {
          "200" : {
            "description" : "Transaction Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/GeneralLedgerTransactionDto"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires NOMIS_TRANSACTIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Transaction does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/splash-screens/{moduleName}" : {
      "get" : {
        "tags" : [ "splash-screen-resource" ],
        "summary" : "Retrieve a list of prisons and their associated screen conditions (if any set) for the screen",
        "description" : "Retrieves all prisons switched on for the screen (module) name, or an empty list if there are none. Requires role NOMIS_SCREEN_ACCESS",
        "operationId" : "getScreenConditions",
        "parameters" : [ {
          "name" : "moduleName",
          "in" : "path",
          "description" : "The name of the screen (module)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The name of the screen (module)",
            "example" : "OIDINCRS"
          },
          "example" : "OIDINCRS"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SplashScreenDto"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_SCREEN_ACCESS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/splash-screens/{moduleName}/blocked" : {
      "get" : {
        "tags" : [ "splash-screen-resource" ],
        "summary" : "Retrieve a list of blocked prison ids for the screen",
        "description" : "Retrieves a list of blocked prison ids for the screen (module) name or **ALL** if all prisons, or an empty list if there are none blocked. Requires role NOMIS_SCREEN_ACCESS",
        "operationId" : "getBlockedPrisons",
        "parameters" : [ {
          "name" : "moduleName",
          "in" : "path",
          "description" : "The name of the screen (module)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The name of the screen (module)",
            "example" : "OIDINCRS"
          },
          "example" : "OIDINCRS"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonDto"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_SCREEN_ACCESS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found if the screen (module) name does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/max-id" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Get the highest value of CRS_SCH_ID in NOMIS",
        "description" : "Retrieves the last course schedule ID so we can identify mappings records in preprod that have been copied from prod but don't have any NOMIS data.",
        "operationId" : "getMaxCourseScheduleId",
        "responses" : {
          "200" : {
            "description" : "Max CRS_SCH_ID returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/questionnaires/{questionnaireId}" : {
      "get" : {
        "tags" : [ "questionnaire-resource" ],
        "summary" : "Get incident questionnaire details",
        "description" : "Gets incident questionnaire details. Requires role NOMIS_INCIDENTS",
        "operationId" : "getQuestionnaire",
        "parameters" : [ {
          "name" : "questionnaireId",
          "in" : "path",
          "description" : "Incident Questionnaire id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Incident Questionnaire id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/QuestionnaireResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/questionnaires/ids" : {
      "get" : {
        "tags" : [ "questionnaire-resource" ],
        "summary" : "get questionnaire IDs by filter",
        "description" : "Retrieves a paged list of incident questionnaire ids by filter. Requires ROLE_NOMIS_INCIDENTS.",
        "operationId" : "getIdsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by those that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by those that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageQuestionnaireIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCIDENTS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisons/{prisonId}/incentive-levels" : {
      "get" : {
        "tags" : [ "prison-resource" ],
        "summary" : "Retrieve a list of active incentive levels for a prison",
        "description" : "Retrieve a list of active incentive levels for a prison. Requires role NOMIS_ACTIVITIES",
        "operationId" : "getPrisonIncentiveLevels",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "The prison ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The prison ID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IncentiveLevel"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prison not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonNumber}/visit-balance/details" : {
      "get" : {
        "tags" : [ "visit-balance-resource" ],
        "summary" : "Get visit balance details for a prisoner",
        "description" : "Retrieves visit balance details including last IEP allocation date for a prisoner. Requires ROLE_NOMIS_VISIT_BALANCE",
        "operationId" : "getVisitBalanceDetailsForPrisoner",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "Prison number aka Offender No.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison number aka Offender No.",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "responses" : {
          "200" : {
            "description" : "Visit balance details returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/VisitBalanceDetailResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_VISIT_BALANCE",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}" : {
      "get" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets the prisoner's details",
        "description" : "Requires role NOMIS_ALERTS or NOMIS_CONTACTPERSONS.",
        "operationId" : "getPrisonerDetails",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender Noms Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender Noms Id",
            "example" : "A1234ZZ",
            "pattern" : "[A-Z]\\d{4}[A-Z]{2}"
          },
          "example" : "A1234ZZ"
        } ],
        "responses" : {
          "200" : {
            "description" : "prisoner details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_ALERTS or NOMIS_CONTACTPERSONS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/offender-charges/{offenderChargeId}" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get an offender charge",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves offender charge details. Offender Charges are at the booking level.",
        "operationId" : "getOffenderCharge",
        "parameters" : [ {
          "name" : "offenderChargeId",
          "in" : "path",
          "description" : "Offender Charge id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Offender Charge id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the court appearance details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OffenderChargeResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{id}" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get a court case",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId" : "getCourtCase",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Court case id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Court case id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the court case details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CourtCaseResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "delete a court case",
        "description" : "Requires role NOMIS_SENTENCING. Deletes a court case by id",
        "operationId" : "deleteCourtCase",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Court case id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Court case id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : "AB2134"
          },
          "example" : "AB2134"
        } ],
        "responses" : {
          "200" : {
            "description" : "court case deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/post-merge" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "Get court cases affected by the last prisoner merge of two prisoner records",
        "description" : "Requires role NOMIS_SENTENCING. The court cases returned - if any -  includes cases that may have been cloned onto the active booking and those deactivated",
        "operationId" : "getCourtCasesChangedByMergePrisoners",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : "AA12345"
          },
          "example" : "AA12345"
        } ],
        "responses" : {
          "200" : {
            "description" : "the lists of court cases affected. Not all merges result in cases being changed, so these lists might be empty even if the current booking has a court case",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PostPrisonerMergeCaseChanges"
                }
              }
            }
          },
          "400" : {
            "description" : "This prisoner has no merge recorded",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/ids" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get court case ids for an offender",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves all court case ids by offender",
        "operationId" : "getCourtCaseIdsByOffender",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : "AA12345"
          },
          "example" : "AA12345"
        } ],
        "responses" : {
          "200" : {
            "description" : "the list of court case ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "integer",
                    "format" : "int64"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-appearances/{id}" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get a court appearance",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a court appearance by id",
        "operationId" : "getCourtAppearance",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Court appearance id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Court appearance id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the court appearance details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CourtEventResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-appearances/{eventId}/charges/{chargeId}" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get the court event charge",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves the court event charge ",
        "operationId" : "getCourtEventCharge",
        "parameters" : [ {
          "name" : "chargeId",
          "in" : "path",
          "description" : "Offender Charge id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Offender Charge id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "eventId",
          "in" : "path",
          "description" : "Event id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Event id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No",
            "example" : "AB12345"
          },
          "example" : "AB12345"
        } ],
        "responses" : {
          "200" : {
            "description" : "the court appearance details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CourtEventChargeResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Court Appearance not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentence-terms/booking-id/{bookingId}/sentence-sequence/{sentenceSequence}/term-sequence/{termSequence}" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get a sentence term by id (offender booking, sentence sequence and term sequence",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a sentence term by id",
        "operationId" : "getOffenderSentenceTerm",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender no",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender no",
            "example" : "AA668EC"
          },
          "example" : "AA668EC"
        }, {
          "name" : "bookingId",
          "in" : "path",
          "description" : "offender booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "offender booking id",
            "example" : 4565456
          },
          "example" : 4565456
        }, {
          "name" : "sentenceSequence",
          "in" : "path",
          "description" : "Sentence sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "example" : 1
          },
          "example" : 1
        }, {
          "name" : "termSequence",
          "in" : "path",
          "description" : "term sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "term sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "the sentence term details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentenceTermResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender booking not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/restrictions" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Gets a prisoner's restrictions",
        "description" : "Retrieves all restrictions across all bookings for a prisoner. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getPrisonerWithRestrictions",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No aka prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No aka prisoner number",
            "example" : "A1234KT"
          },
          "example" : "A1234KT"
        }, {
          "name" : "latest-booking-only",
          "in" : "query",
          "description" : "When true only return restrictions that related to latest booking",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          },
          "example" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Restrictions Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerWithRestrictions"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/merges" : {
      "get" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets prisoner's list of merge details since a given date. Either the current offenderNo or the previous offenderNo can be used to search for merges. Only COMPLETED merges are returned",
        "description" : "Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW.",
        "operationId" : "getPrisonerMerges",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender Noms Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender Noms Id",
            "example" : "A1234ZZ",
            "pattern" : "[A-Z]\\d{4}[A-Z]{2}"
          },
          "example" : "A1234ZZ"
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "The earliest date to search for merges from",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of prisoner merges",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/MergeDetail"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/csip/reconciliation" : {
      "get" : {
        "tags" : [ "csip-resource" ],
        "summary" : "Gets csips for an offender for reconciliation",
        "description" : "Retrieves a list of csips for a prisoner. Requires ROLE_NOMIS_CSIP",
        "operationId" : "getCSIPsForPrisoner",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No AKA prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No AKA prisoner number",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "responses" : {
          "200" : {
            "description" : "CSIPs Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerCSIPsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist or has no csips",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/contacts" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Gets a prisoner's contacts",
        "description" : "Retrieves all contacts across all bookings for a prisoner. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getPrisonerWithContacts",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No aka prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No aka prisoner number",
            "example" : "A1234KT"
          },
          "example" : "A1234KT"
        }, {
          "name" : "active-only",
          "in" : "query",
          "description" : "When true only return contacts that are active",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          },
          "example" : false
        }, {
          "name" : "latest-booking-only",
          "in" : "query",
          "description" : "When true only return contacts that related to latest booking",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          },
          "example" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Contacts Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerWithContacts"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/casenotes/reconciliation" : {
      "get" : {
        "tags" : [ "case-notes-resource" ],
        "summary" : "Gets all case notes for a prisoner for reconciliation.",
        "description" : "Retrieves all case notes for a specific prisoner, for reconciliation. \n    This endpoint doesn't try to split out a case note into the amendments, simply just returns the text as stored in\n    NOMIS. This is because the notes are truncated at 4,000 characters so we can end up with more amendments in DPS\n    than there are in NOMIS. We therefore just return the text as stored in NOMIS and then transform the DPS text to\n    match.\n    Requires ROLE_NOMIS_CASENOTES",
        "operationId" : "getCaseNotesForPrisonerForReconciliation",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No AKA prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No AKA prisoner number",
            "example" : "A3745XD"
          },
          "example" : "A3745XD"
        } ],
        "responses" : {
          "200" : {
            "description" : "Case notes Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerCaseNotesResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/bookings/{bookingId}/previous" : {
      "get" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets a prisoner's previous booking relative to the supplied booking id",
        "description" : "Requires role NOMIS_ALERTS.",
        "operationId" : "getPreviousBooking",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender Noms Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender Noms Id",
            "example" : "A1234ZZ",
            "pattern" : "[A-Z]\\d{4}[A-Z]{2}"
          },
          "example" : "A1234ZZ"
        }, {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking Id",
            "example" : 123
          },
          "example" : 123
        } ],
        "responses" : {
          "200" : {
            "description" : "Ids of booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PreviousBookingId"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_ALERTS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking or prisoner does not exist or has no previous booking",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts/to-migrate" : {
      "get" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Gets alert for latest booking",
        "description" : "Retrieves alerts for a prisoner from latest all bookings. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "getAlertsToMigrate",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No AKA prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No AKA prisoner number",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "responses" : {
          "200" : {
            "description" : "Alerts Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerAlertsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist or has no bookings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts/reconciliation" : {
      "get" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Gets active alerts for latest booking",
        "description" : "Retrieves active alerts for latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "getActiveAlertsForReconciliation",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender No AKA prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No AKA prisoner number",
            "example" : "A1234AK"
          },
          "example" : "A1234AK"
        } ],
        "responses" : {
          "200" : {
            "description" : "Active Alerts Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerAlertsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prisoner does not exist or has no bookings",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/restrictions/{restrictionId}" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Get a prisoner restriction by ID",
        "description" : "Retrieves a single restriction by its ID. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getPrisonerRestriction",
        "parameters" : [ {
          "name" : "restrictionId",
          "in" : "path",
          "description" : "Restriction Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Restriction Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Restriction Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerRestriction"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Restriction not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/restrictions/ids" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Get all prisoner restriction Ids",
        "description" : "Retrieves all restriction Ids - typically for a migration. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getPrisonerRestrictionIds",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by restrictions that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by restrictions that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        } ],
        "responses" : {
          "200" : {
            "description" : "Page of restriction Ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePrisonerRestrictionIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/restrictions/ids/all-from-id" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Gets the identifier for all prisoner restrictions.",
        "description" : "Gets the specified number of restrictions starting after the given id number.\n      Clients can iterate through all restrictions by calling this endpoint using the id from the last call (omit for first call).\n      Iteration ends when the returned restrictionIds list has size less than the requested page size.\n      Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW.",
        "operationId" : "getPrisonerRestrictionIdsFromId",
        "parameters" : [ {
          "name" : "restrictionId",
          "in" : "query",
          "description" : "If supplied get restriction starting after this id",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0,
            "description" : "If supplied get restriction starting after this id",
            "example" : 1555999
          },
          "example" : 1555999
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Number of restrictions to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10,
            "description" : "Number of restrictions to get"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of prisoner restriction ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RestrictionIdsWithLast"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids" : {
      "get" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets the identifiers for all prisoners. By default only active prisoners will be returned unless active=false",
        "description" : "Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW or ROLE_NOMIS_ALERTS.",
        "operationId" : "getPrisonerIdentifiers",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "active",
          "in" : "query",
          "description" : "When true only return active prisoners currently in prison else all prisoners that at some point has been in prison are returned",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "paged list of prisoner ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePrisonerIds"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/prisoners/ids/all" : {
      "get" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets the identifier for all prisoners.",
        "description" : "Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW, NOMIS_ALERTS, 'ROLE_NOMIS_SENTENCING' or NOMIS_CORE_PERSON.",
        "operationId" : "getAllPrisoners",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "paged list of prisoner ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePrisonerId"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW, 'ROLE_NOMIS_SENTENCING' or ROLE_NOMIS_ALERTS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids/all-from-id" : {
      "get" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets the identifier for all prisoners.",
        "description" : "Gets the specified number of prisoners starting after the given id number.\n      Clients can iterate through all prisoners by calling this endpoint using the id from the last call (omit for first call).\n      Iteration ends when the returned prisonerIds list has size less than the requested page size.\n      Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW or NOMIS_CASENOTES.",
        "operationId" : "getAllPrisonersFromId",
        "parameters" : [ {
          "name" : "offenderId",
          "in" : "query",
          "description" : "If supplied get offenders starting after this id",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0,
            "description" : "If supplied get offenders starting after this id",
            "example" : 1555999
          },
          "example" : 1555999
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Number of offenders to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10,
            "description" : "Number of offenders to get"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of prisoner ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonerNosWithLast"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW or ROLE_NOMIS_ALERTS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids/active" : {
      "get" : {
        "tags" : [ "prisoners-resource" ],
        "summary" : "Gets the identifiers for all active prisoners",
        "description" : "Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW.",
        "operationId" : "getActivePrisonerIdentifiers",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "paged list of prisoner ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePrisonerIds"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentencing-adjustments" : {
      "get" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "get active sentence and key date adjustments for a booking",
        "description" : "Retrieves all the current active sentence and key date adjustments (by booking) for a prisoner. Requires NOMIS_SENTENCING.",
        "operationId" : "getActiveAdjustments",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "NOMIS booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS booking Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "active-only",
          "in" : "query",
          "description" : "Indicate if should return just active adjustments",
          "required" : true,
          "schema" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Indicate if should return just active adjustments"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "the list of adjustments details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SentencingAdjustmentsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentences/recall" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get all active recall sentences for a booking",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves all active recall sentences for a booking",
        "operationId" : "getActiveRecallSentences",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking ID",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the active recall sentences",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/SentenceResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender booking not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/awards/{sanctionSequence}" : {
      "get" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "get hearing result award by Id ",
        "description" : "Retrieves a hearing result by the Id (bookingId and sanctionSequence). Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "getAdjudicationHearingResultAward",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "NOMIS booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS booking Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "sanctionSequence",
          "in" : "path",
          "description" : "Nomis sanction sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis sanction sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Hearing result award Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Hearing result award does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/awards/ada/summary" : {
      "get" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "Get ADA award summary result award by booking ",
        "description" : "Retrieves a summary of ADA awards along with associated adjudication for a given booking. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "getAdjudicationADASummary",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "NOMIS booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS booking Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "ADA Summary award Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdjudicationADAAwardSummaryResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/alerts" : {
      "get" : {
        "tags" : [ "alerts-resource" ],
        "summary" : "Gets alert for booking",
        "description" : "Retrieves alerts for a specific booking. Requires ROLE_NOMIS_ALERTS",
        "operationId" : "getAlertsByBookingId",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Alerts Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingAlertsResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/ids" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Get all Ids",
        "description" : "Retrieves all person Ids - typically for a migration. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getPersonIds",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by persons that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by persons that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        } ],
        "responses" : {
          "200" : {
            "description" : "Page of person Ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PagePersonIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/ids/all-from-id" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Gets the identifier for all persons.",
        "description" : "Gets the specified number of persons starting after the given id number.\n      Clients can iterate through all persons by calling this endpoint using the id from the last call (omit for first call).\n      Iteration ends when the returned prisonerIds list has size less than the requested page size.\n      Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW.",
        "operationId" : "getPersonIdsFromId",
        "parameters" : [ {
          "name" : "personId",
          "in" : "query",
          "description" : "If supplied get person starting after this id",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0,
            "description" : "If supplied get person starting after this id",
            "example" : 1555999
          },
          "example" : 1555999
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Number of persons to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10,
            "description" : "Number of persons to get"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of person ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonIdsWithLast"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}" : {
      "get" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "Get an open non-association",
        "description" : "Get the open non-association for the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId" : "getNonAssociation",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A3456GH"
        }, {
          "name" : "nsOffenderNo",
          "in" : "path",
          "description" : "Non-association offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A4578ED"
        }, {
          "name" : "typeSequence",
          "in" : "query",
          "description" : "Sequence number. If present, get this detail record, otherwise get the open record if there is one.",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32"
          },
          "example" : 2
        } ],
        "responses" : {
          "200" : {
            "description" : "Non-association information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NonAssociationResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No open non-association exists for these offender numbers, or one of the offenders does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/all" : {
      "get" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "Get all non-associations for the two offender numbers",
        "description" : "Get all non-associations for the two offender numbers, including expired. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId" : "getNonAssociationDetails",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A3456GH"
        }, {
          "name" : "nsOffenderNo",
          "in" : "path",
          "description" : "Non-association offender",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "A4578ED"
        } ],
        "responses" : {
          "200" : {
            "description" : "List of non-associations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NonAssociationResponse"
                  }
                }
              }
            }
          },
          "404" : {
            "description" : "Non-association does not exist, or one of the offenders does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/ids" : {
      "get" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "get non-associations by filter",
        "description" : "Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS.",
        "operationId" : "getNonAssociationsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of composite ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageNonAssociationIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_NON_ASSOCIATIONS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/booking/{bookingId}" : {
      "get" : {
        "tags" : [ "non-association-resource" ],
        "summary" : "Get non-associations by booking ID",
        "description" : "Get non-associations for the given booking ID. Returns empty list if none found. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId" : "getByBookingId",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "Booking ID",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "List of non-associations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/NonAssociationIdResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/movements/{offenderNo}/temporary-absences" : {
      "get" : {
        "tags" : [ "movements-resource" ],
        "summary" : "Get temporary absence applications, schedules and external movements for an offender",
        "description" : "Get temporary absence applications, schedules and external movements for an offender. This is used to migrate temporary absences to DPS. Requires role NOMIS_MOVEMENTS",
        "operationId" : "getTemporaryAbsencesAndMovements",
        "parameters" : [ {
          "name" : "offenderNo",
          "in" : "path",
          "description" : "Offender number (NOMS ID)",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender number (NOMS ID)",
            "example" : "A1234BC"
          },
          "example" : "A1234BC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Offender temporary absences returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/OffenderTemporaryAbsencesResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_MOVEMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}" : {
      "get" : {
        "tags" : [ "location-resource" ],
        "summary" : "Get a location",
        "description" : "Get the location given the id. Requires role ROLE_NOMIS_LOCATIONS",
        "operationId" : "getLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Location id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          },
          "example" : 12345678
        } ],
        "responses" : {
          "200" : {
            "description" : "Location information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No location exists for this id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/key/{key}" : {
      "get" : {
        "tags" : [ "location-resource" ],
        "summary" : "Get a location",
        "description" : "Get the location given the business key. Requires role ROLE_NOMIS_LOCATIONS",
        "operationId" : "getLocationByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Location id",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "LEI-B-3-014"
        } ],
        "responses" : {
          "200" : {
            "description" : "Location information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "No location exists for this id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, correct role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/ids" : {
      "get" : {
        "tags" : [ "location-resource" ],
        "summary" : "get locations by filter",
        "description" : "Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_LOCATIONS.",
        "operationId" : "getLocationsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of ids is returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageLocationIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role ROLE_NOMIS_LOCATIONS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/reconciliation/ids/all-from-id" : {
      "get" : {
        "tags" : [ "incident-resource" ],
        "summary" : "Gets open incident Ids from a given id number",
        "description" : "Retrieves paged ids for open incidents - used for reconciliation\n      Gets the specified number of open incidents starting after the given id number.\n      Clients can iterate through all incidents by calling this endpoint using the id from the last call (omit for first call).\n      Iteration ends when the returned incidentIds list has size less than the requested page size.\n      Requires role NOMIS_INCIDENTS",
        "operationId" : "getOpenIncidentIdsFromId",
        "parameters" : [ {
          "name" : "incidentId",
          "in" : "query",
          "description" : "If supplied get incidents starting after this id",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0,
            "description" : "If supplied get incidents starting after this id",
            "example" : 1555999
          },
          "example" : 1555999
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Number of incidents to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10,
            "description" : "Number of incidents to get"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of reconciliation ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentIdsWithLast"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/reconciliation/agency/{agencyId}/ids" : {
      "get" : {
        "tags" : [ "incident-resource" ],
        "summary" : "Gets ids of open incidents at an agency",
        "description" : "Retrieves paged ids for open incidents for an agency.",
        "operationId" : "getOpenIncidentIdsForReconciliation",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "agencyId",
          "in" : "path",
          "description" : "Agency Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Agency Id",
            "example" : "LEI"
          },
          "example" : "LEI"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of reconciliation ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageIncidentIdResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/reconciliation/agency/{agencyId}/counts" : {
      "get" : {
        "tags" : [ "incident-resource" ],
        "summary" : "Gets incident counts",
        "description" : "Retrieves open and closed incident counts for an agency.",
        "operationId" : "getIncidentCountsForReconciliation",
        "parameters" : [ {
          "name" : "agencyId",
          "in" : "path",
          "description" : "Agency Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Agency Id",
            "example" : "LEI"
          },
          "example" : "LEI"
        } ],
        "responses" : {
          "200" : {
            "description" : "Reconciliation data returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncidentsReconciliationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/reconciliation/agencies" : {
      "get" : {
        "tags" : [ "incident-resource" ],
        "summary" : "Retrieve a list of all agencies by id that have raised incidents)",
        "description" : "Retrieve a list of all agencies by id that have raised incidents, including prisons and PECS. Requires authorised access",
        "operationId" : "getIncidentAgencies",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IncidentAgencyId"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/ids" : {
      "get" : {
        "tags" : [ "incident-resource" ],
        "summary" : "get incident IDs by filter",
        "description" : "Retrieves a paged list of incident ids by filter. Requires ROLE_NOMIS_INCIDENTS.",
        "operationId" : "getIdsByFilter_1",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by those that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by those that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageIncidentIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCIDENTS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/booking/{bookingId}" : {
      "get" : {
        "tags" : [ "incident-resource" ],
        "summary" : "Get a list of Incidents for a booking",
        "description" : "Gets a list of all incidents relating to an offender booking. Requires role NOMIS_INCIDENTS",
        "operationId" : "getIncidentsForBooking",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "booking id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/IncidentResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_INCIDENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/ids" : {
      "get" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "get incentives (a.k.a IEP) by filter",
        "description" : "Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId" : "getIncentivesByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by incentives that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by incentives that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "latestOnly",
          "in" : "query",
          "description" : "if true only retrieve latest incentive for each prisoner",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          },
          "example" : true
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of composite ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageIncentiveIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}" : {
      "get" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "get a prisoner's incentive level (a.k.a IEP) by id (bookingId and incentiveId)",
        "description" : "Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId" : "getIncentive",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "NOMIS booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS booking Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "incentiveSequence",
          "in" : "path",
          "description" : "NOMIS Incentive sequence ",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS Incentive sequence ",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "the incentive level details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/current" : {
      "get" : {
        "tags" : [ "incentives-resource" ],
        "summary" : "get a prisoner's current incentive level (a.k.a IEP) for a booking",
        "description" : "Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId" : "getCurrentIncentive",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "NOMIS booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS booking Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the incentive level details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{id}" : {
      "get" : {
        "tags" : [ "document-resource" ],
        "summary" : "Retrieve a document",
        "description" : "Retrieve a document by its id. Requires role NOMIS_DOCUMENTS",
        "operationId" : "getDocument",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The document id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The document id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/octet-stream" : {
                "schema" : {
                  "type" : "string",
                  "format" : "byte"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_DOCUMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Document not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/documents/booking/{bookingId}" : {
      "get" : {
        "tags" : [ "document-resource" ],
        "summary" : "Retrieve a list of document ids",
        "description" : "Retrieve a list of document ids searching by booking id and template name. Requires role NOMIS_DOCUMENTS",
        "operationId" : "getDocumentIds",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "The booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id"
          }
        }, {
          "name" : "templateName",
          "in" : "query",
          "description" : "The unique name of the template used for a document - this is a repeatable request parameter",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "CSIP_FAC"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DocumentIdResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_DOCUMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/{id}" : {
      "get" : {
        "tags" : [ "csip-resource" ],
        "summary" : "Get CSIP details",
        "description" : "Gets csip details. Requires role NOMIS_CSIP",
        "operationId" : "getCSIP",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "CSIP id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "CSIP id"
          }
        }, {
          "name" : "includeDocumentIds",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CSIPResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/factors/{csipFactorId}" : {
      "get" : {
        "tags" : [ "csip-factor-resource" ],
        "summary" : "Get CSIP factor details",
        "description" : "Gets csip factor details. Requires role NOMIS_CSIP",
        "operationId" : "getCSIPFactor",
        "parameters" : [ {
          "name" : "csipFactorId",
          "in" : "path",
          "description" : "CSIP Factor id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "CSIP Factor id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CSIPFactorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "csip-factor-resource" ],
        "summary" : "Deletes a csip factor",
        "description" : "Deletes a csip factor. Requires ROLE_NOMIS_CSIP",
        "operationId" : "deleteCSIPFactor",
        "parameters" : [ {
          "name" : "csipFactorId",
          "in" : "path",
          "description" : "CSIP Factor Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "CSIP Factor Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "204" : {
            "description" : "Csip factor Deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/count" : {
      "get" : {
        "tags" : [ "csip-resource" ],
        "summary" : "Get csip count",
        "description" : "Gets a count of all csips. Requires role NOMIS_CSIP",
        "operationId" : "getCSIPCount",
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "integer",
                  "format" : "int64"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/booking/{bookingId}" : {
      "get" : {
        "tags" : [ "csip-resource" ],
        "summary" : "Get a list of CSIP Ids for a booking",
        "description" : "Gets a list of all csip ids relating to an offender booking. Requires role NOMIS_CSIP",
        "operationId" : "getCSIPIdsForBooking",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "booking id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "booking id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CSIPIdResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/court-cases/{id}" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get a court case, without offenderNo validation",
        "description" : "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId" : "getCourtCaseForMigration",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Court case id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Court case id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "the court case details",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CourtCaseResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Court case not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/court-cases/ids" : {
      "get" : {
        "tags" : [ "sentencing-resource" ],
        "summary" : "get court case IDs by filter",
        "description" : "Retrieves a paged list of court case ids by filter. Requires ROLE_NOMIS_SENTENCING.",
        "operationId" : "getCourtCaseIdsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by court cases that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by court cases that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageCourtCaseIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role ROLE_NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/ids" : {
      "get" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Get all Ids",
        "description" : "Retrieves all corporate Ids - typically for a migration. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "getCorporateIds",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by corporate that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by corporate that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        } ],
        "responses" : {
          "200" : {
            "description" : "Page of corporate Ids",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageCorporateOrganisationIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/core-person/{prisonNumber}" : {
      "get" : {
        "tags" : [ "core-person-resource" ],
        "summary" : "Get an offender by prison number",
        "description" : "Retrieves an offender. Requires ROLE_NOMIS_CORE_PERSON",
        "operationId" : "getOffender",
        "parameters" : [ {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "Prison number aka noms id / offender id display",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison number aka noms id / offender id display",
            "example" : "A1234BC"
          },
          "example" : "A1234BC"
        } ],
        "responses" : {
          "200" : {
            "description" : "Core person information returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CorePerson"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CORE_PERSON",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Offender does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}" : {
      "get" : {
        "tags" : [ "contact-person-resource" ],
        "summary" : "Get a contact by ID",
        "description" : "Gets a single contact by ID",
        "operationId" : "getContact",
        "parameters" : [ {
          "name" : "contactId",
          "in" : "path",
          "description" : "Contact Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contact Id",
            "example" : 75675
          },
          "example" : 75675
        } ],
        "responses" : {
          "200" : {
            "description" : "Contact Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PersonContact"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Contact not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/ids/latest-from-id" : {
      "get" : {
        "tags" : [ "bookings-resource" ],
        "summary" : "Gets the identifiers for all latest bookings.",
        "description" : "Gets the specified number of latest bookings starting after the given id number.\n      Clients can iterate through all bookings by calling this endpoint using the id from the last call (omit for first call).\n      Iteration ends when the returned prisonerIds list has size less than the requested page size.\n      Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW.",
        "operationId" : "getAllLatestBookingsFromId",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "query",
          "description" : "If supplied get offenders starting after this id",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 0,
            "description" : "If supplied get offenders starting after this id",
            "example" : 1555999
          },
          "example" : 1555999
        }, {
          "name" : "activeOnly",
          "in" : "query",
          "description" : "If supplied only return bookings that are still active",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "If supplied only return bookings that are still active",
            "example" : true
          },
          "example" : true
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Number of bookings to get",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 10,
            "description" : "Number of bookings to get"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "list of prisoner ids containing bookingId and offenderNo",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/BookingIdsWithLast"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_PRISONER_API__SYNCHRONISATION__RW not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attendances/reconciliation/{prisonId}" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Get data for an attendance sync reconciliation",
        "description" : "Gets the number of active attendances for each booking in the prison",
        "operationId" : "getAttendanceReconciliationSummary",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "date",
          "in" : "query",
          "description" : "Date",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Reconciliation data returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AttendanceReconciliationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{eventId}" : {
      "get" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Get appointment by event id",
        "description" : "Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS",
        "operationId" : "getAppointmentById",
        "parameters" : [ {
          "name" : "eventId",
          "in" : "path",
          "description" : "Event Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Event Id",
            "example" : 12345678
          },
          "example" : 12345678
        } ],
        "responses" : {
          "200" : {
            "description" : "Appointment information with created id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppointmentResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking, location and timestamp combination does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/ids" : {
      "get" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "get appointments by filter",
        "description" : "Retrieves a paged list of appointment ids by filter. Requires ROLE_NOMIS_APPOINTMENTS.",
        "operationId" : "getAppointmentsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "prisonIds",
          "in" : "query",
          "description" : "Filter results by prison ids",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "['MDI','LEI']"
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by appointments that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by appointments that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2022-04-11"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of composite ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageAppointmentIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/counts" : {
      "get" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Get appointment counts by prison, event sub type and future / past. Note that the 'future' is everything from tomorrow onwards.",
        "description" : "Retrieves counts of appointments for the migration preview. Requires ROLE_NOMIS_APPOINTMENTS.",
        "operationId" : "getAppointmentCounts",
        "parameters" : [ {
          "name" : "prisonIds",
          "in" : "query",
          "description" : "Filter results by prison ids",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "['MDI','LEI']"
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by appointments that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by appointments that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2022-04-11"
        } ],
        "responses" : {
          "200" : {
            "description" : "Appointment counts returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AppointmentCountsResponse"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}" : {
      "get" : {
        "tags" : [ "appointments-resource" ],
        "summary" : "Get an appointment",
        "description" : "Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS",
        "operationId" : "getAppointment",
        "parameters" : [ {
          "name" : "bookingId",
          "in" : "path",
          "description" : "NOMIS booking Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS booking Id",
            "example" : 1234567
          },
          "example" : 1234567
        }, {
          "name" : "locationId",
          "in" : "path",
          "description" : "Appointment room internal location Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Appointment room internal location Id",
            "example" : 1234567
          },
          "example" : 1234567
        }, {
          "name" : "dateTime",
          "in" : "path",
          "description" : "Appointment date and start time",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Appointment date and start time",
            "example" : "2023-02-27T14:40"
          },
          "example" : "2023-02-27T14:40"
        } ],
        "responses" : {
          "200" : {
            "description" : "Appointment information with created id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AppointmentResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Booking, location and timestamp combination does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/{allocationId}" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Get allocation details",
        "description" : "Gets allocation details. Requires role NOMIS_ACTIVITIES",
        "operationId" : "getAllocation",
        "parameters" : [ {
          "name" : "allocationId",
          "in" : "path",
          "description" : "Allocation id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Allocation id"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetAllocationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/suspended" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Find suspended allocations",
        "description" : "Searches for suspended prisoners on active course allocations. Requires role NOMIS_ACTIVITIES",
        "operationId" : "findSuspendedAllocations",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "query",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "courseActivityId",
          "in" : "query",
          "description" : "Course Activity ID",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Course Activity ID"
          }
        }, {
          "name" : "activeOnDate",
          "in" : "query",
          "description" : "Allocations must be active on this date to be included. For migrations this is the date we switch to DPS. Defaults to tomorrow.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "description" : "Allocations must be active on this date to be included. For migrations this is the date we switch to DPS. Defaults to tomorrow."
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FindSuspendedAllocationsResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/reconciliation/{prisonId}" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Get data for an allocation sync reconciliation",
        "description" : "Gets the number of active allocations for each booking in the prison",
        "operationId" : "getAllocationReconciliationSummary",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "suspended",
          "in" : "query",
          "description" : "suspended allocations only",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "description" : "suspended allocations only"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Reconciliation data returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AllocationReconciliationResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/missing-pay-bands" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Find allocations with missing pay bands",
        "description" : "Searches for prisoners allocated to a course activity without a pay band assigned. Requires role NOMIS_ACTIVITIES",
        "operationId" : "findAllocationsWithMissingPayBands",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "query",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "courseActivityId",
          "in" : "query",
          "description" : "Course Activity ID",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Course Activity ID"
          }
        }, {
          "name" : "activeOnDate",
          "in" : "query",
          "description" : "Allocations must be active on this date to be included. For migrations this is the date we switch to DPS. Defaults to tomorrow.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "description" : "Allocations must be active on this date to be included. For migrations this is the date we switch to DPS. Defaults to tomorrow."
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FindAllocationsMissingPayBandsResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/ids" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Find paged active allocations",
        "description" : "Searches for active course allocations. Requires role NOMIS_ACTIVITIES",
        "operationId" : "findActiveAllocations",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "prisonId",
          "in" : "query",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "courseActivityId",
          "in" : "query",
          "description" : "Course Activity ID",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Course Activity ID"
          }
        }, {
          "name" : "activeOnDate",
          "in" : "query",
          "description" : "Allocations must be active on this date to be included. For migrations this is the date we switch to DPS. Defaults to tomorrow.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "description" : "Allocations must be active on this date to be included. For migrations this is the date we switch to DPS. Defaults to tomorrow."
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageFindActiveAllocationIdsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/agency-switches/{serviceCode}" : {
      "get" : {
        "tags" : [ "service-agency-switches-resource" ],
        "summary" : "Retrieve a list of agencies switched on for the service code",
        "description" : "Returns a list of agencies switched on for the service code.\n      A special agencyId of `*ALL*` is used to designate that the service is switched on for all agencies.\n      Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW",
        "operationId" : "getAgencySwitches",
        "parameters" : [ {
          "name" : "serviceCode",
          "in" : "path",
          "description" : "The code of the service from the EXTERNAL_SERVICES table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The code of the service from the EXTERNAL_SERVICES table"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/AgencyDetails"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/agency-switches/{serviceCode}/prisoner/{prisonNumber}" : {
      "get" : {
        "tags" : [ "service-agency-switches-resource" ],
        "summary" : "Check if a service is turned on for the prison relating to this prisoner",
        "description" : "Check if the prisoner's current prison is turned on for a service. Requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW",
        "operationId" : "checkServicePrisonForPrisoner",
        "parameters" : [ {
          "name" : "serviceCode",
          "in" : "path",
          "description" : "The code of the service from the EXTERNAL_SERVICES table",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The code of the service from the EXTERNAL_SERVICES table",
            "example" : "ACTIVITY"
          },
          "example" : "ACTIVITY"
        }, {
          "name" : "prisonNumber",
          "in" : "path",
          "description" : "Offender No AKA prisoner number",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Offender No AKA prisoner number",
            "example" : "A1234BC"
          },
          "example" : "A1234BC"
        } ],
        "responses" : {
          "204" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_PRISONER_API__SYNCHRONISATION__RW",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not Found, the service is not turned on for the prison",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjustments/ids" : {
      "get" : {
        "tags" : [ "sentencing-adjustment-resource" ],
        "summary" : "get adjustment IDs (key date and Sentence adjustments) by filter",
        "description" : "Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING.",
        "operationId" : "getAdjustmentsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by adjustments that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by adjustments that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageAdjustmentIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/hearings/{hearingId}" : {
      "get" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "get hearing by hearing Id",
        "description" : "Retrieves a hearing by the hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "getAdjudicationHearing",
        "parameters" : [ {
          "name" : "hearingId",
          "in" : "path",
          "description" : "NOMIS Hearing Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS Hearing Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Hearing Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Hearing does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/hearings/{hearingId}/charge/{chargeSequence}/result" : {
      "get" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "get hearing result by hearing id",
        "description" : "Retrieves a hearing result by the nomis hearing id. DPS migrated and synchronised hearing results always have a result sequence of 1 Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "getAdjudicationHearingResult",
        "parameters" : [ {
          "name" : "hearingId",
          "in" : "path",
          "description" : "NOMIS Hearing Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS Hearing Id",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Nomis charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Nomis charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Hearing Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Hearing result does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/charges/ids" : {
      "get" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "get adjudication charge IDs by filter",
        "description" : "Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS.",
        "operationId" : "getAdjudicationChargeIdsByFilter",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Filter results by adjudication charges that were created on or after the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Filter results by adjudication charges that were created on or before the given date",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          },
          "example" : "2021-11-03"
        }, {
          "name" : "prisonIds",
          "in" : "query",
          "description" : "Filter results by adjudication charges that were created in one of the given prisons",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "200" : {
            "description" : "Pageable list of ids are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageAdjudicationChargeIdResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint when role NOMIS_ADJUDICATIONS not present",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}" : {
      "get" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "get adjudication by adjudication number",
        "description" : "Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "getAdjudication",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Adjudication Information Returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge-sequence/{chargeSequence}" : {
      "get" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "get adjudication by adjudication number and charge sequence",
        "description" : "Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "getAdjudicationByCharge",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        }, {
          "name" : "chargeSequence",
          "in" : "path",
          "description" : "Charge sequence",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Charge sequence",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "200" : {
            "description" : "Adjudication with charge information returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/AdjudicationChargeResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Adjudication or adjudication charge does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/without-schedule-rules" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Find activities without schedule rules",
        "description" : "Searches for course activities that are active with active allocations but no schedule rules. Requires role NOMIS_ACTIVITIES",
        "operationId" : "findActivitiesWithoutScheduleRules",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "query",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "courseActivityId",
          "in" : "query",
          "description" : "Course Activity ID",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Course Activity ID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FindActivitiesWithoutScheduleRulesResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/rates-with-unknown-incentives" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Find activities with pay rates with unknown incentive level",
        "description" : "Searches for course activities that have an active pay rate with an unknown incentive level. Requires role NOMIS_ACTIVITIES",
        "operationId" : "findRatesWithUnknownIncentiveLevel",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "query",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "courseActivityId",
          "in" : "query",
          "description" : "Course Activity ID",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Course Activity ID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/FindPayRateWithUnknownIncentiveResponse"
                  }
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/ids" : {
      "get" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Find paged active activities",
        "description" : "Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES",
        "operationId" : "findActiveActivities",
        "parameters" : [ {
          "name" : "pageRequest",
          "in" : "query",
          "required" : true,
          "schema" : {
            "$ref" : "#/components/schemas/Pageable"
          }
        }, {
          "name" : "prisonId",
          "in" : "query",
          "description" : "Prison id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison id"
          }
        }, {
          "name" : "courseActivityId",
          "in" : "query",
          "description" : "Course Activity ID",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "description" : "Course Activity ID"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageFindActiveActivityIdsResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident/adjudication-number/{adjudicationNumber}" : {
      "delete" : {
        "tags" : [ "adjudication-resource" ],
        "summary" : "**** Used to recover from a duplicate incident creation only ***** Deletes an incident by adjudication number.",
        "description" : "Deletes an incident by adjudication number. Supports the removal of a duplicate incident without a DPS mapping. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId" : "deleteIncident_1",
        "parameters" : [ {
          "name" : "adjudicationNumber",
          "in" : "path",
          "description" : "Adjudication number",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Adjudication number",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "200" : {
            "description" : "Incident deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/{csipId}" : {
      "delete" : {
        "tags" : [ "csip-resource" ],
        "summary" : "Deletes a csip report",
        "description" : "Deletes a csip report. Requires ROLE_NOMIS_CSIP",
        "operationId" : "deleteCSIP",
        "parameters" : [ {
          "name" : "csipId",
          "in" : "path",
          "description" : "CSIP Report Id",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "CSIP Report Id",
            "example" : 12345
          },
          "example" : 12345
        } ],
        "responses" : {
          "204" : {
            "description" : "Csip report Deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/type/{typeCode}" : {
      "delete" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Delete a corporate type",
        "description" : "Deletes a new corporate type record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deleteCorporateType",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "typeCode",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Corporate type deleted (or did not exist)"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Corporate does not exist",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/corporates/{corporateId}/address/phone/{phoneId}" : {
      "delete" : {
        "tags" : [ "corporate-resource" ],
        "summary" : "Delete a corporate address phone",
        "description" : "Deletes a corporate address phone record. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId" : "deleteCorporateAddressPhone",
        "parameters" : [ {
          "name" : "corporateId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        }, {
          "name" : "phoneId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Corporate address phone deleted or does not exist"
          },
          "400" : {
            "description" : "The request params contains address or corporate that are not related with the phone",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attendances/{eventId}" : {
      "delete" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Delete a NOMIS attendance (from OFFENDER_COURSE_ATTENDANCES table)",
        "description" : "Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES",
        "operationId" : "deleteAttendance_1",
        "parameters" : [ {
          "name" : "eventId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Attendance is deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/{referenceId}" : {
      "delete" : {
        "tags" : [ "activities-resource" ],
        "summary" : "Delete a NOMIS allocation (from OFFENDER_PROGRAM_PROFILES table)",
        "description" : "Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES",
        "operationId" : "deleteAllocation",
        "parameters" : [ {
          "name" : "referenceId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int64"
          }
        } ],
        "responses" : {
          "204" : {
            "description" : "Allocation is deleted"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403" : {
            "description" : "Forbidden, requires role NOMIS_ACTIVITIES",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorResponse" : {
        "type" : "object",
        "properties" : {
          "status" : {
            "type" : "integer",
            "format" : "int32"
          },
          "errorCode" : {
            "type" : "integer",
            "format" : "int32"
          },
          "userMessage" : {
            "type" : "string"
          },
          "developerMessage" : {
            "type" : "string"
          },
          "moreInfo" : {
            "type" : "string",
            "description" : "For 409 errors this may contain the entity Id for the existing record that causes the duplicate"
          }
        },
        "required" : [ "status" ]
      },
      "UpdateSentenceAdjustmentRequest" : {
        "type" : "object",
        "description" : "Sentence adjustment update request",
        "properties" : {
          "adjustmentTypeCode" : {
            "type" : "string",
            "description" : "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "enum" : [ "RSR", "UR", "S240A", "RST", "RX" ],
            "example" : "RX",
            "minLength" : 1
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date adjustment is applied"
          },
          "adjustmentFromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start of the period which contributed to the adjustment"
          },
          "adjustmentDays" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of days for the adjustment",
            "minimum" : 0
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Flag to indicate if the adjustment is being applied"
          },
          "sentenceSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Sentence sequence",
            "minimum" : 0
          }
        },
        "required" : [ "adjustmentDays", "adjustmentTypeCode", "sentenceSequence" ]
      },
      "UpsertAttendanceRequest" : {
        "type" : "object",
        "description" : "Course activity create/update request",
        "properties" : {
          "scheduleDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of the course schedule",
            "example" : "2023-04-03"
          },
          "startTime" : {
            "type" : "string",
            "description" : "The time of the course schedule",
            "example" : "10:00"
          },
          "endTime" : {
            "type" : "string",
            "description" : "The time the course schedule ends",
            "example" : "11:00"
          },
          "eventStatusCode" : {
            "type" : "string",
            "description" : "The status of the attendance",
            "example" : "SCH"
          },
          "eventOutcomeCode" : {
            "type" : "string",
            "description" : "The outcome code for a completed attendance",
            "example" : "ATT"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments relating to the attendance",
            "example" : "Disruptive"
          },
          "unexcusedAbsence" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether the absence is excused",
            "example" : true
          },
          "authorisedAbsence" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether the absence is authorised",
            "example" : true
          },
          "paid" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether the attendance is to be paid",
            "example" : true
          },
          "bonusPay" : {
            "type" : "number",
            "description" : "Any bonus pay for the attendance",
            "example" : 1.5
          }
        },
        "required" : [ "endTime", "eventStatusCode", "scheduleDate", "startTime" ]
      },
      "UpsertAttendanceResponse" : {
        "type" : "object",
        "description" : "Attendance create/update response",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The attendance event id"
          },
          "courseScheduleId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The course schedule id for the attendance"
          },
          "created" : {
            "type" : "boolean",
            "description" : "Whether or the attendance was created"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison code"
          }
        },
        "required" : [ "courseScheduleId", "created", "eventId", "prisonId" ]
      },
      "UpdateVisitBalanceRequest" : {
        "type" : "object",
        "description" : "Visit Balance update request",
        "properties" : {
          "remainingVisitOrders" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of unallocated (remaining) visit orders",
            "minimum" : 0
          },
          "remainingPrivilegedVisitOrders" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of unallocated (remaining) privileged visit orders",
            "minimum" : 0
          }
        }
      },
      "UpdateVisitRequest" : {
        "type" : "object",
        "description" : "Visit update request",
        "properties" : {
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Visit start date and time"
          },
          "endTime" : {
            "type" : "string",
            "description" : "Visit end time",
            "example" : "14:30",
            "pattern" : "HH:mm"
          },
          "visitorPersonIds" : {
            "type" : "array",
            "description" : "Visitors",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "room" : {
            "type" : "string",
            "description" : "Name of the real world room where visit will take place"
          },
          "openClosedStatus" : {
            "type" : "string",
            "description" : "Whether visit is restricted to a closed session",
            "enum" : [ "OPEN", "CLOSED" ]
          },
          "visitComment" : {
            "type" : "string",
            "description" : "Comment to be added to visit"
          }
        },
        "required" : [ "endTime", "openClosedStatus", "room", "startDateTime", "visitorPersonIds" ]
      },
      "CancelVisitRequest" : {
        "type" : "object",
        "description" : "Visit cancellation",
        "properties" : {
          "outcome" : {
            "type" : "string",
            "description" : "The cancellation reason",
            "enum" : [ "VISCANC", "OFFCANC", "ADMIN", "NSHOW" ],
            "minLength" : 1
          }
        },
        "required" : [ "outcome" ]
      },
      "CourtAppearanceRequest" : {
        "type" : "object",
        "description" : "Court Event",
        "properties" : {
          "eventDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "courtEventType" : {
            "type" : "string"
          },
          "courtId" : {
            "type" : "string"
          },
          "outcomeReasonCode" : {
            "type" : "string"
          },
          "nextEventDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "courtEventCharges" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "nextCourtId" : {
            "type" : "string"
          }
        },
        "required" : [ "courtEventCharges", "courtEventType", "courtId", "eventDateTime" ]
      },
      "OffenderChargeIdResponse" : {
        "type" : "object",
        "description" : "Create offender charge response",
        "properties" : {
          "offenderChargeId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "offenderChargeId" ]
      },
      "UpdateCourtAppearanceResponse" : {
        "type" : "object",
        "description" : "Create adjustment response",
        "properties" : {
          "createdCourtEventChargesIds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OffenderChargeIdResponse"
            }
          },
          "deletedOffenderChargesIds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OffenderChargeIdResponse"
            }
          }
        },
        "required" : [ "createdCourtEventChargesIds", "deletedOffenderChargesIds" ]
      },
      "OffenderChargeRequest" : {
        "type" : "object",
        "description" : "Court Charge",
        "properties" : {
          "offenceCode" : {
            "type" : "string"
          },
          "offenceDate" : {
            "type" : "string",
            "format" : "date"
          },
          "offenceEndDate" : {
            "type" : "string",
            "format" : "date"
          },
          "resultCode1" : {
            "type" : "string"
          }
        },
        "required" : [ "offenceCode" ]
      },
      "RecallRelatedSentenceDetails" : {
        "type" : "object",
        "description" : "Recall sentences to set",
        "properties" : {
          "sentenceId" : {
            "$ref" : "#/components/schemas/SentenceId"
          },
          "sentenceCategory" : {
            "type" : "string"
          },
          "sentenceCalcType" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          }
        },
        "required" : [ "active", "sentenceCalcType", "sentenceCategory", "sentenceId" ]
      },
      "ReturnToCustodyRequest" : {
        "type" : "object",
        "description" : "Return to custody data",
        "properties" : {
          "returnToCustodyDate" : {
            "type" : "string",
            "format" : "date"
          },
          "enteredByStaffUsername" : {
            "type" : "string"
          },
          "recallLength" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "enteredByStaffUsername", "recallLength", "returnToCustodyDate" ]
      },
      "SentenceId" : {
        "type" : "object",
        "properties" : {
          "offenderBookingId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sentenceSequence" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "offenderBookingId", "sentenceSequence" ]
      },
      "UpdateRecallRequest" : {
        "type" : "object",
        "description" : "Recall convert request",
        "properties" : {
          "sentences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecallRelatedSentenceDetails"
            }
          },
          "returnToCustody" : {
            "$ref" : "#/components/schemas/ReturnToCustodyRequest"
          },
          "recallRevocationDate" : {
            "type" : "string",
            "format" : "date"
          },
          "beachCourtEventIds" : {
            "type" : "array",
            "description" : "the breach court appearance that require updating",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "beachCourtEventIds", "recallRevocationDate", "sentences" ]
      },
      "RevertRecallRequest" : {
        "type" : "object",
        "description" : "Recall revert request when a recall is replaced with older recall",
        "properties" : {
          "sentences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecallRelatedSentenceDetails"
            }
          },
          "returnToCustody" : {
            "$ref" : "#/components/schemas/ReturnToCustodyRequest"
          },
          "beachCourtEventIds" : {
            "type" : "array",
            "description" : "the breach court appearance that require deleting",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "beachCourtEventIds", "sentences" ]
      },
      "DeleteRecallRequest" : {
        "type" : "object",
        "description" : "Delete recall sentence request",
        "properties" : {
          "sentences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecallRelatedSentenceDetails"
            }
          },
          "beachCourtEventIds" : {
            "type" : "array",
            "description" : "the breach court appearance that require deleting",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "beachCourtEventIds", "sentences" ]
      },
      "UpdatePrisonerRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to update a prisoner in NOMIS",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Restriction type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction became active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction is no longer active"
          },
          "enteredStaffUsername" : {
            "type" : "string",
            "description" : "Username Staff member who updated the restriction"
          },
          "authorisedStaffUsername" : {
            "type" : "string",
            "description" : "Username Staff member who authorised the restriction"
          }
        },
        "required" : [ "authorisedStaffUsername", "effectiveDate", "enteredStaffUsername", "typeCode" ]
      },
      "UpsertProfileDetailsRequest" : {
        "type" : "object",
        "description" : "Profile Details to update a prisoner",
        "properties" : {
          "profileType" : {
            "type" : "string",
            "description" : "Profile Type"
          },
          "profileCode" : {
            "type" : "string",
            "description" : "Profile Code"
          }
        },
        "required" : [ "profileType" ]
      },
      "UpsertProfileDetailsResponse" : {
        "type" : "object",
        "description" : "Profile Details upsert response",
        "properties" : {
          "created" : {
            "type" : "boolean",
            "description" : "Whether the record was created or updated"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The offender booking ID that was changed"
          }
        },
        "required" : [ "bookingId", "created" ]
      },
      "CreateSentenceRequest" : {
        "type" : "object",
        "description" : "Sentence request",
        "properties" : {
          "startDate" : {
            "type" : "string",
            "format" : "date"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date"
          },
          "status" : {
            "type" : "string"
          },
          "sentenceCategory" : {
            "type" : "string"
          },
          "sentenceCalcType" : {
            "type" : "string"
          },
          "sentenceLevel" : {
            "type" : "string"
          },
          "fine" : {
            "type" : "number"
          },
          "offenderChargeIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "consecutiveToSentenceSeq" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "eventId", "offenderChargeIds", "sentenceCalcType", "sentenceCategory", "sentenceLevel", "startDate", "status" ]
      },
      "AlertResponse" : {
        "type" : "object",
        "description" : "The data held in NOMIS about an alert associated with a prisoner",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The prisoner's bookingId related to this alert"
          },
          "bookingSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The prisoner's bookingId sequence related to this alert. Used to show if this is on latest bookings"
          },
          "alertSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sequence primary key within this booking"
          },
          "alertCode" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The alert code"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The alert type"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date alert started"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date alert expired"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "true if alert is active and has not expired"
          },
          "isVerified" : {
            "type" : "boolean",
            "description" : "true if alert has been verified by another member of staff"
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "Free format text of person or department that authorised the alert",
            "example" : "security"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "alertCode", "alertSequence", "audit", "bookingId", "bookingSequence", "date", "isActive", "isVerified", "type" ]
      },
      "CodeDescription" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        },
        "required" : [ "code", "description" ]
      },
      "NomisAudit" : {
        "type" : "object",
        "description" : "The data held in NOMIS the person or system that created this record",
        "properties" : {
          "createDatetime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date time record was created"
          },
          "createUsername" : {
            "type" : "string",
            "description" : "Username of person that created the record (might also be a system) "
          },
          "createDisplayName" : {
            "type" : "string",
            "description" : "Real name of person that created the record (might by null for system users)"
          },
          "modifyUserId" : {
            "type" : "string",
            "description" : "Username of person that last modified the record (might also be a system)"
          },
          "modifyDisplayName" : {
            "type" : "string",
            "description" : "Real name of person that modified the record (might by null for system users)"
          },
          "modifyDatetime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date time record was last modified"
          },
          "auditTimestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Audit Date time"
          },
          "auditUserId" : {
            "type" : "string",
            "description" : "Audit username"
          },
          "auditModuleName" : {
            "type" : "string",
            "description" : "NOMIS or DPS module that created the record"
          },
          "auditClientUserId" : {
            "type" : "string",
            "description" : "Client userid"
          },
          "auditClientIpAddress" : {
            "type" : "string",
            "description" : "IP Address where request originated from"
          },
          "auditClientWorkstationName" : {
            "type" : "string",
            "description" : "Machine name where request originated from"
          },
          "auditAdditionalInfo" : {
            "type" : "string",
            "description" : "Additional information that is audited"
          }
        },
        "required" : [ "createDatetime", "createUsername" ]
      },
      "UpdateAlertRequest" : {
        "type" : "object",
        "description" : "A request to update an alert in NOMIS",
        "properties" : {
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date alert started"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date alert expired"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "true if alert is active and has not expired"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment"
          },
          "updateUsername" : {
            "type" : "string",
            "description" : "Username of person that update the record (might also be a system) "
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "Free format text of person or department that authorised the alert",
            "example" : "security"
          }
        },
        "required" : [ "date", "isActive", "updateUsername" ]
      },
      "UpdatePersonRequest" : {
        "type" : "object",
        "description" : "Request to update an person (aka DPS contact) in NOMIS",
        "properties" : {
          "firstName" : {
            "type" : "string",
            "description" : "First name of the person",
            "example" : "Ashantee"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname name of the person",
            "example" : "Addo"
          },
          "middleName" : {
            "type" : "string",
            "description" : "Middle name of the person",
            "example" : "Ashwin"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of birth of the person"
          },
          "genderCode" : {
            "type" : "string",
            "description" : "Gender code of the person",
            "example" : "F"
          },
          "titleCode" : {
            "type" : "string",
            "description" : "Title code of the person",
            "example" : "DR"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "Language code of the person",
            "example" : "FRE-FRA"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "True if the person requires an interpreter"
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "Domestic status code aka marital status of the person",
            "example" : "S"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "True if a staff member"
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the person dies"
          }
        },
        "required" : [ "firstName", "interpreterRequired", "lastName" ]
      },
      "UpdateContactPersonRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to update a contact restriction in NOMIS for either global or against a specific relationship",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Restriction type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction became active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction is no longer active"
          },
          "enteredStaffUsername" : {
            "type" : "string",
            "description" : "Username Staff member who updated the restriction"
          }
        },
        "required" : [ "effectiveDate", "enteredStaffUsername", "typeCode" ]
      },
      "UpdatePersonPhoneRequest" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "The number",
            "example" : "0114 555 555"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension",
            "example" : "x432"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "Phone type code",
            "example" : "MOB"
          }
        },
        "required" : [ "number", "typeCode" ]
      },
      "UpdatePersonIdentifierRequest" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "The identifier type code"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The identifier value",
            "example" : "NE121212T"
          },
          "issuedAuthority" : {
            "type" : "string",
            "description" : "The issued authority",
            "example" : "Police"
          }
        },
        "required" : [ "identifier", "typeCode" ]
      },
      "UpdatePersonEmploymentRequest" : {
        "type" : "object",
        "properties" : {
          "corporateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the corporate organisation this employment is at"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True is employment is active"
          }
        },
        "required" : [ "active", "corporateId" ]
      },
      "UpdatePersonEmailRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@test.justice.gov.uk"
          }
        },
        "required" : [ "email" ]
      },
      "UpdatePersonContactRequest" : {
        "type" : "object",
        "description" : "Request to update a contact (aka DPS prisoner contact) in NOMIS",
        "properties" : {
          "contactTypeCode" : {
            "type" : "string"
          },
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "The relationship type",
            "example" : "BRO"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date contact is no longer active"
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "True if approved to visit the prisoner"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "True if next of kin to the prisoner"
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "True if emergency contact for the prisoner"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          }
        },
        "required" : [ "active", "approvedVisitor", "contactTypeCode", "emergencyContact", "nextOfKin", "relationshipTypeCode" ]
      },
      "UpdatePersonAddressRequest" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Address reference code",
            "example" : "HOME"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat name or number",
            "example" : "Apartment 3"
          },
          "premise" : {
            "type" : "string",
            "description" : "Premise",
            "example" : 22
          },
          "street" : {
            "type" : "string",
            "description" : "Street",
            "example" : "West Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code",
            "example" : "MK15 2ST"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City reference code",
            "example" : 25343
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County reference code",
            "example" : "S.YORKSHIRE"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country reference code",
            "example" : "ENG"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "true if address not fixed. for example homeless"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "true if this is the person's primary address"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "true if this is used for mail"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment about the address"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid from"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid to"
          },
          "validatedPAF" : {
            "type" : "boolean",
            "description" : "true if address validated by PAF"
          }
        },
        "required" : [ "mailAddress", "primaryAddress" ]
      },
      "UpdateNonAssociationRequest" : {
        "type" : "object",
        "description" : "Offender NonAssociation update request",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "Reason code of the first prisoner, domain NON_ASSO_RSN",
            "example" : "VIC"
          },
          "recipReason" : {
            "type" : "string",
            "description" : "Reason code of the other prisoner, domain NON_ASSO_RSN",
            "example" : "PER"
          },
          "type" : {
            "type" : "string",
            "description" : "Type code, domain NON_ASSO_TYP",
            "example" : "WING"
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "Free text name of staff member",
            "example" : "Joe Bloggs"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Effective date",
            "example" : "2022-08-12"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment",
            "maxLength" : 240,
            "minLength" : 0
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Expiry date",
            "example" : "2024-08-12"
          }
        },
        "required" : [ "effectiveDate", "reason", "recipReason", "type" ]
      },
      "ProfileRequest" : {
        "type" : "object",
        "description" : "Location profile or attribute",
        "properties" : {
          "profileType" : {
            "type" : "string",
            "description" : "Reference Domain for the attribute",
            "enum" : [ "HOU_SANI_FIT", "HOU_UNIT_ATT", "HOU_USED_FOR", "SUP_LVL_TYPE", "NON_ASSO_TYP" ],
            "examples" : [ "Housing Unit Fittings", "Housing Unit Attribute", "Housing Unit Usage", "Supervision Level" ]
          },
          "profileCode" : {
            "type" : "string",
            "description" : "Reference Code within the domain for the attribute"
          }
        },
        "required" : [ "profileCode", "profileType" ]
      },
      "UpdateLocationRequest" : {
        "type" : "object",
        "description" : "Location update request",
        "properties" : {
          "locationType" : {
            "type" : "string",
            "description" : "Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)",
            "enum" : [ "ADJU", "ADMI", "APP", "AREA", "ASSO", "BOOT", "BOX", "CELL", "CLAS", "EXER", "EXTE", "FAIT", "GROU", "HCEL", "HOLD", "IGRO", "INSI", "INTE", "LAND", "LOCA", "MEDI", "MOVE", "OFFI", "OUTS", "POSI", "RESI", "ROOM", "RTU", "SHEL", "SPOR", "SPUR", "STOR", "TABL", "TRAI", "TRRM", "VIDE", "VISIT", "WING", "WORK" ]
          },
          "description" : {
            "type" : "string",
            "description" : "Full code hierarchy",
            "example" : "MDI-C-3-015",
            "maxLength" : 240,
            "minLength" : 0
          },
          "userDescription" : {
            "type" : "string",
            "description" : "Description of location",
            "example" : "Some description",
            "maxLength" : 40,
            "minLength" : 0
          },
          "locationCode" : {
            "type" : "string",
            "description" : "Usually a number for a cell, a letter for a wing or landing. Used to calculate description",
            "example" : "005"
          },
          "parentLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Parent location if any, e.g. landing for a cell",
            "example" : 1234567
          },
          "unitType" : {
            "type" : "string",
            "description" : "Housing Unit type, Reference code (HOU_UN_TYPE)",
            "enum" : [ "HC", "HOLC", "NA", "OU", "REC", "SEG", "SPLC" ]
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Defines the order within parent location",
            "example" : "Joe Bloggs"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment",
            "maxLength" : 240,
            "minLength" : 0
          },
          "profiles" : {
            "type" : "array",
            "description" : "Profiles",
            "items" : {
              "$ref" : "#/components/schemas/ProfileRequest"
            }
          },
          "usages" : {
            "type" : "array",
            "description" : "Usages",
            "items" : {
              "$ref" : "#/components/schemas/UsageRequest"
            }
          }
        },
        "required" : [ "description", "locationCode", "locationType" ]
      },
      "UsageRequest" : {
        "type" : "object",
        "description" : "Location usage",
        "properties" : {
          "internalLocationUsageType" : {
            "type" : "string",
            "description" : "Types of location that the usage applies to",
            "enum" : [ "APP", "MOVEMENT", "OCCUR", "OIC", "OTHER", "OTH", "PROG", "PROP", "VISIT" ],
            "examples" : [ "Appointment Location", "Prisoner Movement Location", "Occurrence Location", "Adjudication Hearing Location", "Other Internal Location", "Programmes & Activities Location", "Property Location", "Visit Location" ]
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "internalLocationUsageType" ]
      },
      "DeactivateRequest" : {
        "type" : "object",
        "description" : "Location deactivate request",
        "properties" : {
          "deactivateDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The deactivation date, defaults to today",
            "example" : "2024-12-31"
          },
          "reasonCode" : {
            "type" : "string",
            "description" : "The reason code for deactivation, reference data 'LIV_UN_RSN'",
            "enum" : [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L" ]
          },
          "reactivateDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The expected reactivation date if any",
            "example" : "2024-12-31"
          },
          "force" : {
            "type" : "boolean",
            "description" : "If true, update Nomis even if already inactive. Useful when a temporarily inactive location is deactivated permanently"
          }
        },
        "required" : [ "force" ]
      },
      "UpdateCertificationRequest" : {
        "type" : "object",
        "description" : "Location update certification request",
        "properties" : {
          "cnaCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The CNA certified capacity",
            "minimum" : 0
          },
          "certified" : {
            "type" : "boolean",
            "description" : "Whether the location is certified"
          }
        },
        "required" : [ "certified", "cnaCapacity" ]
      },
      "UpdateCapacityRequest" : {
        "type" : "object",
        "description" : "Location update capacity request",
        "properties" : {
          "capacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum physical capacity",
            "minimum" : 0
          },
          "operationalCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum operational capacity",
            "minimum" : 0
          }
        }
      },
      "UpdateKeyDateAdjustmentRequest" : {
        "type" : "object",
        "description" : "Key date adjustment update request",
        "properties" : {
          "adjustmentTypeCode" : {
            "type" : "string",
            "description" : "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "enum" : [ "LAL", "UAL", "RADA", "ADA", "SREM" ],
            "example" : "ADA",
            "minLength" : 1
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date adjustment is applied"
          },
          "adjustmentFromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start of the period which contributed to the adjustment"
          },
          "adjustmentDays" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of days for the adjustment",
            "minimum" : 0
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Flag to indicate if the adjustment is being applied"
          }
        },
        "required" : [ "adjustmentDays", "adjustmentFromDate", "adjustmentTypeCode" ]
      },
      "UpsertDescriptionAmendmentRequest" : {
        "type" : "object",
        "properties" : {
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When addendum was added",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of person that added this addendum",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of person that added this addendum",
            "example" : "Doe"
          },
          "text" : {
            "type" : "string",
            "description" : "Addendum text"
          }
        },
        "required" : [ "createdDateTime", "firstName", "lastName", "text" ]
      },
      "UpsertIncidentHistoryRequest" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "The incident questionnaire type"
          },
          "incidentChangeDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the questionnaire was changed"
          },
          "incidentChangeUsername" : {
            "type" : "string",
            "description" : "Who changed the questionnaire"
          },
          "questions" : {
            "type" : "array",
            "description" : "Questions asked for the questionnaire",
            "items" : {
              "$ref" : "#/components/schemas/UpsertIncidentQuestionRequest"
            }
          }
        },
        "required" : [ "incidentChangeDateTime", "incidentChangeUsername", "questions", "typeCode" ]
      },
      "UpsertIncidentQuestionRequest" : {
        "type" : "object",
        "properties" : {
          "questionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The questionnaire question id"
          },
          "responses" : {
            "type" : "array",
            "description" : "List of Responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/UpsertIncidentResponseRequest"
            }
          }
        },
        "required" : [ "questionId", "responses" ]
      },
      "UpsertIncidentRequest" : {
        "type" : "object",
        "description" : "Incident Request",
        "properties" : {
          "title" : {
            "type" : "string",
            "description" : "A summary of the incident"
          },
          "description" : {
            "type" : "string",
            "description" : "The incident details"
          },
          "descriptionAmendments" : {
            "type" : "array",
            "description" : "Amendments to the incident details",
            "items" : {
              "$ref" : "#/components/schemas/UpsertDescriptionAmendmentRequest"
            }
          },
          "location" : {
            "type" : "string",
            "description" : "Prison where the incident occurred"
          },
          "statusCode" : {
            "type" : "string",
            "description" : "Status details"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "The incident questionnaire type"
          },
          "incidentDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time of the incident"
          },
          "reportedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the incident was reported"
          },
          "reportedBy" : {
            "type" : "string",
            "description" : "The username of the person who reported the incident"
          },
          "requirements" : {
            "type" : "array",
            "description" : "Requirements for completing the incident report",
            "items" : {
              "$ref" : "#/components/schemas/UpsertIncidentRequirementRequest"
            }
          },
          "offenderParties" : {
            "type" : "array",
            "description" : "Offenders involved in the incident",
            "items" : {
              "$ref" : "#/components/schemas/UpsertOffenderPartyRequest"
            }
          },
          "staffParties" : {
            "type" : "array",
            "description" : "Staff involved in the incident",
            "items" : {
              "$ref" : "#/components/schemas/UpsertStaffPartyRequest"
            }
          },
          "questions" : {
            "type" : "array",
            "description" : "Questions asked for the incident",
            "items" : {
              "$ref" : "#/components/schemas/UpsertIncidentQuestionRequest"
            }
          },
          "history" : {
            "type" : "array",
            "description" : "Historical questionnaire details for the incident",
            "items" : {
              "$ref" : "#/components/schemas/UpsertIncidentHistoryRequest"
            }
          }
        },
        "required" : [ "description", "descriptionAmendments", "history", "incidentDateTime", "location", "offenderParties", "questions", "reportedBy", "reportedDateTime", "requirements", "staffParties", "statusCode", "title", "typeCode" ]
      },
      "UpsertIncidentRequirementRequest" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "The update required to the incident report"
          },
          "date" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date the requirement was recorded"
          },
          "username" : {
            "type" : "string",
            "description" : "The staff member who made the requirement request"
          },
          "location" : {
            "type" : "string",
            "description" : "The reporting agency of the staff"
          }
        },
        "required" : [ "date", "location", "username" ]
      },
      "UpsertIncidentResponseRequest" : {
        "type" : "object",
        "properties" : {
          "answerId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The questionnaire answer id"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment added to the response by recording staff"
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Response date added to the response by recording staff"
          },
          "recordingUsername" : {
            "type" : "string",
            "description" : "Recording staff"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Sequence number across all responses for an incident"
          }
        },
        "required" : [ "answerId", "recordingUsername", "sequence" ]
      },
      "UpsertOffenderPartyRequest" : {
        "type" : "object",
        "properties" : {
          "prisonNumber" : {
            "type" : "string",
            "description" : "Offender involved in the incident"
          },
          "role" : {
            "type" : "string",
            "description" : "Offender role in the incident"
          },
          "outcome" : {
            "type" : "string",
            "description" : "The outcome of the incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "General information about the incident"
          }
        },
        "required" : [ "prisonNumber", "role" ]
      },
      "UpsertStaffPartyRequest" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "Staff involved in the incident"
          },
          "role" : {
            "type" : "string",
            "description" : "Staff role in the incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "General information about the incident"
          }
        },
        "required" : [ "role", "username" ]
      },
      "CreateIncentiveRequest" : {
        "type" : "object",
        "description" : "IEP creation request",
        "properties" : {
          "iepLevel" : {
            "type" : "string",
            "description" : "IEP Level",
            "example" : "Standard"
          },
          "comments" : {
            "type" : "string",
            "description" : "Review comments",
            "example" : "A review took place"
          },
          "iepDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time when last review took place",
            "example" : "2022-08-12T14:30"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI"
          },
          "userId" : {
            "type" : "string",
            "description" : "Username of the reviewer",
            "example" : "AJONES"
          }
        },
        "required" : [ "iepDateTime", "iepLevel", "prisonId", "userId" ]
      },
      "ReferenceCode" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "domain" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "active" : {
            "type" : "boolean"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "parentCode" : {
            "type" : "string"
          },
          "expiredDate" : {
            "type" : "string",
            "format" : "date"
          },
          "systemDataFlag" : {
            "type" : "boolean"
          }
        },
        "required" : [ "active", "code", "description", "domain", "systemDataFlag" ]
      },
      "CreatePrisonIncentiveRequest" : {
        "type" : "object",
        "description" : "Prison Incentive level data create request",
        "properties" : {
          "levelCode" : {
            "type" : "string",
            "description" : "Incentive Level code",
            "example" : "STD"
          },
          "active" : {
            "type" : "boolean",
            "description" : "active status of the Global Incentive Level",
            "example" : true
          },
          "defaultOnAdmission" : {
            "type" : "boolean",
            "description" : "default on admission",
            "example" : true
          },
          "visitOrderAllowance" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of weekday visits for a convicted prisoner per fortnight",
            "example" : 5500
          },
          "privilegedVisitOrderAllowance" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The number of privileged/weekend visits for a convicted prisoner per 4 weeks",
            "example" : 5500
          },
          "remandTransferLimitInPence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use",
            "example" : 5500
          },
          "remandSpendLimitInPence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum amount allowed in the spends account for a remand prisoner",
            "example" : 5500
          },
          "convictedTransferLimitInPence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use",
            "example" : 5500
          },
          "convictedSpendLimitInPence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum amount allowed in the spends account for a convicted prisoner",
            "example" : 5500
          }
        },
        "required" : [ "active", "defaultOnAdmission", "levelCode" ]
      },
      "PrisonIncentiveLevelDataResponse" : {
        "type" : "object",
        "description" : "Incentive information",
        "properties" : {
          "prisonId" : {
            "type" : "string"
          },
          "iepLevelCode" : {
            "type" : "string"
          },
          "visitOrderAllowance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "privilegedVisitOrderAllowance" : {
            "type" : "integer",
            "format" : "int32"
          },
          "defaultOnAdmission" : {
            "type" : "boolean"
          },
          "remandTransferLimitInPence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "remandSpendLimitInPence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "convictedTransferLimitInPence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "convictedSpendLimitInPence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "active" : {
            "type" : "boolean"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date"
          },
          "visitAllowanceActive" : {
            "type" : "boolean"
          },
          "visitAllowanceExpiryDate" : {
            "type" : "string",
            "format" : "date"
          }
        },
        "required" : [ "active", "defaultOnAdmission", "iepLevelCode", "prisonId" ]
      },
      "CSIPComponent" : {
        "type" : "object",
        "properties" : {
          "component" : {
            "type" : "string",
            "description" : "The child component created",
            "enum" : [ "ATTENDEE", "FACTOR", "INTERVIEW", "PLAN", "REVIEW" ]
          },
          "nomisId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The nomisId of the created component"
          },
          "dpsId" : {
            "type" : "string",
            "description" : "The dpsId of the created component"
          }
        },
        "required" : [ "component", "dpsId", "nomisId" ]
      },
      "UpsertCSIPResponse" : {
        "type" : "object",
        "description" : "A response after a csip has been upserted in NOMIS",
        "properties" : {
          "nomisCSIPReportId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The nomis csip id"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The prisoner nomis Id relating to this csip"
          },
          "components" : {
            "type" : "array",
            "description" : "Any new CSIP components that were created",
            "items" : {
              "$ref" : "#/components/schemas/CSIPComponent"
            }
          }
        },
        "required" : [ "components", "nomisCSIPReportId", "offenderNo" ]
      },
      "ActionsRequest" : {
        "type" : "object",
        "properties" : {
          "openCSIPAlert" : {
            "type" : "boolean"
          },
          "nonAssociationsUpdated" : {
            "type" : "boolean"
          },
          "observationBook" : {
            "type" : "boolean"
          },
          "unitOrCellMove" : {
            "type" : "boolean"
          },
          "csraOrRsraReview" : {
            "type" : "boolean"
          },
          "serviceReferral" : {
            "type" : "boolean"
          },
          "simReferral" : {
            "type" : "boolean"
          }
        },
        "required" : [ "csraOrRsraReview", "nonAssociationsUpdated", "observationBook", "openCSIPAlert", "serviceReferral", "simReferral", "unitOrCellMove" ]
      },
      "AttendeeRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Review Attendee/Contributor Id"
          },
          "dpsId" : {
            "type" : "string",
            "description" : "DPS Attendee id"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of attendee/contributor"
          },
          "role" : {
            "type" : "string",
            "description" : "Role of attendee/contributor"
          },
          "attended" : {
            "type" : "boolean",
            "description" : "If attended (otherwise contributor)"
          },
          "contribution" : {
            "type" : "string",
            "description" : "Contribution"
          }
        },
        "required" : [ "attended", "dpsId" ]
      },
      "CSIPFactorRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Contributory Factor id"
          },
          "dpsId" : {
            "type" : "string",
            "description" : "DPS Factor id"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "Contributory Factor"
          },
          "comment" : {
            "type" : "string",
            "description" : "Factor comment"
          }
        },
        "required" : [ "dpsId", "typeCode" ]
      },
      "DecisionRequest" : {
        "type" : "object",
        "properties" : {
          "conclusion" : {
            "type" : "string",
            "description" : "Conclusion & Reason for decision"
          },
          "decisionOutcomeCode" : {
            "type" : "string",
            "description" : "Outcome"
          },
          "signedOffRoleCode" : {
            "type" : "string",
            "description" : "Signed off by"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "The username of the person who recorded the decision"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Recorded Date"
          },
          "nextSteps" : {
            "type" : "string",
            "description" : "What to do next"
          },
          "otherDetails" : {
            "type" : "string",
            "description" : "Other information to take into consideration"
          },
          "actions" : {
            "$ref" : "#/components/schemas/ActionsRequest",
            "description" : "Action list"
          }
        },
        "required" : [ "actions" ]
      },
      "InterviewDetailRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Interview Id"
          },
          "dpsId" : {
            "type" : "string",
            "description" : "DPS Interview id"
          },
          "interviewee" : {
            "type" : "string",
            "description" : "Person being interviewed"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "date of interview"
          },
          "roleCode" : {
            "type" : "string",
            "description" : "Why the incident occurred"
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional data regarding the interview"
          }
        },
        "required" : [ "date", "dpsId", "interviewee", "roleCode" ]
      },
      "InvestigationDetailRequest" : {
        "type" : "object",
        "properties" : {
          "staffInvolved" : {
            "type" : "string",
            "description" : "Staff involved in the incident"
          },
          "evidenceSecured" : {
            "type" : "string",
            "description" : "Whether any evidence was secured"
          },
          "reasonOccurred" : {
            "type" : "string",
            "description" : "Why the incident occurred"
          },
          "usualBehaviour" : {
            "type" : "string",
            "description" : "Normal behaviour of the offender"
          },
          "trigger" : {
            "type" : "string",
            "description" : "Offender's trigger"
          },
          "protectiveFactors" : {
            "type" : "string",
            "description" : "Protective factors"
          },
          "interviews" : {
            "type" : "array",
            "description" : "Interview",
            "items" : {
              "$ref" : "#/components/schemas/InterviewDetailRequest"
            }
          }
        }
      },
      "PlanRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Plan Id"
          },
          "dpsId" : {
            "type" : "string",
            "description" : "DPS Plan/IdentifiedNeed id"
          },
          "identifiedNeed" : {
            "type" : "string",
            "description" : "Details of the need"
          },
          "intervention" : {
            "type" : "string",
            "description" : "Intervention plan"
          },
          "progression" : {
            "type" : "string",
            "description" : "Information regarding progression of plan"
          },
          "referredBy" : {
            "type" : "string",
            "description" : "The person reporting - free text"
          },
          "targetDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Target date of plan"
          },
          "closedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Plan closed date"
          }
        },
        "required" : [ "dpsId", "identifiedNeed", "intervention", "referredBy", "targetDate" ]
      },
      "ReviewRequest" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Review Id"
          },
          "dpsId" : {
            "type" : "string",
            "description" : "DPS Review id"
          },
          "attendees" : {
            "type" : "array",
            "description" : "Attendees to the review",
            "items" : {
              "$ref" : "#/components/schemas/AttendeeRequest"
            }
          },
          "remainOnCSIP" : {
            "type" : "boolean",
            "description" : "Whether to remain on CSIP"
          },
          "csipUpdated" : {
            "type" : "boolean",
            "description" : "If the csip has been updated"
          },
          "caseNote" : {
            "type" : "boolean",
            "description" : "If a case note was added"
          },
          "closeCSIP" : {
            "type" : "boolean",
            "description" : "If the csip is closed"
          },
          "peopleInformed" : {
            "type" : "boolean",
            "description" : "Whether people were informed"
          },
          "summary" : {
            "type" : "string",
            "description" : "Summary details"
          },
          "nextReviewDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Next Review date"
          },
          "closeDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Review closed date"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the review was created"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "The username of the person who recorded the review"
          },
          "reviewSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the review, allowing for dps to set "
          }
        },
        "required" : [ "caseNote", "closeCSIP", "csipUpdated", "dpsId", "peopleInformed", "recordedBy", "recordedDate", "remainOnCSIP", "reviewSequence" ]
      },
      "SaferCustodyScreeningRequest" : {
        "type" : "object",
        "properties" : {
          "scsOutcomeCode" : {
            "type" : "string",
            "description" : "Result of the Safer Custody Screening"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "The username of the person who recorded the data"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "When the the SCS occurred"
          },
          "reasonForDecision" : {
            "type" : "string",
            "description" : "Why the decision was made"
          }
        },
        "required" : [ "recordedBy", "recordedDate", "scsOutcomeCode" ]
      },
      "UpsertCSIPRequest" : {
        "type" : "object",
        "description" : "CSIP Report create/update request",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The csip id",
            "example" : 1234
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender No",
            "example" : "A11235BC"
          },
          "logNumber" : {
            "type" : "string",
            "description" : "Log number"
          },
          "incidentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date/Time incident occurred",
            "example" : "2023-04-03"
          },
          "incidentTime" : {
            "type" : "string",
            "description" : "Date/Time incident occurred",
            "example" : "10:00"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "Type of incident"
          },
          "locationCode" : {
            "type" : "string",
            "description" : "Location of the incident"
          },
          "areaOfWorkCode" : {
            "type" : "string",
            "description" : "The Area of work, aka function"
          },
          "reportedBy" : {
            "type" : "string",
            "description" : "The person reporting the incident - free text"
          },
          "reportedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date reported"
          },
          "proActiveReferral" : {
            "type" : "boolean",
            "description" : "proActive Referral"
          },
          "staffAssaulted" : {
            "type" : "boolean",
            "description" : "If a staff member was assaulted"
          },
          "staffAssaultedName" : {
            "type" : "string",
            "description" : "If assaulted, the staff member name"
          },
          "prisonCodeWhenRecorded" : {
            "type" : "string",
            "description" : "Originating Prison Id"
          },
          "reportDetailRequest" : {
            "$ref" : "#/components/schemas/UpsertReportDetailsRequest",
            "description" : "Additional information for the CSIP Report"
          },
          "saferCustodyScreening" : {
            "$ref" : "#/components/schemas/SaferCustodyScreeningRequest",
            "description" : "Safer custody screening"
          },
          "investigation" : {
            "$ref" : "#/components/schemas/InvestigationDetailRequest",
            "description" : "Investigation details of the incident"
          },
          "decision" : {
            "$ref" : "#/components/schemas/DecisionRequest",
            "description" : "DecisionAndActions"
          },
          "caseManager" : {
            "type" : "string",
            "description" : "Case Manager involved"
          },
          "planReason" : {
            "type" : "string",
            "description" : "Reason for plan"
          },
          "firstCaseReviewDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of first review"
          },
          "plans" : {
            "type" : "array",
            "description" : "CSIP Plans",
            "items" : {
              "$ref" : "#/components/schemas/PlanRequest"
            }
          },
          "reviews" : {
            "type" : "array",
            "description" : "CSIP Reviews",
            "items" : {
              "$ref" : "#/components/schemas/ReviewRequest"
            }
          }
        },
        "required" : [ "areaOfWorkCode", "incidentDate", "locationCode", "offenderNo", "proActiveReferral", "reportedBy", "reportedDate", "staffAssaulted", "typeCode" ]
      },
      "UpsertReportDetailsRequest" : {
        "type" : "object",
        "properties" : {
          "involvementCode" : {
            "type" : "string",
            "description" : "How the offender was involved"
          },
          "concern" : {
            "type" : "string",
            "description" : "Concern description"
          },
          "knownReasons" : {
            "type" : "string",
            "description" : "known reasons for the involvement"
          },
          "otherInformation" : {
            "type" : "string",
            "description" : "Additional information"
          },
          "saferCustodyTeamInformed" : {
            "type" : "boolean",
            "description" : "If the safer custody team were informed"
          },
          "referralComplete" : {
            "type" : "boolean",
            "description" : "If the referral has been completed"
          },
          "referralCompletedBy" : {
            "type" : "string",
            "description" : "Who completed the referral"
          },
          "referralCompletedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the referral was completed"
          },
          "factors" : {
            "type" : "array",
            "description" : "Contributory factors",
            "items" : {
              "$ref" : "#/components/schemas/CSIPFactorRequest"
            }
          }
        },
        "required" : [ "factors", "referralComplete", "saferCustodyTeamInformed" ]
      },
      "UpdateCorporateOrganisationRequest" : {
        "type" : "object",
        "description" : "Request to update a corporate organisation in NOMIS",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "The corporate name",
            "example" : "Boots"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date made inactive"
          },
          "caseloadId" : {
            "type" : "string",
            "description" : "The associated caseload code",
            "example" : "WWI"
          },
          "comment" : {
            "type" : "string",
            "description" : "User comment"
          },
          "programmeNumber" : {
            "type" : "string",
            "description" : "Programme number"
          },
          "vatNumber" : {
            "type" : "string",
            "description" : "VAT number"
          }
        },
        "required" : [ "active", "name" ]
      },
      "UpdateCorporateWebAddressRequest" : {
        "type" : "object",
        "properties" : {
          "webAddress" : {
            "type" : "string",
            "description" : "Web address",
            "example" : "test@test.justice.gov.uk"
          }
        },
        "required" : [ "webAddress" ]
      },
      "UpdateCorporateTypesRequest" : {
        "type" : "object",
        "properties" : {
          "typeCodes" : {
            "type" : "array",
            "description" : "list of type codes that should be set on the corporate",
            "items" : {
              "type" : "string"
            },
            "uniqueItems" : true
          }
        },
        "required" : [ "typeCodes" ]
      },
      "UpdateCorporatePhoneRequest" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "The number",
            "example" : "0114 555 555"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension",
            "example" : "x432"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "Phone type code",
            "example" : "MOB"
          }
        },
        "required" : [ "number", "typeCode" ]
      },
      "UpdateCorporateEmailRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@test.justice.gov.uk"
          }
        },
        "required" : [ "email" ]
      },
      "UpdateCorporateAddressRequest" : {
        "type" : "object",
        "description" : "Request to update a corporate organisation address in NOMIS",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Address type",
            "example" : "BUS"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat name or number",
            "example" : "Apartment 3"
          },
          "premise" : {
            "type" : "string",
            "description" : "Premise",
            "example" : 22
          },
          "street" : {
            "type" : "string",
            "description" : "Street",
            "example" : "West Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code",
            "example" : "MK15 2ST"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code",
            "example" : 25343
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code",
            "example" : "S.YORKSHIRE"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code",
            "example" : "ENG"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "true if address not fixed. for example homeless"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "true if this is the corporate's primary address"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "true if this is used for mail"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment about the address"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid from"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid to"
          },
          "isServices" : {
            "type" : "boolean",
            "description" : "True if this is a service organisation"
          },
          "businessHours" : {
            "type" : "string",
            "description" : "Business hours"
          },
          "contactPersonName" : {
            "type" : "string",
            "description" : "Contact person"
          }
        },
        "required" : [ "isServices", "mailAddress", "noFixedAddress", "primaryAddress", "startDate" ]
      },
      "UpdateAmendment" : {
        "type" : "object",
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "Free format text body of amendment",
            "minLength" : 1
          },
          "authorUsername" : {
            "type" : "string",
            "description" : "Author login name of person or department that added the amendment",
            "minLength" : 1
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Amendment created timestamp"
          }
        },
        "required" : [ "authorUsername", "createdDateTime", "text" ]
      },
      "UpdateCaseNoteRequest" : {
        "type" : "object",
        "description" : "A request to amend a case note in NOMIS",
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "Free format text body of the amendment",
            "minLength" : 1
          },
          "amendments" : {
            "type" : "array",
            "description" : "Amendments to the text",
            "items" : {
              "$ref" : "#/components/schemas/UpdateAmendment"
            }
          }
        },
        "required" : [ "amendments", "text" ]
      },
      "UpdateAppointmentRequest" : {
        "type" : "object",
        "description" : "Offender individual schedule update request",
        "properties" : {
          "eventDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Appointment date",
            "example" : "2022-08-12"
          },
          "startTime" : {
            "type" : "string",
            "description" : "Appointment start time",
            "example" : "09:45"
          },
          "endTime" : {
            "type" : "string",
            "description" : "Activity end time",
            "example" : "15:20"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Room where the appointment is to occur (in cell if null)",
            "example" : 112233
          },
          "eventSubType" : {
            "type" : "string",
            "description" : "Appointment event sub-type",
            "example" : "MEOT"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment",
            "maxLength" : 4000,
            "minLength" : 0
          }
        },
        "required" : [ "endTime", "eventDate", "eventSubType", "startTime" ]
      },
      "UpdateAlertType" : {
        "type" : "object",
        "description" : "A request to update an alert type reference data in NOMIS",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The alert type description"
          }
        },
        "required" : [ "description" ]
      },
      "UpdateAlertCode" : {
        "type" : "object",
        "description" : "A request to update an alert code reference data in NOMIS",
        "properties" : {
          "description" : {
            "type" : "string",
            "description" : "The alert description"
          }
        },
        "required" : [ "description" ]
      },
      "Repair" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "comment" : {
            "type" : "string"
          },
          "cost" : {
            "type" : "number"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS"
          }
        },
        "required" : [ "createdByUsername", "type" ]
      },
      "UpdateRepairsResponse" : {
        "type" : "object",
        "properties" : {
          "repairs" : {
            "type" : "array",
            "description" : "The repairs required due to the damage",
            "items" : {
              "$ref" : "#/components/schemas/Repair"
            }
          }
        },
        "required" : [ "repairs" ]
      },
      "RepairToUpdateOrAdd" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "NOMIS repair type code",
            "enum" : [ "CLEA", "DECO", "ELEC", "FABR", "LOCK", "PLUM" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "Description of repair required by damage"
          }
        },
        "required" : [ "typeCode" ]
      },
      "UpdateRepairsRequest" : {
        "type" : "object",
        "description" : "Repairs required due to damage. Any items not in this list will be removed from the Adjudication in NOMIS",
        "properties" : {
          "repairs" : {
            "type" : "array",
            "description" : "Current list of repairs required due to damage",
            "items" : {
              "$ref" : "#/components/schemas/RepairToUpdateOrAdd"
            }
          }
        },
        "required" : [ "repairs" ]
      },
      "UpdateHearingRequest" : {
        "type" : "object",
        "description" : "Hearing update fields",
        "properties" : {
          "hearingType" : {
            "type" : "string",
            "description" : "Type of hearing",
            "example" : "GOV"
          },
          "hearingDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Hearing date"
          },
          "hearingTime" : {
            "type" : "string",
            "description" : "Hearing time"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "location id for the hearing",
            "example" : 123456
          }
        },
        "required" : [ "hearingDate", "hearingTime", "hearingType", "internalLocationId" ]
      },
      "Evidence" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "date" : {
            "type" : "string",
            "format" : "date"
          },
          "detail" : {
            "type" : "string"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS"
          }
        },
        "required" : [ "createdByUsername", "date", "detail", "type" ]
      },
      "UpdateEvidenceResponse" : {
        "type" : "object",
        "properties" : {
          "evidence" : {
            "type" : "array",
            "description" : "The evidence associated with the adjudication incident",
            "items" : {
              "$ref" : "#/components/schemas/Evidence"
            }
          }
        },
        "required" : [ "evidence" ]
      },
      "EvidenceToUpdateOrAdd" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Type of evidence",
            "enum" : [ "BEHAV", "DRUGTEST", "EVI_BAG", "OTHER", "PHOTO", "VICTIM", "WEAP", "WITNESS" ],
            "example" : "PHOTO"
          },
          "detail" : {
            "type" : "string",
            "description" : "Description of evidence",
            "example" : "Image of damages"
          }
        },
        "required" : [ "detail", "typeCode" ]
      },
      "UpdateEvidenceRequest" : {
        "type" : "object",
        "description" : "Evidence associated with adjudication incident. Any items not in this list will be removed from the Adjudication in NOMIS",
        "properties" : {
          "evidence" : {
            "type" : "array",
            "description" : "Current list of evidence items",
            "items" : {
              "$ref" : "#/components/schemas/EvidenceToUpdateOrAdd"
            }
          }
        },
        "required" : [ "evidence" ]
      },
      "HearingResultAwardResponse" : {
        "type" : "object",
        "description" : "Provides the generated Hearing Result Award composite ID after creation",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sanctionSequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "bookingId", "sanctionSequence" ]
      },
      "UpdateHearingResultAwardResponses" : {
        "type" : "object",
        "description" : "A list of Hearing result awards created (aka punishment)",
        "properties" : {
          "awardsCreated" : {
            "type" : "array",
            "description" : "an ordered list of awards created, the order matching the request order for awardRequestsToCreate",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAwardResponse"
            }
          },
          "awardsDeleted" : {
            "type" : "array",
            "description" : "a list of awards that were deleted due to this update",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "required" : [ "awardsCreated", "awardsDeleted" ]
      },
      "AdjudicationChargeId" : {
        "type" : "object",
        "properties" : {
          "adjudicationNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "adjudication number"
          },
          "chargeSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "charge sequence within the adjudication"
          }
        },
        "required" : [ "adjudicationNumber", "chargeSequence" ]
      },
      "ExistingHearingResultAwardRequest" : {
        "type" : "object",
        "description" : "Hearing result award (aka punishment) to be created",
        "properties" : {
          "award" : {
            "$ref" : "#/components/schemas/HearingResultAwardRequest",
            "description" : "award to update"
          },
          "sanctionSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "sanction sequence for the booking associated with the adjudication"
          }
        },
        "required" : [ "award", "sanctionSequence" ]
      },
      "HearingResultAwardRequest" : {
        "type" : "object",
        "description" : "Hearing result award (aka punishment) to be created",
        "properties" : {
          "sanctionType" : {
            "type" : "string",
            "description" : "The type of award",
            "enum" : [ "ADA", "CAUTION", "CC", "EXTRA_WORK", "EXTW", "FORFEIT", "OTHER", "REMACT", "REMWIN", "STOP_EARN", "STOP_PCT", "PP" ],
            "example" : "CAUTION"
          },
          "sanctionStatus" : {
            "type" : "string",
            "description" : "The status of the award",
            "enum" : [ "AS_AWARDED", "AWARD_RED", "IMMEDIATE", "PROSPECTIVE", "QUASHED", "REDAPP", "SUSPENDED", "SUSPEN_EXT", "SUSPEN_RED", "SUSP_PROSP" ],
            "example" : "IMMEDIATE"
          },
          "commentText" : {
            "type" : "string",
            "description" : "Award comment",
            "example" : "GUILTY"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Award effective date"
          },
          "compensationAmount" : {
            "type" : "number",
            "description" : "optional compensation amount",
            "example" : 0.5
          },
          "sanctionDays" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "the duration  of the award, in days"
          },
          "consecutiveCharge" : {
            "$ref" : "#/components/schemas/AdjudicationChargeId",
            "description" : "adjudication that contains the matching award that this award is consecutive to"
          }
        },
        "required" : [ "effectiveDate", "sanctionStatus", "sanctionType" ]
      },
      "UnquashHearingResultAwardRequest" : {
        "type" : "object",
        "properties" : {
          "findingCode" : {
            "type" : "string",
            "description" : "Finding code",
            "example" : "PROVED"
          },
          "awards" : {
            "$ref" : "#/components/schemas/UpdateHearingResultAwardRequest",
            "description" : "A list of current result awards (aka punishment) updated. Typically the awardsToCreate would be empty unless there was a previous synchronisation problem"
          }
        },
        "required" : [ "awards", "findingCode" ]
      },
      "UpdateHearingResultAwardRequest" : {
        "type" : "object",
        "description" : "A list of Hearing result awards (aka punishment) to be created and updated",
        "properties" : {
          "awardsToCreate" : {
            "type" : "array",
            "description" : "a list of award requests to create",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAwardRequest"
            }
          },
          "awardsToUpdate" : {
            "type" : "array",
            "description" : "a list of award requests to update",
            "items" : {
              "$ref" : "#/components/schemas/ExistingHearingResultAwardRequest"
            }
          }
        },
        "required" : [ "awardsToCreate", "awardsToUpdate" ]
      },
      "CourseScheduleRequest" : {
        "type" : "object",
        "description" : "Course schedule request",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the course schedule if known",
            "example" : 13245
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of the course schedule",
            "example" : "2023-04-03"
          },
          "startTime" : {
            "type" : "string",
            "description" : "The time of the course schedule",
            "example" : "10:00"
          },
          "endTime" : {
            "type" : "string",
            "description" : "The time the course schedule ends",
            "example" : "11:00"
          },
          "cancelled" : {
            "type" : "boolean",
            "description" : "Whether the course schedule has been cancelled",
            "example" : true
          }
        },
        "required" : [ "cancelled", "date", "endTime", "startTime" ]
      },
      "PayRateRequest" : {
        "type" : "object",
        "description" : "Course activity creation request pay rates",
        "properties" : {
          "incentiveLevel" : {
            "type" : "string",
            "description" : "The incentive level",
            "example" : "BAS"
          },
          "payBand" : {
            "type" : "string",
            "description" : "The pay band (1 TO 10)",
            "example" : 4
          },
          "rate" : {
            "type" : "number",
            "description" : "The half day rate",
            "example" : 0.5
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Pay rate start date, null means 'before every other rate'",
            "example" : "2022-08-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Pay rate end date, if not passed will be derived from start dates",
            "example" : "2022-08-12"
          }
        },
        "required" : [ "incentiveLevel", "payBand", "rate" ]
      },
      "ScheduleRuleRequest" : {
        "type" : "object",
        "description" : "Course activity creation request schedule rules",
        "properties" : {
          "startTime" : {
            "type" : "string",
            "description" : "Schedule start time in 24 hour clock",
            "example" : "08:00"
          },
          "endTime" : {
            "type" : "string",
            "description" : "Schedule end time in 24 hour clock",
            "example" : "11:00"
          },
          "monday" : {
            "type" : "boolean",
            "description" : "Scheduled on Monday",
            "example" : true
          },
          "tuesday" : {
            "type" : "boolean",
            "description" : "Scheduled on Tuesday",
            "example" : true
          },
          "wednesday" : {
            "type" : "boolean",
            "description" : "Scheduled on Wednesday",
            "example" : true
          },
          "thursday" : {
            "type" : "boolean",
            "description" : "Scheduled on Thursday",
            "example" : true
          },
          "friday" : {
            "type" : "boolean",
            "description" : "Scheduled on Friday",
            "example" : true
          },
          "saturday" : {
            "type" : "boolean",
            "description" : "Scheduled on Saturday",
            "example" : false
          },
          "sunday" : {
            "type" : "boolean",
            "description" : "Scheduled on Sunday",
            "example" : false
          }
        },
        "required" : [ "endTime", "friday", "monday", "saturday", "startTime", "sunday", "thursday", "tuesday", "wednesday" ]
      },
      "UpdateActivityRequest" : {
        "type" : "object",
        "description" : "Course activity update request",
        "properties" : {
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Activity start date",
            "example" : "2022-08-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Activity end date",
            "example" : "2022-08-12"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Room where the activity is to occur (from activity schedule)"
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Capacity of activity (from activity schedule)",
            "maximum" : 999
          },
          "payRates" : {
            "type" : "array",
            "description" : "Pay rates",
            "items" : {
              "$ref" : "#/components/schemas/PayRateRequest"
            }
          },
          "description" : {
            "type" : "string",
            "description" : "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode" : {
            "type" : "string",
            "description" : "Minimum Incentive Level"
          },
          "payPerSession" : {
            "type" : "string",
            "description" : "Half or Full day (H or F)",
            "enum" : [ "F", "H" ],
            "example" : "H"
          },
          "scheduleRules" : {
            "type" : "array",
            "description" : "Schedule rules",
            "items" : {
              "$ref" : "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays" : {
            "type" : "boolean",
            "description" : "Exclude bank holidays?"
          },
          "outsideWork" : {
            "type" : "boolean",
            "description" : "Outside work?"
          },
          "programCode" : {
            "type" : "string",
            "description" : "Program Service code (from activity category)"
          },
          "schedules" : {
            "type" : "array",
            "description" : "Schedules",
            "items" : {
              "$ref" : "#/components/schemas/CourseScheduleRequest"
            }
          }
        },
        "required" : [ "capacity", "description", "excludeBankHolidays", "outsideWork", "payPerSession", "payRates", "programCode", "scheduleRules", "schedules", "startDate" ]
      },
      "CreateActivityResponse" : {
        "type" : "object",
        "description" : "Activity creation response",
        "properties" : {
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The created course activity id"
          },
          "courseSchedules" : {
            "type" : "array",
            "description" : "The created course schedules",
            "items" : {
              "$ref" : "#/components/schemas/CreateScheduledInstanceResponse"
            }
          }
        },
        "required" : [ "courseActivityId", "courseSchedules" ]
      },
      "CreateScheduledInstanceResponse" : {
        "type" : "object",
        "properties" : {
          "courseScheduleId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The created scheduled instance id"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "The instance date"
          },
          "startTime" : {
            "type" : "string",
            "description" : "The instance start time"
          },
          "endTime" : {
            "type" : "string",
            "description" : "The instance end time"
          }
        },
        "required" : [ "courseScheduleId", "date", "endTime", "startTime" ]
      },
      "UpdateCourseScheduleResponse" : {
        "type" : "object",
        "description" : "Course schedule update update response",
        "properties" : {
          "courseScheduleId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the course schedule",
            "example" : 123456
          }
        },
        "required" : [ "courseScheduleId" ]
      },
      "AllocationExclusion" : {
        "type" : "object",
        "description" : "A session to exclude from the allocation during which period attendances will not be generated",
        "properties" : {
          "day" : {
            "type" : "string",
            "description" : "The day of the exclusion",
            "enum" : [ "MON", "TUE", "WED", "THU", "FRI", "SAT", "SUN" ],
            "example" : "MON"
          },
          "slot" : {
            "type" : "string",
            "description" : "The session the exclusion applies to (morning, afternoon or evening). Or null for the whole day.",
            "enum" : [ "AM", "PM", "ED" ],
            "example" : "AM"
          }
        },
        "required" : [ "day" ]
      },
      "UpsertAllocationRequest" : {
        "type" : "object",
        "description" : "Course activity create or update allocation request",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id of the prisoner",
            "example" : 1234567
          },
          "payBandCode" : {
            "type" : "string",
            "description" : "The prisoner's pay band",
            "example" : 2
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Activity start date",
            "example" : "2022-08-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Activity end date",
            "example" : "2022-08-12"
          },
          "endReason" : {
            "type" : "string",
            "description" : "Activity end reason (from domain PS_END_RSN)",
            "example" : "REL"
          },
          "endComment" : {
            "type" : "string",
            "description" : "Activity end comment"
          },
          "suspended" : {
            "type" : "boolean",
            "description" : "Offender is suspended from Activity?"
          },
          "suspendedComment" : {
            "type" : "string",
            "description" : "Activity suspended comment"
          },
          "programStatusCode" : {
            "type" : "string",
            "description" : "Offender program status from domain OFF_PRG_STS",
            "example" : "ALLOC",
            "minLength" : 1
          },
          "exclusions" : {
            "type" : "array",
            "description" : "Sessions excluded from the allocation during which period attendances will not be generated",
            "items" : {
              "$ref" : "#/components/schemas/AllocationExclusion"
            }
          }
        },
        "required" : [ "bookingId", "programStatusCode", "startDate" ]
      },
      "UpsertAllocationResponse" : {
        "type" : "object",
        "description" : "OffenderProgramProfile create/update response",
        "properties" : {
          "offenderProgramReferenceId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The created OffenderProgramProfile id",
            "example" : 12345678
          },
          "created" : {
            "type" : "boolean",
            "description" : "Whether or not the allocation was created"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison code"
          }
        },
        "required" : [ "created", "offenderProgramReferenceId", "prisonId" ]
      },
      "MoveActivityEndDateRequest" : {
        "type" : "object",
        "description" : "Move activity end date request",
        "properties" : {
          "courseActivityIds" : {
            "type" : "array",
            "description" : "Course activity ids",
            "example" : [ 1, 2 ],
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "oldEndDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Only update activities and allocation with this end date.",
            "example" : "2025-02-20"
          },
          "newEndDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The new end date for activities and allocations",
            "example" : "2025-02-21"
          }
        },
        "required" : [ "courseActivityIds", "newEndDate", "oldEndDate" ]
      },
      "EndActivitiesRequest" : {
        "type" : "object",
        "description" : "End activities request",
        "properties" : {
          "courseActivityIds" : {
            "type" : "array",
            "description" : "Course activity ids",
            "example" : [ 1, 2 ],
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date activities and allocations are ended",
            "example" : "2025-02-20"
          }
        },
        "required" : [ "courseActivityIds" ]
      },
      "CreateVisitBalanceAdjustmentRequest" : {
        "type" : "object",
        "properties" : {
          "visitOrderChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of visit orders affected by the adjustment"
          },
          "previousVisitOrderCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Previous number of visit orders before the adjustment"
          },
          "privilegedVisitOrderChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of privileged visit orders affected by the adjustment"
          },
          "previousPrivilegedVisitOrderCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Previous number of privileged visit orders before the adjustment"
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the adjust was made"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment text"
          },
          "authorisedUsername" : {
            "type" : "string",
            "description" : "Which user authorised the adjustment. Will be null for a system initiated change"
          }
        },
        "required" : [ "adjustmentDate" ]
      },
      "CreateVisitBalanceAdjustmentResponse" : {
        "type" : "object",
        "description" : "A response after a visit balance adjustment is created in NOMIS",
        "properties" : {
          "visitBalanceAdjustmentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the visit balance adjustment"
          }
        },
        "required" : [ "visitBalanceAdjustmentId" ]
      },
      "CreateVisitRequest" : {
        "type" : "object",
        "description" : "Visit creation request",
        "properties" : {
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Visit start date and time"
          },
          "endTime" : {
            "type" : "string",
            "description" : "Visit end time",
            "example" : "14:30",
            "pattern" : "HH:mm"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison where the visit is to occur"
          },
          "visitorPersonIds" : {
            "type" : "array",
            "description" : "Visitors",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "visitType" : {
            "type" : "string",
            "description" : "Visit type, whether social or official",
            "enum" : [ "SCON", "OFFI" ]
          },
          "issueDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Issue date"
          },
          "visitComment" : {
            "type" : "string",
            "description" : "Comment to be added to visit"
          },
          "visitOrderComment" : {
            "type" : "string",
            "description" : "Comment to be added to visit order (if one is created)"
          },
          "room" : {
            "type" : "string",
            "description" : "Name of the real world room where visit will take place"
          },
          "openClosedStatus" : {
            "type" : "string",
            "description" : "Whether visit is restricted to a closed session",
            "enum" : [ "OPEN", "CLOSED" ]
          }
        },
        "required" : [ "endTime", "issueDate", "openClosedStatus", "prisonId", "room", "startDateTime", "visitComment", "visitOrderComment", "visitType", "visitorPersonIds" ]
      },
      "CreateVisitResponse" : {
        "type" : "object",
        "description" : "Visit creation response",
        "properties" : {
          "visitId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The created Nomis visit id"
          }
        },
        "required" : [ "visitId" ]
      },
      "CreateCourtCaseRequest" : {
        "type" : "object",
        "description" : "Court case create request",
        "properties" : {
          "startDate" : {
            "type" : "string",
            "format" : "date"
          },
          "legalCaseType" : {
            "type" : "string"
          },
          "courtId" : {
            "type" : "string"
          },
          "status" : {
            "type" : "string"
          },
          "courtAppearance" : {
            "$ref" : "#/components/schemas/CourtAppearanceRequest"
          },
          "caseReference" : {
            "type" : "string"
          }
        },
        "required" : [ "courtId", "legalCaseType", "startDate", "status" ]
      },
      "CreateCourtAppearanceResponse" : {
        "type" : "object",
        "description" : "Create adjustment response",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "courtEventChargesIds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OffenderChargeIdResponse"
            }
          }
        },
        "required" : [ "courtEventChargesIds", "id" ]
      },
      "CreateCourtCaseResponse" : {
        "type" : "object",
        "description" : "Create court case response",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "courtAppearanceIds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CreateCourtAppearanceResponse"
            }
          }
        },
        "required" : [ "courtAppearanceIds", "id" ]
      },
      "CaseIdentifier" : {
        "type" : "object",
        "description" : "Court case associated reference",
        "properties" : {
          "reference" : {
            "type" : "string"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time"
          }
        },
        "required" : [ "createdDate", "reference" ]
      },
      "CaseIdentifierRequest" : {
        "type" : "object",
        "description" : "Case identifier list",
        "properties" : {
          "caseIdentifiers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CaseIdentifier"
            }
          }
        },
        "required" : [ "caseIdentifiers" ]
      },
      "ConvertToRecallRequest" : {
        "type" : "object",
        "description" : "Recall convert request",
        "properties" : {
          "sentences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/RecallRelatedSentenceDetails"
            }
          },
          "returnToCustody" : {
            "$ref" : "#/components/schemas/ReturnToCustodyRequest"
          },
          "recallRevocationDate" : {
            "type" : "string",
            "format" : "date"
          }
        },
        "required" : [ "recallRevocationDate", "sentences" ]
      },
      "ConvertToRecallResponse" : {
        "type" : "object",
        "description" : "Recall convert response",
        "properties" : {
          "courtEventIds" : {
            "type" : "array",
            "description" : "the breach court appearance ids created",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "sentenceAdjustmentsActivated" : {
            "type" : "array",
            "description" : "the sentence adjustments and parent sentence that have been activate by the recall",
            "items" : {
              "$ref" : "#/components/schemas/SentenceIdAndAdjustmentIds"
            }
          }
        },
        "required" : [ "courtEventIds", "sentenceAdjustmentsActivated" ]
      },
      "SentenceIdAndAdjustmentIds" : {
        "type" : "object",
        "description" : "Recall convert response",
        "properties" : {
          "sentenceId" : {
            "$ref" : "#/components/schemas/SentenceId"
          },
          "adjustmentIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          }
        },
        "required" : [ "adjustmentIds", "sentenceId" ]
      },
      "CreatePrisonerRestrictionResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of the restriction"
          }
        },
        "required" : [ "id" ]
      },
      "CreatePrisonerRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to create a prisoner restriction in NOMIS",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Restriction type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction became active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction is no longer active"
          },
          "enteredStaffUsername" : {
            "type" : "string",
            "description" : "Username Staff member who created the restriction"
          },
          "authorisedStaffUsername" : {
            "type" : "string",
            "description" : "Username Staff member who authorised the restriction"
          }
        },
        "required" : [ "authorisedStaffUsername", "effectiveDate", "enteredStaffUsername", "typeCode" ]
      },
      "CreateSentenceResponse" : {
        "type" : "object",
        "description" : "Create sentence response",
        "properties" : {
          "sentenceSeq" : {
            "type" : "integer",
            "format" : "int64"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "bookingId", "sentenceSeq" ]
      },
      "SentenceTermRequest" : {
        "type" : "object",
        "description" : "Sentence term request",
        "properties" : {
          "years" : {
            "type" : "integer",
            "format" : "int32"
          },
          "months" : {
            "type" : "integer",
            "format" : "int32"
          },
          "weeks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "days" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hours" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sentenceTermType" : {
            "type" : "string"
          },
          "lifeSentenceFlag" : {
            "type" : "boolean"
          }
        },
        "required" : [ "lifeSentenceFlag", "sentenceTermType" ]
      },
      "CreateSentenceTermResponse" : {
        "type" : "object",
        "description" : "Create sentence term response",
        "properties" : {
          "sentenceSeq" : {
            "type" : "integer",
            "format" : "int64"
          },
          "termSeq" : {
            "type" : "integer",
            "format" : "int64"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "bookingId", "sentenceSeq", "termSeq" ]
      },
      "CreateCaseNoteResponse" : {
        "type" : "object",
        "description" : "A response after a case note created in NOMIS",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of this case note"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id of this case note (which is the prisoner's latest at creation time)"
          }
        },
        "required" : [ "bookingId", "id" ]
      },
      "CreateCaseNoteRequest" : {
        "type" : "object",
        "description" : "A request to create a case note in NOMIS",
        "properties" : {
          "caseNoteType" : {
            "type" : "string",
            "description" : "The case note type",
            "minLength" : 1
          },
          "caseNoteSubType" : {
            "type" : "string",
            "description" : "The case note subtype",
            "minLength" : 1
          },
          "occurrenceDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time case note occurred"
          },
          "creationDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time case note was created"
          },
          "authorUsername" : {
            "type" : "string",
            "description" : "Free format text of person or department that created the case note",
            "minLength" : 1
          },
          "caseNoteText" : {
            "type" : "string",
            "description" : "Free format text body of case note",
            "minLength" : 1
          }
        },
        "required" : [ "authorUsername", "caseNoteSubType", "caseNoteText", "caseNoteType", "creationDateTime", "occurrenceDateTime" ]
      },
      "CreateAlertResponse" : {
        "type" : "object",
        "description" : "A response after an alert created in NOMIS",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The prisoner's bookingId related to this alert"
          },
          "alertSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sequence primary key within this booking"
          },
          "alertCode" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The alert code"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The alert type"
          }
        },
        "required" : [ "alertCode", "alertSequence", "bookingId", "type" ]
      },
      "CreateAlertRequest" : {
        "type" : "object",
        "description" : "A request to create an alert in NOMIS",
        "properties" : {
          "alertCode" : {
            "type" : "string",
            "description" : "The alert code"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date alert started"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date alert expired"
          },
          "isActive" : {
            "type" : "boolean",
            "description" : "true if alert is active and has not expired"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment"
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "Free format text of person or department that authorised the alert",
            "example" : "security"
          },
          "createUsername" : {
            "type" : "string",
            "description" : "Username of person that created the record (might also be a system) "
          }
        },
        "required" : [ "alertCode", "createUsername", "date", "isActive" ]
      },
      "AdjudicationCharge" : {
        "type" : "object",
        "properties" : {
          "offence" : {
            "$ref" : "#/components/schemas/AdjudicationOffence"
          },
          "evidence" : {
            "type" : "string"
          },
          "reportDetail" : {
            "type" : "string"
          },
          "offenceId" : {
            "type" : "string"
          },
          "chargeSequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "chargeSequence", "offence" ]
      },
      "AdjudicationIncident" : {
        "type" : "object",
        "properties" : {
          "adjudicationIncidentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The adjudication incident Id, part of the composite key with adjudicationSequence"
          },
          "reportingStaff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "Reporting staff member"
          },
          "incidentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of the associated incident"
          },
          "incidentTime" : {
            "type" : "string",
            "description" : "Date and time of the associated incident"
          },
          "reportedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date when the associated incident was reported"
          },
          "reportedTime" : {
            "type" : "string",
            "description" : "Date and time when the associated incident was reported"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS"
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date time when the record was created in NOMIS"
          },
          "internalLocation" : {
            "$ref" : "#/components/schemas/InternalLocation",
            "description" : "location where incident took place"
          },
          "incidentType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Incident type "
          },
          "details" : {
            "type" : "string",
            "description" : "Incident details"
          },
          "prison" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Prison where the incident took place"
          },
          "prisonerWitnesses" : {
            "type" : "array",
            "description" : "Prisoners that witnessed the incident. Rarely used in NOMIS",
            "items" : {
              "$ref" : "#/components/schemas/Prisoner"
            }
          },
          "prisonerVictims" : {
            "type" : "array",
            "description" : "Prisoners that were victims in the incident. Not often used in NOMIS",
            "items" : {
              "$ref" : "#/components/schemas/Prisoner"
            }
          },
          "otherPrisonersInvolved" : {
            "type" : "array",
            "description" : "Other suspects involved in the incident that may or may not have been placed on report",
            "items" : {
              "$ref" : "#/components/schemas/Prisoner"
            }
          },
          "reportingOfficers" : {
            "type" : "array",
            "description" : "The officer who reported the incident who may differ from the reporting officer. Often used in NOMIS",
            "items" : {
              "$ref" : "#/components/schemas/Staff"
            }
          },
          "staffWitnesses" : {
            "type" : "array",
            "description" : "Staff that witnessed the incident. Used in NOMIS in a small percentage of cases",
            "items" : {
              "$ref" : "#/components/schemas/Staff"
            }
          },
          "staffVictims" : {
            "type" : "array",
            "description" : "Staff that was a victim in the incident. Rarely used in NOMIS",
            "items" : {
              "$ref" : "#/components/schemas/Staff"
            }
          },
          "otherStaffInvolved" : {
            "type" : "array",
            "description" : "Other staff that was involved in the incident either using force or some other link. Used in NOMIS in a small percentage of cases",
            "items" : {
              "$ref" : "#/components/schemas/Staff"
            }
          },
          "repairs" : {
            "type" : "array",
            "description" : "The repairs required due to the damage",
            "items" : {
              "$ref" : "#/components/schemas/Repair"
            }
          }
        },
        "required" : [ "adjudicationIncidentId", "createdByUsername", "createdDateTime", "incidentDate", "incidentTime", "incidentType", "internalLocation", "otherPrisonersInvolved", "otherStaffInvolved", "prison", "prisonerVictims", "prisonerWitnesses", "repairs", "reportedDate", "reportedTime", "reportingOfficers", "reportingStaff", "staffVictims", "staffWitnesses" ]
      },
      "AdjudicationOffence" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "category" : {
            "$ref" : "#/components/schemas/CodeDescription"
          }
        },
        "required" : [ "code", "description" ]
      },
      "AdjudicationResponse" : {
        "type" : "object",
        "description" : "Adjudication Information",
        "properties" : {
          "adjudicationSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The adjudication/party sequence, part of the composite key with adjudicationIncidentId"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the booking associated with the adjudication"
          },
          "adjudicationNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The adjudication number (business key)"
          },
          "gender" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Gender recorded in NOMIS"
          },
          "currentPrison" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Current prison or null if OUT"
          },
          "partyAddedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date Prisoner was added to the adjudication ????"
          },
          "comment" : {
            "type" : "string",
            "description" : "Adjudication comments"
          },
          "incident" : {
            "$ref" : "#/components/schemas/AdjudicationIncident",
            "description" : "Associated incident details"
          },
          "charges" : {
            "type" : "array",
            "description" : "Charges associated with this adjudication",
            "items" : {
              "$ref" : "#/components/schemas/AdjudicationCharge"
            }
          },
          "investigations" : {
            "type" : "array",
            "description" : "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases",
            "items" : {
              "$ref" : "#/components/schemas/Investigation"
            }
          },
          "hearings" : {
            "type" : "array",
            "description" : "hearings associated with this adjudication",
            "items" : {
              "$ref" : "#/components/schemas/Hearing"
            }
          }
        },
        "required" : [ "adjudicationNumber", "adjudicationSequence", "bookingId", "charges", "gender", "hearings", "incident", "investigations", "offenderNo", "partyAddedDate" ]
      },
      "Hearing" : {
        "type" : "object",
        "properties" : {
          "hearingId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "scheduleDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Hearing scheduled date as set by DPS but not used by NOMIS or set in NOMIS"
          },
          "scheduleTime" : {
            "type" : "string",
            "description" : "Hearing scheduled time as set by DPS but not used by NOMIS or set in NOMIS"
          },
          "hearingDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Hearing date"
          },
          "hearingTime" : {
            "type" : "string",
            "description" : "Hearing time"
          },
          "comment" : {
            "type" : "string"
          },
          "representativeText" : {
            "type" : "string"
          },
          "hearingStaff" : {
            "$ref" : "#/components/schemas/Staff"
          },
          "internalLocation" : {
            "$ref" : "#/components/schemas/InternalLocation"
          },
          "eventStatus" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "hearingResults" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HearingResult"
            }
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date time when the record was created the record in NOMIS"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS"
          },
          "notifications" : {
            "type" : "array",
            "description" : "List of hearing notifications",
            "items" : {
              "$ref" : "#/components/schemas/HearingNotification"
            }
          }
        },
        "required" : [ "createdByUsername", "createdDateTime", "hearingId", "hearingResults", "notifications" ]
      },
      "HearingNotification" : {
        "type" : "object",
        "properties" : {
          "deliveryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Hearing notification date"
          },
          "deliveryTime" : {
            "type" : "string",
            "description" : "Hearing notification time"
          },
          "comment" : {
            "type" : "string",
            "description" : "Notification comment"
          },
          "notifiedStaff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "Staff notified"
          }
        },
        "required" : [ "deliveryDate", "deliveryTime", "notifiedStaff" ]
      },
      "HearingResult" : {
        "type" : "object",
        "properties" : {
          "pleaFindingType" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "findingType" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "charge" : {
            "$ref" : "#/components/schemas/AdjudicationCharge"
          },
          "offence" : {
            "$ref" : "#/components/schemas/AdjudicationOffence"
          },
          "resultAwards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAward"
            }
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date time when the record was created the record in NOMIS"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS"
          }
        },
        "required" : [ "charge", "createdByUsername", "createdDateTime", "offence", "resultAwards" ]
      },
      "HearingResultAward" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Sequence of this sanction for this prisoner's booking"
          },
          "sanctionType" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "sanctionStatus" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "comment" : {
            "type" : "string"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date"
          },
          "statusDate" : {
            "type" : "string",
            "format" : "date"
          },
          "sanctionDays" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sanctionMonths" : {
            "type" : "integer",
            "format" : "int32"
          },
          "compensationAmount" : {
            "type" : "number"
          },
          "consecutiveAward" : {
            "required" : [ "effectiveDate", "sequence" ]
          },
          "chargeSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "adjudicationNumber" : {
            "type" : "integer",
            "format" : "int64"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS"
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date time when the record was created the record in NOMIS"
          }
        },
        "required" : [ "adjudicationNumber", "chargeSequence", "createdByUsername", "createdDateTime", "effectiveDate", "sequence" ]
      },
      "InternalLocation" : {
        "type" : "object",
        "properties" : {
          "locationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS location id"
          },
          "code" : {
            "type" : "string",
            "description" : "NOMIS location code"
          },
          "description" : {
            "type" : "string",
            "description" : "NOMIS location description"
          }
        },
        "required" : [ "code", "description", "locationId" ]
      },
      "Investigation" : {
        "type" : "object",
        "properties" : {
          "investigator" : {
            "$ref" : "#/components/schemas/Staff"
          },
          "comment" : {
            "type" : "string"
          },
          "dateAssigned" : {
            "type" : "string",
            "format" : "date"
          },
          "evidence" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Evidence"
            }
          }
        },
        "required" : [ "dateAssigned", "evidence", "investigator" ]
      },
      "Prisoner" : {
        "type" : "object",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of prisoner"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of prisoner"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS where this prisoner is used"
          },
          "dateAddedToIncident" : {
            "type" : "string",
            "format" : "date",
            "description" : "date added in NOMIS to the adjudication incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "comment about why they were added to the adjudication incident"
          }
        },
        "required" : [ "createdByUsername", "dateAddedToIncident", "lastName", "offenderNo" ]
      },
      "Staff" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "Username of first account related to staff"
          },
          "staffId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS staff id"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of staff member"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of staff member"
          },
          "createdByUsername" : {
            "type" : "string",
            "description" : "Username of person who created the record in NOMIS where this staff is used"
          },
          "dateAddedToIncident" : {
            "type" : "string",
            "format" : "date",
            "description" : "date added in NOMIS to the adjudication incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "comment about why they were added to the adjudication incident"
          }
        },
        "required" : [ "firstName", "lastName", "staffId", "username" ]
      },
      "ChargeToCreate" : {
        "type" : "object",
        "properties" : {
          "offenceCode" : {
            "type" : "string",
            "description" : "Offence code they are charged with",
            "example" : "51:1N"
          }
        },
        "required" : [ "offenceCode" ]
      },
      "CreateAdjudicationRequest" : {
        "type" : "object",
        "description" : "Core Adjudication to be created",
        "properties" : {
          "incident" : {
            "$ref" : "#/components/schemas/IncidentToCreate",
            "description" : "Associated incident details"
          },
          "charges" : {
            "type" : "array",
            "description" : "Charges associated with this adjudication",
            "items" : {
              "$ref" : "#/components/schemas/ChargeToCreate"
            }
          },
          "evidence" : {
            "type" : "array",
            "description" : "The evidence records as part of the incident",
            "items" : {
              "$ref" : "#/components/schemas/EvidenceToCreate"
            }
          }
        },
        "required" : [ "charges", "evidence", "incident" ]
      },
      "EvidenceToCreate" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Type of evidence",
            "enum" : [ "BEHAV", "DRUGTEST", "EVI_BAG", "OTHER", "PHOTO", "VICTIM", "WEAP", "WITNESS" ],
            "example" : "PHOTO"
          },
          "detail" : {
            "type" : "string",
            "description" : "Description of evidence",
            "example" : "Image of damages"
          }
        },
        "required" : [ "detail", "typeCode" ]
      },
      "IncidentToCreate" : {
        "type" : "object",
        "properties" : {
          "reportingStaffUsername" : {
            "type" : "string",
            "description" : "Reporting staff member username",
            "example" : "JANE.BROOKES"
          },
          "incidentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of the associated incident"
          },
          "incidentTime" : {
            "type" : "string",
            "description" : "Date and time of the associated incident",
            "example" : "12:00:00"
          },
          "reportedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date when the associated incident was reported"
          },
          "reportedTime" : {
            "type" : "string",
            "description" : "Date and time when the associated incident was reported",
            "example" : "12:00:00"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "location id where incident took place",
            "example" : 123456
          },
          "details" : {
            "type" : "string",
            "description" : "Incident details",
            "example" : "The details of the incident are as follows"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison code where the incident took place",
            "example" : "MDI"
          },
          "prisonerVictimsOffenderNumbers" : {
            "type" : "array",
            "description" : "Prisoners numbers that witnessed the incident",
            "example" : [ "A1234AA", "A1234AB" ],
            "items" : {
              "type" : "string"
            }
          },
          "staffWitnessesUsernames" : {
            "type" : "array",
            "description" : "Staff usernames that witnessed the incident",
            "example" : [ "A.BARNES", "M.ABDULLAH" ],
            "items" : {
              "type" : "string"
            }
          },
          "staffVictimsUsernames" : {
            "type" : "array",
            "description" : "Staff usernames that were victims in the incident",
            "example" : [ "A.BARNES", "M.ABDULLAH" ],
            "items" : {
              "type" : "string"
            }
          },
          "repairs" : {
            "type" : "array",
            "description" : "The repairs required due to the damage",
            "items" : {
              "$ref" : "#/components/schemas/RepairToCreate"
            }
          }
        },
        "required" : [ "details", "incidentDate", "incidentTime", "internalLocationId", "prisonId", "prisonerVictimsOffenderNumbers", "repairs", "reportedDate", "reportedTime", "reportingStaffUsername", "staffVictimsUsernames", "staffWitnessesUsernames" ]
      },
      "RepairToCreate" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Type of repairs",
            "enum" : [ "CLEA", "DECO", "ELEC", "FABR", "LOCK", "PLUM" ],
            "example" : "PLUM"
          },
          "comment" : {
            "type" : "string",
            "description" : "Optional description of repairs",
            "example" : "Damage to the plumbing"
          },
          "cost" : {
            "type" : "number",
            "description" : "Optional cost of repairs",
            "example" : 62.12
          }
        },
        "required" : [ "typeCode" ]
      },
      "PrisonerDetails" : {
        "type" : "object",
        "description" : "Details of a prisoner booking",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "The NOMIS reference",
            "example" : "A1234AA"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The NOMIS booking ID",
            "example" : 1234567
          },
          "location" : {
            "type" : "string",
            "description" : "The prisoner's current location",
            "example" : "BXI, OUT"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if prisoner is active in prison"
          }
        },
        "required" : [ "active", "bookingId", "location", "offenderNo" ]
      },
      "BookingCourtCaseCloneResponse" : {
        "type" : "object",
        "description" : "Response for Court Cases bookig clone operations",
        "properties" : {
          "courtCases" : {
            "type" : "array",
            "description" : "Court Cases created",
            "items" : {
              "$ref" : "#/components/schemas/ClonedCourtCaseResponse"
            }
          }
        },
        "required" : [ "courtCases" ]
      },
      "CaseIdentifierResponse" : {
        "type" : "object",
        "description" : "Case related reference",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of case identifier",
            "example" : "CASE/INFO#"
          },
          "reference" : {
            "type" : "string",
            "description" : "The value of the case identifier",
            "example" : "asd/123"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time the case identifier was created",
            "example" : "2020-07-17T12:34:56"
          },
          "modifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time the case identifier was last changed",
            "example" : "2021-07-16T12:34:56"
          },
          "auditModuleName" : {
            "type" : "string",
            "description" : "The name of the module that last changed it, indicates if this was NOMIS or the synchronisation service",
            "example" : "DPS_SYNCHRONISATION"
          }
        },
        "required" : [ "createDateTime", "reference", "type" ]
      },
      "ClonedCourtCaseResponse" : {
        "type" : "object",
        "description" : "Court Cases created due to a booking clone operation",
        "properties" : {
          "courtCase" : {
            "$ref" : "#/components/schemas/CourtCaseResponse",
            "description" : "Created court case and children"
          },
          "sourceCourtCase" : {
            "$ref" : "#/components/schemas/CourtCaseResponse",
            "description" : "Source court case and children that the cases were cloned from"
          }
        },
        "required" : [ "courtCase", "sourceCourtCase" ]
      },
      "CourtCaseResponse" : {
        "type" : "object",
        "description" : "Court Case",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "offenderNo" : {
            "type" : "string"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "primaryCaseInfoNumber" : {
            "type" : "string"
          },
          "caseSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "caseStatus" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "legalCaseType" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "beginDate" : {
            "type" : "string",
            "format" : "date"
          },
          "courtId" : {
            "type" : "string"
          },
          "combinedCaseId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sourceCombinedCaseIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "statusUpdateStaffId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "statusUpdateDate" : {
            "type" : "string",
            "format" : "date"
          },
          "statusUpdateComment" : {
            "type" : "string"
          },
          "statusUpdateReason" : {
            "type" : "string"
          },
          "lidsCaseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "lidsCombinedCaseId" : {
            "type" : "integer",
            "format" : "int32"
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdByUsername" : {
            "type" : "string"
          },
          "courtEvents" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CourtEventResponse"
            }
          },
          "offenderCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OffenderChargeResponse"
            }
          },
          "caseInfoNumbers" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CaseIdentifierResponse"
            }
          },
          "sentences" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SentenceResponse"
            }
          }
        },
        "required" : [ "bookingId", "caseInfoNumbers", "caseSequence", "caseStatus", "courtEvents", "courtId", "createdByUsername", "createdDateTime", "id", "legalCaseType", "offenderCharges", "offenderNo", "sentences", "sourceCombinedCaseIds" ]
      },
      "CourtEventChargeResponse" : {
        "type" : "object",
        "description" : "Court Event Charge",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "offenderCharge" : {
            "$ref" : "#/components/schemas/OffenderChargeResponse"
          },
          "offencesCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offenceDate" : {
            "type" : "string",
            "format" : "date"
          },
          "offenceEndDate" : {
            "type" : "string",
            "format" : "date"
          },
          "plea" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "propertyValue" : {
            "type" : "number"
          },
          "totalPropertyValue" : {
            "type" : "number"
          },
          "cjitCode1" : {
            "type" : "string"
          },
          "cjitCode2" : {
            "type" : "string"
          },
          "cjitCode3" : {
            "type" : "string"
          },
          "resultCode1" : {
            "$ref" : "#/components/schemas/OffenceResultCodeResponse"
          },
          "resultCode2" : {
            "$ref" : "#/components/schemas/OffenceResultCodeResponse"
          },
          "mostSeriousFlag" : {
            "type" : "boolean"
          },
          "linkedCaseDetails" : {
            "$ref" : "#/components/schemas/LinkedCaseChargeDetails"
          }
        },
        "required" : [ "eventId", "mostSeriousFlag", "offenderCharge" ]
      },
      "CourtEventResponse" : {
        "type" : "object",
        "description" : "Court Event",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "caseId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "offenderNo" : {
            "type" : "string"
          },
          "eventDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "courtEventType" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "eventStatus" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "directionCode" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "judgeName" : {
            "type" : "string"
          },
          "courtId" : {
            "type" : "string"
          },
          "outcomeReasonCode" : {
            "$ref" : "#/components/schemas/OffenceResultCodeResponse"
          },
          "commentText" : {
            "type" : "string"
          },
          "orderRequestedFlag" : {
            "type" : "boolean"
          },
          "holdFlag" : {
            "type" : "boolean"
          },
          "nextEventRequestFlag" : {
            "type" : "boolean"
          },
          "nextEventDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdByUsername" : {
            "type" : "string"
          },
          "courtEventCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CourtEventChargeResponse"
            }
          },
          "courtOrders" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CourtOrderResponse"
            }
          }
        },
        "required" : [ "courtEventCharges", "courtEventType", "courtId", "courtOrders", "createdByUsername", "createdDateTime", "eventDateTime", "eventStatus", "id", "offenderNo" ]
      },
      "CourtOrderResponse" : {
        "type" : "object",
        "description" : "Court Order",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "courtDate" : {
            "type" : "string",
            "format" : "date"
          },
          "issuingCourt" : {
            "type" : "string"
          },
          "courtInfoId" : {
            "type" : "string"
          },
          "orderType" : {
            "type" : "string"
          },
          "orderStatus" : {
            "type" : "string"
          },
          "dueDate" : {
            "type" : "string",
            "format" : "date"
          },
          "requestDate" : {
            "type" : "string",
            "format" : "date"
          },
          "seriousnessLevel" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "commentText" : {
            "type" : "string"
          },
          "nonReportFlag" : {
            "type" : "boolean"
          },
          "sentencePurposes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SentencePurposeResponse"
            }
          }
        },
        "required" : [ "courtDate", "eventId", "id", "issuingCourt", "orderStatus", "orderType", "sentencePurposes" ]
      },
      "LinkedCaseChargeDetails" : {
        "type" : "object",
        "description" : "Linked case details for a court event charge",
        "properties" : {
          "caseId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Source caseId"
          },
          "eventId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Target court eventId"
          },
          "dateLinked" : {
            "type" : "string",
            "format" : "date"
          }
        },
        "required" : [ "caseId", "dateLinked", "eventId" ]
      },
      "OffenceResponse" : {
        "type" : "object",
        "description" : "Offence",
        "properties" : {
          "offenceCode" : {
            "type" : "string"
          },
          "statuteCode" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          }
        },
        "required" : [ "description", "offenceCode", "statuteCode" ]
      },
      "OffenceResultCodeResponse" : {
        "type" : "object",
        "description" : "Offence Result Code",
        "properties" : {
          "chargeStatus" : {
            "type" : "string"
          },
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "dispositionCode" : {
            "type" : "string"
          },
          "conviction" : {
            "type" : "boolean"
          }
        },
        "required" : [ "chargeStatus", "code", "conviction", "description", "dispositionCode" ]
      },
      "OffenderChargeResponse" : {
        "type" : "object",
        "description" : "Offender Charge",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          },
          "offence" : {
            "$ref" : "#/components/schemas/OffenceResponse"
          },
          "offencesCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "offenceDate" : {
            "type" : "string",
            "format" : "date"
          },
          "offenceEndDate" : {
            "type" : "string",
            "format" : "date"
          },
          "plea" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "propertyValue" : {
            "type" : "number"
          },
          "totalPropertyValue" : {
            "type" : "number"
          },
          "cjitCode1" : {
            "type" : "string"
          },
          "cjitCode2" : {
            "type" : "string"
          },
          "cjitCode3" : {
            "type" : "string"
          },
          "chargeStatus" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "resultCode1" : {
            "$ref" : "#/components/schemas/OffenceResultCodeResponse"
          },
          "resultCode2" : {
            "$ref" : "#/components/schemas/OffenceResultCodeResponse"
          },
          "mostSeriousFlag" : {
            "type" : "boolean"
          },
          "lidsOffenceNumber" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "id", "mostSeriousFlag", "offence" ]
      },
      "RecallCustodyDate" : {
        "type" : "object",
        "description" : "Recall custody return date data",
        "properties" : {
          "returnToCustodyDate" : {
            "type" : "string",
            "format" : "date"
          },
          "recallLength" : {
            "type" : "integer",
            "format" : "int64"
          },
          "comments" : {
            "type" : "string"
          }
        },
        "required" : [ "recallLength", "returnToCustodyDate" ]
      },
      "SentencePurposeResponse" : {
        "type" : "object",
        "description" : "Sentence Purpose",
        "properties" : {
          "orderId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "orderPartyCode" : {
            "type" : "string"
          },
          "purposeCode" : {
            "type" : "string"
          }
        },
        "required" : [ "orderId", "orderPartyCode", "purposeCode" ]
      },
      "SentenceResponse" : {
        "type" : "object",
        "description" : "Offender Sentence",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sentenceSeq" : {
            "type" : "integer",
            "format" : "int64"
          },
          "status" : {
            "type" : "string"
          },
          "calculationType" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "category" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date"
          },
          "courtOrder" : {
            "$ref" : "#/components/schemas/CourtOrderResponse"
          },
          "consecSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date"
          },
          "commentText" : {
            "type" : "string"
          },
          "absenceCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "caseId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "etdCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "mtdCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "ltdCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "ardCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "crdCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "pedCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "npdCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "ledCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "sedCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "prrdCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "tariffCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "dprrdCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "tusedCalculatedDate" : {
            "type" : "string",
            "format" : "date"
          },
          "aggSentenceSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "aggAdjustDays" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sentenceLevel" : {
            "type" : "string"
          },
          "extendedDays" : {
            "type" : "integer",
            "format" : "int32"
          },
          "counts" : {
            "type" : "integer",
            "format" : "int32"
          },
          "statusUpdateReason" : {
            "type" : "string"
          },
          "statusUpdateComment" : {
            "type" : "string"
          },
          "statusUpdateDate" : {
            "type" : "string",
            "format" : "date"
          },
          "statusUpdateStaffId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "fineAmount" : {
            "type" : "number"
          },
          "dischargeDate" : {
            "type" : "string",
            "format" : "date"
          },
          "nomSentDetailRef" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nomConsToSentDetailRef" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nomConsFromSentDetailRef" : {
            "type" : "integer",
            "format" : "int64"
          },
          "nomConsWithSentDetailRef" : {
            "type" : "integer",
            "format" : "int64"
          },
          "lineSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hdcExclusionFlag" : {
            "type" : "boolean"
          },
          "hdcExclusionReason" : {
            "type" : "string"
          },
          "cjaAct" : {
            "type" : "string"
          },
          "sled2Calc" : {
            "type" : "string",
            "format" : "date"
          },
          "startDate2Calc" : {
            "type" : "string",
            "format" : "date"
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdByUsername" : {
            "type" : "string"
          },
          "sentenceTerms" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SentenceTermResponse"
            }
          },
          "offenderCharges" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/OffenderChargeResponse"
            }
          },
          "missingCourtOffenderChargeIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "prisonId" : {
            "type" : "string"
          },
          "recallCustodyDate" : {
            "$ref" : "#/components/schemas/RecallCustodyDate"
          }
        },
        "required" : [ "bookingId", "calculationType", "category", "createdByUsername", "createdDateTime", "missingCourtOffenderChargeIds", "offenderCharges", "prisonId", "sentenceSeq", "sentenceTerms", "startDate", "status" ]
      },
      "SentenceTermResponse" : {
        "type" : "object",
        "description" : "Sentence Term",
        "properties" : {
          "termSequence" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sentenceTermType" : {
            "$ref" : "#/components/schemas/CodeDescription"
          },
          "years" : {
            "type" : "integer",
            "format" : "int32"
          },
          "months" : {
            "type" : "integer",
            "format" : "int32"
          },
          "weeks" : {
            "type" : "integer",
            "format" : "int32"
          },
          "days" : {
            "type" : "integer",
            "format" : "int32"
          },
          "hours" : {
            "type" : "integer",
            "format" : "int32"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date"
          },
          "lifeSentenceFlag" : {
            "type" : "boolean"
          },
          "prisonId" : {
            "type" : "string"
          }
        },
        "required" : [ "lifeSentenceFlag", "prisonId", "startDate", "termSequence" ]
      },
      "CreateSentenceAdjustmentRequest" : {
        "type" : "object",
        "description" : "Sentence adjustment create request",
        "properties" : {
          "adjustmentTypeCode" : {
            "type" : "string",
            "description" : "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "enum" : [ "RSR", "UR", "S240A", "RST", "RX" ],
            "example" : "RX",
            "minLength" : 1
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date adjustment is applied"
          },
          "adjustmentFromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start of the period which contributed to the adjustment"
          },
          "adjustmentDays" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of days for the adjustment",
            "minimum" : 0
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "active" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Flag to indicate if the adjustment is being applied"
          }
        },
        "required" : [ "adjustmentDays", "adjustmentTypeCode" ]
      },
      "CreateAdjustmentResponse" : {
        "type" : "object",
        "description" : "Create adjustment response",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "id" ]
      },
      "CreateIncentiveResponse" : {
        "type" : "object",
        "description" : "Incentive creation response",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The created Nomis booking and sequence"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "bookingId", "sequence" ]
      },
      "CreateKeyDateAdjustmentRequest" : {
        "type" : "object",
        "description" : "Key date adjustment create request",
        "properties" : {
          "adjustmentTypeCode" : {
            "type" : "string",
            "description" : "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "enum" : [ "LAL", "UAL", "RADA", "ADA", "SREM" ],
            "example" : "ADA",
            "minLength" : 1
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date adjustment is applied"
          },
          "adjustmentFromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start of the period which contributed to the adjustment"
          },
          "adjustmentDays" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of days for the adjustment",
            "minimum" : 0
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "active" : {
            "type" : "boolean",
            "default" : true,
            "description" : "Flag to indicate if the adjustment is being applied"
          }
        },
        "required" : [ "adjustmentDays", "adjustmentFromDate", "adjustmentTypeCode" ]
      },
      "CreatePersonResponse" : {
        "type" : "object",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The person Id"
          }
        },
        "required" : [ "personId" ]
      },
      "CreatePersonRequest" : {
        "type" : "object",
        "description" : "Request to create an person (aka DPS contact) in NOMIS",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The person id. When non-zero this will be used rather than the auto generated id",
            "example" : 12345
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the person",
            "example" : "Ashantee"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname name of the person",
            "example" : "Addo"
          },
          "middleName" : {
            "type" : "string",
            "description" : "Middle name of the person",
            "example" : "Ashwin"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of birth of the person"
          },
          "genderCode" : {
            "type" : "string",
            "description" : "Gender code of the person",
            "example" : "F"
          },
          "titleCode" : {
            "type" : "string",
            "description" : "Title code of the person",
            "example" : "DR"
          },
          "languageCode" : {
            "type" : "string",
            "description" : "Language code of the person",
            "example" : "FRE-FRA"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "True if the person requires an interpreter"
          },
          "domesticStatusCode" : {
            "type" : "string",
            "description" : "Domestic status code aka marital status of the person",
            "example" : "S"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "True if a staff member"
          }
        },
        "required" : [ "firstName", "interpreterRequired", "lastName" ]
      },
      "CreateContactPersonRestrictionResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of the restriction"
          }
        },
        "required" : [ "id" ]
      },
      "CreateContactPersonRestrictionRequest" : {
        "type" : "object",
        "description" : "Request to create a contact restriction in NOMIS for either global or against a specific relationship",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Restriction type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction became active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction is no longer active"
          },
          "enteredStaffUsername" : {
            "type" : "string",
            "description" : "Username Staff member who created the restriction"
          }
        },
        "required" : [ "effectiveDate", "enteredStaffUsername", "typeCode" ]
      },
      "CreatePersonPhoneResponse" : {
        "type" : "object",
        "properties" : {
          "phoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of phone"
          }
        },
        "required" : [ "phoneId" ]
      },
      "CreatePersonPhoneRequest" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "The number",
            "example" : "0114 555 555"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension",
            "example" : "x432"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "Phone type code",
            "example" : "MOB"
          }
        },
        "required" : [ "number", "typeCode" ]
      },
      "CreatePersonIdentifierResponse" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS sequence for this identifier for this person"
          }
        },
        "required" : [ "sequence" ]
      },
      "CreatePersonIdentifierRequest" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "The identifier type code"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The identifier value",
            "example" : "NE121212T"
          },
          "issuedAuthority" : {
            "type" : "string",
            "description" : "The issued authority",
            "example" : "Police"
          }
        },
        "required" : [ "identifier", "typeCode" ]
      },
      "CreatePersonEmploymentResponse" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS sequence for this employment for this person"
          }
        },
        "required" : [ "sequence" ]
      },
      "CreatePersonEmploymentRequest" : {
        "type" : "object",
        "properties" : {
          "corporateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the corporate organisation this employment is at"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True is employment is active"
          }
        },
        "required" : [ "active", "corporateId" ]
      },
      "CreatePersonEmailResponse" : {
        "type" : "object",
        "properties" : {
          "emailAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of email address"
          }
        },
        "required" : [ "emailAddressId" ]
      },
      "CreatePersonEmailRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@test.justice.gov.uk"
          }
        },
        "required" : [ "email" ]
      },
      "CreatePersonContactResponse" : {
        "type" : "object",
        "properties" : {
          "personContactId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The contact Id"
          }
        },
        "required" : [ "personContactId" ]
      },
      "CreatePersonContactRequest" : {
        "type" : "object",
        "description" : "Request to create a contact (aka DPS prisoner contact) in NOMIS",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "Offender no aka prisoner number. Contact will be added to latest booking",
            "example" : "A1234AA"
          },
          "contactTypeCode" : {
            "type" : "string",
            "description" : "The contact type",
            "example" : "S"
          },
          "relationshipTypeCode" : {
            "type" : "string",
            "description" : "The relationship type",
            "example" : "BRO"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date contact is no longer active"
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "True if approved to visit the prisoner"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "True if next of kin to the prisoner"
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "True if emergency contact for the prisoner"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          }
        },
        "required" : [ "active", "approvedVisitor", "contactTypeCode", "emergencyContact", "nextOfKin", "offenderNo", "relationshipTypeCode" ]
      },
      "CreatePersonAddressResponse" : {
        "type" : "object",
        "properties" : {
          "personAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The address Id"
          }
        },
        "required" : [ "personAddressId" ]
      },
      "CreatePersonAddressRequest" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Address reference code",
            "example" : "HOME"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat name or number",
            "example" : "Apartment 3"
          },
          "premise" : {
            "type" : "string",
            "description" : "Premise",
            "example" : 22
          },
          "street" : {
            "type" : "string",
            "description" : "Street",
            "example" : "West Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code",
            "example" : "MK15 2ST"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City reference code",
            "example" : 25343
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County reference code",
            "example" : "S.YORKSHIRE"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country reference code",
            "example" : "ENG"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "true if address not fixed. for example homeless"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "true if this is the person's primary address"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "true if this is used for mail"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment about the address"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid from"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid to"
          }
        },
        "required" : [ "mailAddress", "primaryAddress" ]
      },
      "CreateNonAssociationRequest" : {
        "type" : "object",
        "description" : "Offender individual schedule creation request",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "Noms id of the prisoner",
            "example" : "A1234DF"
          },
          "nsOffenderNo" : {
            "type" : "string",
            "description" : "Noms id of the other prisoner",
            "example" : "A1234EG"
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason code of the first prisoner, domain NON_ASSO_RSN",
            "example" : "VIC"
          },
          "recipReason" : {
            "type" : "string",
            "description" : "Reason code of the other prisoner, domain NON_ASSO_RSN",
            "example" : "PER"
          },
          "type" : {
            "type" : "string",
            "description" : "Type code, domain NON_ASSO_TYP",
            "example" : "WING"
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "Free text name of staff member",
            "example" : "Joe Bloggs"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Effective date",
            "example" : "2022-08-12"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "effectiveDate", "nsOffenderNo", "offenderNo", "reason", "recipReason", "type" ]
      },
      "CreateNonAssociationResponse" : {
        "type" : "object",
        "description" : "Non-association creation response",
        "properties" : {
          "typeSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The created offender_na_details type sequence number"
          }
        },
        "required" : [ "typeSequence" ]
      },
      "CreateLocationRequest" : {
        "type" : "object",
        "description" : "Location creation request",
        "properties" : {
          "certified" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether certified for use",
            "example" : true
          },
          "locationType" : {
            "type" : "string",
            "description" : "Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)",
            "enum" : [ "ADJU", "ADMI", "APP", "AREA", "ASSO", "BOOT", "BOX", "CELL", "CLAS", "EXER", "EXTE", "FAIT", "GROU", "HCEL", "HOLD", "IGRO", "INSI", "INTE", "LAND", "LOCA", "MEDI", "MOVE", "OFFI", "OUTS", "POSI", "RESI", "ROOM", "RTU", "SHEL", "SPOR", "SPUR", "STOR", "TABL", "TRAI", "TRRM", "VIDE", "VISIT", "WING", "WORK" ]
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison code of the location",
            "example" : "LEI"
          },
          "parentLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The containing location id",
            "example" : 1234567
          },
          "operationalCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Max capacity subject to resources",
            "example" : 43
          },
          "cnaCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Certified Normal Accommodation capacity",
            "example" : 44
          },
          "userDescription" : {
            "type" : "string",
            "description" : "Description of location",
            "example" : "Some description",
            "maxLength" : 40,
            "minLength" : 0
          },
          "locationCode" : {
            "type" : "string",
            "description" : "Usually a number for a cell, a letter for a wing or landing. Used to calculate description",
            "example" : "005"
          },
          "description" : {
            "type" : "string",
            "description" : "Full code hierarchy",
            "example" : "MDI-C-3-015",
            "maxLength" : 240,
            "minLength" : 0
          },
          "unitType" : {
            "type" : "string",
            "description" : "Housing Unit type, Reference code (HOU_UN_TYPE)",
            "enum" : [ "HC", "HOLC", "NA", "OU", "REC", "SEG", "SPLC" ]
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Physical maximum capacity",
            "example" : 45
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Defines the order within parent location",
            "example" : "Joe Bloggs"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment",
            "maxLength" : 240,
            "minLength" : 0
          },
          "profiles" : {
            "type" : "array",
            "description" : "Profiles",
            "items" : {
              "$ref" : "#/components/schemas/ProfileRequest"
            }
          },
          "usages" : {
            "type" : "array",
            "description" : "Usages",
            "items" : {
              "$ref" : "#/components/schemas/UsageRequest"
            }
          }
        },
        "required" : [ "description", "locationCode", "locationType", "prisonId" ]
      },
      "LocationIdResponse" : {
        "type" : "object",
        "description" : "Location creation response",
        "properties" : {
          "locationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The created agency_internal_locations location id"
          }
        },
        "required" : [ "locationId" ]
      },
      "ReorderRequest" : {
        "type" : "object",
        "properties" : {
          "codeList" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "codeList" ]
      },
      "CreateCorporateOrganisationRequest" : {
        "type" : "object",
        "description" : "Request to create a corporate organisation in NOMIS",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique Id of corporate"
          },
          "name" : {
            "type" : "string",
            "description" : "The corporate name",
            "example" : "Boots"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date made inactive"
          },
          "caseloadId" : {
            "type" : "string",
            "description" : "The associated caseload code",
            "example" : "WWI"
          },
          "comment" : {
            "type" : "string",
            "description" : "User comment"
          },
          "programmeNumber" : {
            "type" : "string",
            "description" : "Programme number"
          },
          "vatNumber" : {
            "type" : "string",
            "description" : "VAT number"
          }
        },
        "required" : [ "active", "id", "name" ]
      },
      "CreateCorporateWebAddressResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of web address"
          }
        },
        "required" : [ "id" ]
      },
      "CreateCorporateWebAddressRequest" : {
        "type" : "object",
        "properties" : {
          "webAddress" : {
            "type" : "string",
            "description" : "Web address",
            "example" : "test@test.justice.gov.uk"
          }
        },
        "required" : [ "webAddress" ]
      },
      "CreateCorporateTypeRequest" : {
        "type" : "object",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "type",
            "example" : "TEA"
          }
        },
        "required" : [ "typeCode" ]
      },
      "CreateCorporatePhoneResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of phone"
          }
        },
        "required" : [ "id" ]
      },
      "CreateCorporatePhoneRequest" : {
        "type" : "object",
        "properties" : {
          "number" : {
            "type" : "string",
            "description" : "The number",
            "example" : "0114 555 555"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension",
            "example" : "x432"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "Phone type code",
            "example" : "MOB"
          }
        },
        "required" : [ "number", "typeCode" ]
      },
      "CreateCorporateEmailResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of email address"
          }
        },
        "required" : [ "id" ]
      },
      "CreateCorporateEmailRequest" : {
        "type" : "object",
        "properties" : {
          "email" : {
            "type" : "string",
            "description" : "Email address",
            "example" : "test@test.justice.gov.uk"
          }
        },
        "required" : [ "email" ]
      },
      "CreateCorporateAddressResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The address Id"
          }
        },
        "required" : [ "id" ]
      },
      "CreateCorporateAddressRequest" : {
        "type" : "object",
        "description" : "Request to create a corporate organisation address in NOMIS",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Address type",
            "example" : "BUS"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat name or number",
            "example" : "Apartment 3"
          },
          "premise" : {
            "type" : "string",
            "description" : "Premise",
            "example" : 22
          },
          "street" : {
            "type" : "string",
            "description" : "Street",
            "example" : "West Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code",
            "example" : "MK15 2ST"
          },
          "cityCode" : {
            "type" : "string",
            "description" : "City code",
            "example" : 25343
          },
          "countyCode" : {
            "type" : "string",
            "description" : "County code",
            "example" : "S.YORKSHIRE"
          },
          "countryCode" : {
            "type" : "string",
            "description" : "Country code",
            "example" : "ENG"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "true if address not fixed. for example homeless"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "true if this is the corporate's primary address"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "true if this is used for mail"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment about the address"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid from"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid to"
          },
          "isServices" : {
            "type" : "boolean",
            "description" : "True if this is a service organisation"
          },
          "businessHours" : {
            "type" : "string",
            "description" : "Business hours"
          },
          "contactPersonName" : {
            "type" : "string",
            "description" : "Contact person"
          }
        },
        "required" : [ "isServices", "mailAddress", "noFixedAddress", "primaryAddress", "startDate" ]
      },
      "CreateAppointmentRequest" : {
        "type" : "object",
        "description" : "Offender individual schedule creation request",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id of the prisoner",
            "example" : 1234567
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Appointment date",
            "example" : "2022-08-12"
          },
          "startTime" : {
            "type" : "string",
            "description" : "Appointment start time",
            "example" : "09:45"
          },
          "endTime" : {
            "type" : "string",
            "description" : "Activity end time",
            "example" : "15:20"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Room where the appointment is to occur (in cell if null)",
            "example" : 112233
          },
          "eventSubType" : {
            "type" : "string",
            "description" : "Appointment event sub-type",
            "example" : "MEOT"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment",
            "maxLength" : 4000,
            "minLength" : 0
          }
        },
        "required" : [ "bookingId", "endTime", "eventDate", "eventSubType", "startTime" ]
      },
      "CreateAppointmentResponse" : {
        "type" : "object",
        "description" : "Offender individual schedule creation response",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The created offender_ind_schedules id"
          }
        },
        "required" : [ "eventId" ]
      },
      "CreateAlertType" : {
        "type" : "object",
        "description" : "A request to create an alert type reference data in NOMIS",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The alert type code"
          },
          "description" : {
            "type" : "string",
            "description" : "The alert type description"
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence in a UI list"
          }
        },
        "required" : [ "code", "description", "listSequence" ]
      },
      "CreateAlertCode" : {
        "type" : "object",
        "description" : "A request to create an alert code reference data in NOMIS",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The alert code"
          },
          "typeCode" : {
            "type" : "string",
            "description" : "The parent type code"
          },
          "description" : {
            "type" : "string",
            "description" : "The alert description"
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence in a UI list"
          }
        },
        "required" : [ "code", "description", "listSequence", "typeCode" ]
      },
      "CreateHearingResponse" : {
        "type" : "object",
        "description" : "Provides the generated hearing ID after creation",
        "properties" : {
          "hearingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The Id for the created Hearing"
          }
        },
        "required" : [ "hearingId" ]
      },
      "CreateHearingRequest" : {
        "type" : "object",
        "description" : "Hearing to be created",
        "properties" : {
          "hearingType" : {
            "type" : "string",
            "description" : "Type of hearing",
            "example" : "GOV"
          },
          "hearingDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Hearing date"
          },
          "hearingTime" : {
            "type" : "string",
            "description" : "Hearing time"
          },
          "agencyId" : {
            "type" : "string",
            "description" : "agency id of hearing"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "location id for the hearing",
            "example" : 123456
          }
        },
        "required" : [ "agencyId", "hearingDate", "hearingTime", "hearingType", "internalLocationId" ]
      },
      "CreateHearingResultResponse" : {
        "type" : "object",
        "description" : "Provides the generated hearing result composite ID after creation",
        "properties" : {
          "hearingId" : {
            "type" : "integer",
            "format" : "int64"
          },
          "resultSequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "hearingId", "resultSequence" ]
      },
      "CreateHearingResultRequest" : {
        "type" : "object",
        "description" : "Hearing result to be created",
        "properties" : {
          "adjudicatorUsername" : {
            "type" : "string",
            "description" : "adjudicator username for the hearing record",
            "example" : "ASMITH_GEN"
          },
          "pleaFindingCode" : {
            "type" : "string",
            "description" : "The offender's plea code on this charge",
            "example" : "NOT_GUILTY"
          },
          "findingCode" : {
            "type" : "string",
            "description" : "Finding code",
            "example" : "GUILTY"
          }
        },
        "required" : [ "findingCode", "pleaFindingCode" ]
      },
      "CreateHearingResultAwardResponses" : {
        "type" : "object",
        "description" : "A list of Hearing result awards created (aka punishment)",
        "properties" : {
          "awardsCreated" : {
            "type" : "array",
            "description" : "an ordered list of award response, the order matching the request order",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "required" : [ "awardsCreated" ]
      },
      "CreateHearingResultAwardRequest" : {
        "type" : "object",
        "description" : "A list of Hearing result awards (aka punishment) to be created",
        "properties" : {
          "awards" : {
            "type" : "array",
            "description" : "a list of award requests",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAwardRequest"
            }
          }
        },
        "required" : [ "awards" ]
      },
      "CreateActivityRequest" : {
        "type" : "object",
        "description" : "Course activity creation request",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Code generated from the activity and schedule ids and mapped"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Activity start date",
            "example" : "2022-08-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Activity end date",
            "example" : "2022-08-12"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison where the activity is to occur"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Room where the activity is to occur (from activity schedule)"
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Capacity of activity (from activity schedule)",
            "maximum" : 999
          },
          "payRates" : {
            "type" : "array",
            "description" : "Pay rates",
            "items" : {
              "$ref" : "#/components/schemas/PayRateRequest"
            }
          },
          "description" : {
            "type" : "string",
            "description" : "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode" : {
            "type" : "string",
            "description" : "Minimum Incentive Level"
          },
          "programCode" : {
            "type" : "string",
            "description" : "Program Service code (from activity category)"
          },
          "payPerSession" : {
            "type" : "string",
            "description" : "Half or Full day (H or F)",
            "enum" : [ "F", "H" ],
            "example" : "H"
          },
          "schedules" : {
            "type" : "array",
            "description" : "Schedules",
            "items" : {
              "$ref" : "#/components/schemas/CourseScheduleRequest"
            }
          },
          "scheduleRules" : {
            "type" : "array",
            "description" : "Schedule rules",
            "items" : {
              "$ref" : "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays" : {
            "type" : "boolean",
            "description" : "Exclude bank holidays?"
          },
          "outsideWork" : {
            "type" : "boolean",
            "description" : "Outside work?"
          }
        },
        "required" : [ "capacity", "code", "description", "excludeBankHolidays", "outsideWork", "payPerSession", "payRates", "prisonId", "programCode", "scheduleRules", "schedules", "startDate" ]
      },
      "LeadVisitor" : {
        "type" : "object",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "visitor NOMIS person Id"
          },
          "fullName" : {
            "type" : "string",
            "description" : "full name of visitor"
          },
          "telephones" : {
            "type" : "array",
            "description" : "Ordered list of telephone numbers for contact with latest first",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "fullName", "personId", "telephones" ]
      },
      "VisitResponse" : {
        "type" : "object",
        "description" : "Visit information",
        "properties" : {
          "visitId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The visit id"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Visit start date and time"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Visit end date and time"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison where the visit is to occur"
          },
          "visitors" : {
            "type" : "array",
            "description" : "Visitors",
            "items" : {
              "$ref" : "#/components/schemas/Visitor"
            }
          },
          "leadVisitor" : {
            "$ref" : "#/components/schemas/LeadVisitor",
            "description" : "the lead visitor"
          },
          "visitType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Visit type, whether social or official"
          },
          "visitStatus" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The status of the visit"
          },
          "visitOutcome" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The outcome of the visit"
          },
          "agencyInternalLocation" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "NOMIS room"
          },
          "commentText" : {
            "type" : "string",
            "description" : "Visit comments"
          },
          "visitorConcernText" : {
            "type" : "string",
            "description" : "Visitor concerns text"
          },
          "whenCreated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "date and time of creation"
          },
          "whenUpdated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "date and time of last update"
          },
          "createUserId" : {
            "type" : "string",
            "description" : "User id for visit creation"
          },
          "modifyUserId" : {
            "type" : "string",
            "description" : "User id for last visit update"
          }
        },
        "required" : [ "agencyInternalLocation", "createUserId", "endDateTime", "offenderNo", "prisonId", "startDateTime", "visitId", "visitOutcome", "visitStatus", "visitType", "visitors", "whenCreated" ]
      },
      "Visitor" : {
        "type" : "object",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "visitor NOMIS person Id"
          },
          "leadVisitor" : {
            "type" : "boolean",
            "description" : "Indicates lead visitor for the visit"
          }
        },
        "required" : [ "leadVisitor", "personId" ]
      },
      "Pageable" : {
        "type" : "object",
        "properties" : {
          "page" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 0
          },
          "size" : {
            "type" : "integer",
            "format" : "int32",
            "minimum" : 1
          },
          "sort" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      },
      "VisitRoomCountResponse" : {
        "type" : "object",
        "description" : "Visit id",
        "properties" : {
          "agencyInternalLocationDescription" : {
            "type" : "string",
            "description" : "The internal location description"
          },
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The room usage count"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "The prison id"
          }
        },
        "required" : [ "agencyInternalLocationDescription", "count", "prisonId" ]
      },
      "PageVisitIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VisitIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageableObject" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        }
      },
      "SortObject" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          }
        }
      },
      "VisitIdResponse" : {
        "type" : "object",
        "description" : "Visit id",
        "properties" : {
          "visitId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The visit id"
          }
        },
        "required" : [ "visitId" ]
      },
      "VisitBalanceDetailResponse" : {
        "type" : "object",
        "description" : "The visit balance held against a prisoner's latest booking including the last IEP Allocation date",
        "properties" : {
          "prisonNumber" : {
            "type" : "string",
            "description" : "Prison number aka noms id / offender id display",
            "example" : "A1234BC"
          },
          "remainingVisitOrders" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of unallocated (remaining) visit orders"
          },
          "remainingPrivilegedVisitOrders" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of unallocated (remaining) privileged visit orders"
          },
          "lastIEPAllocationDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date of the last IEP Allocation date via the batch process, if it exists"
          }
        },
        "required" : [ "prisonNumber", "remainingPrivilegedVisitOrders", "remainingVisitOrders" ]
      },
      "VisitBalanceAdjustmentResponse" : {
        "type" : "object",
        "description" : "The visit order balance changes held against a booking for a prisoner",
        "properties" : {
          "visitOrderChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of visit orders affected by the adjustment"
          },
          "previousVisitOrderCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Previous number of visit orders before the adjustment"
          },
          "privilegedVisitOrderChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of privileged visit orders affected by the adjustment"
          },
          "previousPrivilegedVisitOrderCount" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Previous number of privileged visit orders before the adjustment"
          },
          "adjustmentReason" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Adjustment reason"
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the adjust was made"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment text"
          },
          "expiryBalance" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Expiry balance"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Expiry date"
          },
          "endorsedStaffId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Which staff member endorsed the adjustment aka Entered by"
          },
          "authorisedStaffId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Which staff member authorised the adjustment"
          },
          "createUsername" : {
            "type" : "string",
            "description" : "Who created the adjustment"
          },
          "latestBooking" : {
            "type" : "boolean",
            "description" : "Whether this adjustment is for the latest booking"
          }
        },
        "required" : [ "adjustmentDate", "adjustmentReason", "createUsername", "latestBooking" ]
      },
      "PageVisitBalanceIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VisitBalanceIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "VisitBalanceIdResponse" : {
        "type" : "object",
        "description" : "visit balance id",
        "properties" : {
          "visitBalanceId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The visit balance (booking) id"
          }
        },
        "required" : [ "visitBalanceId" ]
      },
      "GeneralLedgerTransactionDto" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a general ledger transaction",
        "properties" : {
          "transactionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The transaction id",
            "example" : 12345678
          },
          "transactionEntrySequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number",
            "example" : 3
          },
          "generalLedgerEntrySequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The GL entry number",
            "example" : 2
          },
          "caseloadId" : {
            "type" : "string",
            "description" : "The caseload",
            "example" : "MDI"
          },
          "amount" : {
            "type" : "number",
            "description" : "The transaction amount",
            "example" : 2.14
          },
          "type" : {
            "type" : "string",
            "description" : "The transaction type defined in the TRANSACTION_TYPES table",
            "example" : "CANT"
          },
          "postingType" : {
            "type" : "string",
            "description" : "Whether credit or debit",
            "enum" : [ "CR", "DR" ]
          },
          "accountCode" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The account code",
            "example" : 21020
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the transaction entry",
            "example" : "???"
          },
          "transactionTimestamp" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the transaction occurred",
            "example" : "2025-07-14T12:13:14"
          },
          "reference" : {
            "type" : "string",
            "description" : "The transaction reference",
            "example" : 1423558449
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdByDisplayName" : {
            "type" : "string"
          },
          "lastModifiedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastModifiedBy" : {
            "type" : "string"
          },
          "lastModifiedByDisplayName" : {
            "type" : "string"
          }
        },
        "required" : [ "accountCode", "amount", "caseloadId", "createdAt", "createdBy", "createdByDisplayName", "description", "generalLedgerEntrySequence", "postingType", "transactionEntrySequence", "transactionId", "transactionTimestamp", "type" ]
      },
      "OffenderTransactionDto" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a financial transaction",
        "properties" : {
          "transactionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The transaction id",
            "example" : 12345678
          },
          "transactionEntrySequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number",
            "example" : 3
          },
          "offenderId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The offender id",
            "example" : 1234567
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The prisoner number or noms id",
            "example" : "A1234AA"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id",
            "example" : 12345678
          },
          "caseloadId" : {
            "type" : "string",
            "description" : "The caseload",
            "example" : "MDI"
          },
          "amount" : {
            "type" : "number",
            "description" : "The transaction amount",
            "example" : 2.14
          },
          "type" : {
            "type" : "string",
            "description" : "The transaction type defined in the TRANSACTION_TYPES table",
            "example" : "CANT"
          },
          "postingType" : {
            "type" : "string",
            "description" : "Whether credit or debit",
            "enum" : [ "CR", "DR" ]
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the transaction entry",
            "example" : "Television"
          },
          "entryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The transaction date",
            "example" : "2025-06-14"
          },
          "clientReference" : {
            "type" : "string",
            "description" : "The client unique reference",
            "example" : "MKI6431RETAILRECEIPTPHONE"
          },
          "reference" : {
            "type" : "string",
            "description" : "The transaction reference",
            "example" : 1423558449
          },
          "subAccountType" : {
            "type" : "string",
            "description" : "The account type",
            "enum" : [ "REG", "SAV", "SPND", "REL" ]
          },
          "generalLedgerTransactions" : {
            "type" : "array",
            "description" : "Dependent GL transaction entries",
            "items" : {
              "$ref" : "#/components/schemas/GeneralLedgerTransactionDto"
            }
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "createdBy" : {
            "type" : "string"
          },
          "createdByDisplayName" : {
            "type" : "string"
          },
          "lastModifiedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "lastModifiedBy" : {
            "type" : "string"
          },
          "lastModifiedByDisplayName" : {
            "type" : "string"
          }
        },
        "required" : [ "amount", "caseloadId", "createdAt", "createdBy", "createdByDisplayName", "description", "entryDate", "generalLedgerTransactions", "offenderId", "offenderNo", "postingType", "subAccountType", "transactionEntrySequence", "transactionId", "type" ]
      },
      "SplashConditionDto" : {
        "type" : "object",
        "description" : "Splash Screen Access Condition details",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "The prisonId or **ALL**",
            "example" : "MDI but can be **ALL** for all"
          },
          "accessBlocked" : {
            "type" : "boolean",
            "description" : "Whether access to the screen is blocked",
            "example" : true
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The type of condition set on the screen",
            "example" : "CASELOAD"
          }
        },
        "required" : [ "accessBlocked", "prisonId", "type" ]
      },
      "SplashScreenDto" : {
        "type" : "object",
        "description" : "Splash screen details",
        "properties" : {
          "moduleName" : {
            "type" : "string",
            "description" : "The name of the module/screen",
            "example" : "OIDINCRS"
          },
          "accessBlockedType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The type of access - YES, NO, COND"
          },
          "warningText" : {
            "type" : "string",
            "description" : "The text shown when a screen is accessible but will shortly be turned off",
            "example" : "This screen will be turned off next month."
          },
          "blockedText" : {
            "type" : "string",
            "description" : "The text shown when a screen is blocked",
            "example" : "This screen is no longer accessible, use DPS."
          },
          "conditions" : {
            "type" : "array",
            "description" : "Prison access conditions",
            "items" : {
              "$ref" : "#/components/schemas/SplashConditionDto"
            }
          }
        },
        "required" : [ "accessBlockedType", "conditions", "moduleName" ]
      },
      "PrisonDto" : {
        "type" : "object",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "The prisonId or **ALL**",
            "example" : "MDI but can be **ALL** for all"
          }
        },
        "required" : [ "prisonId" ]
      },
      "SentenceAdjustmentResponse" : {
        "type" : "object",
        "description" : "Sentence adjustment",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sentence adjustment id"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id"
          },
          "bookingSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The booking sequence"
          },
          "hasBeenReleased" : {
            "type" : "boolean",
            "description" : "Indicates whether for this booking the prisoner has been released"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Current prison or OUT"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "sentenceSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sequence of the sentence within this booking"
          },
          "adjustmentType" : {
            "$ref" : "#/components/schemas/SentencingAdjustmentType",
            "description" : "Adjustment type"
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date adjustment is applied"
          },
          "adjustmentFromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start of the period which contributed to the adjustment"
          },
          "adjustmentToDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "End of the period which contributed to the adjustment"
          },
          "adjustmentDays" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of days for the adjustment"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Flag to indicate if the adjustment is being applied"
          },
          "hiddenFromUsers" : {
            "type" : "boolean",
            "description" : "Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment"
          }
        },
        "required" : [ "active", "adjustmentDays", "adjustmentType", "bookingId", "bookingSequence", "hasBeenReleased", "hiddenFromUsers", "id", "offenderNo", "prisonId", "sentenceSequence" ]
      },
      "SentencingAdjustmentType" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "code",
            "example" : "RX"
          },
          "description" : {
            "type" : "string",
            "description" : "description",
            "example" : "Remand"
          }
        },
        "required" : [ "code", "description" ]
      },
      "AnswerResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The answer id"
          },
          "answer" : {
            "type" : "string",
            "description" : "The answer text"
          },
          "answerSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The answer id used to set the listSequence values",
            "example" : 1
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The order of the answers",
            "example" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "If the answer is active",
            "example" : true
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the answer is no longer used"
          },
          "nextQuestion" : {
            "$ref" : "#/components/schemas/NextQuestionResponse",
            "description" : "Question to be asked following this answer"
          },
          "dateRequired" : {
            "type" : "boolean",
            "description" : "If the answer should include a date",
            "example" : true
          },
          "commentRequired" : {
            "type" : "boolean",
            "description" : "If the answer should include a comment",
            "example" : true
          }
        },
        "required" : [ "active", "answer", "answerSequence", "commentRequired", "dateRequired", "id", "listSequence" ]
      },
      "NextQuestionResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The question id"
          },
          "question" : {
            "type" : "string",
            "description" : "The question text"
          }
        },
        "required" : [ "id", "question" ]
      },
      "QuestionResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The question id"
          },
          "question" : {
            "type" : "string",
            "description" : "The question text"
          },
          "answers" : {
            "type" : "array",
            "description" : "List of Answers to this question",
            "items" : {
              "$ref" : "#/components/schemas/AnswerResponse"
            }
          },
          "active" : {
            "type" : "boolean",
            "description" : "If the question is active",
            "example" : true
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the question is no longer used"
          },
          "multipleAnswers" : {
            "type" : "boolean",
            "description" : "If the question has multiple answers",
            "example" : true
          },
          "questionSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The question id used to set the listSequence values",
            "example" : 1
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The order of the questions",
            "example" : 1
          }
        },
        "required" : [ "active", "answers", "id", "listSequence", "multipleAnswers", "question", "questionSequence" ]
      },
      "QuestionnaireResponse" : {
        "type" : "object",
        "description" : "Questionnaire",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The unique identifier of the questionnaire"
          },
          "description" : {
            "type" : "string",
            "description" : "A description of the questionnaire",
            "example" : "Escape from Establishment"
          },
          "code" : {
            "type" : "string",
            "description" : "Code to identify this questionnaire",
            "example" : "ESCAPE_EST"
          },
          "active" : {
            "type" : "boolean",
            "description" : "If the questionnaire is active",
            "example" : true
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Sequence value of the questionnaires",
            "example" : 1
          },
          "questions" : {
            "type" : "array",
            "description" : "List of Questions (and associated Answers) for this Questionnaire",
            "items" : {
              "$ref" : "#/components/schemas/QuestionResponse"
            }
          },
          "offenderRoles" : {
            "type" : "array",
            "description" : "List of Roles allowed for an offender's participation in an incident",
            "items" : {
              "type" : "string"
            }
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the questionnaire is no longer used"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Questionnaire created date"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Questionnaire created by"
          },
          "modifiedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Questionnaire modified date"
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "Questionnaire modified by"
          }
        },
        "required" : [ "active", "code", "createdBy", "createdDate", "id", "listSequence", "offenderRoles", "questions" ]
      },
      "PageQuestionnaireIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/QuestionnaireIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "QuestionnaireIdResponse" : {
        "type" : "object",
        "description" : "Questionnaire id",
        "properties" : {
          "questionnaireId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The questionnaire id"
          }
        },
        "required" : [ "questionnaireId" ]
      },
      "IncentiveLevel" : {
        "type" : "object",
        "description" : "An incentive levels",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The incentive level code",
            "example" : "STD"
          },
          "description" : {
            "type" : "string",
            "description" : "The incentive level description",
            "example" : "Standard"
          }
        },
        "required" : [ "code", "description" ]
      },
      "VisitBalanceResponse" : {
        "type" : "object",
        "description" : "The visit balance held against a prisoner's latest booking",
        "properties" : {
          "remainingVisitOrders" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of unallocated (remaining) visit orders"
          },
          "remainingPrivilegedVisitOrders" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of unallocated (remaining) privileged visit orders"
          }
        },
        "required" : [ "remainingPrivilegedVisitOrders", "remainingVisitOrders" ]
      },
      "PostPrisonerMergeCaseChanges" : {
        "type" : "object",
        "description" : "Court Cases (and related charges and sentences) created or updated due to the latest prisoner merge",
        "properties" : {
          "courtCasesCreated" : {
            "type" : "array",
            "description" : "Court cases and related child entities create due to the merge after being copied from a previous booking",
            "items" : {
              "$ref" : "#/components/schemas/CourtCaseResponse"
            }
          },
          "courtCasesDeactivated" : {
            "type" : "array",
            "description" : "Court cases and related child entities deactivated due to the merge after being cloned from a previous booking",
            "items" : {
              "$ref" : "#/components/schemas/CourtCaseResponse"
            }
          }
        },
        "required" : [ "courtCasesCreated", "courtCasesDeactivated" ]
      },
      "ContactRestrictionEnteredStaff" : {
        "type" : "object",
        "properties" : {
          "staffId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS staff id"
          },
          "username" : {
            "type" : "string",
            "description" : "username for staff member. For staff with multiple accounts this will be the general account username."
          }
        },
        "required" : [ "staffId", "username" ]
      },
      "PrisonerRestriction" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a prisoner's visit restrictions",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of the restriction"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "Offender no aka prisoner number",
            "example" : "A1234AA"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of booking associated with the contact"
          },
          "bookingSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking sequence this contact is related to. When 1 this indicates contact is for current term"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Restriction type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction became active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction is no longer active"
          },
          "enteredStaff" : {
            "$ref" : "#/components/schemas/ContactRestrictionEnteredStaff",
            "description" : "Staff member who created the restriction"
          },
          "authorisedStaff" : {
            "$ref" : "#/components/schemas/ContactRestrictionEnteredStaff",
            "description" : "Staff member who authorised the restriction"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "authorisedStaff", "bookingId", "bookingSequence", "effectiveDate", "enteredStaff", "id", "offenderNo", "type" ]
      },
      "PrisonerWithRestrictions" : {
        "type" : "object",
        "properties" : {
          "restrictions" : {
            "type" : "array",
            "description" : "List of restrictions for this prisoner",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerRestriction"
            }
          }
        },
        "required" : [ "restrictions" ]
      },
      "BookingProfileDetailsResponse" : {
        "type" : "object",
        "description" : "Profile details held against a booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking's unique identifier",
            "example" : 1234567
          },
          "profileDetails" : {
            "type" : "array",
            "description" : "A list of profile details for this booking",
            "items" : {
              "$ref" : "#/components/schemas/ProfileDetailsResponse"
            }
          },
          "latestBooking" : {
            "type" : "boolean",
            "description" : "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example" : true
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date of the booking",
            "example" : "2020-07-17T12:34:56"
          }
        },
        "required" : [ "bookingId", "latestBooking", "profileDetails", "startDateTime" ]
      },
      "PrisonerProfileDetailsResponse" : {
        "type" : "object",
        "description" : "Profile details held against a prisoner",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "The prisoner's unique identifier",
            "example" : "A1234AA"
          },
          "bookings" : {
            "type" : "array",
            "description" : "A list of bookings and their profile details",
            "items" : {
              "$ref" : "#/components/schemas/BookingProfileDetailsResponse"
            }
          }
        },
        "required" : [ "bookings", "offenderNo" ]
      },
      "ProfileDetailsResponse" : {
        "type" : "object",
        "description" : "Profile details recorded against a prisoner",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "The type of profile info",
            "example" : "BUILD"
          },
          "code" : {
            "type" : "string",
            "description" : "The value of the profile info",
            "example" : "SLIM"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time the profile info was created",
            "example" : "2020-07-17T12:34:56"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The user who created the profile info",
            "example" : "AQ425D"
          },
          "modifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The time the profile info was last changed",
            "example" : "2021-07-16T12:34:56"
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "The user who modified the profile info",
            "example" : "AQ425D"
          },
          "auditModuleName" : {
            "type" : "string",
            "description" : "The name of the module that last changed the profile info, indicates if this was NOMIS or the synchronisation service",
            "example" : "DPS_SYNCHRONISATION"
          }
        },
        "required" : [ "createDateTime", "createdBy", "type" ]
      },
      "MergeDetail" : {
        "type" : "object",
        "description" : "Details of a prisoner merge",
        "properties" : {
          "deletedOffenderNo" : {
            "type" : "string",
            "description" : "The NOMIS reference of the record that was merged to and was then removed",
            "example" : "A1234AA"
          },
          "activeBookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking that was merged to and which then became active",
            "example" : 12345678
          },
          "retainedOffenderNo" : {
            "type" : "string",
            "description" : "The NOMIS reference of the record that was merged from and was retained",
            "example" : "A1234AA"
          },
          "previousBookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking that was merged from and was retained as inactive",
            "example" : 12345678
          },
          "requestDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the merge happened",
            "example" : "2021-01-01T12:34:56"
          }
        },
        "required" : [ "activeBookingId", "deletedOffenderNo", "previousBookingId", "requestDateTime", "retainedOffenderNo" ]
      },
      "Actions" : {
        "type" : "object",
        "properties" : {
          "openCSIPAlert" : {
            "type" : "boolean"
          },
          "nonAssociationsUpdated" : {
            "type" : "boolean"
          },
          "observationBook" : {
            "type" : "boolean"
          },
          "unitOrCellMove" : {
            "type" : "boolean"
          },
          "csraOrRsraReview" : {
            "type" : "boolean"
          },
          "serviceReferral" : {
            "type" : "boolean"
          },
          "simReferral" : {
            "type" : "boolean"
          }
        },
        "required" : [ "csraOrRsraReview", "nonAssociationsUpdated", "observationBook", "openCSIPAlert", "serviceReferral", "simReferral", "unitOrCellMove" ]
      },
      "Attendee" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Review Attendee/Contributor Id"
          },
          "name" : {
            "type" : "string",
            "description" : "Name of attendee/contributor"
          },
          "role" : {
            "type" : "string",
            "description" : "Role of attendee/contributor"
          },
          "attended" : {
            "type" : "boolean",
            "description" : "If attended (otherwise contributor)"
          },
          "contribution" : {
            "type" : "string",
            "description" : "Contribution"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the attendee was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the attendee"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the attendee was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the attendee"
          }
        },
        "required" : [ "attended", "createDateTime", "createdBy", "id" ]
      },
      "CSIPFactorResponse" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Factor type id"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Contributory Factor"
          },
          "comment" : {
            "type" : "string",
            "description" : "Factor comment"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the factor was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the factor"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the factor was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the factor"
          }
        },
        "required" : [ "createDateTime", "createdBy", "id", "type" ]
      },
      "CSIPResponse" : {
        "type" : "object",
        "description" : "CSIP Details",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The csip id"
          },
          "offender" : {
            "$ref" : "#/components/schemas/Offender",
            "description" : "The offender"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id associated with the CSIP"
          },
          "originalAgencyId" : {
            "type" : "string",
            "description" : "The original location when the CSIP was created"
          },
          "logNumber" : {
            "type" : "string",
            "description" : "Log number"
          },
          "incidentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date/Time incident occurred"
          },
          "incidentTime" : {
            "type" : "string",
            "description" : "Date/Time incident occurred"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Type of incident"
          },
          "location" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Location of the incident"
          },
          "areaOfWork" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The Area of work, aka function"
          },
          "reportedBy" : {
            "type" : "string",
            "description" : "The person reporting the incident - free text"
          },
          "reportedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date reported"
          },
          "proActiveReferral" : {
            "type" : "boolean",
            "description" : "proActive Referral"
          },
          "staffAssaulted" : {
            "type" : "boolean",
            "description" : "If a staff member was assaulted"
          },
          "staffAssaultedName" : {
            "type" : "string",
            "description" : "If assaulted, the staff member name"
          },
          "reportDetails" : {
            "$ref" : "#/components/schemas/ReportDetails",
            "description" : "Additional information for the CSIP Report"
          },
          "saferCustodyScreening" : {
            "$ref" : "#/components/schemas/SaferCustodyScreening",
            "description" : "Safer custody screening"
          },
          "investigation" : {
            "$ref" : "#/components/schemas/InvestigationDetails",
            "description" : "Investigation details of the incident"
          },
          "decision" : {
            "$ref" : "#/components/schemas/Decision",
            "description" : "DecisionAndActions"
          },
          "caseManager" : {
            "type" : "string",
            "description" : "Case Manager involved"
          },
          "planReason" : {
            "type" : "string",
            "description" : "Reason for plan"
          },
          "firstCaseReviewDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of first review"
          },
          "plans" : {
            "type" : "array",
            "description" : "CSIP Plans",
            "items" : {
              "$ref" : "#/components/schemas/Plan"
            }
          },
          "reviews" : {
            "type" : "array",
            "description" : "CSIP Reviews",
            "items" : {
              "$ref" : "#/components/schemas/Review"
            }
          },
          "documents" : {
            "type" : "array",
            "description" : "Associated CSIP document Ids",
            "items" : {
              "$ref" : "#/components/schemas/DocumentIdResponse"
            }
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the report was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the report"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the report was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the report"
          }
        },
        "required" : [ "areaOfWork", "bookingId", "createDateTime", "createdBy", "decision", "id", "incidentDate", "investigation", "location", "offender", "plans", "proActiveReferral", "reportDetails", "reportedBy", "reportedDate", "reviews", "saferCustodyScreening", "staffAssaulted", "type" ]
      },
      "Decision" : {
        "type" : "object",
        "properties" : {
          "conclusion" : {
            "type" : "string",
            "description" : "Conclusion & Reason for decision"
          },
          "decisionOutcome" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Outcome"
          },
          "signedOffRole" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Signed off by"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "The username of the person who recorded the decision"
          },
          "recordedByDisplayName" : {
            "type" : "string",
            "description" : "Real name of who recorded the decision"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Recorded Date"
          },
          "nextSteps" : {
            "type" : "string",
            "description" : "What to do next"
          },
          "otherDetails" : {
            "type" : "string",
            "description" : "Other information to take into consideration"
          },
          "actions" : {
            "$ref" : "#/components/schemas/Actions",
            "description" : "Action list"
          }
        },
        "required" : [ "actions" ]
      },
      "DocumentIdResponse" : {
        "type" : "object",
        "description" : "Document id",
        "properties" : {
          "documentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The document id"
          }
        },
        "required" : [ "documentId" ]
      },
      "InterviewDetails" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Interview Id"
          },
          "interviewee" : {
            "type" : "string",
            "description" : "Person being interviewed"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "date of interview"
          },
          "role" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Why the incident occurred"
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional data regarding the interview"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the interview was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the interview"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the interview was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the interview"
          }
        },
        "required" : [ "createDateTime", "createdBy", "date", "id", "interviewee", "role" ]
      },
      "InvestigationDetails" : {
        "type" : "object",
        "properties" : {
          "staffInvolved" : {
            "type" : "string",
            "description" : "Staff involved in the incident"
          },
          "evidenceSecured" : {
            "type" : "string",
            "description" : "Whether any evidence was secured"
          },
          "reasonOccurred" : {
            "type" : "string",
            "description" : "Why the incident occurred"
          },
          "usualBehaviour" : {
            "type" : "string",
            "description" : "Normal behaviour of the offender"
          },
          "trigger" : {
            "type" : "string",
            "description" : "Offender's trigger"
          },
          "protectiveFactors" : {
            "type" : "string",
            "description" : "Protective factors"
          },
          "interviews" : {
            "type" : "array",
            "description" : "Interview",
            "items" : {
              "$ref" : "#/components/schemas/InterviewDetails"
            }
          }
        }
      },
      "Offender" : {
        "type" : "object",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "NOMIS id"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of offender"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of offender"
          }
        },
        "required" : [ "firstName", "lastName", "offenderNo" ]
      },
      "Plan" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Plan Id"
          },
          "identifiedNeed" : {
            "type" : "string",
            "description" : "Details of the need"
          },
          "intervention" : {
            "type" : "string",
            "description" : "Intervention plan"
          },
          "progression" : {
            "type" : "string",
            "description" : "Information regarding progression of plan"
          },
          "referredBy" : {
            "type" : "string",
            "description" : "The person reporting - free text"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "When created"
          },
          "targetDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Target date of plan"
          },
          "closedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Plan closed date"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the plan was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the plan"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the plan was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the plan"
          }
        },
        "required" : [ "createDateTime", "createdBy", "createdDate", "id", "identifiedNeed", "intervention", "targetDate" ]
      },
      "PrisonerCSIPsResponse" : {
        "type" : "object",
        "description" : "The list of CSIPs held against a prisoner",
        "properties" : {
          "offenderCSIPs" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CSIPResponse"
            }
          }
        },
        "required" : [ "offenderCSIPs" ]
      },
      "ReportDetails" : {
        "type" : "object",
        "properties" : {
          "releaseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the offender is released"
          },
          "involvement" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "How the offender was involved"
          },
          "concern" : {
            "type" : "string",
            "description" : "Concern description"
          },
          "factors" : {
            "type" : "array",
            "description" : "Contributory factors",
            "items" : {
              "$ref" : "#/components/schemas/CSIPFactorResponse"
            }
          },
          "knownReasons" : {
            "type" : "string",
            "description" : "known reasons for the involvement"
          },
          "otherInformation" : {
            "type" : "string",
            "description" : "Additional information"
          },
          "saferCustodyTeamInformed" : {
            "type" : "boolean",
            "description" : "If the safer custody team were informed"
          },
          "referralComplete" : {
            "type" : "boolean",
            "description" : "If the referral has been completed"
          },
          "referralCompletedBy" : {
            "type" : "string",
            "description" : "Who completed the referral"
          },
          "referralCompletedByDisplayName" : {
            "type" : "string",
            "description" : "Real name of the person who completed the referral"
          },
          "referralCompletedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the referral was completed"
          }
        },
        "required" : [ "factors", "referralComplete", "saferCustodyTeamInformed" ]
      },
      "Review" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Review Id"
          },
          "reviewSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Sequence number"
          },
          "attendees" : {
            "type" : "array",
            "description" : "Attendees to the review",
            "items" : {
              "$ref" : "#/components/schemas/Attendee"
            }
          },
          "remainOnCSIP" : {
            "type" : "boolean",
            "description" : "Whether to remain on CSIP"
          },
          "csipUpdated" : {
            "type" : "boolean",
            "description" : "If the csip has been updated"
          },
          "caseNote" : {
            "type" : "boolean",
            "description" : "If a case note was added"
          },
          "closeCSIP" : {
            "type" : "boolean",
            "description" : "If the csip is closed"
          },
          "peopleInformed" : {
            "type" : "boolean",
            "description" : "Whether people were informed"
          },
          "summary" : {
            "type" : "string",
            "description" : "Summary details"
          },
          "nextReviewDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Next Review date"
          },
          "closeDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Review closed date"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The date the review was created"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "The username of the person who recorded the review"
          },
          "recordedByDisplayName" : {
            "type" : "string",
            "description" : "Real name of who recorded the review"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the review was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the review"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the review was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the review"
          }
        },
        "required" : [ "attendees", "caseNote", "closeCSIP", "createDateTime", "createdBy", "csipUpdated", "id", "peopleInformed", "recordedBy", "recordedDate", "remainOnCSIP", "reviewSequence" ]
      },
      "SaferCustodyScreening" : {
        "type" : "object",
        "properties" : {
          "outcome" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Result of the Safer Custody Screening"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "The username of the person who recorded the data"
          },
          "recordedByDisplayName" : {
            "type" : "string",
            "description" : "Real name of who recorded the data"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "When the the SCS occurred"
          },
          "reasonForDecision" : {
            "type" : "string",
            "description" : "Why the decision was made"
          }
        }
      },
      "ContactForPerson" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a person's contact with a prisoner",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of person associated with the prisoner"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the person",
            "example" : "Smith"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the person",
            "example" : "John"
          }
        },
        "required" : [ "firstName", "lastName", "personId" ]
      },
      "ContactRestriction" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a person's restriction with a prisoner",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of the restriction"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Restriction type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction became active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date restriction is no longer active"
          },
          "enteredStaff" : {
            "$ref" : "#/components/schemas/ContactRestrictionEnteredStaff",
            "description" : "Staff member who created the restriction"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "effectiveDate", "enteredStaff", "id", "type" ]
      },
      "PrisonerContact" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a prisoner's contact with a person",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS sequence for the identifier for this contact"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of booking associated with the contact"
          },
          "bookingSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking sequence this contact is related to. When 1 this indicates contact is for current term"
          },
          "contactType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The contact type"
          },
          "relationshipType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The relationship type"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date contact is no longer active"
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "True if approved to visit the prisoner"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "True if next of kin to the prisoner"
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "True if emergency contact for the prisoner"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "person" : {
            "$ref" : "#/components/schemas/ContactForPerson",
            "description" : "The person this prisoner is a contact for"
          },
          "restrictions" : {
            "type" : "array",
            "description" : "List of restrictions specifically between the prisoner and this contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactRestriction"
            }
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "active", "approvedVisitor", "audit", "bookingId", "bookingSequence", "contactType", "emergencyContact", "id", "nextOfKin", "person", "relationshipType", "restrictions" ]
      },
      "PrisonerWithContacts" : {
        "type" : "object",
        "properties" : {
          "contacts" : {
            "type" : "array",
            "description" : "List of contacts for this prisoner",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerContact"
            }
          }
        },
        "required" : [ "contacts" ]
      },
      "CaseNoteAmendment" : {
        "type" : "object",
        "properties" : {
          "text" : {
            "type" : "string",
            "description" : "Free format text body of amendment"
          },
          "authorUsername" : {
            "type" : "string",
            "description" : "Author login name of person or department that added the amendment"
          },
          "authorStaffId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Author STAFF_ID"
          },
          "authorFirstName" : {
            "type" : "string",
            "description" : "Author first name"
          },
          "authorLastName" : {
            "type" : "string",
            "description" : "Author last name"
          },
          "createdDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Amendment created timestamp"
          },
          "sourceSystem" : {
            "type" : "string",
            "description" : "Which system (Nomis or DPS) created the amendment",
            "enum" : [ "DPS", "NOMIS" ],
            "example" : "DPS"
          }
        },
        "required" : [ "authorUsername", "createdDateTime", "sourceSystem", "text" ]
      },
      "CaseNoteResponse" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a case note associated with a prisoner",
        "properties" : {
          "caseNoteId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The primary key"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The prisoner's bookingId related to this case note"
          },
          "caseNoteType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The case note type"
          },
          "caseNoteSubType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The case note subtype"
          },
          "noteSourceCode" : {
            "type" : "string",
            "description" : "Whether system-generated",
            "enum" : [ "AUTO", "EXT", "INST" ]
          },
          "occurrenceDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Datetime case note occurred"
          },
          "creationDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Datetime case note was created by user"
          },
          "authorStaffId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Author STAFF_ID"
          },
          "authorUsername" : {
            "type" : "string",
            "description" : "Author username or login name"
          },
          "authorFirstName" : {
            "type" : "string",
            "description" : "Author first name"
          },
          "authorLastName" : {
            "type" : "string",
            "description" : "Author last name"
          },
          "authorUsernames" : {
            "type" : "array",
            "description" : "List of all usernames for authorStaffId",
            "items" : {
              "type" : "string"
            }
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison id"
          },
          "caseNoteText" : {
            "type" : "string",
            "description" : "Free format text body of case note"
          },
          "amendments" : {
            "type" : "array",
            "description" : "Amendments to the text",
            "items" : {
              "$ref" : "#/components/schemas/CaseNoteAmendment"
            }
          },
          "createdDatetime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Created DB timestamp"
          },
          "createdUsername" : {
            "type" : "string",
            "description" : "Created DB username"
          },
          "auditModuleName" : {
            "type" : "string",
            "description" : "Which screen (or DPS) created the case note",
            "example" : "OIDABCDE"
          },
          "sourceSystem" : {
            "type" : "string",
            "description" : "Which system (Nomis or DPS) created the case note",
            "enum" : [ "DPS", "NOMIS" ],
            "example" : "DPS"
          }
        },
        "required" : [ "amendments", "authorLastName", "authorStaffId", "authorUsername", "bookingId", "caseNoteId", "caseNoteSubType", "caseNoteText", "caseNoteType", "createdDatetime", "createdUsername", "sourceSystem" ]
      },
      "PrisonerCaseNotesResponse" : {
        "type" : "object",
        "description" : "The list of case notes held against a booking",
        "properties" : {
          "caseNotes" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CaseNoteResponse"
            }
          }
        },
        "required" : [ "caseNotes" ]
      },
      "PreviousBookingId" : {
        "type" : "object",
        "description" : "ID of previous booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The NOMIS booking ID",
            "example" : 1234567
          },
          "bookingSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The NOMIS booking sequence",
            "example" : 3
          }
        },
        "required" : [ "bookingId", "bookingSequence" ]
      },
      "PrisonerAlertsResponse" : {
        "type" : "object",
        "description" : "The list of unique alerts held against a prisoner",
        "properties" : {
          "latestBookingAlerts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AlertResponse"
            }
          }
        },
        "required" : [ "latestBookingAlerts" ]
      },
      "PagePrisonerRestrictionIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerRestrictionIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PrisonerRestrictionIdResponse" : {
        "type" : "object",
        "properties" : {
          "restrictionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The restriction Id"
          }
        },
        "required" : [ "restrictionId" ]
      },
      "RestrictionIdsWithLast" : {
        "type" : "object",
        "properties" : {
          "restrictionIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "lastRestrictionId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "lastRestrictionId", "restrictionIds" ]
      },
      "PagePrisonerIds" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerIds"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PrisonerIds" : {
        "type" : "object",
        "description" : "Prisoner identifiers",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Latest booking id",
            "example" : 12345
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The NOMIS reference AKA prisoner number",
            "example" : "A1234AA"
          }
        },
        "required" : [ "bookingId", "offenderNo" ]
      },
      "PagePrisonerId" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerId"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PrisonerId" : {
        "type" : "object",
        "description" : "Prisoner identifier",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "The NOMIS reference AKA prisoner number",
            "example" : "A1234AA"
          }
        },
        "required" : [ "offenderNo" ]
      },
      "PrisonerNosWithLast" : {
        "type" : "object",
        "properties" : {
          "prisonerIds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerId"
            }
          },
          "lastOffenderId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "lastOffenderId", "prisonerIds" ]
      },
      "KeyDateAdjustmentResponse" : {
        "type" : "object",
        "description" : "Key date adjustment",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The key date adjustment id"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id"
          },
          "bookingSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The booking sequence"
          },
          "hasBeenReleased" : {
            "type" : "boolean",
            "description" : "Indicates whether for this booking the prisoner has been released"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Current prison or OUT"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "adjustmentType" : {
            "$ref" : "#/components/schemas/SentencingAdjustmentType",
            "description" : "Adjustment type"
          },
          "adjustmentDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date adjustment is applied"
          },
          "adjustmentFromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Start of the period which contributed to the adjustment"
          },
          "adjustmentToDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "End of the period which contributed to the adjustment"
          },
          "adjustmentDays" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Number of days for the adjustment"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Flag to indicate if the adjustment is being applied"
          }
        },
        "required" : [ "active", "adjustmentDays", "adjustmentType", "bookingId", "bookingSequence", "hasBeenReleased", "id", "offenderNo", "prisonId" ]
      },
      "SentencingAdjustmentsResponse" : {
        "type" : "object",
        "description" : "Sentencing adjustment",
        "properties" : {
          "keyDateAdjustments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/KeyDateAdjustmentResponse"
            }
          },
          "sentenceAdjustments" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SentenceAdjustmentResponse"
            }
          }
        },
        "required" : [ "keyDateAdjustments", "sentenceAdjustments" ]
      },
      "ADASummary" : {
        "type" : "object",
        "description" : "ADA summary",
        "properties" : {
          "adjudicationNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Parent adjudication number that lead to this award"
          },
          "sanctionSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Key to this sanction"
          },
          "days" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of days awards"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of award"
          },
          "sanctionStatus" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "ADA status"
          }
        },
        "required" : [ "adjudicationNumber", "days", "effectiveDate", "sanctionSequence", "sanctionStatus" ]
      },
      "AdjudicationADAAwardSummaryResponse" : {
        "type" : "object",
        "description" : "Summary of adjudication for a booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking id for the summary"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "Prisoner number related to booking"
          },
          "adaSummaries" : {
            "type" : "array",
            "description" : "List of ADAs awarded during this booking period",
            "items" : {
              "$ref" : "#/components/schemas/ADASummary"
            }
          }
        },
        "required" : [ "adaSummaries", "bookingId", "offenderNo" ]
      },
      "BookingAlertsResponse" : {
        "type" : "object",
        "description" : "The list of alerts held against a booking",
        "properties" : {
          "alerts" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AlertResponse"
            }
          }
        },
        "required" : [ "alerts" ]
      },
      "ContactForPrisoner" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a person's contact with a prisoner",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of booking associated with the prisoner"
          },
          "bookingSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking sequence this contact is related to. WHen 1 this indicates contact is for current term"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "Offender no aka prisoner number",
            "example" : "A1234AA"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of the prisoner",
            "example" : "Smith"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the prisoner",
            "example" : "John"
          }
        },
        "required" : [ "bookingId", "bookingSequence", "firstName", "lastName", "offenderNo" ]
      },
      "ContactPerson" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a person who is a contact for a prisoner",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The person id"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of the person"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname name of the person"
          },
          "middleName" : {
            "type" : "string",
            "description" : "Middle name of the person"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of birth of the person"
          },
          "gender" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Gender of the person"
          },
          "title" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Title of the person"
          },
          "language" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Language of the person"
          },
          "interpreterRequired" : {
            "type" : "boolean",
            "description" : "True if the person requires an interpreter"
          },
          "domesticStatus" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Domestic aka marital status of the person"
          },
          "deceasedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the person dies"
          },
          "isStaff" : {
            "type" : "boolean",
            "description" : "True if a staff member"
          },
          "isRemitter" : {
            "type" : "boolean",
            "description" : "Set to true when person created via finance remitter page"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of phone numbers for the person",
            "items" : {
              "$ref" : "#/components/schemas/PersonPhoneNumber"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "List of addresses for the person",
            "items" : {
              "$ref" : "#/components/schemas/PersonAddress"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "description" : "List of email addresses for the person",
            "items" : {
              "$ref" : "#/components/schemas/PersonEmailAddress"
            }
          },
          "employments" : {
            "type" : "array",
            "description" : "List of employments for the person",
            "items" : {
              "$ref" : "#/components/schemas/PersonEmployment"
            }
          },
          "identifiers" : {
            "type" : "array",
            "description" : "List of identifiers for the person",
            "items" : {
              "$ref" : "#/components/schemas/PersonIdentifier"
            }
          },
          "contacts" : {
            "type" : "array",
            "description" : "List of prisoner contacts this person is related to",
            "items" : {
              "$ref" : "#/components/schemas/PersonContact"
            }
          },
          "restrictions" : {
            "type" : "array",
            "description" : "List of restrictions between all prisoners and this person",
            "items" : {
              "$ref" : "#/components/schemas/ContactRestriction"
            }
          }
        },
        "required" : [ "addresses", "audit", "contacts", "emailAddresses", "employments", "firstName", "identifiers", "interpreterRequired", "lastName", "personId", "phoneNumbers", "restrictions" ]
      },
      "PersonAddress" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a address number",
        "properties" : {
          "addressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of number"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Address type"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat name or number",
            "example" : "Apartment 3"
          },
          "premise" : {
            "type" : "string",
            "description" : "Premise",
            "example" : 22
          },
          "street" : {
            "type" : "string",
            "description" : "Street",
            "example" : "West Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code",
            "example" : "MK15 2ST"
          },
          "city" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "City"
          },
          "county" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "County"
          },
          "country" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Country"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of phone numbers for the address",
            "items" : {
              "$ref" : "#/components/schemas/PersonPhoneNumber"
            }
          },
          "validatedPAF" : {
            "type" : "boolean",
            "description" : "true if address validated by Post Office Address file??"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "true if address not fixed. for example homeless"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "true if this is the person's primary address"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "true if this is used for mail"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment about the address"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid from"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid to"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "addressId", "audit", "mailAddress", "phoneNumbers", "primaryAddress", "validatedPAF" ]
      },
      "PersonContact" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a person's contact with a prisoner",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS sequence for the identifier for this contact"
          },
          "contactType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The contact type"
          },
          "relationshipType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The relationship type"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True if active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date contact is no longer active"
          },
          "approvedVisitor" : {
            "type" : "boolean",
            "description" : "True if approved to visit the prisoner"
          },
          "nextOfKin" : {
            "type" : "boolean",
            "description" : "True if next of kin to the prisoner"
          },
          "emergencyContact" : {
            "type" : "boolean",
            "description" : "True if emergency contact for the prisoner"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment text"
          },
          "prisoner" : {
            "$ref" : "#/components/schemas/ContactForPrisoner",
            "description" : "The prisoner this person is a contact for"
          },
          "restrictions" : {
            "type" : "array",
            "description" : "List of restrictions specifically between the prisoner and this contact",
            "items" : {
              "$ref" : "#/components/schemas/ContactRestriction"
            }
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "active", "approvedVisitor", "audit", "contactType", "emergencyContact", "id", "nextOfKin", "prisoner", "relationshipType", "restrictions" ]
      },
      "PersonEmailAddress" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a email address",
        "properties" : {
          "emailAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of email address"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address",
            "example" : "john.smith@internet.co.uk"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "email", "emailAddressId" ]
      },
      "PersonEmployment" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a person's employment",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS sequence for this employment for this person"
          },
          "corporate" : {
            "$ref" : "#/components/schemas/PersonEmploymentCorporate",
            "description" : "The entity the person is employed by"
          },
          "active" : {
            "type" : "boolean",
            "description" : "True is employment is active"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "active", "audit", "corporate", "sequence" ]
      },
      "PersonEmploymentCorporate" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a corporate entity",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of corporate address"
          },
          "name" : {
            "type" : "string",
            "description" : "The corporate name",
            "example" : "Police"
          }
        },
        "required" : [ "id", "name" ]
      },
      "PersonIdentifier" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a person's identifiers",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS sequence for this identifier for this person"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The identifier type"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The identifier value",
            "example" : "NE121212T"
          },
          "issuedAuthority" : {
            "type" : "string",
            "description" : "The issued authority",
            "example" : "Police"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "identifier", "sequence", "type" ]
      },
      "PersonPhoneNumber" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a phone number",
        "properties" : {
          "phoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of number"
          },
          "number" : {
            "type" : "string",
            "description" : "The number"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Phone type"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "number", "phoneId", "type" ]
      },
      "PagePersonIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PersonIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PersonIdResponse" : {
        "type" : "object",
        "properties" : {
          "personId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The person Id"
          }
        },
        "required" : [ "personId" ]
      },
      "PersonIdsWithLast" : {
        "type" : "object",
        "properties" : {
          "personIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "lastPersonId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "lastPersonId", "personIds" ]
      },
      "NonAssociationResponse" : {
        "type" : "object",
        "description" : "Appointment information",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "Noms id of the prisoner",
            "example" : "A1234DF"
          },
          "nsOffenderNo" : {
            "type" : "string",
            "description" : "Noms id of the other prisoner",
            "example" : "A1234EG"
          },
          "typeSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Sequence number",
            "example" : 1
          },
          "reason" : {
            "type" : "string",
            "description" : "Reason code of the first prisoner, domain NON_ASSO_RSN",
            "example" : "VIC"
          },
          "recipReason" : {
            "type" : "string",
            "description" : "Reason code of the other prisoner, domain NON_ASSO_RSN",
            "example" : "PER"
          },
          "type" : {
            "type" : "string",
            "description" : "Type code, domain NON_ASSO_TYP",
            "example" : "WING"
          },
          "authorisedBy" : {
            "type" : "string",
            "description" : "Free text name of staff member",
            "example" : "Joe Bloggs"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "Last updated by",
            "example" : "JSMITH_GEN"
          },
          "effectiveDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Effective date",
            "example" : "2022-08-12"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Expiry date, open if null",
            "example" : "2022-08-12"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment",
            "maxLength" : 240,
            "minLength" : 0
          }
        },
        "required" : [ "effectiveDate", "nsOffenderNo", "offenderNo", "reason", "recipReason", "type", "typeSequence", "updatedBy" ]
      },
      "NonAssociationIdResponse" : {
        "type" : "object",
        "description" : "Non association id",
        "properties" : {
          "offenderNo1" : {
            "type" : "string",
            "description" : "The 1st offender"
          },
          "offenderNo2" : {
            "type" : "string",
            "description" : "The 2nd offender"
          }
        },
        "required" : [ "offenderNo1", "offenderNo2" ]
      },
      "PageNonAssociationIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NonAssociationIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "Absence" : {
        "type" : "object",
        "description" : "A single instance of a scheduled temporary absence including return",
        "properties" : {
          "scheduledTemporaryAbsence" : {
            "$ref" : "#/components/schemas/ScheduledTemporaryAbsence",
            "description" : "Scheduled temporary absence"
          },
          "scheduledTemporaryAbsenceReturn" : {
            "$ref" : "#/components/schemas/ScheduledTemporaryAbsenceReturn",
            "description" : "Scheduled temporary absence return"
          },
          "temporaryAbsence" : {
            "$ref" : "#/components/schemas/TemporaryAbsence",
            "description" : "Temporary absence"
          },
          "temporaryAbsenceReturn" : {
            "$ref" : "#/components/schemas/TemporaryAbsenceReturn",
            "description" : "Temporary absence return"
          }
        }
      },
      "BookingTemporaryAbsences" : {
        "type" : "object",
        "description" : "Booking temporary absences",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Booking ID"
          },
          "temporaryAbsenceApplications" : {
            "type" : "array",
            "description" : "Temporary absence applications",
            "items" : {
              "$ref" : "#/components/schemas/TemporaryAbsenceApplication"
            }
          },
          "unscheduledTemporaryAbsences" : {
            "type" : "array",
            "description" : "Unscheduled temporary absences OUT - those without an application or a schedule",
            "items" : {
              "$ref" : "#/components/schemas/TemporaryAbsence"
            }
          },
          "unscheduledTemporaryAbsenceReturns" : {
            "type" : "array",
            "description" : "Unscheduled temporary absences IN - those without an application or a schedule",
            "items" : {
              "$ref" : "#/components/schemas/TemporaryAbsenceReturn"
            }
          }
        },
        "required" : [ "bookingId", "temporaryAbsenceApplications", "unscheduledTemporaryAbsenceReturns", "unscheduledTemporaryAbsences" ]
      },
      "OffenderTemporaryAbsencesResponse" : {
        "type" : "object",
        "description" : "Offender temporary absences by booking, including applications and scheduled absences",
        "properties" : {
          "bookings" : {
            "type" : "array",
            "description" : "List of bookings with their temporary absences and external movements",
            "items" : {
              "$ref" : "#/components/schemas/BookingTemporaryAbsences"
            }
          }
        },
        "required" : [ "bookings" ]
      },
      "ScheduledTemporaryAbsence" : {
        "type" : "object",
        "description" : "Scheduled temporary absence response",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Event ID"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Event date"
          },
          "startTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Start time"
          },
          "eventSubType" : {
            "type" : "string",
            "description" : "Event sub type"
          },
          "eventStatus" : {
            "type" : "string",
            "description" : "Event status"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "escort" : {
            "type" : "string",
            "description" : "Escort"
          },
          "fromPrison" : {
            "type" : "string",
            "description" : "From prison"
          },
          "toAgency" : {
            "type" : "string",
            "description" : "To agency"
          },
          "transportType" : {
            "type" : "string",
            "description" : "Transport type"
          },
          "returnDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Return date"
          },
          "returnTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Return time"
          },
          "toAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "To address ID"
          },
          "toAddressOwnerClass" : {
            "type" : "string",
            "description" : "To address owner class"
          },
          "applicationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Application date"
          },
          "applicationTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Application time"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "applicationDate", "audit", "eventId", "eventStatus", "eventSubType", "returnDate", "returnTime" ]
      },
      "ScheduledTemporaryAbsenceReturn" : {
        "type" : "object",
        "description" : "Scheduled temporary absence return response",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Event ID"
          },
          "eventDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Event date"
          },
          "startTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Start time"
          },
          "eventSubType" : {
            "type" : "string",
            "description" : "Event sub type"
          },
          "eventStatus" : {
            "type" : "string",
            "description" : "Event status"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "escort" : {
            "type" : "string",
            "description" : "Escort"
          },
          "fromAgency" : {
            "type" : "string",
            "description" : "From agency"
          },
          "toPrison" : {
            "type" : "string",
            "description" : "To prison"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "eventId", "eventStatus", "eventSubType" ]
      },
      "TemporaryAbsence" : {
        "type" : "object",
        "description" : "Temporary absence response",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Movement sequence"
          },
          "movementDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Movement date"
          },
          "movementTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Movement time"
          },
          "movementReason" : {
            "type" : "string",
            "description" : "Movement reason"
          },
          "arrestAgency" : {
            "type" : "string",
            "description" : "Arresting Agency"
          },
          "escort" : {
            "type" : "string",
            "description" : "Escort"
          },
          "escortText" : {
            "type" : "string",
            "description" : "Escort text"
          },
          "fromPrison" : {
            "type" : "string",
            "description" : "From prison"
          },
          "toAgency" : {
            "type" : "string",
            "description" : "To agency"
          },
          "commentText" : {
            "type" : "string",
            "description" : "Comment text"
          },
          "toAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "To address ID"
          },
          "toAddressOwnerClass" : {
            "type" : "string",
            "description" : "To address owner class"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "movementDate", "movementReason", "movementTime", "sequence" ]
      },
      "TemporaryAbsenceApplication" : {
        "type" : "object",
        "description" : "Temporary absence application response",
        "properties" : {
          "movementApplicationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Movement application ID"
          },
          "eventSubType" : {
            "type" : "string",
            "description" : "Event sub type"
          },
          "applicationDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Application date"
          },
          "fromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "From date"
          },
          "releaseTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Release time"
          },
          "toDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "To date"
          },
          "returnTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Return time"
          },
          "applicationStatus" : {
            "type" : "string",
            "description" : "Application status"
          },
          "escortCode" : {
            "type" : "string",
            "description" : "Escort code"
          },
          "transportType" : {
            "type" : "string",
            "description" : "Transport type"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID"
          },
          "toAgencyId" : {
            "type" : "string",
            "description" : "To agency ID"
          },
          "toAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "To address ID"
          },
          "toAddressOwnerClass" : {
            "type" : "string",
            "description" : "To address owner class"
          },
          "contactPersonName" : {
            "type" : "string",
            "description" : "Contact person name"
          },
          "applicationType" : {
            "type" : "string",
            "description" : "Application type"
          },
          "temporaryAbsenceType" : {
            "type" : "string",
            "description" : "Temporary absence type"
          },
          "temporaryAbsenceSubType" : {
            "type" : "string",
            "description" : "Temporary absence sub type"
          },
          "absences" : {
            "type" : "array",
            "description" : "All scheduled temporary absences",
            "items" : {
              "$ref" : "#/components/schemas/Absence"
            }
          },
          "outsideMovements" : {
            "type" : "array",
            "description" : "Outside movements",
            "items" : {
              "$ref" : "#/components/schemas/TemporaryAbsenceApplicationOutsideMovement"
            }
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "absences", "applicationDate", "applicationStatus", "applicationType", "audit", "eventSubType", "fromDate", "movementApplicationId", "outsideMovements", "releaseTime", "returnTime", "toDate" ]
      },
      "TemporaryAbsenceApplicationOutsideMovement" : {
        "type" : "object",
        "description" : "Temporary absence application outside movement response",
        "properties" : {
          "outsideMovementId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Movement application ID"
          },
          "temporaryAbsenceType" : {
            "type" : "string",
            "description" : "Temporary absence type"
          },
          "temporaryAbsenceSubType" : {
            "type" : "string",
            "description" : "Temporary absence sub type"
          },
          "eventSubType" : {
            "type" : "string",
            "description" : "Event sub type"
          },
          "fromDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "From date"
          },
          "releaseTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Release time"
          },
          "toDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "To date"
          },
          "returnTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Return time"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "toAgencyId" : {
            "type" : "string",
            "description" : "To agency ID"
          },
          "toAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "To address ID"
          },
          "toAddressOwnerClass" : {
            "type" : "string",
            "description" : "To address owner class"
          },
          "contactPersonName" : {
            "type" : "string",
            "description" : "Contact person name"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "eventSubType", "fromDate", "outsideMovementId", "releaseTime", "returnTime", "toDate" ]
      },
      "TemporaryAbsenceReturn" : {
        "type" : "object",
        "description" : "Temporary absence return response",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Movement sequence"
          },
          "movementDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Movement date"
          },
          "movementTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Movement time"
          },
          "movementReason" : {
            "type" : "string",
            "description" : "Movement reason"
          },
          "escort" : {
            "type" : "string",
            "description" : "Escort"
          },
          "escortText" : {
            "type" : "string",
            "description" : "Escort text"
          },
          "fromAgency" : {
            "type" : "string",
            "description" : "From agency"
          },
          "toPrison" : {
            "type" : "string",
            "description" : "To prison"
          },
          "commentText" : {
            "type" : "string",
            "description" : "Comment text"
          },
          "fromAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "From address ID"
          },
          "fromAddressOwnerClass" : {
            "type" : "string",
            "description" : "From address owner class"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "movementDate", "movementReason", "movementTime", "sequence" ]
      },
      "AmendmentResponse" : {
        "type" : "object",
        "properties" : {
          "amendDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Amended timestamp",
            "example" : "2024-12-31T23:59:59"
          },
          "columnName" : {
            "type" : "string",
            "description" : "Which value was changed",
            "example" : "Sequence"
          },
          "oldValue" : {
            "type" : "string",
            "description" : "Original value"
          },
          "newValue" : {
            "type" : "string",
            "description" : "New value"
          },
          "amendedBy" : {
            "type" : "string",
            "description" : "Username of the person who made the change",
            "example" : "NQP44X"
          }
        },
        "required" : [ "amendDateTime", "amendedBy" ]
      },
      "LocationResponse" : {
        "type" : "object",
        "description" : "Location request returned data",
        "properties" : {
          "locationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The location id",
            "example" : 1234567
          },
          "certified" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Whether certified for use",
            "example" : true
          },
          "locationType" : {
            "type" : "string",
            "description" : "Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)",
            "example" : "LAND"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison code of the location",
            "example" : "LEI"
          },
          "parentLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The containing location id",
            "example" : 1234567
          },
          "parentKey" : {
            "type" : "string",
            "description" : "The containing location id's key (Nomis description field)",
            "example" : "WWI-B-2"
          },
          "operationalCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Max capacity subject to resources",
            "example" : 43
          },
          "cnaCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Certified Normal Accommodation capacity",
            "example" : 44
          },
          "userDescription" : {
            "type" : "string",
            "description" : "Description of location",
            "example" : "Some description"
          },
          "description" : {
            "type" : "string",
            "description" : "Constructed full code of location",
            "example" : "WWI-B-2-004"
          },
          "locationCode" : {
            "type" : "string",
            "description" : "Usually a number for a cell, a letter for a wing or landing. Used to calculate description"
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Physical maximum capacity",
            "example" : 45
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Defines the order within parent location",
            "example" : "Joe Bloggs"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment",
            "example" : "Some comment"
          },
          "unitType" : {
            "type" : "string",
            "description" : "Housing unit type",
            "enum" : [ "HC", "HOLC", "NA", "OU", "REC", "SEG", "SPLC" ],
            "example" : "NA"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Whether the location is active or has been deactivated",
            "example" : true
          },
          "deactivateDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The deactivation date, defaults to today",
            "example" : "2024-12-31"
          },
          "reasonCode" : {
            "type" : "string",
            "description" : "The reason code for deactivation, reference data 'LIV_UN_RSN'",
            "enum" : [ "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L" ]
          },
          "reactivateDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The expected reactivation date if any",
            "example" : "2024-12-31"
          },
          "profiles" : {
            "type" : "array",
            "description" : "Profiles",
            "items" : {
              "$ref" : "#/components/schemas/ProfileRequest"
            }
          },
          "usages" : {
            "type" : "array",
            "description" : "Usages",
            "items" : {
              "$ref" : "#/components/schemas/UsageRequest"
            }
          },
          "amendments" : {
            "type" : "array",
            "description" : "History",
            "items" : {
              "$ref" : "#/components/schemas/AmendmentResponse"
            }
          },
          "createDatetime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Record created date"
          },
          "createUsername" : {
            "type" : "string",
            "description" : "Record created by"
          },
          "modifyUsername" : {
            "type" : "string",
            "description" : "Record modified by"
          }
        },
        "required" : [ "active", "createDatetime", "createUsername", "description", "locationCode", "locationId", "locationType", "prisonId" ]
      },
      "PageLocationIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LocationIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "History" : {
        "type" : "object",
        "properties" : {
          "questionnaireId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The history questionnaire id for the incident"
          },
          "type" : {
            "type" : "string",
            "description" : "The questionnaire type"
          },
          "description" : {
            "type" : "string",
            "description" : "The questionnaire description"
          },
          "questions" : {
            "type" : "array",
            "description" : "Questions asked for the questionnaire",
            "items" : {
              "$ref" : "#/components/schemas/HistoryQuestion"
            }
          },
          "incidentChangeDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the questionnaire was changed"
          },
          "incidentChangeStaff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "Who changed the questionnaire"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the historical incident questionnaire was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the historical incident questionnaire"
          }
        },
        "required" : [ "createDateTime", "createdBy", "incidentChangeDateTime", "incidentChangeStaff", "questionnaireId", "questions", "type" ]
      },
      "HistoryQuestion" : {
        "type" : "object",
        "properties" : {
          "questionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sequence number of the response question for this incident"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the question for this incident"
          },
          "question" : {
            "type" : "string",
            "description" : "The Question being asked"
          },
          "answers" : {
            "type" : "array",
            "description" : "Historical list of Responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/HistoryResponse"
            }
          }
        },
        "required" : [ "answers", "question", "questionId", "sequence" ]
      },
      "HistoryResponse" : {
        "type" : "object",
        "properties" : {
          "questionResponseId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the questionnaire question answer"
          },
          "responseSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the response for this incident"
          },
          "answer" : {
            "type" : "string",
            "description" : "The answer text"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment added to the response by recording staff"
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Response date added to the response by recording staff"
          },
          "recordingStaff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "Recording staff"
          }
        },
        "required" : [ "recordingStaff", "responseSequence" ]
      },
      "IncidentResponse" : {
        "type" : "object",
        "description" : "Incident Details",
        "properties" : {
          "incidentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The incident id"
          },
          "questionnaireId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the questionnaire associated with this incident"
          },
          "title" : {
            "type" : "string",
            "description" : "A summary of the incident"
          },
          "description" : {
            "type" : "string",
            "description" : "The incident details"
          },
          "agency" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Agency where the incident occurred"
          },
          "status" : {
            "$ref" : "#/components/schemas/IncidentStatus",
            "description" : "Status details"
          },
          "type" : {
            "type" : "string",
            "description" : "The incident questionnaire type"
          },
          "lockedResponse" : {
            "type" : "boolean",
            "description" : "If the response is locked ie if the response is completed"
          },
          "incidentDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time of the incident"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the incident was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the incident"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the incident was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the incident"
          },
          "followUpDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The follow up date for the incident"
          },
          "reportingStaff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "The staff member who reported the incident"
          },
          "reportedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the incident was reported"
          },
          "staffParties" : {
            "type" : "array",
            "description" : "Staff involved in the incident",
            "items" : {
              "$ref" : "#/components/schemas/StaffParty"
            }
          },
          "offenderParties" : {
            "type" : "array",
            "description" : "Offenders involved in the incident",
            "items" : {
              "$ref" : "#/components/schemas/OffenderParty"
            }
          },
          "requirements" : {
            "type" : "array",
            "description" : "Requirements for completing the incident report",
            "items" : {
              "$ref" : "#/components/schemas/Requirement"
            }
          },
          "questions" : {
            "type" : "array",
            "description" : "Questions asked for the incident",
            "items" : {
              "$ref" : "#/components/schemas/Question"
            }
          },
          "history" : {
            "type" : "array",
            "description" : "Historical questionnaire details for the incident",
            "items" : {
              "$ref" : "#/components/schemas/History"
            }
          }
        },
        "required" : [ "agency", "createDateTime", "createdBy", "history", "incidentDateTime", "incidentId", "lockedResponse", "offenderParties", "questionnaireId", "questions", "reportedDateTime", "reportingStaff", "requirements", "staffParties", "status", "type" ]
      },
      "IncidentStatus" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "listSequence" : {
            "type" : "integer",
            "format" : "int32"
          },
          "standardUser" : {
            "type" : "boolean"
          },
          "enhancedUser" : {
            "type" : "boolean"
          }
        },
        "required" : [ "code", "description", "enhancedUser", "standardUser" ]
      },
      "OffenderParty" : {
        "type" : "object",
        "properties" : {
          "offender" : {
            "$ref" : "#/components/schemas/Offender",
            "description" : "Offender involved in the incident"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the offender party for this incident"
          },
          "role" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Offender role in the incident"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The outcome of the incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "General information about the incident"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the offender party was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the offender party"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the offender party was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the offender party"
          }
        },
        "required" : [ "createDateTime", "createdBy", "offender", "role", "sequence" ]
      },
      "Question" : {
        "type" : "object",
        "properties" : {
          "questionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The questionnaire question id"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the question for this incident"
          },
          "question" : {
            "type" : "string",
            "description" : "The Question being asked"
          },
          "answers" : {
            "type" : "array",
            "description" : "List of Responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/Response"
            }
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the question was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the question"
          }
        },
        "required" : [ "answers", "createDateTime", "createdBy", "question", "questionId", "sequence" ]
      },
      "Requirement" : {
        "type" : "object",
        "properties" : {
          "comment" : {
            "type" : "string",
            "description" : "The update required to the incident report"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the requirement for this incident"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the requirement was recorded"
          },
          "staff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "The staff member who made the requirement request"
          },
          "agencyId" : {
            "type" : "string",
            "description" : "The reporting agency of the staff"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the requirement was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the requirement"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the requirement was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the requirement"
          }
        },
        "required" : [ "agencyId", "createDateTime", "createdBy", "recordedDate", "sequence", "staff" ]
      },
      "Response" : {
        "type" : "object",
        "properties" : {
          "questionResponseId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the questionnaire question answer"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the response for this incident"
          },
          "answer" : {
            "type" : "string",
            "description" : "The answer text"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment added to the response by recording staff"
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Response date added to the response by recording staff"
          },
          "recordingStaff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "Recording staff"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the response was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the response"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the response was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the response"
          }
        },
        "required" : [ "createDateTime", "createdBy", "recordingStaff", "sequence" ]
      },
      "StaffParty" : {
        "type" : "object",
        "properties" : {
          "staff" : {
            "$ref" : "#/components/schemas/Staff",
            "description" : "Staff involved in the incident"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the staff party for this incident"
          },
          "role" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Staff role in the incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "General information about the incident"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the staff party was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the staff party"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the staff party was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the staff party"
          }
        },
        "required" : [ "createDateTime", "createdBy", "role", "sequence", "staff" ]
      },
      "IncidentIdsWithLast" : {
        "type" : "object",
        "properties" : {
          "incidentIds" : {
            "type" : "array",
            "items" : {
              "type" : "integer",
              "format" : "int64"
            }
          },
          "lastIncidentId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "incidentIds", "lastIncidentId" ]
      },
      "IncidentIdResponse" : {
        "type" : "object",
        "description" : "Incident id",
        "properties" : {
          "incidentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The incident id"
          }
        },
        "required" : [ "incidentId" ]
      },
      "PageIncidentIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IncidentIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "IncidentsCount" : {
        "type" : "object",
        "description" : "A count for incidents at an agency",
        "properties" : {
          "openIncidents" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "A count for the number of open incidents i.e. all incidents that are not closed or duplicates",
            "example" : 4
          },
          "closedIncidents" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "A count for the number of closed or duplicate incidents",
            "example" : 2
          }
        },
        "required" : [ "closedIncidents", "openIncidents" ]
      },
      "IncidentsReconciliationResponse" : {
        "type" : "object",
        "description" : "Incidents reconciliation count response",
        "properties" : {
          "agencyId" : {
            "type" : "string",
            "description" : "The agency we checked the incidents for",
            "example" : "BXI"
          },
          "incidentCount" : {
            "$ref" : "#/components/schemas/IncidentsCount",
            "description" : "All open and closed incidents counts"
          }
        },
        "required" : [ "agencyId", "incidentCount" ]
      },
      "IncidentAgencyId" : {
        "type" : "object",
        "description" : "Incident Agency Id",
        "properties" : {
          "agencyId" : {
            "type" : "string",
            "description" : "The agency id",
            "example" : "BXI"
          }
        },
        "required" : [ "agencyId" ]
      },
      "IncentiveIdResponse" : {
        "type" : "object",
        "description" : "Incentive id",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sequence of the incentive within this booking"
          }
        },
        "required" : [ "bookingId", "sequence" ]
      },
      "PageIncentiveIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/IncentiveIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "IncentiveResponse" : {
        "type" : "object",
        "description" : "Incentive information",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id"
          },
          "incentiveSequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sequence of the incentive within this booking"
          },
          "commentText" : {
            "type" : "string",
            "description" : "Comment for Incentive level"
          },
          "iepDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of Incentive level creation"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison where the Incentive level was created"
          },
          "iepLevel" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "IEP level code and description"
          },
          "userId" : {
            "type" : "string",
            "description" : "User id of user creating prisoner incentive level"
          },
          "currentIep" : {
            "type" : "boolean",
            "description" : "Is this IEP the current IEP for the booking?"
          },
          "auditModule" : {
            "type" : "string",
            "description" : "The NOMIS module that created this IEP",
            "enum" : [ "OCUWARNG", "PRISON_API", "OIDADMIS", "MERGE", "OIDOIEPS", "OIDITRAN", "OSIOSEAR" ]
          },
          "whenCreated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "date and time of creation"
          },
          "whenUpdated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "date and time of last update"
          }
        },
        "required" : [ "auditModule", "bookingId", "currentIep", "iepDateTime", "iepLevel", "incentiveSequence", "offenderNo", "prisonId", "whenCreated" ]
      },
      "CSIPIdResponse" : {
        "type" : "object",
        "description" : "CSIP id",
        "properties" : {
          "csipId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The csip id"
          }
        },
        "required" : [ "csipId" ]
      },
      "CourtCaseIdResponse" : {
        "type" : "object",
        "description" : "court case id",
        "properties" : {
          "caseId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Court case Id"
          }
        },
        "required" : [ "caseId" ]
      },
      "PageCourtCaseIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CourtCaseIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "CorporateAddress" : {
        "type" : "object",
        "description" : "The data held in NOMIS about an address",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of number"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Address type"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat name or number",
            "example" : "Apartment 3"
          },
          "premise" : {
            "type" : "string",
            "description" : "Premise",
            "example" : 22
          },
          "street" : {
            "type" : "string",
            "description" : "Street",
            "example" : "West Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code",
            "example" : "MK15 2ST"
          },
          "city" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "City"
          },
          "county" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "County"
          },
          "country" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Country"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of phone numbers for the address",
            "items" : {
              "$ref" : "#/components/schemas/CorporatePhoneNumber"
            }
          },
          "validatedPAF" : {
            "type" : "boolean",
            "description" : "true if address validated by Post Office Address file??"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "true if address not fixed. for example homeless"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "true if this is the corporate's primary address"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "true if this is used for mail"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment about the address"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid from"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid to"
          },
          "isServices" : {
            "type" : "boolean",
            "description" : "True if this is a service organisation"
          },
          "businessHours" : {
            "type" : "string",
            "description" : "Business hours"
          },
          "contactPersonName" : {
            "type" : "string",
            "description" : "Contact person"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "id", "isServices", "mailAddress", "phoneNumbers", "primaryAddress", "validatedPAF" ]
      },
      "CorporateInternetAddress" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a internet address",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of internet address"
          },
          "internetAddress" : {
            "type" : "string",
            "description" : "The internet address",
            "example" : "john.smith@internet.co.uk"
          },
          "type" : {
            "type" : "string",
            "description" : "Type of address",
            "examples" : [ "WEB", "EMAIL" ]
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "id", "internetAddress", "type" ]
      },
      "CorporateOrganisation" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a corporate entity",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of corporate"
          },
          "name" : {
            "type" : "string",
            "description" : "The corporate name",
            "example" : "Boots"
          },
          "caseload" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The associated caseload e.g COOKHAM WOOD (HMP)"
          },
          "comment" : {
            "type" : "string",
            "description" : "User comment"
          },
          "programmeNumber" : {
            "type" : "string",
            "description" : "Programme number"
          },
          "vatNumber" : {
            "type" : "string",
            "description" : "VAT number"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Is active"
          },
          "expiryDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date made inactive"
          },
          "types" : {
            "type" : "array",
            "description" : "List of types this organisation is associated with, for instance ACCOM - Accommodation Provider",
            "items" : {
              "$ref" : "#/components/schemas/CorporateOrganisationType"
            }
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of phone numbers for the corporate",
            "items" : {
              "$ref" : "#/components/schemas/CorporatePhoneNumber"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "List of addresses for the corporate",
            "items" : {
              "$ref" : "#/components/schemas/CorporateAddress"
            }
          },
          "internetAddresses" : {
            "type" : "array",
            "description" : "List of internet addresses for the corporate",
            "items" : {
              "$ref" : "#/components/schemas/CorporateInternetAddress"
            }
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "active", "addresses", "audit", "id", "internetAddresses", "name", "phoneNumbers", "types" ]
      },
      "CorporateOrganisationType" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a corporate entity",
        "properties" : {
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The type of corporate, for instance ACCOM - Accommodation Provider "
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "type" ]
      },
      "CorporatePhoneNumber" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a phone number",
        "properties" : {
          "id" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of number"
          },
          "number" : {
            "type" : "string",
            "description" : "The number"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Phone type"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "id", "number", "type" ]
      },
      "CorporateOrganisationIdResponse" : {
        "type" : "object",
        "properties" : {
          "corporateId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The corporate Id"
          }
        },
        "required" : [ "corporateId" ]
      },
      "PageCorporateOrganisationIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/CorporateOrganisationIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "CoreOffender" : {
        "type" : "object",
        "description" : "The data held in NOMIS for an offender.",
        "properties" : {
          "offenderId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The offender id"
          },
          "title" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Title of this offender record"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of this offender record"
          },
          "middleName1" : {
            "type" : "string",
            "description" : "Middle name of this offender record"
          },
          "middleName2" : {
            "type" : "string",
            "description" : "Second middle name of this offender record"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname name of this offender record"
          },
          "dateOfBirth" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of birth of this offender record"
          },
          "birthPlace" : {
            "type" : "string",
            "description" : "Birth place of this offender record"
          },
          "birthCountry" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Birth country of this offender record"
          },
          "ethnicity" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Race of this offender record"
          },
          "sex" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Sex of this offender record"
          },
          "nameType" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Name type of this offender record"
          },
          "createDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date this offender record was created. This is separate from the CREATE_DATETIME audit column."
          },
          "workingName" : {
            "type" : "boolean",
            "description" : "The offender record associated with the current booking"
          },
          "identifiers" : {
            "type" : "array",
            "description" : "List of identifiers for the offender",
            "items" : {
              "$ref" : "#/components/schemas/Identifier"
            }
          }
        },
        "required" : [ "firstName", "identifiers", "lastName", "offenderId", "workingName" ]
      },
      "CorePerson" : {
        "type" : "object",
        "description" : "The data held in NOMIS for an offender",
        "properties" : {
          "prisonNumber" : {
            "type" : "string",
            "description" : "The prison number"
          },
          "inOutStatus" : {
            "type" : "string",
            "description" : "In/Out Status",
            "example" : "IN, OUT, TRN"
          },
          "activeFlag" : {
            "type" : "boolean",
            "description" : "Indicates that the person is currently in prison"
          },
          "offenders" : {
            "type" : "array",
            "description" : "List of offender records for the person",
            "items" : {
              "$ref" : "#/components/schemas/CoreOffender"
            }
          },
          "sentenceStartDates" : {
            "type" : "array",
            "description" : "List of distinct sentence start dates",
            "items" : {
              "type" : "string",
              "format" : "date"
            }
          },
          "addresses" : {
            "type" : "array",
            "description" : "List of addresses for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderAddress"
            }
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of phone numbers for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderPhoneNumber"
            }
          },
          "emailAddresses" : {
            "type" : "array",
            "description" : "List of email addresses for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderEmailAddress"
            }
          },
          "nationalities" : {
            "type" : "array",
            "description" : "List of nationalities for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderNationality"
            }
          },
          "nationalityDetails" : {
            "type" : "array",
            "description" : "List of nationality details for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderNationalityDetails"
            }
          },
          "sexualOrientations" : {
            "type" : "array",
            "description" : "List of sexual orientations for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderSexualOrientation"
            }
          },
          "disabilities" : {
            "type" : "array",
            "description" : "List of disabilities for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderDisability"
            }
          },
          "interestsToImmigration" : {
            "type" : "array",
            "description" : "List of disabilities for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderInterestToImmigration"
            }
          },
          "beliefs" : {
            "type" : "array",
            "description" : "Current belief and history of all beliefs for the person",
            "items" : {
              "$ref" : "#/components/schemas/OffenderBelief"
            }
          }
        },
        "required" : [ "activeFlag", "prisonNumber" ]
      },
      "Identifier" : {
        "type" : "object",
        "description" : "The data held in NOMIS for an offender's identifiers",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS sequence for this identifier for this person"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The identifier type"
          },
          "identifier" : {
            "type" : "string",
            "description" : "The identifier value",
            "example" : "NE121212T"
          },
          "issuedAuthority" : {
            "type" : "string",
            "description" : "The issued authority",
            "example" : "Police"
          },
          "issuedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The issued date"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Verified"
          }
        },
        "required" : [ "identifier", "sequence", "type", "verified" ]
      },
      "OffenderAddress" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a address number",
        "properties" : {
          "addressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of number"
          },
          "flat" : {
            "type" : "string",
            "description" : "Flat name or number",
            "example" : "Apartment 3"
          },
          "premise" : {
            "type" : "string",
            "description" : "Premise",
            "example" : 22
          },
          "street" : {
            "type" : "string",
            "description" : "Street",
            "example" : "West Street"
          },
          "locality" : {
            "type" : "string",
            "description" : "Locality",
            "example" : "Keighley"
          },
          "postcode" : {
            "type" : "string",
            "description" : "Post code",
            "example" : "MK15 2ST"
          },
          "city" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "City"
          },
          "county" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "County"
          },
          "country" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Country"
          },
          "phoneNumbers" : {
            "type" : "array",
            "description" : "List of phone numbers for the address",
            "items" : {
              "$ref" : "#/components/schemas/OffenderPhoneNumber"
            }
          },
          "validatedPAF" : {
            "type" : "boolean",
            "description" : "true if address validated by Post Office Address file??"
          },
          "noFixedAddress" : {
            "type" : "boolean",
            "description" : "true if address not fixed. for example homeless"
          },
          "primaryAddress" : {
            "type" : "boolean",
            "description" : "true if this is the person's primary address"
          },
          "mailAddress" : {
            "type" : "boolean",
            "description" : "true if this is used for mail"
          },
          "comment" : {
            "type" : "string",
            "description" : "Free format comment about the address"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid from"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date address was valid to"
          },
          "usages" : {
            "type" : "array",
            "description" : "Usages for the address, also known as types",
            "items" : {
              "$ref" : "#/components/schemas/OffenderAddressUsage"
            }
          }
        },
        "required" : [ "addressId", "mailAddress", "primaryAddress", "validatedPAF" ]
      },
      "OffenderAddressUsage" : {
        "type" : "object",
        "description" : "Offender address usage",
        "properties" : {
          "addressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Offender belief id",
            "example" : 1123456
          },
          "usage" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Address usage"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Whether the address usage is active"
          }
        },
        "required" : [ "active", "addressId", "usage" ]
      },
      "OffenderBelief" : {
        "type" : "object",
        "description" : "Offender beliefs",
        "properties" : {
          "beliefId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Offender belief id",
            "example" : 1123456
          },
          "belief" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Belief",
            "example" : "SCIE"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the belief started",
            "example" : "2024-01-01"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the belief ended",
            "example" : "2024-12-12"
          },
          "changeReason" : {
            "type" : "boolean",
            "description" : "Was a reason given for change of belief?"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments describing reason for change of belief"
          },
          "verified" : {
            "type" : "boolean",
            "description" : "Verified flag"
          },
          "audit" : {
            "$ref" : "#/components/schemas/NomisAudit",
            "description" : "Audit data associated with the records"
          }
        },
        "required" : [ "audit", "belief", "beliefId", "startDate", "verified" ]
      },
      "OffenderDisability" : {
        "type" : "object",
        "description" : "Disability details held against a booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking's unique identifier",
            "example" : 1234567
          },
          "disability" : {
            "type" : "boolean",
            "description" : "The value of the profile info"
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date of the booking",
            "example" : "2020-07-17T12:34:56"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date of the booking, or null if the booking is still active",
            "example" : "2021-07-16T12:34:56"
          },
          "latestBooking" : {
            "type" : "boolean",
            "description" : "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example" : true
          }
        },
        "required" : [ "bookingId", "disability", "latestBooking", "startDateTime" ]
      },
      "OffenderEmailAddress" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a email address",
        "properties" : {
          "emailAddressId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of email address"
          },
          "email" : {
            "type" : "string",
            "description" : "The email address",
            "example" : "john.smith@internet.co.uk"
          }
        },
        "required" : [ "email", "emailAddressId" ]
      },
      "OffenderInterestToImmigration" : {
        "type" : "object",
        "description" : "Interest to immigration details held against a booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking's unique identifier",
            "example" : 1234567
          },
          "interestToImmigration" : {
            "type" : "boolean",
            "description" : "The value of the profile info"
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date of the booking",
            "example" : "2020-07-17T12:34:56"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date of the booking, or null if the booking is still active",
            "example" : "2021-07-16T12:34:56"
          },
          "latestBooking" : {
            "type" : "boolean",
            "description" : "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example" : true
          }
        },
        "required" : [ "bookingId", "interestToImmigration", "latestBooking", "startDateTime" ]
      },
      "OffenderNationality" : {
        "type" : "object",
        "description" : "Nationality details held against a booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking's unique identifier",
            "example" : 1234567
          },
          "nationality" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The value of the profile info"
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date of the booking",
            "example" : "2020-07-17T12:34:56"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date of the booking, or null if the booking is still active",
            "example" : "2021-07-16T12:34:56"
          },
          "latestBooking" : {
            "type" : "boolean",
            "description" : "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example" : true
          }
        },
        "required" : [ "bookingId", "latestBooking", "nationality", "startDateTime" ]
      },
      "OffenderNationalityDetails" : {
        "type" : "object",
        "description" : "Further nationality details held against a booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking's unique identifier",
            "example" : 1234567
          },
          "details" : {
            "type" : "string",
            "description" : "Details on the nationality"
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date of the booking",
            "example" : "2020-07-17T12:34:56"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date of the booking, or null if the booking is still active",
            "example" : "2021-07-16T12:34:56"
          },
          "latestBooking" : {
            "type" : "boolean",
            "description" : "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example" : true
          }
        },
        "required" : [ "bookingId", "details", "latestBooking", "startDateTime" ]
      },
      "OffenderPhoneNumber" : {
        "type" : "object",
        "description" : "The data held in NOMIS about a phone number",
        "properties" : {
          "phoneId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Unique NOMIS Id of number"
          },
          "number" : {
            "type" : "string",
            "description" : "The number"
          },
          "extension" : {
            "type" : "string",
            "description" : "Extension"
          },
          "type" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Phone type"
          }
        },
        "required" : [ "number", "phoneId", "type" ]
      },
      "OffenderSexualOrientation" : {
        "type" : "object",
        "description" : "Sexual orientation details held against a booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking's unique identifier",
            "example" : 1234567
          },
          "sexualOrientation" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "The value of the profile info"
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The start date of the booking",
            "example" : "2020-07-17T12:34:56"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The end date of the booking, or null if the booking is still active",
            "example" : "2021-07-16T12:34:56"
          },
          "latestBooking" : {
            "type" : "boolean",
            "description" : "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example" : true
          }
        },
        "required" : [ "bookingId", "latestBooking", "sexualOrientation", "startDateTime" ]
      },
      "BookingIdsWithLast" : {
        "type" : "object",
        "properties" : {
          "prisonerIds" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerIds"
            }
          },
          "lastBookingId" : {
            "type" : "integer",
            "format" : "int64"
          }
        },
        "required" : [ "lastBookingId", "prisonerIds" ]
      },
      "AttendanceReconciliationResponse" : {
        "type" : "object",
        "description" : "Attendance reconciliation check response",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "The prison we checked the attendance for",
            "example" : "BXI"
          },
          "date" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date of the attendance check",
            "example" : "2021-01-01"
          },
          "bookings" : {
            "type" : "array",
            "description" : "All active bookings and their attendance count",
            "example" : "[ { bookingId: 1234567, count: 2 } ]",
            "items" : {
              "$ref" : "#/components/schemas/BookingCount"
            }
          }
        },
        "required" : [ "bookings", "date", "prisonId" ]
      },
      "BookingCount" : {
        "type" : "object",
        "description" : "A count for an offender booking",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The offender booking id",
            "example" : 1234567
          },
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The count for the offender booking",
            "example" : 2
          }
        },
        "required" : [ "bookingId", "count" ]
      },
      "AppointmentResponse" : {
        "type" : "object",
        "description" : "Appointment information",
        "properties" : {
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The booking id"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison where the appointment occurs"
          },
          "internalLocation" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS room id"
          },
          "startDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Start date and time"
          },
          "endDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "End date and time"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment"
          },
          "subtype" : {
            "type" : "string",
            "description" : "Event subtype"
          },
          "status" : {
            "type" : "string",
            "description" : "Status"
          },
          "createdDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Record created date"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Record created by"
          },
          "modifiedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Record modified date"
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "Record modified by"
          }
        },
        "required" : [ "bookingId", "createdBy", "createdDate", "endDateTime", "internalLocation", "offenderNo", "prisonId", "startDateTime", "status", "subtype" ]
      },
      "AppointmentIdResponse" : {
        "type" : "object",
        "description" : "Event id",
        "properties" : {
          "eventId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The event id"
          }
        },
        "required" : [ "eventId" ]
      },
      "PageAppointmentIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AppointmentIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "AppointmentCountsResponse" : {
        "type" : "object",
        "description" : "Appointment counts",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "The prison id"
          },
          "eventSubType" : {
            "type" : "string",
            "description" : "The event sub type"
          },
          "future" : {
            "type" : "boolean",
            "description" : "Future appointments?"
          },
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The count"
          }
        },
        "required" : [ "count", "eventSubType", "future", "prisonId" ]
      },
      "GetAllocationResponse" : {
        "type" : "object",
        "description" : "Allocation to an activity",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "BXI"
          },
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Nomis Course Activity ID",
            "example" : 1234
          },
          "nomisId" : {
            "type" : "string",
            "description" : "Nomis ID",
            "example" : "A1234BC"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "ID of the active booking",
            "example" : 12345
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date allocated to the course",
            "example" : "2023-03-12"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date deallocated from the course",
            "example" : "2023-05-26"
          },
          "endComment" : {
            "type" : "string",
            "description" : "Deallocation comment",
            "example" : "Removed due to schedule clash"
          },
          "endReasonCode" : {
            "type" : "string",
            "description" : "Nomis reason code for ending (reference code domain PS_END_RSN)",
            "example" : "WDRAWN"
          },
          "suspended" : {
            "type" : "boolean",
            "description" : "Whether the prisoner is currently suspended from the course",
            "example" : false
          },
          "payBand" : {
            "type" : "string",
            "description" : "Pay band",
            "example" : 1
          },
          "livingUnitDescription" : {
            "type" : "string",
            "description" : "Cell description (can be null if OUT or being transferred)",
            "example" : "RSI-A-1-001"
          },
          "exclusions" : {
            "type" : "array",
            "description" : "Sessions excluded from the allocation during which period attendances will not be generated",
            "items" : {
              "$ref" : "#/components/schemas/AllocationExclusion"
            }
          },
          "scheduleRules" : {
            "type" : "array",
            "description" : "Rules for creating schedules - days and times",
            "items" : {
              "$ref" : "#/components/schemas/ScheduleRulesResponse"
            }
          },
          "activityStartDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The start date of the activity",
            "example" : "2023-03-12"
          }
        },
        "required" : [ "activityStartDate", "bookingId", "courseActivityId", "exclusions", "nomisId", "prisonId", "scheduleRules", "startDate", "suspended" ]
      },
      "ScheduleRulesResponse" : {
        "type" : "object",
        "description" : "Activity Schedule Rules",
        "properties" : {
          "startTime" : {
            "type" : "string",
            "description" : "Course start time",
            "example" : "09:00"
          },
          "endTime" : {
            "type" : "string",
            "description" : "Course end time",
            "example" : "11:00"
          },
          "monday" : {
            "type" : "boolean",
            "description" : "Runs on Mondays",
            "example" : true
          },
          "tuesday" : {
            "type" : "boolean",
            "description" : "Runs on Tuesdays",
            "example" : true
          },
          "wednesday" : {
            "type" : "boolean",
            "description" : "Runs on Wednesdays",
            "example" : true
          },
          "thursday" : {
            "type" : "boolean",
            "description" : "Runs on Thursdays",
            "example" : true
          },
          "friday" : {
            "type" : "boolean",
            "description" : "Runs on Fridays",
            "example" : true
          },
          "saturday" : {
            "type" : "boolean",
            "description" : "Runs on Saturdays",
            "example" : true
          },
          "sunday" : {
            "type" : "boolean",
            "description" : "Runs on Sundays",
            "example" : true
          },
          "slotCategoryCode" : {
            "type" : "string",
            "description" : "Time slot",
            "example" : "AM"
          }
        },
        "required" : [ "endTime", "friday", "monday", "saturday", "slotCategoryCode", "startTime", "sunday", "thursday", "tuesday", "wednesday" ]
      },
      "FindSuspendedAllocationsResponse" : {
        "type" : "object",
        "description" : "Find suspended prisoners from active allocations",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "NOMIS offender number",
            "example" : "A1234BC"
          },
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course Activity ID",
            "example" : 1234567
          },
          "courseActivityDescription" : {
            "type" : "string",
            "description" : "Course description",
            "example" : "Kitchens AM"
          }
        },
        "required" : [ "courseActivityDescription", "courseActivityId", "offenderNo" ]
      },
      "AllocationReconciliationResponse" : {
        "type" : "object",
        "description" : "Allocation reconciliation check response",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "The prison we checked the allocations for",
            "example" : "BXI"
          },
          "bookings" : {
            "type" : "array",
            "description" : "All active bookings and their allocation count",
            "example" : "[ { bookingId: 1234567, count: 2 } ]",
            "items" : {
              "$ref" : "#/components/schemas/BookingCount"
            }
          }
        },
        "required" : [ "bookings", "prisonId" ]
      },
      "FindAllocationsMissingPayBandsResponse" : {
        "type" : "object",
        "description" : "Find active allocations with missing pay bands",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "NOMIS offender number",
            "example" : "A1234BC"
          },
          "incentiveLevel" : {
            "type" : "string",
            "description" : "NOMIS incentive level",
            "example" : "STD"
          },
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course Activity ID",
            "example" : 1234567
          },
          "courseActivityDescription" : {
            "type" : "string",
            "description" : "Course description",
            "example" : "Kitchens AM"
          }
        },
        "required" : [ "courseActivityDescription", "courseActivityId", "incentiveLevel", "offenderNo" ]
      },
      "FindActiveAllocationIdsResponse" : {
        "type" : "object",
        "description" : "Find active allocation ids response",
        "properties" : {
          "allocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Allocation id",
            "example" : 1
          }
        },
        "required" : [ "allocationId" ]
      },
      "PageFindActiveAllocationIdsResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FindActiveAllocationIdsResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "AgencyDetails" : {
        "type" : "object",
        "description" : "A agency",
        "properties" : {
          "agencyId" : {
            "type" : "string",
            "description" : "The agency code. Normally a prison, but can be any location e.g. a prisoner escort service area.",
            "example" : "BXI"
          },
          "name" : {
            "type" : "string",
            "description" : "The agency name",
            "example" : "Brixton"
          }
        },
        "required" : [ "agencyId", "name" ]
      },
      "AdjustmentIdResponse" : {
        "type" : "object",
        "description" : "Adjustment id",
        "properties" : {
          "adjustmentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The adjustment id"
          },
          "adjustmentCategory" : {
            "type" : "string",
            "description" : "SENTENCE or KEY_DATE"
          }
        },
        "required" : [ "adjustmentCategory", "adjustmentId" ]
      },
      "PageAdjustmentIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdjustmentIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "AdjudicationChargeIdResponse" : {
        "type" : "object",
        "description" : "adjudication id",
        "properties" : {
          "adjudicationNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The adjudication number"
          },
          "chargeSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The adjudication charge sequence"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The prisoner number"
          }
        },
        "required" : [ "adjudicationNumber", "chargeSequence", "offenderNo" ]
      },
      "PageAdjudicationChargeIdResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/AdjudicationChargeIdResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "AdjudicationChargeResponse" : {
        "type" : "object",
        "description" : "The requested adjudication charge and associated adjudication details. Note: the adjudication may have other charges associated with it",
        "properties" : {
          "adjudicationSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The adjudication/party sequence, part of the composite key with adjudicationIncidentId"
          },
          "offenderNo" : {
            "type" : "string",
            "description" : "The offender number, aka nomsId, prisonerId"
          },
          "bookingId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the booking associated with the adjudication"
          },
          "adjudicationNumber" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The adjudication number (business key)"
          },
          "gender" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Gender recorded in NOMIS"
          },
          "currentPrison" : {
            "$ref" : "#/components/schemas/CodeDescription",
            "description" : "Current prison or null if OUT"
          },
          "partyAddedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date Prisoner was added to the adjudication ????"
          },
          "comment" : {
            "type" : "string",
            "description" : "Adjudication comments"
          },
          "incident" : {
            "$ref" : "#/components/schemas/AdjudicationIncident",
            "description" : "Associated incident details"
          },
          "charge" : {
            "$ref" : "#/components/schemas/AdjudicationCharge",
            "description" : "requested charge details.  Note that this adjudication may have other charges associated with it"
          },
          "investigations" : {
            "type" : "array",
            "description" : "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases",
            "items" : {
              "$ref" : "#/components/schemas/Investigation"
            }
          },
          "hearings" : {
            "type" : "array",
            "description" : "hearings associated with this adjudication",
            "items" : {
              "$ref" : "#/components/schemas/Hearing"
            }
          },
          "hasMultipleCharges" : {
            "type" : "boolean",
            "description" : "indicates if this charge was part of a larger multi-charge adjudication in NOMIS"
          }
        },
        "required" : [ "adjudicationNumber", "adjudicationSequence", "bookingId", "charge", "gender", "hasMultipleCharges", "hearings", "incident", "investigations", "offenderNo", "partyAddedDate" ]
      },
      "GetActivityResponse" : {
        "type" : "object",
        "description" : "Activity details",
        "properties" : {
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Activity id",
            "example" : 1
          },
          "programCode" : {
            "type" : "string",
            "description" : "Program service code",
            "example" : "INDUCTION"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison code",
            "example" : "RSI"
          },
          "startDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date course started",
            "example" : "2020-04-11"
          },
          "endDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date course ended",
            "example" : "2023-11-15"
          },
          "internalLocationId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course internal location",
            "example" : 1234
          },
          "internalLocationCode" : {
            "type" : "string",
            "description" : "Course internal location code",
            "example" : "KITCH"
          },
          "internalLocationDescription" : {
            "type" : "string",
            "description" : "Course internal location description",
            "example" : "RSI-WORK_IND-KITCH"
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Course capacity",
            "example" : 10
          },
          "description" : {
            "type" : "string",
            "description" : "Course description",
            "example" : "Kitchen work"
          },
          "minimumIncentiveLevel" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "The minimum incentive level allowed on the course",
            "example" : "BAS"
          },
          "excludeBankHolidays" : {
            "type" : "boolean",
            "description" : "Whether the course runs on bank holidays",
            "example" : false
          },
          "payPerSession" : {
            "type" : "string",
            "description" : "Half or Full day (H or F)",
            "example" : "H"
          },
          "scheduleRules" : {
            "type" : "array",
            "description" : "Rules for creating schedules - days and times",
            "items" : {
              "$ref" : "#/components/schemas/ScheduleRulesResponse"
            }
          },
          "payRates" : {
            "type" : "array",
            "description" : "Pay rates available",
            "items" : {
              "$ref" : "#/components/schemas/PayRatesResponse"
            }
          },
          "outsideWork" : {
            "type" : "boolean",
            "description" : "Outside work flag",
            "example" : false
          }
        },
        "required" : [ "capacity", "courseActivityId", "description", "excludeBankHolidays", "outsideWork", "payPerSession", "payRates", "prisonId", "programCode", "scheduleRules", "startDate" ]
      },
      "PayRatesResponse" : {
        "type" : "object",
        "description" : "Activity Pay Rates",
        "properties" : {
          "incentiveLevelCode" : {
            "type" : "string",
            "description" : "Incentive level code",
            "example" : "BAS"
          },
          "payBand" : {
            "type" : "string",
            "description" : "Pay band",
            "example" : 1
          },
          "rate" : {
            "type" : "number",
            "description" : "rate",
            "example" : 3.2
          }
        },
        "required" : [ "incentiveLevelCode", "payBand", "rate" ]
      },
      "FindActivitiesWithoutScheduleRulesResponse" : {
        "type" : "object",
        "description" : "Active activities with allocations but no schedule rules",
        "properties" : {
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course Activity ID",
            "example" : 1234567
          },
          "courseActivityDescription" : {
            "type" : "string",
            "description" : "Course description",
            "example" : "Kitchens AM"
          }
        },
        "required" : [ "courseActivityDescription", "courseActivityId" ]
      },
      "FindPayRateWithUnknownIncentiveResponse" : {
        "type" : "object",
        "description" : "Find activities with a pay rate with unknown incentive level",
        "properties" : {
          "courseActivityDescription" : {
            "type" : "string",
            "description" : "Course description",
            "example" : "Kitchens AM"
          },
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Course Activity ID",
            "example" : 1234567
          },
          "payBandCode" : {
            "type" : "string",
            "description" : "Pay band code",
            "example" : 5
          },
          "incentiveLevelCode" : {
            "type" : "string",
            "description" : "Incentive level",
            "example" : "STD"
          }
        },
        "required" : [ "courseActivityDescription", "courseActivityId", "incentiveLevelCode", "payBandCode" ]
      },
      "FindActiveActivityIdsResponse" : {
        "type" : "object",
        "description" : "Find active activity ids response",
        "properties" : {
          "courseActivityId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Activity id",
            "example" : 1
          },
          "hasScheduleRules" : {
            "type" : "boolean",
            "description" : "Does the activity have schedule rules?",
            "example" : true
          }
        },
        "required" : [ "courseActivityId", "hasScheduleRules" ]
      },
      "PageFindActiveActivityIdsResponse" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FindActiveActivityIdsResponse"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "DeleteHearingResultResponse" : {
        "type" : "object",
        "description" : "A list of Hearing result awards deleted (aka punishment) as a side effect of deleting a hearing result",
        "properties" : {
          "awardsDeleted" : {
            "type" : "array",
            "description" : "a list of awards that were deleted",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "required" : [ "awardsDeleted" ]
      },
      "DeleteHearingResultAwardResponses" : {
        "type" : "object",
        "description" : "A list of Hearing result awards deleted (aka punishment)",
        "properties" : {
          "awardsDeleted" : {
            "type" : "array",
            "description" : "a list of awards that were deleted",
            "items" : {
              "$ref" : "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "required" : [ "awardsDeleted" ]
      }
    },
    "securitySchemes" : {
      "bearer-jwt" : {
        "type" : "http",
        "name" : "Authorization",
        "in" : "header",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      }
    }
  }
}