{
  "openapi": "3.0.1",
  "info": {
    "title": "NOMIS Synchronisation API",
    "description": "Controls writing Prisoner information back to NOMIS for data synchronistion (not intended for general usage)",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2023-08-17.4465.3288c26"
  },
  "servers": [
    {
      "url": "https://nomis-prsner-dev.aks-dev-1.studio-hosting.service.justice.gov.uk",
      "description": "Development"
    },
    {
      "url": "https://nomis-prsner-pp.aks-live-1.studio-hosting.service.justice.gov.uk",
      "description": "PreProd"
    },
    {
      "url": "https://nomis-prisoner.aks-live-1.studio-hosting.service.justice.gov.uk",
      "description": "Prod"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/sentence-adjustments/{adjustmentId}": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get specific sentence adjustment",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id",
        "operationId": "getSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the sentence adjustment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceAdjustmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Updates specific sentence adjustment. The related booking and sentence can not be changed",
        "description": "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId": "updateSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSentenceAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the sentence adjustment has been updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "deletes specific sentence adjustment",
        "description": "Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id",
        "operationId": "deleteSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "the sentence adjustment has been deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{courseScheduleId}/booking/{bookingId}/attendance": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates or updates an attendance record",
        "description": "Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId": "upsertAttendance",
        "parameters": [
          {
            "name": "courseScheduleId",
            "in": "path",
            "description": "Course schedule id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course schedule id"
            }
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Booking id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAttendanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attendance updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertAttendanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}": {
      "put": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Updates an existing visit",
        "description": "Updates details of an existing visit such as the visitors and time slot",
        "operationId": "updateVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis visit Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Nomis visit Id",
              "example": 123456
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Visit information updated"
          },
          "400": {
            "description": "Person ids do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "offenderNo or visits id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}/cancel": {
      "put": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Cancel a visit",
        "operationId": "cancelVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis Visit Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Nomis Visit Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Visit cancelled"
          },
          "400": {
            "description": "Invalid cancellation reason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "VSIP visit id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}": {
      "get": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Get an non-association",
        "description": "Get an non-association given the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "getNonAssociation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender",
              "example": "A3456GH"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Non-association offender",
              "example": "A34578ED"
            },
            "example": "A34578ED"
          }
        ],
        "responses": {
          "200": {
            "description": "NonAssociation information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNonAssociationRequest"
                }
              }
            }
          },
          "404": {
            "description": "Booking, location and timestamp combination does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Updates an existing non-association",
        "description": "Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "updateNonAssociation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender",
              "example": "A3456GH"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Non-association offender",
              "example": "A34578ED"
            },
            "example": "A34578ED"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated non-association",
            "content": {
              "application/json": {}
            }
          },
          "404": {
            "description": "Offender does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as reason or type do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/close": {
      "put": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Closes an existing non-association",
        "description": "Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "cancelNonAssociation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender",
              "example": "A3456GH"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Non-association offender",
              "example": "A34578ED"
            },
            "example": "A34578ED"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNonAssociationRequest"
                }
              }
            }
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/key-date-adjustments/{adjustmentId}": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get specific key date adjustment",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id",
        "operationId": "getKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key date adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the key date adjustment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyDateAdjustmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Updates specific key date adjustment. The related booking can not be changed",
        "description": "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId": "updateKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key date adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKeyDateAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the key date adjustment has been updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "deletes specific key date adjustment",
        "description": "Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id",
        "operationId": "deleteKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key date adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "the key date adjustment has been deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/{code}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Gets the global incentive level by code",
        "description": "Gets a global incentive level by provided code and domain of IEP_LEVEL",
        "operationId": "getGlobalIncentiveLevel",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Incentive reference code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive reference code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "responses": {
          "200": {
            "description": "return the Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Global Incentive Level does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Updates an existing global incentive level",
        "description": "Updates an existing global incentive level, updateable fields are description and active",
        "operationId": "updateGlobalIncentiveLevel",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Incentive reference code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive reference code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Global incentive level not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}/code/{code}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Gets the prison incentive level",
        "description": "Gets prison incentive level data by provided code and prison",
        "operationId": "getPrisonIncentiveLevel",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id",
              "example": "MDI"
            },
            "example": "MDI"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Incentive level code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive level code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "responses": {
          "200": {
            "description": "return the Prison Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison Incentive Level does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Prison Incentive level data",
        "description": "Creates incentive level data associated with a Prison",
        "operationId": "updatePrisonIncentiveLevelData",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison Id",
              "example": "MDI"
            },
            "example": "MDI"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Incentive level code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive level code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Prison Incentive level data updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Updates an existing appointment",
        "description": "Updates an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "updateAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS event Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as location or subtype do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Deletes an existing appointment",
        "description": "Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS",
        "operationId": "deleteAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS event Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}/uncancel": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Undoes an appointment cancellation",
        "description": "Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS",
        "operationId": "uncancelAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS event Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}/cancel": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Cancels an existing appointment",
        "description": "Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "cancelAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS event Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get activity details",
        "description": "Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "getActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Updates an activity",
        "description": "Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "updateActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Activity information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison, location, program service or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Activity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Delete a NOMIS course activity",
        "description": "Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES",
        "operationId": "deleteActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Activity is deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/schedule": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Updates a course schedule",
        "description": "Updates a course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId": "updateCourseSchedule",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCourseScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The course schedule does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/allocation": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates or Updates a prisoner's allocation to an activity",
        "description": "Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES",
        "operationId": "upsertAllocation",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAllocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertAllocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was an error with the request, see the response for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits": {
      "post": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Creates a new visit",
        "description": "Creates a new visit and decrements the visit balance.",
        "operationId": "createVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Visit information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVisitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison or person ids do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "offenderNo does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/adjudications": {
      "post": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "creates an adjudication on the latest booking of a prisoner",
        "description": "Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "createAdjudication",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdjudicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Adjudication Created Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Adjudication already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments": {
      "post": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Creates a new sentence adjustment",
        "description": "Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation",
        "operationId": "createSentenceAdjustment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Booking Id",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "sentenceSequence",
            "in": "path",
            "description": "Sentence sequence number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence sequence number",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSentenceAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created Sentence adjustment id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking or sentence sequence do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/incentives": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Creates a new incentive",
        "description": "Creates a new incentive using next sequence no.",
        "operationId": "createIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Offender Booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender Booking Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Incentive information with created sequence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIncentiveResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/incentives/reorder": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Reorder a existing incentives to match time order",
        "description": "Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order",
        "operationId": "reorderCurrentIncentives",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Offender Booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender Booking Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Incentives successfully reordered"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access this endpoint forbidden, incorrect role. Must have NOMIS_INCENTIVES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/adjustments": {
      "post": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Creates a new key date adjustment",
        "description": "Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation",
        "operationId": "createKeyDateAdjustment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Booking Id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyDateAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created key date adjustment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations": {
      "post": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Creates a new non-association",
        "description": "Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "createNonAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created non-association",
            "content": {
              "application/json": {}
            }
          },
          "400": {
            "description": "Invalid data such as booking or location do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Creates a new global incentive level",
        "description": "Creates a new global incentive level",
        "operationId": "createGlobalIncentiveLevel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/reorder": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "reorders all global incentive levels",
        "description": "reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index",
        "operationId": "reorderGlobalIncentiveLevels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reorder successful"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Prison Incentive level data",
        "description": "Creates incentive level data associated with a Prison",
        "operationId": "createPrisonIncentiveLevelData",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison Id",
              "example": "MDI"
            },
            "example": "MDI"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Prison Incentive level data created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Creates a new appointment",
        "description": "Creates a new appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "createAppointment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as booking or location do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "post": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates a new activity",
        "description": "Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "createActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Activity information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison, location, program service or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/{visitId}": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get visit",
        "description": "Retrieves a visit by id.",
        "operationId": "getVisit",
        "parameters": [
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis Visit Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Nomis Visit Id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Visit Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "visit does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/rooms/usage-count": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get future visit room usage by filter",
        "description": "Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included",
        "operationId": "getVisitRoomCountsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "visitTypes",
            "in": "query",
            "description": "Filter results by visitType (returns all types if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['SCON','OFFI']"
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or after the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or before the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "futureVisitsOnly",
            "in": "query",
            "description": "Filter results by restricting to future visit usage only",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of visit room and count is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VisitRoomCountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/ids": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get visits by filter",
        "description": "Retrieves a paged list of visits by filter",
        "operationId": "getVisitsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "visitTypes",
            "in": "query",
            "description": "Filter results by visitType (returns all types if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['SCON','OFFI']"
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or after the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or before the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of visit ids is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageVisitIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets the identifiers for all prisoners. Currently only active prisoners are supported",
        "description": "Requires role SYNCHRONISATION_REPORTING.",
        "operationId": "getPrisonerIdentifiers",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active prisoners currently in prison",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paged list of prisoner ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagePrisonerId"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/ids": {
      "get": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "get non-associations by filter",
        "description": "Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS.",
        "operationId": "getNonAssociationsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by non-associations that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by non-associations that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2022-04-11"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageNonAssociationIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/ids": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get incentives (a.k.a IEP) by filter",
        "description": "Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getIncentivesByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by incentives that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by incentives that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "latestOnly",
            "in": "query",
            "description": "if true only retrieve latest incentive for each prisoner",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageIncentiveIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get a prisoner's incentive level (a.k.a IEP) by id (bookingId and incentiveId)",
        "description": "Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS booking Id",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "incentiveSequence",
            "in": "path",
            "description": "NOMIS Incentive sequence ",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS Incentive sequence ",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "the incentive level details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/current": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get a prisoner's current incentive level (a.k.a IEP) for a booking",
        "description": "Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getCurrentIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS booking Id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the incentive level details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{eventId}": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Get appointment by event id",
        "description": "Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS",
        "operationId": "getAppointmentById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Event Id",
              "example": 12345678
            },
            "example": 12345678
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Booking, location and timestamp combination does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/ids": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "get appointments by filter",
        "description": "Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_APPOINTMENTS.",
        "operationId": "getAppointmentsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2022-04-11"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAppointmentIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Get an appointment",
        "description": "Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS",
        "operationId": "getAppointment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS booking Id",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Appointment room internal location Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Appointment room internal location Id",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "dateTime",
            "in": "path",
            "description": "Appointment date and start time",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Appointment date and start time",
              "example": "2023-02-27T14:40"
            },
            "example": "2023-02-27T14:40"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Booking, location and timestamp combination does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/{allocationId}": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get allocation details",
        "description": "Gets allocation details. Requires role NOMIS_ACTIVITIES",
        "operationId": "getAllocation",
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "Allocation id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Allocation id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/ids": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find paged active allocations",
        "description": "Searches for active course allocations. Requires role NOMIS_ACTIVITIES",
        "operationId": "findActiveAllocations",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Exclude program codes"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindActiveAllocationIdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjustments/ids": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get adjustment IDs (key date and Sentence adjustments) by filter",
        "description": "Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING.",
        "operationId": "getAdjustmentsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by adjustments that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by adjustments that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdjustmentIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/charges/ids": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get adjudication charge IDs by filter",
        "description": "Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS.",
        "operationId": "getAdjudicationChargeIdsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by adjudication charges that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by adjudication charges that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by adjudication charges that were created in one of the given prisons",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "MDI"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdjudicationChargeIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_ADJUDICATIONS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get adjudication by adjudication number",
        "description": "Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudication",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adjudication number",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Adjudication Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge-sequence/{chargeSequence}": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get adjudication by adjudication number and charge sequence",
        "description": "Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudicationByCharge",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Adjudication number",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Charge sequence",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Charge sequence",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Adjudication with charge information returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationChargeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication or adjudication charge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/ids": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find paged active activities",
        "description": "Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES",
        "operationId": "findActiveActivities",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Exclude program codes"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "string",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindActiveActivityIdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attendances/{eventId}": {
      "delete": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Delete a NOMIS attendance (from OFFENDER_COURSE_ATTENDANCES table)",
        "description": "Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES",
        "operationId": "deleteAttendance",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attendance is deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/{referenceId}": {
      "delete": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Delete a NOMIS allocation (from OFFENDER_PROGRAM_PROFILES table)",
        "description": "Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES",
        "operationId": "deleteAllocation",
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Allocation is deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "UpdateSentenceAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "RX",
            "enum": [
              "RSR",
              "UR",
              "S240A",
              "RST",
              "RX"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Sentence adjustment update request"
      },
      "UpsertAttendanceRequest": {
        "required": [
          "authorisedAbsence",
          "endTime",
          "eventStatusCode",
          "paid",
          "scheduleDate",
          "startTime",
          "unexcusedAbsence"
        ],
        "type": "object",
        "properties": {
          "scheduleDate": {
            "type": "string",
            "description": "The date of the course schedule",
            "format": "date",
            "example": "2023-04-03"
          },
          "startTime": {
            "type": "string",
            "description": "The time of the course schedule",
            "format": "partial-time",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time the course schedule ends",
            "format": "partial-time",
            "example": "11:00"
          },
          "eventStatusCode": {
            "type": "string",
            "description": "The status of the attendance",
            "example": "SCH"
          },
          "eventOutcomeCode": {
            "type": "string",
            "description": "The outcome code for a completed attendance",
            "example": "ATT"
          },
          "comments": {
            "type": "string",
            "description": "Comments relating to the attendance",
            "example": "Disruptive"
          },
          "unexcusedAbsence": {
            "type": "boolean",
            "description": "Whether the absence is excused",
            "example": true,
            "default": false
          },
          "authorisedAbsence": {
            "type": "boolean",
            "description": "Whether the absence is authorised",
            "example": true,
            "default": false
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the attendance is to be paid",
            "example": true,
            "default": false
          },
          "bonusPay": {
            "type": "number",
            "description": "Any bonus pay for the attendance",
            "example": 1.5
          }
        },
        "description": "Course activity create/update request"
      },
      "UpsertAttendanceResponse": {
        "required": [
          "courseScheduleId",
          "created",
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The attendance event id",
            "format": "int64"
          },
          "courseScheduleId": {
            "type": "integer",
            "description": "The course schedule id for the attendance",
            "format": "int64"
          },
          "created": {
            "type": "boolean",
            "description": "Whether or the attendance was created"
          }
        },
        "description": "Attendance create/update response"
      },
      "UpdateVisitRequest": {
        "required": [
          "endTime",
          "openClosedStatus",
          "room",
          "startDateTime",
          "visitorPersonIds"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "HH:mm",
            "type": "string",
            "description": "Visit end time",
            "example": "14:30"
          },
          "visitorPersonIds": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "type": "integer",
              "description": "Visitors",
              "format": "int64"
            }
          },
          "room": {
            "type": "string",
            "description": "Name of the real world room where visit will take place"
          },
          "openClosedStatus": {
            "type": "string",
            "description": "Whether visit is restricted to a closed session",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Visit update request"
      },
      "CancelVisitRequest": {
        "required": [
          "outcome"
        ],
        "type": "object",
        "properties": {
          "outcome": {
            "type": "string",
            "description": "The cancellation reason",
            "enum": [
              "VISCANC",
              "OFFCANC",
              "ADMIN",
              "NSHOW"
            ]
          }
        },
        "description": "Visit cancellation"
      },
      "CreateNonAssociationRequest": {
        "required": [
          "effectiveDate",
          "nsOffenderNo",
          "offenderNo",
          "reason",
          "recipReason",
          "type"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Noms id of the prisoner",
            "example": "A1234DF"
          },
          "nsOffenderNo": {
            "type": "string",
            "description": "Noms id of the other prisoner",
            "example": "A1234EG"
          },
          "reason": {
            "type": "string",
            "description": "Reason code of the first prisoner, domain NON_ASSO_RSN",
            "example": "VIC"
          },
          "recipReason": {
            "type": "string",
            "description": "Reason code of the other prisoner, domain NON_ASSO_RSN",
            "example": "PER"
          },
          "type": {
            "type": "string",
            "description": "Type code, domain NON_ASSO_TYP",
            "example": "WING"
          },
          "authorisedBy": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Effective date",
            "format": "date",
            "example": "2022-08-12"
          },
          "comment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          }
        },
        "description": "Offender individual schedule creation request"
      },
      "UpdateKeyDateAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentFromDate",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "ADA",
            "enum": [
              "LAL",
              "UAL",
              "RADA",
              "ADA",
              "SREM"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Key date adjustment update request"
      },
      "CreateIncentiveRequest": {
        "required": [
          "iepDateTime",
          "iepLevel",
          "prisonId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "iepLevel": {
            "type": "string",
            "description": "IEP Level",
            "example": "Standard"
          },
          "comments": {
            "type": "string",
            "description": "Review comments",
            "example": "A review took place"
          },
          "iepDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time when last review took place",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison ID",
            "example": "MDI"
          },
          "userId": {
            "type": "string",
            "description": "Username of the reviewer",
            "example": "AJONES"
          }
        },
        "description": "IEP creation request"
      },
      "ReferenceCode": {
        "required": [
          "active",
          "code",
          "description",
          "domain",
          "systemDataFlag"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          },
          "parentCode": {
            "type": "string"
          },
          "expiredDate": {
            "type": "string",
            "format": "date"
          },
          "systemDataFlag": {
            "type": "boolean"
          }
        }
      },
      "CreatePrisonIncentiveRequest": {
        "required": [
          "active",
          "defaultOnAdmission",
          "levelCode"
        ],
        "type": "object",
        "properties": {
          "levelCode": {
            "type": "string",
            "description": "Incentive Level code",
            "example": "STD"
          },
          "active": {
            "type": "boolean",
            "description": "active status of the Global Incentive Level",
            "example": true
          },
          "defaultOnAdmission": {
            "type": "boolean",
            "description": "default on admission",
            "example": true
          },
          "visitOrderAllowance": {
            "type": "integer",
            "description": "The number of weekday visits for a convicted prisoner per fortnight",
            "format": "int32",
            "example": 5500
          },
          "privilegedVisitOrderAllowance": {
            "type": "integer",
            "description": "The number of privileged/weekend visits for a convicted prisoner per 4 weeks",
            "format": "int32",
            "example": 5500
          },
          "remandTransferLimitInPence": {
            "type": "integer",
            "description": "The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use",
            "format": "int32",
            "example": 5500
          },
          "remandSpendLimitInPence": {
            "type": "integer",
            "description": "The maximum amount allowed in the spends account for a remand prisoner",
            "format": "int32",
            "example": 5500
          },
          "convictedTransferLimitInPence": {
            "type": "integer",
            "description": "The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use",
            "format": "int32",
            "example": 5500
          },
          "convictedSpendLimitInPence": {
            "type": "integer",
            "description": "The maximum amount allowed in the spends account for a convicted prisoner",
            "format": "int32",
            "example": 5500
          }
        },
        "description": "Prison Incentive level data create request"
      },
      "PrisonIncentiveLevelDataResponse": {
        "required": [
          "active",
          "defaultOnAdmission",
          "iepLevelCode",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string"
          },
          "iepLevelCode": {
            "type": "string"
          },
          "visitOrderAllowance": {
            "type": "integer",
            "format": "int32"
          },
          "privilegedVisitOrderAllowance": {
            "type": "integer",
            "format": "int32"
          },
          "defaultOnAdmission": {
            "type": "boolean"
          },
          "remandTransferLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "remandSpendLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "convictedTransferLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "convictedSpendLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          },
          "expiryDate": {
            "type": "string",
            "format": "date"
          },
          "visitAllowanceActive": {
            "type": "boolean"
          },
          "visitAllowanceExpiryDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Incentive information"
      },
      "CreateAppointmentRequest": {
        "required": [
          "bookingId",
          "endTime",
          "eventDate",
          "eventSubType",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id of the prisoner",
            "format": "int64",
            "example": 1234567
          },
          "eventDate": {
            "type": "string",
            "description": "Appointment date",
            "format": "date",
            "example": "2022-08-12"
          },
          "startTime": {
            "type": "string",
            "description": "Appointment start time",
            "format": "partial-time",
            "example": "09:45"
          },
          "endTime": {
            "type": "string",
            "description": "Activity end time",
            "format": "partial-time",
            "example": "15:20"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the appointment is to occur (in cell if null)",
            "format": "int64",
            "example": 112233
          },
          "eventSubType": {
            "type": "string",
            "description": "Appointment event sub-type",
            "example": "MEOT"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          }
        },
        "description": "Offender individual schedule creation request"
      },
      "CourseScheduleRequest": {
        "required": [
          "cancelled",
          "date",
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the course schedule if known",
            "format": "int64",
            "example": 13245
          },
          "date": {
            "type": "string",
            "description": "The date of the course schedule",
            "format": "date",
            "example": "2023-04-03"
          },
          "startTime": {
            "type": "string",
            "description": "The time of the course schedule",
            "format": "partial-time",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time the course schedule ends",
            "format": "partial-time",
            "example": "11:00"
          },
          "cancelled": {
            "type": "boolean",
            "description": "Whether the course schedule has been cancelled",
            "example": true
          }
        },
        "description": "Course schedule request"
      },
      "PayRateRequest": {
        "required": [
          "incentiveLevel",
          "payBand",
          "rate"
        ],
        "type": "object",
        "properties": {
          "incentiveLevel": {
            "type": "string",
            "description": "The incentive level",
            "example": "BAS"
          },
          "payBand": {
            "type": "string",
            "description": "The pay band (1 TO 10)",
            "example": "4"
          },
          "rate": {
            "type": "number",
            "description": "The half day rate",
            "example": 0.5
          }
        },
        "description": "Course activity creation request pay rates"
      },
      "ScheduleRuleRequest": {
        "required": [
          "endTime",
          "friday",
          "monday",
          "saturday",
          "startTime",
          "sunday",
          "thursday",
          "tuesday",
          "wednesday"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Schedule start time in 24 hour clock",
            "format": "partial-time",
            "example": "08:00"
          },
          "endTime": {
            "type": "string",
            "description": "Schedule end time in 24 hour clock",
            "format": "partial-time",
            "example": "11:00"
          },
          "monday": {
            "type": "boolean",
            "description": "Scheduled on Monday",
            "example": true
          },
          "tuesday": {
            "type": "boolean",
            "description": "Scheduled on Tuesday",
            "example": true
          },
          "wednesday": {
            "type": "boolean",
            "description": "Scheduled on Wednesday",
            "example": true
          },
          "thursday": {
            "type": "boolean",
            "description": "Scheduled on Thursday",
            "example": true
          },
          "friday": {
            "type": "boolean",
            "description": "Scheduled on Friday",
            "example": true
          },
          "saturday": {
            "type": "boolean",
            "description": "Scheduled on Saturday",
            "example": false
          },
          "sunday": {
            "type": "boolean",
            "description": "Scheduled on Sunday",
            "example": false
          }
        },
        "description": "Course activity creation request schedule rules"
      },
      "UpdateActivityRequest": {
        "required": [
          "capacity",
          "description",
          "excludeBankHolidays",
          "minimumIncentiveLevelCode",
          "payPerSession",
          "payRates",
          "programCode",
          "scheduleRules",
          "schedules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the activity is to occur (from activity schedule)",
            "format": "int64"
          },
          "capacity": {
            "maximum": 999,
            "type": "integer",
            "description": "Capacity of activity (from activity schedule)",
            "format": "int32"
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates",
            "items": {
              "$ref": "#/components/schemas/PayRateRequest"
            }
          },
          "description": {
            "type": "string",
            "description": "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode": {
            "type": "string",
            "description": "Minimum Incentive Level"
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H",
            "enum": [
              "F",
              "H"
            ]
          },
          "scheduleRules": {
            "type": "array",
            "description": "Schedule rules",
            "items": {
              "$ref": "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Exclude bank holidays?"
          },
          "programCode": {
            "type": "string",
            "description": "Program Service code (from activity category)"
          },
          "schedules": {
            "type": "array",
            "description": "Schedules",
            "items": {
              "$ref": "#/components/schemas/CourseScheduleRequest"
            }
          }
        },
        "description": "Course activity update request"
      },
      "CreateActivityResponse": {
        "required": [
          "courseActivityId",
          "courseSchedules"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "The created course activity id",
            "format": "int64"
          },
          "courseSchedules": {
            "type": "array",
            "description": "The created course schedules",
            "items": {
              "$ref": "#/components/schemas/CreateScheduledInstanceResponse"
            }
          }
        },
        "description": "Activity creation response"
      },
      "CreateScheduledInstanceResponse": {
        "required": [
          "courseScheduleId",
          "date",
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "courseScheduleId": {
            "type": "integer",
            "description": "The created scheduled instance id",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "description": "The instance date",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The instance start time",
            "format": "partial-time"
          },
          "endTime": {
            "type": "string",
            "description": "The instance end time",
            "format": "partial-time"
          }
        },
        "description": "The created course schedules"
      },
      "UpdateCourseScheduleResponse": {
        "required": [
          "courseScheduleId"
        ],
        "type": "object",
        "properties": {
          "courseScheduleId": {
            "type": "integer",
            "description": "The id of the course schedule",
            "format": "int64",
            "example": 123456
          }
        },
        "description": "Course schedule update update response"
      },
      "UpsertAllocationRequest": {
        "required": [
          "bookingId",
          "payBandCode",
          "programStatusCode",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id of the prisoner",
            "format": "int64",
            "example": 1234567
          },
          "payBandCode": {
            "type": "string",
            "description": "The prisoner's pay band",
            "example": "2"
          },
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endReason": {
            "type": "string",
            "description": "Activity end reason (from domain PS_END_RSN)",
            "example": "REL"
          },
          "endComment": {
            "type": "string",
            "description": "Activity end comment"
          },
          "suspended": {
            "type": "boolean",
            "description": "Offender is suspended from Activity?"
          },
          "suspendedComment": {
            "type": "string",
            "description": "Activity suspended comment"
          },
          "programStatusCode": {
            "type": "string",
            "description": "Offender program status from domain OFF_PRG_STS",
            "example": "ALLOC"
          }
        },
        "description": "Course activity create or update allocation request"
      },
      "UpsertAllocationResponse": {
        "required": [
          "created",
          "offenderProgramReferenceId"
        ],
        "type": "object",
        "properties": {
          "offenderProgramReferenceId": {
            "type": "integer",
            "description": "The created OffenderProgramProfile id",
            "format": "int64",
            "example": 12345678
          },
          "created": {
            "type": "boolean",
            "description": "Whether or not the allocation was created"
          }
        },
        "description": "OffenderProgramProfile create/update response"
      },
      "CreateVisitRequest": {
        "required": [
          "endTime",
          "issueDate",
          "openClosedStatus",
          "prisonId",
          "room",
          "startDateTime",
          "visitComment",
          "visitOrderComment",
          "visitType",
          "visitorPersonIds"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "HH:mm",
            "type": "string",
            "description": "Visit end time",
            "example": "14:30"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the visit is to occur"
          },
          "visitorPersonIds": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "type": "integer",
              "description": "Visitors",
              "format": "int64"
            }
          },
          "visitType": {
            "type": "string",
            "description": "Visit type, whether social or official",
            "enum": [
              "SCON",
              "OFFI"
            ]
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date",
            "format": "date"
          },
          "visitComment": {
            "type": "string",
            "description": "Comment to be added to visit"
          },
          "visitOrderComment": {
            "type": "string",
            "description": "Comment to be added to visit order (if one is created)"
          },
          "room": {
            "type": "string",
            "description": "Name of the real world room where visit will take place"
          },
          "openClosedStatus": {
            "type": "string",
            "description": "Whether visit is restricted to a closed session",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Visit creation request"
      },
      "CreateVisitResponse": {
        "required": [
          "visitId"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The created Nomis visit id",
            "format": "int64"
          }
        },
        "description": "Visit creation response"
      },
      "AdjudicationCharge": {
        "required": [
          "chargeSequence",
          "offence"
        ],
        "type": "object",
        "properties": {
          "offence": {
            "$ref": "#/components/schemas/AdjudicationOffence"
          },
          "evidence": {
            "type": "string"
          },
          "reportDetail": {
            "type": "string"
          },
          "offenceId": {
            "type": "string"
          },
          "chargeSequence": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AdjudicationIncident": {
        "required": [
          "adjudicationIncidentId",
          "createdByUsername",
          "createdDateTime",
          "incidentDate",
          "incidentTime",
          "incidentType",
          "internalLocation",
          "otherPrisonersInvolved",
          "otherStaffInvolved",
          "prison",
          "prisonerVictims",
          "prisonerWitnesses",
          "repairs",
          "reportedDate",
          "reportedTime",
          "reportingOfficers",
          "reportingStaff",
          "staffVictims",
          "staffWitnesses"
        ],
        "type": "object",
        "properties": {
          "adjudicationIncidentId": {
            "type": "integer",
            "description": "The adjudication incident Id, part of the composite key with adjudicationSequence",
            "format": "int64"
          },
          "reportingStaff": {
            "$ref": "#/components/schemas/Staff"
          },
          "incidentDate": {
            "type": "string",
            "description": "Date of the associated incident",
            "format": "date"
          },
          "incidentTime": {
            "type": "string",
            "description": "Date and time of the associated incident",
            "format": "partial-time"
          },
          "reportedDate": {
            "type": "string",
            "description": "Date when the associated incident was reported",
            "format": "date"
          },
          "reportedTime": {
            "type": "string",
            "description": "Date and time when the associated incident was reported",
            "format": "partial-time"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time when the record was created in NOMIS",
            "example": "2021-07-05T10:35:17"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "incidentType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "details": {
            "type": "string",
            "description": "Incident details"
          },
          "prison": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "prisonerWitnesses": {
            "type": "array",
            "description": "Prisoners that witnessed the incident. Rarely used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Prisoner"
            }
          },
          "prisonerVictims": {
            "type": "array",
            "description": "Prisoners that were victims in the incident. Not often used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Prisoner"
            }
          },
          "otherPrisonersInvolved": {
            "type": "array",
            "description": "Other suspects involved in the incident that may or may not have been placed on report",
            "items": {
              "$ref": "#/components/schemas/Prisoner"
            }
          },
          "reportingOfficers": {
            "type": "array",
            "description": "The officer who reported the incident who may differ from the reporting officer. Often used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "staffWitnesses": {
            "type": "array",
            "description": "Staff that witnessed the incident. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "staffVictims": {
            "type": "array",
            "description": "Staff that was a victim in the incident. Rarely used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "otherStaffInvolved": {
            "type": "array",
            "description": "Other staff that was involved in the incident either using force or some other link. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "repairs": {
            "type": "array",
            "description": "The repairs required due to the damage",
            "items": {
              "$ref": "#/components/schemas/Repair"
            }
          }
        },
        "description": "Associated incident details"
      },
      "AdjudicationOffence": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "category": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        }
      },
      "AdjudicationResponse": {
        "required": [
          "adjudicationNumber",
          "adjudicationSequence",
          "bookingId",
          "charges",
          "gender",
          "hearings",
          "incident",
          "investigations",
          "offenderNo",
          "partyAddedDate"
        ],
        "type": "object",
        "properties": {
          "adjudicationSequence": {
            "type": "integer",
            "description": "The adjudication/party sequence, part of the composite key with adjudicationIncidentId",
            "format": "int32"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "bookingId": {
            "type": "integer",
            "description": "The id of the booking associated with the adjudication",
            "format": "int64"
          },
          "adjudicationNumber": {
            "type": "integer",
            "description": "The adjudication number (business key)",
            "format": "int64"
          },
          "gender": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "currentPrison": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "partyAddedDate": {
            "type": "string",
            "description": "Date Prisoner was added to the adjudication ????",
            "format": "date"
          },
          "comment": {
            "type": "string",
            "description": "Adjudication comments"
          },
          "incident": {
            "$ref": "#/components/schemas/AdjudicationIncident"
          },
          "charges": {
            "type": "array",
            "description": "Charges associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/AdjudicationCharge"
            }
          },
          "investigations": {
            "type": "array",
            "description": "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Investigation"
            }
          },
          "hearings": {
            "type": "array",
            "description": "hearings associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/Hearing"
            }
          }
        },
        "description": "Adjudication Information"
      },
      "CodeDescription": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "Evidence": {
        "required": [
          "createdByUsername",
          "date",
          "detail",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "detail": {
            "type": "string"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          }
        }
      },
      "Hearing": {
        "required": [
          "createdByUsername",
          "createdDateTime",
          "hearingId",
          "hearingResults"
        ],
        "type": "object",
        "properties": {
          "hearingId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "scheduleDate": {
            "type": "string",
            "description": "Hearing scheduled date as set by DPS but not used by NOMIS or set in NOMIS",
            "format": "date"
          },
          "scheduleTime": {
            "type": "string",
            "description": "Hearing scheduled time as set by DPS but not used by NOMIS or set in NOMIS",
            "format": "partial-time"
          },
          "hearingDate": {
            "type": "string",
            "description": "Hearing date",
            "format": "date"
          },
          "hearingTime": {
            "type": "string",
            "description": "Hearing time",
            "format": "partial-time"
          },
          "comment": {
            "type": "string"
          },
          "representativeText": {
            "type": "string"
          },
          "hearingStaff": {
            "$ref": "#/components/schemas/Staff"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "eventStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "hearingResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HearingResult"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time when the record was created the record in NOMIS",
            "example": "2021-07-05T10:35:17"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          }
        },
        "description": "hearings associated with this adjudication"
      },
      "HearingResult": {
        "required": [
          "charge",
          "createdByUsername",
          "createdDateTime",
          "offence",
          "resultAwards"
        ],
        "type": "object",
        "properties": {
          "pleaFindingType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "findingType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "charge": {
            "$ref": "#/components/schemas/AdjudicationCharge"
          },
          "offence": {
            "$ref": "#/components/schemas/AdjudicationOffence"
          },
          "resultAwards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HearingResultAward"
            }
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time when the record was created the record in NOMIS",
            "example": "2021-07-05T10:35:17"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          }
        }
      },
      "HearingResultAward": {
        "required": [
          "chargeSequence",
          "effectiveDate",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Sequence of this sanction for this prisoner's booking",
            "format": "int32"
          },
          "sanctionType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "sanctionStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "statusDate": {
            "type": "string",
            "format": "date"
          },
          "sanctionDays": {
            "type": "integer",
            "format": "int32"
          },
          "sanctionMonths": {
            "type": "integer",
            "format": "int32"
          },
          "compensationAmount": {
            "type": "number"
          },
          "consecutiveAward": {
            "$ref": "#/components/schemas/HearingResultAward"
          },
          "chargeSequence": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InternalLocation": {
        "required": [
          "code",
          "description",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "NOMIS location id",
            "format": "int64"
          },
          "code": {
            "type": "string",
            "description": "NOMIS location code"
          },
          "description": {
            "type": "string",
            "description": "NOMIS location description"
          }
        }
      },
      "Investigation": {
        "required": [
          "dateAssigned",
          "evidence",
          "investigator"
        ],
        "type": "object",
        "properties": {
          "investigator": {
            "$ref": "#/components/schemas/Staff"
          },
          "comment": {
            "type": "string"
          },
          "dateAssigned": {
            "type": "string",
            "format": "date"
          },
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Evidence"
            }
          }
        },
        "description": "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases"
      },
      "Prisoner": {
        "required": [
          "createdByUsername",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "firstName": {
            "type": "string",
            "description": "First name of prisoner"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of prisoner"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS where this prisoner is used"
          }
        },
        "description": "Other suspects involved in the incident that may or may not have been placed on report"
      },
      "Repair": {
        "required": [
          "createdByUsername",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          }
        },
        "description": "The repairs required due to the damage"
      },
      "Staff": {
        "required": [
          "createdByUsername",
          "firstName",
          "lastName",
          "staffId",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of first account related to staff"
          },
          "staffId": {
            "type": "integer",
            "description": "NOMIS staff id",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "First name of staff member"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of staff member"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS where this staff is used"
          }
        }
      },
      "ChargeToCreate": {
        "required": [
          "offenceCode",
          "offenceId"
        ],
        "type": "object",
        "properties": {
          "offenceCode": {
            "type": "string",
            "description": "Offence code they are charged with",
            "example": "51:1N"
          },
          "offenceId": {
            "type": "string",
            "description": "Charges associated with this adjudication (business key)",
            "example": "1234567/1"
          }
        },
        "description": "Charges associated with this adjudication"
      },
      "CreateAdjudicationRequest": {
        "required": [
          "adjudicationNumber",
          "charges",
          "evidence",
          "incident"
        ],
        "type": "object",
        "properties": {
          "adjudicationNumber": {
            "type": "integer",
            "description": "The adjudication number (business key)",
            "format": "int64",
            "example": 10128828
          },
          "incident": {
            "$ref": "#/components/schemas/IncidentToCreate"
          },
          "charges": {
            "type": "array",
            "description": "Charges associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/ChargeToCreate"
            }
          },
          "evidence": {
            "type": "array",
            "description": "The evidence records as part of the incident",
            "items": {
              "$ref": "#/components/schemas/EvidenceToCreate"
            }
          }
        },
        "description": "Core Adjudication to be created"
      },
      "EvidenceToCreate": {
        "required": [
          "detail",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Type of evidence",
            "example": "PHOTO"
          },
          "detail": {
            "type": "string",
            "description": "Description of evidence",
            "example": "Image of damages"
          }
        },
        "description": "The evidence records as part of the incident"
      },
      "IncidentToCreate": {
        "required": [
          "details",
          "incidentDate",
          "incidentTime",
          "internalLocationId",
          "prisonId",
          "prisonerVictimsOffenderNumbers",
          "repairs",
          "reportedDate",
          "reportedTime",
          "reportingStaffUsername",
          "staffVictimsUsernames",
          "staffWitnessesUsernames"
        ],
        "type": "object",
        "properties": {
          "reportingStaffUsername": {
            "type": "string",
            "description": "Reporting staff member username",
            "example": "JANE.BROOKES"
          },
          "incidentDate": {
            "type": "string",
            "description": "Date of the associated incident",
            "format": "date"
          },
          "incidentTime": {
            "type": "string",
            "description": "Date and time of the associated incident",
            "format": "partial-time",
            "example": "12:00:00"
          },
          "reportedDate": {
            "type": "string",
            "description": "Date when the associated incident was reported",
            "format": "date"
          },
          "reportedTime": {
            "type": "string",
            "description": "Date and time when the associated incident was reported",
            "format": "partial-time",
            "example": "12:00:00"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "location id where incident took place",
            "format": "int64",
            "example": 123456
          },
          "details": {
            "type": "string",
            "description": "Incident details",
            "example": "The details of the incident are as follows"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code where the incident took place",
            "example": "MDI"
          },
          "prisonerVictimsOffenderNumbers": {
            "type": "array",
            "description": "Prisoners numbers that witnessed the incident",
            "example": [
              "A1234AA",
              "A1234AB"
            ],
            "items": {
              "type": "string",
              "description": "Prisoners numbers that witnessed the incident",
              "example": "[\"A1234AA\",\"A1234AB\"]"
            }
          },
          "staffWitnessesUsernames": {
            "type": "array",
            "description": "Staff usernames that witnessed the incident",
            "example": [
              "A.BARNES",
              "M.ABDULLAH"
            ],
            "items": {
              "type": "string",
              "description": "Staff usernames that witnessed the incident",
              "example": "[\"A.BARNES\",\"M.ABDULLAH\"]"
            }
          },
          "staffVictimsUsernames": {
            "type": "array",
            "description": "Staff usernames that were victims in the incident",
            "example": [
              "A.BARNES",
              "M.ABDULLAH"
            ],
            "items": {
              "type": "string",
              "description": "Staff usernames that were victims in the incident",
              "example": "[\"A.BARNES\",\"M.ABDULLAH\"]"
            }
          },
          "repairs": {
            "type": "array",
            "description": "The repairs required due to the damage",
            "items": {
              "$ref": "#/components/schemas/RepairToCreate"
            }
          }
        },
        "description": "Associated incident details"
      },
      "RepairToCreate": {
        "required": [
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Type of repairs",
            "example": "PLUM"
          },
          "comment": {
            "type": "string",
            "description": "Optional description of repairs",
            "example": "Damage to the plumbing"
          },
          "cost": {
            "type": "number",
            "description": "Optional cost of repairs",
            "example": 62.12
          }
        },
        "description": "The repairs required due to the damage"
      },
      "CreateSentenceAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "RX",
            "enum": [
              "RSR",
              "UR",
              "S240A",
              "RST",
              "RX"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Sentence adjustment create request"
      },
      "CreateAdjustmentResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Create adjustment response"
      },
      "CreateIncentiveResponse": {
        "required": [
          "bookingId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The created Nomis booking and sequence",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Incentive creation response"
      },
      "CreateKeyDateAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentFromDate",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "ADA",
            "enum": [
              "LAL",
              "UAL",
              "RADA",
              "ADA",
              "SREM"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Key date adjustment create request"
      },
      "ReorderRequest": {
        "required": [
          "codeList"
        ],
        "type": "object",
        "properties": {
          "codeList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateActivityRequest": {
        "required": [
          "capacity",
          "code",
          "description",
          "excludeBankHolidays",
          "minimumIncentiveLevelCode",
          "payPerSession",
          "payRates",
          "prisonId",
          "programCode",
          "scheduleRules",
          "schedules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code generated from the activity and schedule ids and mapped"
          },
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the activity is to occur"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the activity is to occur (from activity schedule)",
            "format": "int64"
          },
          "capacity": {
            "maximum": 999,
            "type": "integer",
            "description": "Capacity of activity (from activity schedule)",
            "format": "int32"
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates",
            "items": {
              "$ref": "#/components/schemas/PayRateRequest"
            }
          },
          "description": {
            "type": "string",
            "description": "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode": {
            "type": "string",
            "description": "Minimum Incentive Level"
          },
          "programCode": {
            "type": "string",
            "description": "Program Service code (from activity category)"
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H",
            "enum": [
              "F",
              "H"
            ]
          },
          "schedules": {
            "type": "array",
            "description": "Schedules",
            "items": {
              "$ref": "#/components/schemas/CourseScheduleRequest"
            }
          },
          "scheduleRules": {
            "type": "array",
            "description": "Schedule rules",
            "items": {
              "$ref": "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Exclude bank holidays?"
          }
        },
        "description": "Course activity creation request"
      },
      "LeadVisitor": {
        "required": [
          "fullName",
          "personId",
          "telephones"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "visitor NOMIS person Id",
            "format": "int64"
          },
          "fullName": {
            "type": "string",
            "description": "full name of visitor"
          },
          "telephones": {
            "type": "array",
            "description": "Ordered list of telephone numbers for contact with latest first",
            "items": {
              "type": "string",
              "description": "Ordered list of telephone numbers for contact with latest first"
            }
          }
        },
        "description": "the lead visitor"
      },
      "VisitResponse": {
        "required": [
          "agencyInternalLocation",
          "createUserId",
          "endDateTime",
          "offenderNo",
          "prisonId",
          "startDateTime",
          "visitId",
          "visitOutcome",
          "visitStatus",
          "visitType",
          "visitors",
          "whenCreated"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The visit id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit end date and time",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the visit is to occur"
          },
          "visitors": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "$ref": "#/components/schemas/Visitor"
            }
          },
          "leadVisitor": {
            "$ref": "#/components/schemas/LeadVisitor"
          },
          "visitType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "visitStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "visitOutcome": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "agencyInternalLocation": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "commentText": {
            "type": "string",
            "description": "Visit comments"
          },
          "visitorConcernText": {
            "type": "string",
            "description": "Visitor concerns text"
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of creation",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of last update",
            "example": "2021-07-05T10:35:17"
          },
          "createUserId": {
            "type": "string",
            "description": "User id for visit creation"
          },
          "modifyUserId": {
            "type": "string",
            "description": "User id for last visit update"
          }
        },
        "description": "Visit information"
      },
      "Visitor": {
        "required": [
          "leadVisitor",
          "personId"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "visitor NOMIS person Id",
            "format": "int64"
          },
          "leadVisitor": {
            "type": "boolean",
            "description": "Indicates lead visitor for the visit"
          }
        },
        "description": "Visitors"
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VisitRoomCountResponse": {
        "required": [
          "agencyInternalLocationDescription",
          "count",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "agencyInternalLocationDescription": {
            "type": "string",
            "description": "The internal location description"
          },
          "count": {
            "type": "integer",
            "description": "The room usage count",
            "format": "int64"
          },
          "prisonId": {
            "type": "string",
            "description": "The prison id"
          }
        },
        "description": "Visit id"
      },
      "PageVisitIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        }
      },
      "VisitIdResponse": {
        "required": [
          "visitId"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The visit id",
            "format": "int64"
          }
        },
        "description": "Visit id"
      },
      "SentenceAdjustmentResponse": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentType",
          "bookingId",
          "hiddenFromUsers",
          "id",
          "offenderNo",
          "sentenceSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The sentence adjustment id",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "sentenceSequence": {
            "type": "integer",
            "description": "The sequence of the sentence within this booking",
            "format": "int64"
          },
          "adjustmentType": {
            "$ref": "#/components/schemas/SentencingAdjustmentType"
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentToDate": {
            "type": "string",
            "description": "End of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied"
          },
          "hiddenFromUsers": {
            "type": "boolean",
            "description": "Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment"
          }
        },
        "description": "Sentence adjustment"
      },
      "SentencingAdjustmentType": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "code",
            "example": "RX"
          },
          "description": {
            "type": "string",
            "description": "description",
            "example": "Remand"
          }
        },
        "description": "Adjustment type"
      },
      "PagePrisonerId": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerId"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PrisonerId": {
        "required": [
          "bookingId",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string"
          }
        }
      },
      "NonAssociationIdResponse": {
        "required": [
          "offenderNo1",
          "offenderNo2"
        ],
        "type": "object",
        "properties": {
          "offenderNo1": {
            "type": "string",
            "description": "The 1st offender"
          },
          "offenderNo2": {
            "type": "string",
            "description": "The 2nd offender"
          }
        },
        "description": "Non association id"
      },
      "PageNonAssociationIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonAssociationIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "KeyDateAdjustmentResponse": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentType",
          "bookingId",
          "id",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The key date adjustment id",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "adjustmentType": {
            "$ref": "#/components/schemas/SentencingAdjustmentType"
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentToDate": {
            "type": "string",
            "description": "End of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied"
          }
        },
        "description": "Key date adjustment"
      },
      "IncentiveIdResponse": {
        "required": [
          "bookingId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence of the incentive within this booking",
            "format": "int64"
          }
        },
        "description": "Incentive id"
      },
      "PageIncentiveIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncentiveIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "IncentiveResponse": {
        "required": [
          "auditModule",
          "bookingId",
          "currentIep",
          "iepDateTime",
          "iepLevel",
          "incentiveSequence",
          "offenderNo",
          "prisonId",
          "whenCreated"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "incentiveSequence": {
            "type": "integer",
            "description": "The sequence of the incentive within this booking",
            "format": "int64"
          },
          "commentText": {
            "type": "string",
            "description": "Comment for Incentive level"
          },
          "iepDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time of Incentive level creation",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the Incentive level was created"
          },
          "iepLevel": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "userId": {
            "type": "string",
            "description": "User id of user creating prisoner incentive level"
          },
          "currentIep": {
            "type": "boolean",
            "description": "Is this IEP the current IEP for the booking?"
          },
          "auditModule": {
            "type": "string",
            "description": "The NOMIS module that created this IEP",
            "enum": [
              "OCUWARNG",
              "PRISON_API",
              "OIDADMIS",
              "MERGE",
              "OIDOIEPS",
              "OIDITRAN",
              "OSIOSEAR"
            ]
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of creation",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of last update",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Incentive information"
      },
      "AppointmentIdResponse": {
        "required": [
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The event id",
            "format": "int64"
          }
        },
        "description": "Event id"
      },
      "PageAppointmentIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "GetAllocationResponse": {
        "required": [
          "bookingId",
          "courseActivityId",
          "nomisId",
          "prisonId",
          "startDate",
          "suspended"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "Prison ID",
            "example": "BXI"
          },
          "courseActivityId": {
            "type": "integer",
            "description": "Nomis Course Activity ID",
            "format": "int64",
            "example": 1234
          },
          "nomisId": {
            "type": "string",
            "description": "Nomis ID",
            "example": "A1234BC"
          },
          "bookingId": {
            "type": "integer",
            "description": "ID of the active booking",
            "format": "int64",
            "example": 12345
          },
          "startDate": {
            "type": "string",
            "description": "Date allocated to the course",
            "format": "date",
            "example": "2023-03-12"
          },
          "endDate": {
            "type": "string",
            "description": "Date deallocated from the course",
            "format": "date",
            "example": "2023-05-26"
          },
          "endComment": {
            "type": "string",
            "description": "Deallocation comment",
            "example": "Removed due to schedule clash"
          },
          "endReasonCode": {
            "type": "string",
            "description": "Nomis reason code for ending (reference code domain PS_END_RSN)",
            "example": "WDRAWN"
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether the prisoner is currently suspended from the course",
            "example": false
          },
          "payBand": {
            "type": "string",
            "description": "Pay band",
            "example": "1"
          },
          "livingUnitDescription": {
            "type": "string",
            "description": "Cell description (can be null if OUT or being transferred)",
            "example": "RSI-A-1-001"
          }
        },
        "description": "Allocation to an activity"
      },
      "FindActiveAllocationIdsResponse": {
        "required": [
          "allocationId"
        ],
        "type": "object",
        "properties": {
          "allocationId": {
            "type": "integer",
            "description": "Allocation id",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Find active allocation ids response"
      },
      "AdjustmentIdResponse": {
        "required": [
          "adjustmentCategory",
          "adjustmentId"
        ],
        "type": "object",
        "properties": {
          "adjustmentId": {
            "type": "integer",
            "description": "The adjustment id",
            "format": "int64"
          },
          "adjustmentCategory": {
            "type": "string",
            "description": "SENTENCE or KEY_DATE"
          }
        },
        "description": "Adjustment id"
      },
      "PageAdjustmentIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdjustmentIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AdjudicationChargeIdResponse": {
        "required": [
          "adjudicationNumber",
          "chargeSequence",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "adjudicationNumber": {
            "type": "integer",
            "description": "The adjudication number",
            "format": "int64"
          },
          "chargeSequence": {
            "type": "integer",
            "description": "The adjudication charge sequence",
            "format": "int32"
          },
          "offenderNo": {
            "type": "string",
            "description": "The prisoner number"
          }
        },
        "description": "adjudication id"
      },
      "PageAdjudicationChargeIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdjudicationChargeIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AdjudicationChargeResponse": {
        "required": [
          "adjudicationNumber",
          "adjudicationSequence",
          "bookingId",
          "charge",
          "gender",
          "hearings",
          "incident",
          "investigations",
          "offenderNo",
          "partyAddedDate"
        ],
        "type": "object",
        "properties": {
          "adjudicationSequence": {
            "type": "integer",
            "description": "The adjudication/party sequence, part of the composite key with adjudicationIncidentId",
            "format": "int32"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "bookingId": {
            "type": "integer",
            "description": "The id of the booking associated with the adjudication",
            "format": "int64"
          },
          "adjudicationNumber": {
            "type": "integer",
            "description": "The adjudication number (business key)",
            "format": "int64"
          },
          "gender": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "currentPrison": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "partyAddedDate": {
            "type": "string",
            "description": "Date Prisoner was added to the adjudication ????",
            "format": "date"
          },
          "comment": {
            "type": "string",
            "description": "Adjudication comments"
          },
          "incident": {
            "$ref": "#/components/schemas/AdjudicationIncident"
          },
          "charge": {
            "$ref": "#/components/schemas/AdjudicationCharge"
          },
          "investigations": {
            "type": "array",
            "description": "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Investigation"
            }
          },
          "hearings": {
            "type": "array",
            "description": "hearings associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/Hearing"
            }
          }
        },
        "description": "The requested adjudication charge and associated adjudication details. Note: the adjudication may have other charges associated with it"
      },
      "GetActivityResponse": {
        "required": [
          "capacity",
          "courseActivityId",
          "description",
          "excludeBankHolidays",
          "minimumIncentiveLevel",
          "payPerSession",
          "payRates",
          "prisonId",
          "programCode",
          "scheduleRules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "Activity id",
            "format": "int64",
            "example": 1
          },
          "programCode": {
            "type": "string",
            "description": "Program service code",
            "example": "INDUCTION"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code",
            "example": "RSI"
          },
          "startDate": {
            "type": "string",
            "description": "Date course started",
            "format": "date",
            "example": "2020-04-11"
          },
          "endDate": {
            "type": "string",
            "description": "Date course ended",
            "format": "date",
            "example": "2023-11-15"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Course internal location",
            "format": "int64",
            "example": 1234
          },
          "internalLocationCode": {
            "type": "string",
            "description": "Course internal location code",
            "example": "KITCH"
          },
          "internalLocationDescription": {
            "type": "string",
            "description": "Course internal location description",
            "example": "RSI-WORK_IND-KITCH"
          },
          "capacity": {
            "type": "integer",
            "description": "Course capacity",
            "format": "int32",
            "example": 10
          },
          "description": {
            "type": "string",
            "description": "Course description",
            "example": "Kitchen work"
          },
          "minimumIncentiveLevel": {
            "type": "string",
            "description": "The minimum incentive level allowed on the course",
            "example": "BAS"
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Whether the course runs on bank holidays",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H"
          },
          "scheduleRules": {
            "type": "array",
            "description": "Rules for creating schedules - days and times",
            "items": {
              "$ref": "#/components/schemas/ScheduleRulesResponse"
            }
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates available",
            "items": {
              "$ref": "#/components/schemas/PayRatesResponse"
            }
          }
        },
        "description": "Activity details"
      },
      "PayRatesResponse": {
        "required": [
          "incentiveLevelCode",
          "payBand",
          "rate"
        ],
        "type": "object",
        "properties": {
          "incentiveLevelCode": {
            "type": "string",
            "description": "Incentive level code",
            "example": "BAS"
          },
          "payBand": {
            "type": "string",
            "description": "Pay band",
            "example": "1"
          },
          "rate": {
            "type": "number",
            "description": "rate",
            "example": 3.2
          }
        },
        "description": "Activity Pay Rates"
      },
      "ScheduleRulesResponse": {
        "required": [
          "endTime",
          "friday",
          "monday",
          "saturday",
          "startTime",
          "sunday",
          "thursday",
          "tuesday",
          "wednesday"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Course start time",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "Course end time",
            "format": "partial-time",
            "example": "11:00"
          },
          "monday": {
            "type": "boolean",
            "description": "Runs on Mondays",
            "example": true
          },
          "tuesday": {
            "type": "boolean",
            "description": "Runs on Tuesdays",
            "example": true
          },
          "wednesday": {
            "type": "boolean",
            "description": "Runs on Wednesdays",
            "example": true
          },
          "thursday": {
            "type": "boolean",
            "description": "Runs on Thursdays",
            "example": true
          },
          "friday": {
            "type": "boolean",
            "description": "Runs on Fridays",
            "example": true
          },
          "saturday": {
            "type": "boolean",
            "description": "Runs on Saturdays",
            "example": true
          },
          "sunday": {
            "type": "boolean",
            "description": "Runs on Sundays",
            "example": true
          }
        },
        "description": "Activity Schedule Rules"
      },
      "FindActiveActivityIdsResponse": {
        "required": [
          "courseActivityId"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "Activity id",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Find active activity ids response"
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
