{
  "openapi": "3.0.1",
  "info": {
    "title": "NOMIS Synchronisation API",
    "description": "Controls writing Prisoner information back to NOMIS for data synchronistion (not intended for general usage)",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2023-05-15"
  },
  "servers": [
    {
      "url": "https://nomis-prsner-dev.aks-dev-1.studio-hosting.service.justice.gov.uk",
      "description": "Development"
    },
    {
      "url": "https://nomis-prsner-pp.aks-live-1.studio-hosting.service.justice.gov.uk",
      "description": "PreProd"
    },
    {
      "url": "https://nomis-prisoner.aks-live-1.studio-hosting.service.justice.gov.uk",
      "description": "Prod"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/sentence-adjustments/{adjustmentId}": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get specific sentence adjustment",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id",
        "operationId": "getSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the sentence adjustment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceAdjustmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Updates specific sentence adjustment. The related booking and sentence can not be changed",
        "description": "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId": "updateSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSentenceAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the sentence adjustment has been updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "deletes specific sentence adjustment",
        "description": "Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id",
        "operationId": "deleteSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "the sentence adjustment has been deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}": {
      "put": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Updates an existing visit",
        "description": "Updates details of an existing visit such as the visitors and time slot",
        "operationId": "updateVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis visit Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Nomis visit Id",
              "example": 123456
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Visit information updated"
          },
          "400": {
            "description": "Person ids do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "offenderNo or visits id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}/cancel": {
      "put": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Cancel a visit",
        "operationId": "cancelVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis Visit Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Nomis Visit Id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Visit cancelled"
          },
          "400": {
            "description": "Invalid cancellation reason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "VSIP visit id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/key-date-adjustments/{adjustmentId}": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get specific key date adjustment",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id",
        "operationId": "getKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key date adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the key date adjustment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyDateAdjustmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Updates specific key date adjustment. The related booking can not be changed",
        "description": "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId": "updateKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key date adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKeyDateAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the key date adjustment has been updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "deletes specific key date adjustment",
        "description": "Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id",
        "operationId": "deleteKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Key date adjustment id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "the key date adjustment has been deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/{code}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Gets the global incentive level by code",
        "description": "Gets a global incentive level by provided code and domain of IEP_LEVEL",
        "operationId": "getGlobalIncentiveLevel",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Incentive reference code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive reference code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "responses": {
          "200": {
            "description": "return the Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Global Incentive Level does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Updates an existing global incentive level",
        "description": "Updates an existing global incentive level, updateable fields are description and active",
        "operationId": "updateGlobalIncentiveLevel",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Incentive reference code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive reference code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Global incentive level not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}/code/{code}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Gets the prison incentive level",
        "description": "Gets prison incentive level data by provided code and prison",
        "operationId": "getPrisonIncentiveLevel",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id",
              "example": "MDI"
            },
            "example": "MDI"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Incentive level code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive level code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "responses": {
          "200": {
            "description": "return the Prison Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison Incentive Level does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Prison Incentive level data",
        "description": "Creates incentive level data associated with a Prison",
        "operationId": "updatePrisonIncentiveLevelData",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison Id",
              "example": "MDI"
            },
            "example": "MDI"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Incentive level code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive level code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Prison Incentive level data updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Updates an existing appointment",
        "description": "Updates an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "updateAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS event Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as location or subtype do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Deletes an existing appointment",
        "description": "Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS",
        "operationId": "deleteAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS event Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}/cancel": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Cancels an existing appointment",
        "description": "Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "cancelAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS event Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Updates an activity",
        "description": "Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "updateActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Activity information"
          },
          "400": {
            "description": "Prison, location, program service or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Activity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/schedule": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Updates a course schedule",
        "description": "Updates a course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId": "updateCourseSchedule",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCourseScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The course schedule does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/allocation": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates or Updates a prisoner's allocation to an activity",
        "description": "Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES",
        "operationId": "upsertAllocation",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAllocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertAllocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was an error with the request, see the response for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits": {
      "post": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Creates a new visit",
        "description": "Creates a new visit and decrements the visit balance.",
        "operationId": "createVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Visit information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVisitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison or person ids do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "offenderNo does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments": {
      "post": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Creates a new sentence adjustment",
        "description": "Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation",
        "operationId": "createSentenceAdjustment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Booking Id",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "sentenceSequence",
            "in": "path",
            "description": "Sentence sequence number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Sentence sequence number",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSentenceAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created Sentence adjustment id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking or sentence sequence do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/incentives": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Creates a new incentive",
        "description": "Creates a new incentive using next sequence no.",
        "operationId": "createIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Offender Booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender Booking Id",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Incentive information with created sequence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIncentiveResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/adjustments": {
      "post": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Creates a new key date adjustment",
        "description": "Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation",
        "operationId": "createKeyDateAdjustment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Booking Id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyDateAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created key date adjustment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Creates a new global incentive level",
        "description": "Creates a new global incentive level",
        "operationId": "createGlobalIncentiveLevel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/reorder": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "reorders all global incentive levels",
        "description": "reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index",
        "operationId": "reorderGlobalIncentiveLevels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reorder successful"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Prison Incentive level data",
        "description": "Creates incentive level data associated with a Prison",
        "operationId": "createPrisonIncentiveLevelData",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison Id",
              "example": "MDI"
            },
            "example": "MDI"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Prison Incentive level data created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Creates a new appointment",
        "description": "Creates a new appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "createAppointment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as booking or location do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "post": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates a new activity",
        "description": "Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "createActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Activity information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison, location, program service or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/booking/{bookingId}/attendance": {
      "post": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates or updates an attendance record",
        "description": "Creates or updates an attendance for the booking and schedule. Requires role NOMIS_ACTIVITIES",
        "operationId": "upsertAttendance",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Booking id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAttendanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attendance updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertAttendanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/booking/{bookingId}/attendance-status": {
      "post": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get Nomis attendance status",
        "description": "Returns the current event status of a Nomis attendance record. Requires role NOMIS_ACTIVITIES",
        "operationId": "getAttendanceStatus",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Course activity id"
            }
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Booking id"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GetAttendanceStatusRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attendance status found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAttendanceStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The attendance record does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/{visitId}": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get visit",
        "description": "Retrieves a visit by id.",
        "operationId": "getVisit",
        "parameters": [
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis Visit Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Nomis Visit Id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Visit Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "visit does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/rooms/usage-count": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get future visit room usage by filter",
        "description": "Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included",
        "operationId": "getVisitRoomCountsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "visitTypes",
            "in": "query",
            "description": "Filter results by visitType (returns all types if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['SCON','OFFI']"
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or after the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or before the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "futureVisitsOnly",
            "in": "query",
            "description": "Filter results by restricting to future visit usage only",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of visit room and count is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VisitRoomCountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/ids": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get visits by filter",
        "description": "Retrieves a paged list of visits by filter",
        "operationId": "getVisitsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "visitTypes",
            "in": "query",
            "description": "Filter results by visitType (returns all types if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['SCON','OFFI']"
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or after the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or before the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of visit ids is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageVisitIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets the identifiers for all prisoners. Currently only active prisoners are supported",
        "description": "Requires role SYNCHRONISATION_REPORTING.",
        "operationId": "getPrisonerIdentifiers",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "Only return active prisoners currently in prison",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paged list of prisoner ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagePrisonerId"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/ids": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get incentives (a.k.a IEP) by filter",
        "description": "Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getIncentivesByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by incentives that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by incentives that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "latestOnly",
            "in": "query",
            "description": "if true only retrieve latest incentive for each prisoner",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageIncentiveIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get a prisoner's incentive level (a.k.a IEP) by id (bookingId and incentiveId)",
        "description": "Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS booking Id",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "incentiveSequence",
            "in": "path",
            "description": "NOMIS Incentive sequence ",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS Incentive sequence ",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "the incentive level details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/current": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get a prisoner's current incentive level (a.k.a IEP) for a booking",
        "description": "Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getCurrentIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS booking Id",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the incentive level details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{eventId}": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Get appointment by event id",
        "description": "Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS",
        "operationId": "getAppointmentById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Event Id",
              "example": 12345678
            },
            "example": 12345678
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Booking, location and timestamp combination does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/ids": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "get appointments by filter",
        "description": "Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_APPOINTMENTS.",
        "operationId": "getAppointmentsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2022-04-11"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAppointmentIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Get an appointment",
        "description": "Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS",
        "operationId": "getAppointment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "NOMIS booking Id",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Appointment room internal location Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Appointment room internal location Id",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "dateTime",
            "in": "path",
            "description": "Appointment date and start time",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Appointment date and start time",
              "example": "2023-02-27T14:40"
            },
            "example": "2023-02-27T14:40"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentRequest"
                }
              }
            }
          },
          "404": {
            "description": "Booking, location and timestamp combination does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjustments/ids": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get adjustment IDs (key date and Sentence adjustments) by filter",
        "description": "Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING.",
        "operationId": "getAdjustmentsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by adjustments that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by adjustments that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdjustmentIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "UpdateSentenceAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "RX",
            "enum": [
              "RSR",
              "UR",
              "S240A",
              "RST",
              "RX"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Sentence adjustment update request"
      },
      "UpdateVisitRequest": {
        "required": [
          "endTime",
          "openClosedStatus",
          "room",
          "startDateTime",
          "visitorPersonIds"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "HH:mm",
            "type": "string",
            "description": "Visit end time",
            "example": "14:30"
          },
          "visitorPersonIds": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "type": "integer",
              "description": "Visitors",
              "format": "int64"
            }
          },
          "room": {
            "type": "string",
            "description": "Name of the real world room where visit will take place"
          },
          "openClosedStatus": {
            "type": "string",
            "description": "Whether visit is restricted to a closed session",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Visit update request"
      },
      "CancelVisitRequest": {
        "required": [
          "outcome"
        ],
        "type": "object",
        "properties": {
          "outcome": {
            "type": "string",
            "description": "The cancellation reason",
            "enum": [
              "VISCANC",
              "OFFCANC",
              "ADMIN",
              "NSHOW"
            ]
          }
        },
        "description": "Visit cancellation"
      },
      "UpdateKeyDateAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentFromDate",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "ADA",
            "enum": [
              "LAL",
              "UAL",
              "RADA",
              "ADA",
              "SREM"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Key date adjustment update request"
      },
      "CreateIncentiveRequest": {
        "required": [
          "iepDateTime",
          "iepLevel",
          "prisonId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "iepLevel": {
            "type": "string",
            "description": "IEP Level",
            "example": "Standard"
          },
          "comments": {
            "type": "string",
            "description": "Review comments",
            "example": "A review took place"
          },
          "iepDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time when last review took place",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison ID",
            "example": "MDI"
          },
          "userId": {
            "type": "string",
            "description": "Username of the reviewer",
            "example": "AJONES"
          }
        },
        "description": "IEP creation request"
      },
      "ReferenceCode": {
        "required": [
          "active",
          "code",
          "description",
          "domain",
          "systemDataFlag"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          },
          "parentCode": {
            "type": "string"
          },
          "expiredDate": {
            "type": "string",
            "format": "date"
          },
          "systemDataFlag": {
            "type": "boolean"
          }
        }
      },
      "CreatePrisonIncentiveRequest": {
        "required": [
          "active",
          "defaultOnAdmission",
          "levelCode"
        ],
        "type": "object",
        "properties": {
          "levelCode": {
            "type": "string",
            "description": "Incentive Level code",
            "example": "STD"
          },
          "active": {
            "type": "boolean",
            "description": "active status of the Global Incentive Level",
            "example": true
          },
          "defaultOnAdmission": {
            "type": "boolean",
            "description": "default on admission",
            "example": true
          },
          "visitOrderAllowance": {
            "type": "integer",
            "description": "The number of weekday visits for a convicted prisoner per fortnight",
            "format": "int32",
            "example": 5500
          },
          "privilegedVisitOrderAllowance": {
            "type": "integer",
            "description": "The number of privileged/weekend visits for a convicted prisoner per 4 weeks",
            "format": "int32",
            "example": 5500
          },
          "remandTransferLimitInPence": {
            "type": "integer",
            "description": "The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use",
            "format": "int32",
            "example": 5500
          },
          "remandSpendLimitInPence": {
            "type": "integer",
            "description": "The maximum amount allowed in the spends account for a remand prisoner",
            "format": "int32",
            "example": 5500
          },
          "convictedTransferLimitInPence": {
            "type": "integer",
            "description": "The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use",
            "format": "int32",
            "example": 5500
          },
          "convictedSpendLimitInPence": {
            "type": "integer",
            "description": "The maximum amount allowed in the spends account for a convicted prisoner",
            "format": "int32",
            "example": 5500
          }
        },
        "description": "Prison Incentive level data create request"
      },
      "PrisonIncentiveLevelDataResponse": {
        "required": [
          "active",
          "defaultOnAdmission",
          "iepLevelCode",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string"
          },
          "iepLevelCode": {
            "type": "string"
          },
          "visitOrderAllowance": {
            "type": "integer",
            "format": "int32"
          },
          "privilegedVisitOrderAllowance": {
            "type": "integer",
            "format": "int32"
          },
          "defaultOnAdmission": {
            "type": "boolean"
          },
          "remandTransferLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "remandSpendLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "convictedTransferLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "convictedSpendLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          },
          "expiryDate": {
            "type": "string",
            "format": "date"
          },
          "visitAllowanceActive": {
            "type": "boolean"
          },
          "visitAllowanceExpiryDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Incentive information"
      },
      "CreateAppointmentRequest": {
        "required": [
          "bookingId",
          "endTime",
          "eventDate",
          "eventSubType",
          "internalLocationId",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id of the prisoner",
            "format": "int64",
            "example": 1234567
          },
          "eventDate": {
            "type": "string",
            "description": "Appointment date",
            "format": "date",
            "example": "2022-08-12"
          },
          "startTime": {
            "type": "string",
            "description": "Appointment start time",
            "format": "partial-time",
            "example": "09:45"
          },
          "endTime": {
            "type": "string",
            "description": "Activity end time",
            "format": "partial-time",
            "example": "15:20"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the appointment is to occur (in cell if null)",
            "format": "int64",
            "example": 112233
          },
          "eventSubType": {
            "type": "string",
            "description": "Appointment event sub-type",
            "example": "MEOT"
          }
        },
        "description": "Offender individual schedule creation request"
      },
      "CourseScheduleRequest": {
        "required": [
          "cancelled",
          "date",
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "The date of the course schedule",
            "format": "date",
            "example": "2023-04-03"
          },
          "startTime": {
            "type": "string",
            "description": "The time of the course schedule",
            "format": "partial-time",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time the course schedule ends",
            "format": "partial-time",
            "example": "11:00"
          },
          "cancelled": {
            "type": "boolean",
            "description": "Whether the course schedule has been cancelled",
            "example": true
          }
        },
        "description": "Course schedule request"
      },
      "PayRateRequest": {
        "required": [
          "incentiveLevel",
          "payBand",
          "rate"
        ],
        "type": "object",
        "properties": {
          "incentiveLevel": {
            "type": "string",
            "description": "The incentive level",
            "example": "BAS"
          },
          "payBand": {
            "type": "string",
            "description": "The pay band (1 TO 10)",
            "example": "4"
          },
          "rate": {
            "type": "number",
            "description": "The half day rate",
            "example": 0.5
          }
        },
        "description": "Course activity creation request pay rates"
      },
      "ScheduleRuleRequest": {
        "required": [
          "endTime",
          "friday",
          "monday",
          "saturday",
          "startTime",
          "sunday",
          "thursday",
          "tuesday",
          "wednesday"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Schedule start time in 24 hour clock",
            "format": "partial-time",
            "example": "08:00"
          },
          "endTime": {
            "type": "string",
            "description": "Schedule end time in 24 hour clock",
            "format": "partial-time",
            "example": "11:00"
          },
          "monday": {
            "type": "boolean",
            "description": "Scheduled on Monday",
            "example": true
          },
          "tuesday": {
            "type": "boolean",
            "description": "Scheduled on Tuesday",
            "example": true
          },
          "wednesday": {
            "type": "boolean",
            "description": "Scheduled on Wednesday",
            "example": true
          },
          "thursday": {
            "type": "boolean",
            "description": "Scheduled on Thursday",
            "example": true
          },
          "friday": {
            "type": "boolean",
            "description": "Scheduled on Friday",
            "example": true
          },
          "saturday": {
            "type": "boolean",
            "description": "Scheduled on Saturday",
            "example": false
          },
          "sunday": {
            "type": "boolean",
            "description": "Scheduled on Sunday",
            "example": false
          }
        },
        "description": "Course activity creation request schedule rules"
      },
      "UpdateActivityRequest": {
        "required": [
          "capacity",
          "description",
          "excludeBankHolidays",
          "minimumIncentiveLevelCode",
          "payPerSession",
          "payRates",
          "programCode",
          "scheduleRules",
          "schedules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the activity is to occur (from activity schedule)",
            "format": "int64"
          },
          "capacity": {
            "maximum": 999,
            "type": "integer",
            "description": "Capacity of activity (from activity schedule)",
            "format": "int32"
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates",
            "items": {
              "$ref": "#/components/schemas/PayRateRequest"
            }
          },
          "description": {
            "type": "string",
            "description": "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode": {
            "type": "string",
            "description": "Minimum Incentive Level"
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H",
            "enum": [
              "F",
              "H"
            ]
          },
          "scheduleRules": {
            "type": "array",
            "description": "Schedule rules",
            "items": {
              "$ref": "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Exclude bank holidays?"
          },
          "programCode": {
            "type": "string",
            "description": "Program Service code (from activity category)"
          },
          "schedules": {
            "type": "array",
            "description": "Schedules",
            "items": {
              "$ref": "#/components/schemas/CourseScheduleRequest"
            }
          }
        },
        "description": "Course activity update request"
      },
      "UpdateCourseScheduleResponse": {
        "required": [
          "courseScheduleId"
        ],
        "type": "object",
        "properties": {
          "courseScheduleId": {
            "type": "integer",
            "description": "The id of the course schedule",
            "format": "int64",
            "example": 123456
          }
        },
        "description": "Course schedule update update response"
      },
      "UpsertAllocationRequest": {
        "required": [
          "bookingId",
          "payBandCode",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id of the prisoner",
            "format": "int64",
            "example": 1234567
          },
          "payBandCode": {
            "type": "string",
            "description": "The prisoner's pay band",
            "example": "2"
          },
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endReason": {
            "type": "string",
            "description": "Activity end reason (from domain PS_END_RSN)",
            "example": "REL"
          },
          "endComment": {
            "type": "string",
            "description": "Activity end comment"
          },
          "suspended": {
            "type": "boolean",
            "description": "Offender is suspended from Activity?"
          },
          "suspendedComment": {
            "type": "string",
            "description": "Activity suspended comment"
          }
        },
        "description": "Course activity create or update allocation request"
      },
      "UpsertAllocationResponse": {
        "required": [
          "created",
          "offenderProgramReferenceId"
        ],
        "type": "object",
        "properties": {
          "offenderProgramReferenceId": {
            "type": "integer",
            "description": "The created OffenderProgramProfile id",
            "format": "int64",
            "example": 12345678
          },
          "created": {
            "type": "boolean",
            "description": "Whether or not the allocation was created"
          }
        },
        "description": "OffenderProgramProfile create/update response"
      },
      "CreateVisitRequest": {
        "required": [
          "endTime",
          "issueDate",
          "openClosedStatus",
          "prisonId",
          "room",
          "startDateTime",
          "visitComment",
          "visitOrderComment",
          "visitType",
          "visitorPersonIds"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "HH:mm",
            "type": "string",
            "description": "Visit end time",
            "example": "14:30"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the visit is to occur"
          },
          "visitorPersonIds": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "type": "integer",
              "description": "Visitors",
              "format": "int64"
            }
          },
          "visitType": {
            "type": "string",
            "description": "Visit type, whether social or official",
            "enum": [
              "SCON",
              "OFFI"
            ]
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date",
            "format": "date"
          },
          "visitComment": {
            "type": "string",
            "description": "Comment to be added to visit"
          },
          "visitOrderComment": {
            "type": "string",
            "description": "Comment to be added to visit order (if one is created)"
          },
          "room": {
            "type": "string",
            "description": "Name of the real world room where visit will take place"
          },
          "openClosedStatus": {
            "type": "string",
            "description": "Whether visit is restricted to a closed session",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Visit creation request"
      },
      "CreateVisitResponse": {
        "required": [
          "visitId"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The created Nomis visit id",
            "format": "int64"
          }
        },
        "description": "Visit creation response"
      },
      "CreateSentenceAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "RX",
            "enum": [
              "RSR",
              "UR",
              "S240A",
              "RST",
              "RX"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Sentence adjustment create request"
      },
      "CreateAdjustmentResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Create adjustment response"
      },
      "CreateIncentiveResponse": {
        "required": [
          "bookingId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The created Nomis booking and sequence",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Incentive creation response"
      },
      "CreateKeyDateAdjustmentRequest": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentFromDate",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "ADA",
            "enum": [
              "LAL",
              "UAL",
              "RADA",
              "ADA",
              "SREM"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Key date adjustment create request"
      },
      "ReorderRequest": {
        "required": [
          "codeList"
        ],
        "type": "object",
        "properties": {
          "codeList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateActivityRequest": {
        "required": [
          "capacity",
          "code",
          "description",
          "excludeBankHolidays",
          "minimumIncentiveLevelCode",
          "payPerSession",
          "payRates",
          "prisonId",
          "programCode",
          "scheduleRules",
          "schedules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code generated from the activity and schedule ids and mapped"
          },
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the activity is to occur"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the activity is to occur (from activity schedule)",
            "format": "int64"
          },
          "capacity": {
            "maximum": 999,
            "type": "integer",
            "description": "Capacity of activity (from activity schedule)",
            "format": "int32"
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates",
            "items": {
              "$ref": "#/components/schemas/PayRateRequest"
            }
          },
          "description": {
            "type": "string",
            "description": "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode": {
            "type": "string",
            "description": "Minimum Incentive Level"
          },
          "programCode": {
            "type": "string",
            "description": "Program Service code (from activity category)"
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H",
            "enum": [
              "F",
              "H"
            ]
          },
          "schedules": {
            "type": "array",
            "description": "Schedules",
            "items": {
              "$ref": "#/components/schemas/CourseScheduleRequest"
            }
          },
          "scheduleRules": {
            "type": "array",
            "description": "Schedule rules",
            "items": {
              "$ref": "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Exclude bank holidays?"
          }
        },
        "description": "Course activity creation request"
      },
      "CreateActivityResponse": {
        "required": [
          "courseActivityId"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "The created course activity id",
            "format": "int64"
          }
        },
        "description": "Activity creation response"
      },
      "UpsertAttendanceRequest": {
        "required": [
          "authorisedAbsence",
          "endTime",
          "eventStatusCode",
          "paid",
          "scheduleDate",
          "startTime",
          "unexcusedAbsence"
        ],
        "type": "object",
        "properties": {
          "scheduleDate": {
            "type": "string",
            "description": "The date of the course schedule",
            "format": "date",
            "example": "2023-04-03"
          },
          "startTime": {
            "type": "string",
            "description": "The time of the course schedule",
            "format": "partial-time",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time the course schedule ends",
            "format": "partial-time",
            "example": "11:00"
          },
          "eventStatusCode": {
            "type": "string",
            "description": "The status of the attendance",
            "example": "SCH"
          },
          "eventOutcomeCode": {
            "type": "string",
            "description": "The outcome code for a completed attendance",
            "example": "ATT"
          },
          "comments": {
            "type": "string",
            "description": "Comments relating to the attendance",
            "example": "Disruptive"
          },
          "unexcusedAbsence": {
            "type": "boolean",
            "description": "Whether the absence is excused",
            "example": true,
            "default": false
          },
          "authorisedAbsence": {
            "type": "boolean",
            "description": "Whether the absence is authorised",
            "example": true,
            "default": false
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the attendance is to be paid",
            "example": true,
            "default": false
          },
          "bonusPay": {
            "type": "number",
            "description": "Any bonus pay for the attendance",
            "example": 1.5
          }
        },
        "description": "Course activity create/update request"
      },
      "UpsertAttendanceResponse": {
        "required": [
          "courseScheduleId",
          "created",
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The attendance event id",
            "format": "int64"
          },
          "courseScheduleId": {
            "type": "integer",
            "description": "The course schedule id for the attendance",
            "format": "int64"
          },
          "created": {
            "type": "boolean",
            "description": "Whether or the attendance was created"
          }
        },
        "description": "Attendance create/update response"
      },
      "GetAttendanceStatusRequest": {
        "required": [
          "endTime",
          "scheduleDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "scheduleDate": {
            "type": "string",
            "description": "The date of the course schedule",
            "format": "date",
            "example": "2023-04-03"
          },
          "startTime": {
            "type": "string",
            "description": "The time of the course schedule",
            "format": "partial-time",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time the course schedule ends",
            "format": "partial-time",
            "example": "11:00"
          }
        },
        "description": "Get attendance status request"
      },
      "GetAttendanceStatusResponse": {
        "required": [
          "eventStatus"
        ],
        "type": "object",
        "properties": {
          "eventStatus": {
            "type": "string",
            "description": "The event status for the attendance"
          }
        },
        "description": "Attendance status response"
      },
      "CodeDescription": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "description": "NOMIS room"
      },
      "LeadVisitor": {
        "required": [
          "fullName",
          "personId",
          "telephones"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "visitor NOMIS person Id",
            "format": "int64"
          },
          "fullName": {
            "type": "string",
            "description": "full name of visitor"
          },
          "telephones": {
            "type": "array",
            "description": "Ordered list of telephone numbers for contact with latest first",
            "items": {
              "type": "string",
              "description": "Ordered list of telephone numbers for contact with latest first"
            }
          }
        },
        "description": "the lead visitor"
      },
      "VisitResponse": {
        "required": [
          "agencyInternalLocation",
          "createUserId",
          "endDateTime",
          "offenderNo",
          "prisonId",
          "startDateTime",
          "visitId",
          "visitOutcome",
          "visitStatus",
          "visitType",
          "visitors",
          "whenCreated"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The visit id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit end date and time",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the visit is to occur"
          },
          "visitors": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "$ref": "#/components/schemas/Visitor"
            }
          },
          "leadVisitor": {
            "$ref": "#/components/schemas/LeadVisitor"
          },
          "visitType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "visitStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "visitOutcome": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "agencyInternalLocation": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "commentText": {
            "type": "string",
            "description": "Visit comments"
          },
          "visitorConcernText": {
            "type": "string",
            "description": "Visitor concerns text"
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of creation",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of last update",
            "example": "2021-07-05T10:35:17"
          },
          "createUserId": {
            "type": "string",
            "description": "User id for visit creation"
          },
          "modifyUserId": {
            "type": "string",
            "description": "User id for last visit update"
          }
        },
        "description": "Visit information"
      },
      "Visitor": {
        "required": [
          "leadVisitor",
          "personId"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "visitor NOMIS person Id",
            "format": "int64"
          },
          "leadVisitor": {
            "type": "boolean",
            "description": "Indicates lead visitor for the visit"
          }
        },
        "description": "Visitors"
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VisitRoomCountResponse": {
        "required": [
          "agencyInternalLocationDescription",
          "count",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "agencyInternalLocationDescription": {
            "type": "string",
            "description": "The internal location description"
          },
          "count": {
            "type": "integer",
            "description": "The room usage count",
            "format": "int64"
          },
          "prisonId": {
            "type": "string",
            "description": "The prison id"
          }
        },
        "description": "Visit id"
      },
      "PageVisitIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          }
        }
      },
      "VisitIdResponse": {
        "required": [
          "visitId"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The visit id",
            "format": "int64"
          }
        },
        "description": "Visit id"
      },
      "SentenceAdjustmentResponse": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentType",
          "bookingId",
          "hiddenFromUsers",
          "id",
          "offenderNo",
          "sentenceSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The sentence adjustment id",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "sentenceSequence": {
            "type": "integer",
            "description": "The sequence of the sentence within this booking",
            "format": "int64"
          },
          "adjustmentType": {
            "$ref": "#/components/schemas/SentencingAdjustmentType"
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentToDate": {
            "type": "string",
            "description": "End of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied"
          },
          "hiddenFromUsers": {
            "type": "boolean",
            "description": "Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment"
          }
        },
        "description": "Sentence adjustment"
      },
      "SentencingAdjustmentType": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "code",
            "example": "RX"
          },
          "description": {
            "type": "string",
            "description": "description",
            "example": "Remand"
          }
        },
        "description": "Adjustment type"
      },
      "PagePrisonerId": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerId"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PrisonerId": {
        "required": [
          "bookingId",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string"
          }
        }
      },
      "KeyDateAdjustmentResponse": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentType",
          "bookingId",
          "id",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The key date adjustment id",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "adjustmentType": {
            "$ref": "#/components/schemas/SentencingAdjustmentType"
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentToDate": {
            "type": "string",
            "description": "End of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied"
          }
        },
        "description": "Key date adjustment"
      },
      "IncentiveIdResponse": {
        "required": [
          "bookingId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence of the incentive within this booking",
            "format": "int64"
          }
        },
        "description": "Incentive id"
      },
      "PageIncentiveIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncentiveIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "IncentiveResponse": {
        "required": [
          "auditModule",
          "bookingId",
          "currentIep",
          "iepDateTime",
          "iepLevel",
          "incentiveSequence",
          "offenderNo",
          "prisonId",
          "whenCreated"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "incentiveSequence": {
            "type": "integer",
            "description": "The sequence of the incentive within this booking",
            "format": "int64"
          },
          "commentText": {
            "type": "string",
            "description": "Comment for Incentive level"
          },
          "iepDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time of Incentive level creation",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the Incentive level was created"
          },
          "iepLevel": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "userId": {
            "type": "string",
            "description": "User id of user creating prisoner incentive level"
          },
          "currentIep": {
            "type": "boolean",
            "description": "Is this IEP the current IEP for the booking?"
          },
          "auditModule": {
            "type": "string",
            "description": "The NOMIS module that created this IEP",
            "enum": [
              "OCUWARNG",
              "PRISON_API",
              "OIDADMIS",
              "MERGE",
              "OIDOIEPS",
              "OIDITRAN",
              "OSIOSEAR"
            ]
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of creation",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of last update",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Incentive information"
      },
      "AppointmentIdResponse": {
        "required": [
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The event id",
            "format": "int64"
          }
        },
        "description": "Event id"
      },
      "PageAppointmentIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AdjustmentIdResponse": {
        "required": [
          "adjustmentCategory",
          "adjustmentId"
        ],
        "type": "object",
        "properties": {
          "adjustmentId": {
            "type": "integer",
            "description": "The adjustment id",
            "format": "int64"
          },
          "adjustmentCategory": {
            "type": "string",
            "description": "SENTENCE or KEY_DATE"
          }
        },
        "description": "Adjustment id"
      },
      "PageAdjustmentIdResponse": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdjustmentIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
