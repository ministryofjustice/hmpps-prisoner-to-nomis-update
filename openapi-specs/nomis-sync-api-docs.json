{
  "openapi": "3.0.1",
  "info": {
    "title": "NOMIS Synchronisation API",
    "description": "Controls writing Prisoner information back to NOMIS for data synchronisation (not intended for general usage)",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2024-12-04.10160.f63e00b"
  },
  "servers": [
    {
      "url": "https://nomis-prisoner-api-dev.prison.service.justice.gov.uk",
      "description": "Development"
    },
    {
      "url": "https://nomis-prisoner-api-preprod.prison.service.justice.gov.uk",
      "description": "PreProd"
    },
    {
      "url": "https://nomis-prisoner-api.prison.service.justice.gov.uk",
      "description": "Prod"
    },
    {
      "url": "http://localhost:8080",
      "description": "Local"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/sentence-adjustments/{adjustmentId}": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get specific sentence adjustment",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a sentence adjustment by id",
        "operationId": "getSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sentence adjustment id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the sentence adjustment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceAdjustmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Updates specific sentence adjustment. The related booking and sentence can not be changed",
        "description": "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId": "updateSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sentence adjustment id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateSentenceAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the sentence adjustment has been updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "deletes specific sentence adjustment",
        "description": "Requires role NOMIS_SENTENCING. Deletes a sentence adjustment by id",
        "operationId": "deleteSentenceAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Sentence adjustment id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sentence adjustment id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "the sentence adjustment has been deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{courseScheduleId}/booking/{bookingId}/attendance": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates or updates an attendance record",
        "description": "Creates or updates an attendance for the course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId": "upsertAttendance",
        "parameters": [
          {
            "name": "courseScheduleId",
            "in": "path",
            "description": "Course schedule id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Course schedule id",
              "format": "int64"
            }
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking id",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAttendanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Attendance updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertAttendanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Deletes an attendance record",
        "description": "Deletes an attendance for the course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId": "deleteAttendance",
        "parameters": [
          {
            "name": "courseScheduleId",
            "in": "path",
            "description": "Course schedule id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Course schedule id",
              "format": "int64"
            }
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attendance deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}": {
      "put": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Updates an existing visit",
        "description": "Updates details of an existing visit such as the visitors and time slot",
        "operationId": "updateVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis visit Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis visit Id",
              "format": "int64",
              "example": 123456
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Visit information updated"
          },
          "400": {
            "description": "Person ids do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "offenderNo or visits id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits/{visitId}/cancel": {
      "put": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Cancel a visit",
        "operationId": "cancelVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis Visit Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis Visit Id",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Visit cancelled"
          },
          "400": {
            "description": "Invalid cancellation reason",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "VSIP visit id not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances/{eventId}": {
      "put": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Updates Court Appearance",
        "description": "Required role NOMIS_SENTENCING Updates a new Court Appearance for the offender,latest booking and given Court Case",
        "operationId": "updateCourtAppearance",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender no",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender no",
              "example": "AB1234A"
            },
            "example": "AB1234A"
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Case Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Case Id",
              "format": "int64",
              "example": 34565
            },
            "example": 34565
          },
          {
            "name": "eventId",
            "in": "path",
            "description": "Case appearance Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Case appearance Id",
              "format": "int64",
              "example": 34565
            },
            "example": 34565
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourtAppearanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Court Appearance updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCourtAppearanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Court appearance does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances/{courtEventId}/charges/{chargeId}": {
      "put": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Updates Charge",
        "description": "Required role NOMIS_SENTENCING Updates a Court Event Charge for the offender and given Appearance and Court Case (latest booking)",
        "operationId": "updateCharge",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender no",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender no",
              "example": "AB1234A"
            },
            "example": "AB1234A"
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Case Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Case Id",
              "format": "int64",
              "example": 34565
            },
            "example": 34565
          },
          {
            "name": "chargeId",
            "in": "path",
            "description": "Charge Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Charge Id",
              "format": "int64",
              "example": 34565
            },
            "example": 34565
          },
          {
            "name": "courtEventId",
            "in": "path",
            "description": "Court event Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Court event Id",
              "format": "int64",
              "example": 34565
            },
            "example": 34565
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourtAppearanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Offender Charge updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Court case does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/profile-details": {
      "get": {
        "tags": [
          "profile-details-resource"
        ],
        "summary": "Get profile details for a prisoner",
        "description": "Retrieves profile details for a prisoner and all of their aliases and bookings. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "getProfileDetails",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Profile Details Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerProfileDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "profile-details-resource"
        ],
        "summary": "Upsert profile details for a prisoner",
        "description": "Upserts profile details on the latest booking for a prisoner, if it exists. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "upsertPhysicalAttributes",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertProfileDetailsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Physical Attributes Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertProfileDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist or has no bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/physical-attributes": {
      "get": {
        "tags": [
          "physical-attributes-resource"
        ],
        "summary": "Get physical attributes for a prisoner",
        "description": "Retrieves physical attributes for a prisoner and all of their aliases and bookings. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "getPhysicalAttributes",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Physical Attributes Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerPhysicalAttributesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "physical-attributes-resource"
        ],
        "summary": "Upsert physical attributes for a prisoner",
        "description": "Upserts physical attributes on the latest booking for a prisoner, if it exists. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "upsertPhysicalAttributes_1",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertPhysicalAttributesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Physical Attributes Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertPhysicalAttributesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist or has no bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentencing/sentence-sequence/{sequence}": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get sentences for an offender using the given booking id and sentence sequence",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId": "getOffenderSentence",
        "parameters": [
          {
            "name": "sequence",
            "in": "path",
            "description": "Sentence sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sentence sequence",
              "format": "int64",
              "example": 1
            },
            "example": 1
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Offender Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Offender Booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the sentence details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentenceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Updates Sentence",
        "description": "Required role NOMIS_SENTENCING Updates a Sentence for the offender and latest booking",
        "operationId": "updateSentence",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking Id",
              "format": "int64",
              "example": 4565456
            },
            "example": 4565456
          },
          {
            "name": "sequence",
            "in": "path",
            "description": "Sentence sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sentence sequence",
              "format": "int64",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSentenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Sentence updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Sentence does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "deletes a specific sentence",
        "description": "Requires role NOMIS_SENTENCING. Deletes a sentence by booking and sentence sequence",
        "operationId": "deleteSentence",
        "parameters": [
          {
            "name": "sequence",
            "in": "path",
            "description": "Sentence sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sentence sequence",
              "format": "int64",
              "example": 1
            },
            "example": 1
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Offender Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Offender Booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "the sentence has been deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/alerts/{alertSequence}": {
      "get": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "get an alert by bookingId and alert sequence",
        "description": "Retrieves an prisoner alert. Requires ROLE_NOMIS_ALERTS",
        "operationId": "getAlert",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "alertSequence",
            "in": "path",
            "description": "Alert sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Alert sequence",
              "format": "int64",
              "example": 3
            },
            "example": 3
          }
        ],
        "responses": {
          "200": {
            "description": "Alert Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Updates an alert on a prisoner",
        "description": "Updates an alert on the specified prisoner's booking which should be the latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId": "updateAlert",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "alertSequence",
            "in": "path",
            "description": "Alert sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Alert sequence",
              "format": "int64",
              "example": 3
            },
            "example": 3
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Alert Updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Deletes an alert by bookingId and alert sequence",
        "description": "Deletes an prisoner alert. Requires ROLE_NOMIS_ALERTS",
        "operationId": "deleteAlert",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "alertSequence",
            "in": "path",
            "description": "Alert sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Alert sequence",
              "format": "int64",
              "example": 3
            },
            "example": 3
          }
        ],
        "responses": {
          "204": {
            "description": "Alert Deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}": {
      "put": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Updates an existing non-association",
        "description": "Updates an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "updateNonAssociation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A4578ED"
          },
          {
            "name": "typeSequence",
            "in": "path",
            "description": "Sequence number. Amend this specific detail record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully amended non-association"
          },
          "404": {
            "description": "Non-association does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as reason or type do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Deletes a non-association",
        "description": "Deletes the specified non-association detail record. if there was only one, the parent NA record is deleted too. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "deleteNonAssociation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A4578ED"
          },
          {
            "name": "typeSequence",
            "in": "path",
            "description": "Sequence number. Close this specific detail record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Non-association does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/sequence/{typeSequence}/close": {
      "put": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Closes an existing non-association",
        "description": "Closes an existing non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "closeNonAssociation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A4578ED"
          },
          {
            "name": "typeSequence",
            "in": "path",
            "description": "Sequence number. Close this specific detail record",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Non-association does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Non-association is already closed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}": {
      "put": {
        "tags": [
          "location-resource"
        ],
        "summary": "Updates an existing location",
        "description": "Updates an existing location. Requires role NOMIS_LOCATIONS",
        "operationId": "updateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "NOMIS location Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS location Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Location id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as location or subtype do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/reactivate": {
      "put": {
        "tags": [
          "location-resource"
        ],
        "summary": "Reactivates a deactivated location",
        "description": "Requires role NOMIS_LOCATIONS",
        "operationId": "reactivateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "NOMIS location Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS location Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Location id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Location was already active",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/deactivate": {
      "put": {
        "tags": [
          "location-resource"
        ],
        "summary": "Deactivates an existing location",
        "description": "Requires role NOMIS_LOCATIONS",
        "operationId": "deactivateLocation",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "NOMIS location Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS location Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeactivateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Location id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Reason code does not exist, or already deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/certification": {
      "put": {
        "tags": [
          "location-resource"
        ],
        "summary": "Update location certification",
        "description": "Requires role NOMIS_LOCATIONS",
        "operationId": "updateCertification",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "NOMIS location Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS location Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCertificationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Location id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{locationId}/capacity": {
      "put": {
        "tags": [
          "location-resource"
        ],
        "summary": "Update location capacity",
        "description": "Requires role NOMIS_LOCATIONS",
        "operationId": "updateCapacity",
        "parameters": [
          {
            "name": "locationId",
            "in": "path",
            "description": "NOMIS location Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS location Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "ignoreOperationalCapacity",
            "in": "query",
            "description": "If true leave the operational capacity unchanged",
            "required": false,
            "schema": {
              "type": "boolean",
              "description": "If true leave the operational capacity unchanged"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCapacityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Location id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/key-date-adjustments/{adjustmentId}": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get specific key date adjustment",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a key date adjustment by id",
        "operationId": "getKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Key date adjustment id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the key date adjustment details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/KeyDateAdjustmentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Updates specific key date adjustment. The related booking can not be changed",
        "description": "Requires role NOMIS_SENTENCING. Updates a sentence adjustment by id",
        "operationId": "updateKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Key date adjustment id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateKeyDateAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "the key date adjustment has been updated"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjustment not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "deletes specific key date adjustment",
        "description": "Requires role NOMIS_SENTENCING. Deletes a key date adjustment by id",
        "operationId": "deleteKeyDateAdjustment",
        "parameters": [
          {
            "name": "adjustmentId",
            "in": "path",
            "description": "Key date adjustment id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Key date adjustment id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "the key date adjustment has been deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/{code}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Gets the global incentive level by code",
        "description": "Gets a global incentive level by provided code and domain of IEP_LEVEL",
        "operationId": "getGlobalIncentiveLevel",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Incentive reference code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive reference code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "responses": {
          "200": {
            "description": "return the Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Global Incentive Level does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Updates an existing global incentive level",
        "description": "Updates an existing global incentive level, updateable fields are description and active",
        "operationId": "updateGlobalIncentiveLevel",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "description": "Incentive reference code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive reference code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Global incentive level not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}/code/{code}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Gets the prison incentive level",
        "description": "Gets prison incentive level data by provided code and prison",
        "operationId": "getPrisonIncentiveLevel",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id",
              "example": "MDI"
            },
            "example": "MDI"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Incentive level code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive level code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "responses": {
          "200": {
            "description": "return the Prison Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison Incentive Level does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Prison Incentive level data",
        "description": "Creates incentive level data associated with a Prison",
        "operationId": "updatePrisonIncentiveLevelData",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison Id",
              "example": "MDI"
            },
            "example": "MDI"
          },
          {
            "name": "code",
            "in": "path",
            "description": "Incentive level code",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Incentive level code",
              "example": "STD"
            },
            "example": "STD"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Prison Incentive level data updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip": {
      "put": {
        "tags": [
          "csip-resource"
        ],
        "summary": "Creates or updates a csip",
        "description": "Creates or updates a csip report and its children. Requires ROLE_NOMIS_CSIP",
        "operationId": "upsertCSIP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertCSIPRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "CSIP Updated or created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertCSIPResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/casenotes/{caseNoteId}": {
      "get": {
        "tags": [
          "case-notes-resource"
        ],
        "summary": "get a case note by id",
        "description": "Retrieves a prisoner case note. Requires ROLE_NOMIS_CASENOTES",
        "operationId": "getCaseNote",
        "parameters": [
          {
            "name": "caseNoteId",
            "in": "path",
            "description": "Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Id",
              "format": "int64",
              "example": 1234578
            },
            "example": 1234578
          }
        ],
        "responses": {
          "200": {
            "description": "CaseNote Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CaseNoteResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "CaseNote does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "case-notes-resource"
        ],
        "summary": "Updates a case note on a prisoner",
        "description": "Updates the specified case note. Requires ROLE_NOMIS_CASENOTES",
        "operationId": "updateCaseNote",
        "parameters": [
          {
            "name": "caseNoteId",
            "in": "path",
            "description": "Case note id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Case note id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCaseNoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "CaseNote Updated"
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "CaseNote does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "case-notes-resource"
        ],
        "summary": "Deletes a case note",
        "description": "Deletes the specified case note. Requires ROLE_NOMIS_CASENOTES",
        "operationId": "deleteCaseNote",
        "parameters": [
          {
            "name": "caseNoteId",
            "in": "path",
            "description": "Case note id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Case note id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "201": {
            "description": "CaseNote Deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "CaseNote does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "No Content"
          }
        }
      }
    },
    "/appointments/{nomisEventId}": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Updates an existing appointment",
        "description": "Updates an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "updateAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS event Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as location or subtype do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Deletes an existing appointment",
        "description": "Deletes an existing appointment by actually deleting from the table. Intended for appointments created in error. Requires role NOMIS_APPOINTMENTS",
        "operationId": "deleteAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS event Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "204": {
            "description": "Success"
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}/uncancel": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Undoes an appointment cancellation",
        "description": "Undoes an appointment cancellation. Requires role NOMIS_APPOINTMENTS",
        "operationId": "uncancelAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS event Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{nomisEventId}/cancel": {
      "put": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Cancels an existing appointment",
        "description": "Cancels an existing appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "cancelAppointment",
        "parameters": [
          {
            "name": "nomisEventId",
            "in": "path",
            "description": "NOMIS event Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS event Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Success"
          },
          "404": {
            "description": "Event id does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types/{code}": {
      "put": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Update an alert type",
        "description": "Updates an alert type in the NOMIS reference data, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId": "updateAlertType",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Alert type updated"
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert type does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types/{code}/reactivate": {
      "put": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Update an alert type to be active",
        "description": "Updates an alert type in the NOMIS reference data to be active, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId": "reactivateAlertType",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert code reactivated"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert code does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types/{code}/deactivate": {
      "put": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Update an alert type to be inactive",
        "description": "Updates an alert type in the NOMIS reference data to be inactive, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId": "deactivateAlertType",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert type deactivated"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert type does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes/{code}": {
      "put": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Update an alert code",
        "description": "Updates an alert code in the NOMIS reference data, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId": "updateAlertCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "Alert code updated"
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert code does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes/{code}/reactivate": {
      "put": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Update an alert code to be active",
        "description": "Updates an alert code in the NOMIS reference data to be active, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId": "reactivateAlertCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert code reactivated"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert code does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes/{code}/deactivate": {
      "put": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Update an alert code to be inactive",
        "description": "Updates an alert code in the NOMIS reference data to be inactive, specifically the description. Requires ROLE_NOMIS_ALERTS",
        "operationId": "deactivateAlertCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert code deactivated"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Alert code does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/repairs": {
      "put": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Updates repairs (aka damages) for a given adjudication",
        "description": "List of repairs are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "updateRepairs",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRepairsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Repairs updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateRepairsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}": {
      "put": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Updates a hearing",
        "description": "Updates a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "updateHearing",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "hearingId",
            "in": "path",
            "description": "Hearing Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Hearing Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHearingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated Hearing Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateHearingRequest"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Hearing does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Deletes a hearing",
        "description": "Deletes a hearing for a given adjudication and hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "deleteHearing",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "hearingId",
            "in": "path",
            "description": "Hearing Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Hearing Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Hearing deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/evidence": {
      "put": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Updates evidence for a given adjudication",
        "description": "List of evidence items are refreshed so this operation may result in any combinations of inserts, updates or deletes. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "updateEvidence",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEvidenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Evidence updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateEvidenceResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/unquash": {
      "put": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "updates adjudication charge outcome and awards to the requested state before a quash",
        "description": "The latest hearing result is set to back to the supplied value along with all awards associated with this charge. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "unquashHearingResultAndAwards",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UnquashHearingResultAwardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Hearing result award IDs created and awards deleted. These list should be empty unless there was a previous synchronisation issue that meant the NOMIS awards are not in the correct state",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateHearingResultAwardResponses"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/quash": {
      "put": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "updates adjudication charge outcome and awards to quashed",
        "description": "The latest hearing result is set to quashed along with all awards associated with this charge (that may be associated with other hearings). Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "quashHearingResultAndAwards",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Hearing result and awards quashed"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/awards": {
      "put": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "updates a batch of hearing result awards for a given adjudication",
        "description": "Creates a hearing result awards that have been added, updates those that have changed and deletes ones that are absent for the booking associated with the adjudication. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "updateCreateAndDeleteHearingResultAwards",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateHearingResultAwardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Hearing result award IDs created and awards deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateHearingResultAwardResponses"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "creates a hearing result award for a given adjudication",
        "description": "Creates a hearing result award. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "createHearingResultAward",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHearingResultAwardRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Hearing result award IDs created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateHearingResultAwardResponses"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Deletes hearing result awards for a given adjudication and charge sequence",
        "description": "Deletes hearing result awards for a given adjudication and charge sequence. Returns list of deleted award keys. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "deleteHearingResultAwards",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Hearing result awards deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteHearingResultAwardResponses"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Charge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get activity details",
        "description": "Gets activity details including schedule rules and pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "getActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Course activity id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Updates an activity",
        "description": "Updates an activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "updateActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Course activity id",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Activity information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison, location, program service or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Activity Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Delete a NOMIS course activity",
        "description": "Deletes a course activity and its children - pay rates, schedules, allocations and attendances. Intended to be used for data fixes. Requires role NOMIS_ACTIVITIES",
        "operationId": "deleteActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Activity is deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/schedule": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Updates a course schedule",
        "description": "Updates a course schedule. Requires role NOMIS_ACTIVITIES",
        "operationId": "updateCourseSchedule",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Course activity id",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourseScheduleRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateCourseScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The course schedule does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/end": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "End a course activity",
        "description": "Ends a course activity and all active attendances with end date today. Requires role NOMIS_ACTIVITIES",
        "operationId": "endActivity",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Course activity id",
              "format": "int64"
            }
          },
          {
            "name": "endComment",
            "in": "query",
            "description": "End comment",
            "required": false,
            "schema": {
              "type": "string",
              "description": "End comment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity ended"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{courseActivityId}/allocation": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates or Updates a prisoner's allocation to an activity",
        "description": "Creates or updates a prisoner's allocation to an activity. Requires role NOMIS_ACTIVITIES",
        "operationId": "upsertAllocation",
        "parameters": [
          {
            "name": "courseActivityId",
            "in": "path",
            "description": "Course activity id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Course activity id",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpsertAllocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpsertAllocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "There was an error with the request, see the response for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/end": {
      "put": {
        "tags": [
          "activities-resource"
        ],
        "summary": "End multiple course activities",
        "description": "Ends course activities and all active allocations with end date today. Requires role NOMIS_ACTIVITIES",
        "operationId": "endActivities",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndActivitiesRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Activities ended"
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/service-prisons/{serviceCode}/prison/{prisonId}": {
      "get": {
        "tags": [
          "service-agency-switches-resource"
        ],
        "summary": "Check if a service is turned on for a prison",
        "description": "Check if a prison is turned on for a service. Requires role NOMIS_ACTIVITIES",
        "operationId": "checkServicePrison",
        "parameters": [
          {
            "name": "serviceCode",
            "in": "path",
            "description": "The code of the service from the EXTERNAL_SERVICES table",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the service from the EXTERNAL_SERVICES table",
              "example": "ACTIVITY"
            },
            "example": "ACTIVITY"
          },
          {
            "name": "prisonId",
            "in": "path",
            "description": "The id of the prison",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the prison",
              "example": "MDI"
            },
            "example": "MDI"
          }
        ],
        "responses": {
          "204": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role SYNCHRONISATION_REPORTING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found, the service is not turned on for the prison",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "service-agency-switches-resource"
        ],
        "summary": "Turn on a service for a prison",
        "description": "Turn on a service for a prison. Requires role NOMIS_ACTIVITIES",
        "operationId": "createServicePrison",
        "parameters": [
          {
            "name": "serviceCode",
            "in": "path",
            "description": "The code of the service from the EXTERNAL_SERVICES table",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the service from the EXTERNAL_SERVICES table",
              "example": "ACTIVITY"
            },
            "example": "ACTIVITY"
          },
          {
            "name": "prisonId",
            "in": "path",
            "description": "The id of the prison",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The id of the prison",
              "example": "MDI"
            },
            "example": "MDI"
          }
        ],
        "responses": {
          "201": {
            "description": "Created"
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role SYNCHRONISATION_REPORTING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found, the service or prison do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/visits": {
      "post": {
        "tags": [
          "visit-resource"
        ],
        "summary": "Creates a new visit",
        "description": "Creates a new visit and decrements the visit balance.",
        "operationId": "createVisit",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVisitRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Visit information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateVisitResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison or person ids do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "offenderNo does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "visit already exists exist. The moreInfo contains the NOMIS visitId for the existing visit",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing": {
      "post": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Creates a new Sentence",
        "description": "Required role NOMIS_SENTENCING Creates a new Sentence for the offender and latest booking",
        "operationId": "createSentence",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender number",
              "example": "AB1234K"
            },
            "example": "AB1234K"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSentenceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created Sentence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateSentenceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get court cases for an offender",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId": "getCourtCasesByOffender",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No",
              "example": "AA12345"
            },
            "example": "AA12345"
          }
        ],
        "responses": {
          "200": {
            "description": "the list of court cases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourtCaseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Creates a new Court Case",
        "description": "Required role NOMIS_SENTENCING Creates a new Court Case for the offender and latest booking",
        "operationId": "createCourtCase",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No",
              "example": "AK1234B"
            },
            "example": "AK1234B"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourtCaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created Court case",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCourtCaseResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/court-appearances": {
      "post": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Creates a new Court Appearance",
        "description": "Required role NOMIS_SENTENCING Creates a new Court Appearance for the offender,latest booking and given Court Case",
        "operationId": "createCourtAppearance",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender no",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender no",
              "example": "AB1234A"
            },
            "example": "AB1234A"
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Case Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Case Id",
              "format": "int64",
              "example": 34565
            },
            "example": 34565
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CourtAppearanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created Court Appearance",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCourtAppearanceResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Court case does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/charges": {
      "post": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Creates a new Offender Charge",
        "description": "Required role NOMIS_SENTENCING Creates a new Offender Charge for the offender and latest booking. Will not associate with a Court Event",
        "operationId": "createCourtCharge",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No",
              "example": "AK1234B"
            },
            "example": "AK1234B"
          },
          {
            "name": "caseId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCourtCaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created Charge",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderChargeIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{caseId}/case-identifiers": {
      "post": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "Refreshes the list of Case identifiers associated with the case",
        "description": "Required role NOMIS_SENTENCING Refreshes the list of Case identifiers associated with the case (identifier type CASE/INFO#)",
        "operationId": "refreshCaseIdentifiers",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender no",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender no",
              "example": "AB1234A"
            },
            "example": "AB1234A"
          },
          {
            "name": "caseId",
            "in": "path",
            "description": "Case Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Case Id",
              "format": "int64",
              "example": 34565
            },
            "example": 34565
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaseIdentifierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Case Identifiers Refreshed"
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Court case does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/casenotes": {
      "get": {
        "tags": [
          "case-notes-resource"
        ],
        "summary": "Gets all case notes for a prisoner",
        "description": "Retrieves all case notes for a specific prisoner, for migration or reconciliation. Requires ROLE_NOMIS_CASENOTES",
        "operationId": "getCaseNotesForPrisoner",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No AKA prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No AKA prisoner number",
              "example": "A3745XD"
            },
            "example": "A3745XD"
          }
        ],
        "responses": {
          "200": {
            "description": "Case notes Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerCaseNotesResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "case-notes-resource"
        ],
        "summary": "Creates a case note on a prisoner",
        "description": "Creates a case note on the prisoner's latest booking. Requires ROLE_NOMIS_CASENOTES",
        "operationId": "createCaseNote",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender no (aka prisoner number)",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender no (aka prisoner number)",
              "example": "A1234AK"
            },
            "example": "A1234AK"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateCaseNoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "CaseNote Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateCaseNoteResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CASENOTES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts": {
      "post": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Creates an alert on a prisoner",
        "description": "Creates an alert on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId": "createAlert",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender no (aka prisoner number)",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender no (aka prisoner number)",
              "example": "A1234AK"
            },
            "example": "A1234AK"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlertRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alert Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAlertResponse"
                }
              }
            }
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Active alert of this type already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts/resynchronise": {
      "post": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Replaces an alerts on a prisoner",
        "description": "Replaces all alerts on the prisoner's latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId": "resynchroniseAlerts",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender no (aka prisoner number)",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender no (aka prisoner number)",
              "example": "A1234AK"
            },
            "example": "A1234AK"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CreateAlertRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alerts replaces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CreateAlertResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/adjudications": {
      "post": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "creates an adjudication on the latest booking of a prisoner",
        "description": "Creates an adjudication. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "createAdjudication",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAdjudicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Adjudication Created Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Adjudication already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/bookings": {
      "post": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets prisoner details for a list of bookings",
        "description": "Requires role SYNCHRONISATION_REPORTING.",
        "operationId": "getPrisonerBookings",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "A list of prisoner details",
                "items": {
                  "type": "integer",
                  "description": "A list of prisoner details",
                  "format": "int64"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "list of prisoner details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentences/{sentenceSequence}/adjustments": {
      "post": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Creates a new sentence adjustment",
        "description": "Required role NOMIS_SENTENCING Creates a new sentence adjustment (aka Debit/Credit). Key dates will not be recalculated as a side effect of this operation",
        "operationId": "createSentenceAdjustment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "sentenceSequence",
            "in": "path",
            "description": "Sentence sequence number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Sentence sequence number",
              "format": "int64",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateSentenceAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created Sentence adjustment id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking or sentence sequence do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/incentives": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Creates a new incentive",
        "description": "Creates a new incentive using next sequence no.",
        "operationId": "createIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Offender Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Offender Booking Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Incentive information with created sequence",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateIncentiveResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/incentives/reorder": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Reorder a existing incentives to match time order",
        "description": "Reorder a series of IEPs so the sequence number matches the IEP date time. Latest time gets the higher sequence so the current IEP is the latest. This is required to correct DPS incentives that are created out of order",
        "operationId": "reorderCurrentIncentives",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Offender Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Offender Booking Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          }
        ],
        "responses": {
          "200": {
            "description": "Incentives successfully reordered"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Access this endpoint forbidden, incorrect role. Must have NOMIS_INCENTIVES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/adjustments": {
      "post": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "Creates a new key date adjustment",
        "description": "Required role NOMIS_SENTENCING Creates a new key date adjustment. Key dates will be recalculated as a side effect of this operation",
        "operationId": "createKeyDateAdjustment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateKeyDateAdjustmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created key date adjustment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAdjustmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Supplied data is invalid, for instance missing required fields or invalid values. See schema for details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons": {
      "post": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Creates a person",
        "description": "Creates a person, typically a person who will become a contact of a prisoners. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "createPerson",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person ID Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Person already exists with the same ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/phone": {
      "post": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Creates a person global phone",
        "description": "Creates a person global phone in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "createPersonPhone",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Person Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person Phone ID Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonPhoneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data, e.g type is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/identifier": {
      "post": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Creates a person identifier",
        "description": "Creates a person identifier in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "createPersonIdentifier",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Person Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonIdentifierRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person Identifier sequence returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonIdentifierResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data, e.g type is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/email": {
      "post": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Creates a person email",
        "description": "Creates a person email in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "createPersonEmail",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Person Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person Email ID aka InternetAddressId Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonEmailResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/contact": {
      "post": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Creates a person contact",
        "description": "Creates a person contact; the relationship between a prisoner and a person. Typically a prospective visitor. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "createPersonContact",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Person Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person Contact ID Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request contains bad for example prisoner does not exist or contact / relationship types do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Contact with the specified relationship and type already exists for this prisoner's latest booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/address": {
      "post": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Creates a person address",
        "description": "Creates a person address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "createPersonAddress",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Person Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person Address ID Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonAddressResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request contains bad for example type code does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}/address/{addressId}/phone": {
      "post": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Creates a person address phone",
        "description": "Creates a person phone associated with an address in NOMIS. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "createPersonAddressPhone",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Person Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "addressId",
            "in": "path",
            "description": "Address Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Address Id",
              "format": "int64",
              "example": 56789
            },
            "example": 56789
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePersonPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Person Phone ID Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreatePersonPhoneResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request data, e.g type is not valid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Person or address does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations": {
      "post": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Creates a new non-association",
        "description": "Creates a new non-association. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "createNonAssociation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNonAssociationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created non-association",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateNonAssociationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as booking or location do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations": {
      "post": {
        "tags": [
          "location-resource"
        ],
        "summary": "Creates a new location",
        "description": "Creates a new location. Requires role ROLE_NOMIS_LOCATIONS",
        "operationId": "createLocation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateLocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created location with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as prison or parent do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Creates a new global incentive level",
        "description": "Creates a new global incentive level",
        "operationId": "createGlobalIncentiveLevel",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Global Incentive level",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReferenceCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/reference-codes/reorder": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "reorders all global incentive levels",
        "description": "reorders all global incentive levels using provided list of Incentive codes, including inactive. 1-based index",
        "operationId": "reorderGlobalIncentiveLevels",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReorderRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Reorder successful"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/prison/{prison}": {
      "post": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "Prison Incentive level data",
        "description": "Creates incentive level data associated with a Prison",
        "operationId": "createPrisonIncentiveLevelData",
        "parameters": [
          {
            "name": "prison",
            "in": "path",
            "description": "Prison Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison Id",
              "example": "MDI"
            },
            "example": "MDI"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonIncentiveRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Prison Incentive level data created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonIncentiveLevelDataResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Creates a new appointment",
        "description": "Creates a new appointment. Requires role NOMIS_APPOINTMENTS",
        "operationId": "createAppointment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAppointmentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateAppointmentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data such as booking or location do not exist etc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/types": {
      "post": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Creates an alert type",
        "description": "Creates an alert type in the NOMIS reference data. Requires ROLE_NOMIS_ALERTS",
        "operationId": "createAlertType",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlertType"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alert type Created"
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Type already exits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/codes": {
      "post": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Creates an alert code",
        "description": "Creates an alert code in the NOMIS reference data. Requires ROLE_NOMIS_ALERTS",
        "operationId": "createAlertCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlertCode"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alert code Created"
          },
          "400": {
            "description": "One or more fields in the request contains invalid data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Code already exits",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/hearings": {
      "post": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "creates a hearing for a given adjudication",
        "description": "Creates a hearing for a given adjudication. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "createHearing",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHearingRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Hearing Created Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateHearingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/hearings/{hearingId}/charge/{chargeSequence}/result": {
      "post": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "creates or updates a hearing result for a given hearing and charge.",
        "description": "Creates a (or updates the existing) hearing result for a given hearing and charge. DPS only supports 1 result per hearing. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "upsertHearingResult",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "hearingId",
            "in": "path",
            "description": "Nomis Hearing Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis Hearing Id",
              "format": "int64",
              "example": 123
            },
            "example": 123
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHearingResultRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Hearing result created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateHearingResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Hearing does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Deletes a hearing result",
        "description": "Deletes a hearing result for a given adjudication and hearing Id. Returns list of any deleted award Ids to allow removal of award mappings in the sync service. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "deleteHearingResult",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "hearingId",
            "in": "path",
            "description": "Hearing Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Hearing Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Hearing result deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteHearingResultResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge/{chargeSequence}/result": {
      "post": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "creates or updates a result for a given charge. This requires a dummy hearing to be created",
        "description": "Creates or updates a result for a charge. DPS allows results to be created without hearings eg: Refer to Police. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "createResultWithDummyHearing",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateHearingResultRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Result created"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Deletes a result",
        "description": "Deletes a result for a given adjudication and charge sequence. The result will be associated with a dummy hearing used by DPS to record referrals. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "deleteResult",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "result deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "post": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Creates a new activity",
        "description": "Creates a new activity and associated pay rates. Requires role NOMIS_ACTIVITIES",
        "operationId": "createActivity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActivityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Activity information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CreateActivityResponse"
                }
              }
            }
          },
          "400": {
            "description": "Prison, location, program service or iep value do not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/{visitId}": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get visit",
        "description": "Retrieves a visit by id.",
        "operationId": "getVisit",
        "parameters": [
          {
            "name": "visitId",
            "in": "path",
            "description": "Nomis Visit Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis Visit Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Visit Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VisitResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "visit does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/rooms/usage-count": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get future visit room usage by filter",
        "description": "Retrieves a list of rooms with usage count for the (filtered) visits. Only future visits are included",
        "operationId": "getVisitRoomCountsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "visitTypes",
            "in": "query",
            "description": "Filter results by visitType (returns all types if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['SCON','OFFI']"
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or after the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or before the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "futureVisitsOnly",
            "in": "query",
            "description": "Filter results by restricting to future visit usage only",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "list of visit room and count is returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/VisitRoomCountResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/visits/ids": {
      "get": {
        "tags": [
          "visit-resource"
        ],
        "summary": "get visits by filter",
        "description": "Retrieves a paged list of visits by filter",
        "operationId": "getVisitsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids (returns all prisons if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "visitTypes",
            "in": "query",
            "description": "Filter results by visitType (returns all types if not specified)",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['SCON','OFFI']"
          },
          {
            "name": "fromDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or after the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          },
          {
            "name": "toDateTime",
            "in": "query",
            "description": "Filter results by visits that were created on or before the given timestamp",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            },
            "example": "2021-11-03T09:00:00"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of visit ids is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageVisitIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/splash-screens/{moduleName}": {
      "get": {
        "tags": [
          "splash-screen-resource"
        ],
        "summary": "Retrieve a list of prisons and their associated screen conditions (if any set) for the screen",
        "description": "Retrieves all prisons switched on for the screen (module) name, or an empty list if there are none. Requires role NOMIS_SCREEN_ACCESS",
        "operationId": "getScreenConditions",
        "parameters": [
          {
            "name": "moduleName",
            "in": "path",
            "description": "The name of the screen (module)",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the screen (module)",
              "example": "OIDINCRS"
            },
            "example": "OIDINCRS"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SplashScreenDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_SCREEN_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/splash-screens/{moduleName}/blocked": {
      "get": {
        "tags": [
          "splash-screen-resource"
        ],
        "summary": "Retrieve a list of blocked prison ids for the screen",
        "description": "Retrieves a list of blocked prison ids for the screen (module) name or **ALL** if all prisons, or an empty list if there are none blocked. Requires role NOMIS_SCREEN_ACCESS",
        "operationId": "getBlockedPrisons",
        "parameters": [
          {
            "name": "moduleName",
            "in": "path",
            "description": "The name of the screen (module)",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The name of the screen (module)",
              "example": "OIDINCRS"
            },
            "example": "OIDINCRS"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonDto"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_SCREEN_ACCESS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found if the screen (module) name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/service-prisons/{serviceCode}": {
      "get": {
        "tags": [
          "service-agency-switches-resource"
        ],
        "summary": "Retrieve a list of prisons switched on for the service",
        "description": "Retrieves all prisons switched on for the service code, or an empty list if there are none. Requires role SYNCHRONISATION_REPORTING",
        "operationId": "getServicePrisons",
        "parameters": [
          {
            "name": "serviceCode",
            "in": "path",
            "description": "The code of the service from the EXTERNAL_SERVICES table",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The code of the service from the EXTERNAL_SERVICES table"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonDetails"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role SYNCHRONISATION_REPORTING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/max-id": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get the highest value of CRS_SCH_ID in NOMIS",
        "description": "Retrieves the last course schedule ID so we can identify mappings records in preprod that have been copied from prod but don't have any NOMIS data.",
        "operationId": "getMaxCourseScheduleId",
        "responses": {
          "200": {
            "description": "Max CRS_SCH_ID returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/questionnaires/{questionnaireId}": {
      "get": {
        "tags": [
          "questionnaire-resource"
        ],
        "summary": "Get incident questionnaire details",
        "description": "Gets incident questionnaire details. Requires role NOMIS_INCIDENTS",
        "operationId": "getQuestionnaire",
        "parameters": [
          {
            "name": "questionnaireId",
            "in": "path",
            "description": "Incident Questionnaire id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Incident Questionnaire id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/QuestionnaireResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_INCIDENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/questionnaires/ids": {
      "get": {
        "tags": [
          "questionnaire-resource"
        ],
        "summary": "get questionnaire IDs by filter",
        "description": "Retrieves a paged list of incident questionnaire ids by filter. Requires ROLE_NOMIS_INCIDENTS.",
        "operationId": "getIdsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by those that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by those that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageQuestionnaireIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCIDENTS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisons/{prisonId}/incentive-levels": {
      "get": {
        "tags": [
          "prison-resource"
        ],
        "summary": "Retrieve a list of active incentive levels for a prison",
        "description": "Retrieve a list of active incentive levels for a prison. Requires role NOMIS_ACTIVITIES",
        "operationId": "getPrisonIncentiveLevels",
        "parameters": [
          {
            "name": "prisonId",
            "in": "path",
            "description": "The prison ID",
            "required": true,
            "schema": {
              "type": "string",
              "description": "The prison ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncentiveLevel"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role SYNCHRONISATION_REPORTING",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prison not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets the prisoner's details",
        "description": "Requires role NOMIS_ALERTS.",
        "operationId": "getPrisonerDetails",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          }
        ],
        "responses": {
          "200": {
            "description": "prisoner details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_ALERTS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/offender-charges/{offenderChargeId}": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get an offender charge",
        "description": "Requires role NOMIS_SENTENCING. Retrieves offender charge details. Offender Charges are at the booking level.",
        "operationId": "getOffenderCharge",
        "parameters": [
          {
            "name": "offenderChargeId",
            "in": "path",
            "description": "Offender Charge id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Offender Charge id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No",
              "example": "12345"
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the court appearance details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OffenderChargeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-event-charges/{offenderChargeId}/last-modified": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get the last modified court event charge",
        "description": "Requires role NOMIS_SENTENCING. Retrieves the last modified court event charge associated with this offender charge. Intended to prevent the need for COURT_EVENT_CHARGE_UPDATED events",
        "operationId": "getLastModifiedCourtEventCharge",
        "parameters": [
          {
            "name": "offenderChargeId",
            "in": "path",
            "description": "Offender Charge id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Offender Charge id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No",
              "example": "12345"
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the court appearance details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtEventChargeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-cases/{id}": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get a court case",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId": "getCourtCase",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Court case id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Court case id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No",
              "example": "12345"
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the court case details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtCaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/sentencing/court-appearances/{id}": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get a court appearance",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a court appearance by id",
        "operationId": "getCourtAppearance",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Court appearance id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Court appearance id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No",
              "example": "12345"
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the court appearance details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtEventResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/prison-person/reconciliation": {
      "get": {
        "tags": [
          "prison-person-recon-resource"
        ],
        "summary": "Get prison person reconciliation details for a prisoner",
        "description": "Retrieves reconciliation details used to check NOMIS and DPS are aligned. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "getReconciliation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender number",
              "example": "A1234AA"
            },
            "example": "A1234AA"
          }
        ],
        "responses": {
          "200": {
            "description": "Physical Attributes Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonPersonReconciliationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/merges": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets prisoner's list of merge details since a given date. Either the current offenderNo or the previous offenderNo can be used to search for merges. Only COMPLETED merges are returned",
        "description": "Requires role SYNCHRONISATION_REPORTING.",
        "operationId": "getPrisonerMerges",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "The earliest date to search for merges from",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of prisoner merges",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MergeDetail"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/csip/reconciliation": {
      "get": {
        "tags": [
          "csip-resource"
        ],
        "summary": "Gets csips for an offender for reconciliation",
        "description": "Retrieves a list of csips for a prisoner. Requires ROLE_NOMIS_CSIP",
        "operationId": "getCSIPsForPrisoner",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No AKA prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No AKA prisoner number",
              "example": "A1234AK"
            },
            "example": "A1234AK"
          }
        ],
        "responses": {
          "200": {
            "description": "CSIPs Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerCSIPsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist or has no csips",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/bookings/{bookingId}/previous": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets a prisoner's previous booking relative to the supplied booking id",
        "description": "Requires role NOMIS_ALERTS.",
        "operationId": "getPreviousBooking",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender Noms Id",
            "required": true,
            "schema": {
              "pattern": "[A-Z]\\d{4}[A-Z]{2}",
              "type": "string",
              "description": "Offender Noms Id",
              "example": "A1234ZZ"
            },
            "example": "A1234ZZ"
          },
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking Id",
              "format": "int64",
              "example": 123
            },
            "example": 123
          }
        ],
        "responses": {
          "200": {
            "description": "Ids of booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreviousBookingId"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_ALERTS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking or prisoner does not exist or has no previous booking",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts/to-migrate": {
      "get": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Gets alert for latest booking",
        "description": "Retrieves alerts for a prisoner from latest all bookings. Requires ROLE_NOMIS_ALERTS",
        "operationId": "getAlertsToMigrate",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No AKA prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No AKA prisoner number",
              "example": "A1234AK"
            },
            "example": "A1234AK"
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerAlertsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist or has no bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{offenderNo}/alerts/reconciliation": {
      "get": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Gets active alerts for latest booking",
        "description": "Retrieves active alerts for latest booking. Requires ROLE_NOMIS_ALERTS",
        "operationId": "getActiveAlertsForReconciliation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender No AKA prisoner number",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Offender No AKA prisoner number",
              "example": "A1234AK"
            },
            "example": "A1234AK"
          }
        ],
        "responses": {
          "200": {
            "description": "Active Alerts Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerAlertsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist or has no bookings",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets the identifiers for all prisoners. By default only active prisoners will be returned unless active=false",
        "description": "Requires role SYNCHRONISATION_REPORTING or ROLE_NOMIS_ALERTS.",
        "operationId": "getPrisonerIdentifiers",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "active",
            "in": "query",
            "description": "When true only return active prisoners currently in prison else all prisoners that at some point has been in prison are returned",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paged list of prisoner ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagePrisonerIds"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated": true
      }
    },
    "/prisoners/ids/all": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets the identifier for all prisoners.",
        "description": "Requires role SYNCHRONISATION_REPORTING, NOMIS_ALERTS or NOMIS_PRISON_PERSON.",
        "operationId": "getAllPrisoners",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paged list of prisoner ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagePrisonerId"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING or ROLE_NOMIS_ALERTS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids/all-from-id": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets the identifier for all prisoners.",
        "description": "Gets the specified number of prisoners starting after the given id number.\n      Clients can iterate through all prisoners by calling this endpoint using the id from the last call (omit for first call).\n      Iteration ends when the returned prisonerIds list has size less than the requested page size.\n      Requires role SYNCHRONISATION_REPORTING or NOMIS_CASENOTES.",
        "operationId": "getAllPrisonersFromId",
        "parameters": [
          {
            "name": "offenderId",
            "in": "query",
            "description": "If supplied get offenders starting after this id",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "If supplied get offenders starting after this id",
              "format": "int64",
              "example": 1555999,
              "default": 0
            },
            "example": 1555999
          },
          {
            "name": "pageSize",
            "in": "query",
            "description": "Number of offenders to get",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Number of offenders to get",
              "format": "int32",
              "default": 10
            }
          }
        ],
        "responses": {
          "200": {
            "description": "list of prisoner ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerNosWithLast"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING or ROLE_NOMIS_ALERTS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/ids/active": {
      "get": {
        "tags": [
          "prisoners-resource"
        ],
        "summary": "Gets the identifiers for all active prisoners",
        "description": "Requires role SYNCHRONISATION_REPORTING.",
        "operationId": "getActivePrisonerIdentifiers",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "paged list of prisoner ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagePrisonerIds"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role SYNCHRONISATION_REPORTING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentencing/court-cases": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get court cases for an offender booking",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId": "getCourtCasesByOffenderBooking",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the list of court cases",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CourtCaseResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Offender booking not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/sentencing-adjustments": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get active sentence and key date adjustments for a booking",
        "description": "Retrieves all the current active sentence and key date adjustments (by booking) for a prisoner. Requires NOMIS_SENTENCING.",
        "operationId": "getActiveAdjustments",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "active-only",
            "in": "query",
            "description": "Indicate if should return just active adjustments",
            "required": true,
            "schema": {
              "type": "boolean",
              "description": "Indicate if should return just active adjustments",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "the list of adjustments details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SentencingAdjustmentsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/awards/{sanctionSequence}": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get hearing result award by Id ",
        "description": "Retrieves a hearing result by the Id (bookingId and sanctionSequence). Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudicationHearingResultAward",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "sanctionSequence",
            "in": "path",
            "description": "Nomis sanction sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis sanction sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Hearing result award Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Hearing result award does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/awards/ada/summary": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "Get ADA award summary result award by booking ",
        "description": "Retrieves a summary of ADA awards along with associated adjudication for a given booking. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudicationADASummary",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "ADA Summary award Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationADAAwardSummaryResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/booking-id/{bookingId}/alerts": {
      "get": {
        "tags": [
          "alerts-resource"
        ],
        "summary": "Gets alert for booking",
        "description": "Retrieves alerts for a specific booking. Requires ROLE_NOMIS_ALERTS",
        "operationId": "getAlertsByBookingId",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingAlertsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ALERTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/{personId}": {
      "get": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Get a person by person Id",
        "description": "Retrieves a person and related contacts. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "getPerson",
        "parameters": [
          {
            "name": "personId",
            "in": "path",
            "description": "Person Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Person Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Person Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPerson"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Person does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/persons/ids": {
      "get": {
        "tags": [
          "contact-person-resource"
        ],
        "summary": "Get all Ids",
        "description": "Retrieves all person Ids - typically for a migration. Requires ROLE_NOMIS_CONTACTPERSONS",
        "operationId": "getPersonIds",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by persons that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by persons that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Page of person Ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PagePersonIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CONTACTPERSONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}": {
      "get": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Get an open non-association",
        "description": "Get the open non-association for the two offender numbers. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "getNonAssociation",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A4578ED"
          },
          {
            "name": "typeSequence",
            "in": "query",
            "description": "Sequence number. If present, get this detail record, otherwise get the open record if there is one.",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            },
            "example": 2
          }
        ],
        "responses": {
          "200": {
            "description": "Non-association information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NonAssociationResponse"
                }
              }
            }
          },
          "404": {
            "description": "No open non-association exists for these offender numbers, or one of the offenders does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/offender/{offenderNo}/ns-offender/{nsOffenderNo}/all": {
      "get": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "Get all non-associations for the two offender numbers",
        "description": "Get all non-associations for the two offender numbers, including expired. Requires role NOMIS_NON_ASSOCIATIONS",
        "operationId": "getNonAssociationDetails",
        "parameters": [
          {
            "name": "offenderNo",
            "in": "path",
            "description": "Offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A3456GH"
          },
          {
            "name": "nsOffenderNo",
            "in": "path",
            "description": "Non-association offender",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A4578ED"
          }
        ],
        "responses": {
          "200": {
            "description": "List of non-associations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/NonAssociationResponse"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Non-association does not exist, or one of the offenders does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_NON_ASSOCIATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/non-associations/ids": {
      "get": {
        "tags": [
          "non-association-resource"
        ],
        "summary": "get non-associations by filter",
        "description": "Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_NON_ASSOCIATIONS.",
        "operationId": "getNonAssociationsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageNonAssociationIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_NON_ASSOCIATIONS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}": {
      "get": {
        "tags": [
          "location-resource"
        ],
        "summary": "Get a location",
        "description": "Get the location given the id. Requires role ROLE_NOMIS_LOCATIONS",
        "operationId": "getLocation",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Location id",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 12345678
          }
        ],
        "responses": {
          "200": {
            "description": "Location information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "404": {
            "description": "No location exists for this id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/key/{key}": {
      "get": {
        "tags": [
          "location-resource"
        ],
        "summary": "Get a location",
        "description": "Get the location given the business key. Requires role ROLE_NOMIS_LOCATIONS",
        "operationId": "getLocationByKey",
        "parameters": [
          {
            "name": "key",
            "in": "path",
            "description": "Location id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "LEI-B-3-014"
          }
        ],
        "responses": {
          "200": {
            "description": "Location information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationResponse"
                }
              }
            }
          },
          "404": {
            "description": "No location exists for this id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, correct role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/ids": {
      "get": {
        "tags": [
          "location-resource"
        ],
        "summary": "get locations by filter",
        "description": "Retrieves a paged list of composite ids by filter. Requires ROLE_NOMIS_LOCATIONS.",
        "operationId": "getLocationsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids is returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageLocationIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role ROLE_NOMIS_LOCATIONS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/{incidentId}": {
      "get": {
        "tags": [
          "incident-resource"
        ],
        "summary": "Get incident details",
        "description": "Gets incident details. Requires role NOMIS_INCIDENTS",
        "operationId": "getIncident",
        "parameters": [
          {
            "name": "incidentId",
            "in": "path",
            "description": "Incident id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Incident id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_INCIDENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/reconciliation/agency/{agencyId}/ids": {
      "get": {
        "tags": [
          "incident-resource"
        ],
        "summary": "Gets ids of open incidents at an agency",
        "description": "Retrieves paged ids for open incidents for an agency.",
        "operationId": "getOpenIncidentIdsForReconciliation",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "agencyId",
            "in": "path",
            "description": "Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Agency Id",
              "example": "LEI"
            },
            "example": "LEI"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of reconciliation ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageIncidentIdResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_INCIDENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/reconciliation/agency/{agencyId}/counts": {
      "get": {
        "tags": [
          "incident-resource"
        ],
        "summary": "Gets incident counts",
        "description": "Retrieves open and closed incident counts for an agency.",
        "operationId": "getIncidentCountsForReconciliation",
        "parameters": [
          {
            "name": "agencyId",
            "in": "path",
            "description": "Agency Id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Agency Id",
              "example": "LEI"
            },
            "example": "LEI"
          }
        ],
        "responses": {
          "200": {
            "description": "Reconciliation data returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentsReconciliationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_INCIDENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/reconciliation/agencies": {
      "get": {
        "tags": [
          "incident-resource"
        ],
        "summary": "Retrieve a list of all agencies that have raised incidents)",
        "description": "Retrieve a list of all agencies that have raised incidents, including prisons and PECS. Requires authorised access",
        "operationId": "getIncidentAgencies",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentAgencyId"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/ids": {
      "get": {
        "tags": [
          "incident-resource"
        ],
        "summary": "get incident IDs by filter",
        "description": "Retrieves a paged list of incident ids by filter. Requires ROLE_NOMIS_INCIDENTS.",
        "operationId": "getIdsByFilter_1",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by those that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by those that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageIncidentIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCIDENTS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incidents/booking/{bookingId}": {
      "get": {
        "tags": [
          "incident-resource"
        ],
        "summary": "Get a list of Incidents for a booking",
        "description": "Gets a list of all incidents relating to an offender booking. Requires role NOMIS_INCIDENTS",
        "operationId": "getIncidentsForBooking",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "booking id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_INCIDENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/ids": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get incentives (a.k.a IEP) by filter",
        "description": "Retrieves a paged list of incentive composite ids by filter. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getIncentivesByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by incentives that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by incentives that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "latestOnly",
            "in": "query",
            "description": "if true only retrieve latest incentive for each prisoner",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageIncentiveIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/incentive-sequence/{incentiveSequence}": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get a prisoner's incentive level (a.k.a IEP) by id (bookingId and incentiveId)",
        "description": "Retrieves a created incentive level for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "incentiveSequence",
            "in": "path",
            "description": "NOMIS Incentive sequence ",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS Incentive sequence ",
              "format": "int64",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "the incentive level details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incentives/booking-id/{bookingId}/current": {
      "get": {
        "tags": [
          "incentives-resource"
        ],
        "summary": "get a prisoner's current incentive level (a.k.a IEP) for a booking",
        "description": "Retrieves the current incentive level (by booking) for a prisoner. Requires ROLE_NOMIS_INCENTIVES.",
        "operationId": "getCurrentIncentive",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS booking Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the incentive level details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncentiveResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_INCENTIVES not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identifying-marks/images/{imageId}/details": {
      "get": {
        "tags": [
          "identifying-mark-images-resource"
        ],
        "summary": "Get an identifying mark image details",
        "description": "Retrieves an identifying mark image details. Note this does not include the image itself which is available on a separate endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "getIdentifyingMarksImageDetails",
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "description": "Image id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Image id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Image details returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IdentifyingMarkImageDetailsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Image does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/identifying-marks/images/{imageId}/data": {
      "get": {
        "tags": [
          "identifying-mark-images-resource"
        ],
        "summary": "Get an identifying mark image in JPEG format",
        "description": "Retrieves an identifying mark image in JPEG format. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "getIdentifyingMarksImageData",
        "parameters": [
          {
            "name": "imageId",
            "in": "path",
            "description": "Image id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Image id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Image  returned",
            "content": {
              "image/jpeg": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Image does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/documents/{id}": {
      "get": {
        "tags": [
          "document-resource"
        ],
        "summary": "Retrieve a document",
        "description": "Retrieve a document by its id. Requires role NOMIS_DOCUMENTS",
        "operationId": "getDocument",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The document id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The document id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "byte"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_DOCUMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Document not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/documents/booking/{bookingId}": {
      "get": {
        "tags": [
          "document-resource"
        ],
        "summary": "Retrieve a list of document ids",
        "description": "Retrieve a list of document ids searching by booking id and template name. Requires role NOMIS_DOCUMENTS",
        "operationId": "getDocumentIds",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "The booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "The booking id",
              "format": "int64"
            }
          },
          {
            "name": "templateName",
            "in": "query",
            "description": "The unique name of the template used for a document - this is a repeatable request parameter",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "CSIP_FAC"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/DocumentIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_DOCUMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/{id}": {
      "get": {
        "tags": [
          "csip-resource"
        ],
        "summary": "Get CSIP details",
        "description": "Gets csip details. Requires role NOMIS_CSIP",
        "operationId": "getCSIP",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "CSIP id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "CSIP id",
              "format": "int64"
            }
          },
          {
            "name": "includeDocumentIds",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/CSIPResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/ids": {
      "get": {
        "tags": [
          "csip-resource"
        ],
        "summary": "get csip IDs by filter",
        "description": "Retrieves a paged list of csip ids by filter. Requires ROLE_NOMIS_CSIP.",
        "operationId": "getIdsByFilter_2",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by those that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by those that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PageCSIPIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_CSIP not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/factors/{csipFactorId}": {
      "get": {
        "tags": [
          "csip-factor-resource"
        ],
        "summary": "Get CSIP factor details",
        "description": "Gets csip factor details. Requires role NOMIS_CSIP",
        "operationId": "getCSIPFactor",
        "parameters": [
          {
            "name": "csipFactorId",
            "in": "path",
            "description": "CSIP Factor id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "CSIP Factor id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CSIPFactorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "csip-factor-resource"
        ],
        "summary": "Deletes a csip factor",
        "description": "Deletes a csip factor. Requires ROLE_NOMIS_CSIP",
        "operationId": "deleteCSIPFactor",
        "parameters": [
          {
            "name": "csipFactorId",
            "in": "path",
            "description": "CSIP Factor Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "CSIP Factor Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "Csip factor Deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/count": {
      "get": {
        "tags": [
          "csip-resource"
        ],
        "summary": "Get csip count",
        "description": "Gets a count of all csips. Requires role NOMIS_CSIP",
        "operationId": "getCSIPCount",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "integer",
                  "format": "int64"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/booking/{bookingId}": {
      "get": {
        "tags": [
          "csip-resource"
        ],
        "summary": "Get a list of CSIP Ids for a booking",
        "description": "Gets a list of all csip ids relating to an offender booking. Requires role NOMIS_CSIP",
        "operationId": "getCSIPIdsForBooking",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "booking id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/CSIPIdResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/court-cases/{id}": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get a court case, migration version without offenderNo validation",
        "description": "Requires role NOMIS_SENTENCING. Retrieves a court case by id",
        "operationId": "getCourtCaseForMigration",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Court case id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Court case id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "the court case details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CourtCaseResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Court case not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/court-cases/ids": {
      "get": {
        "tags": [
          "sentencing-resource"
        ],
        "summary": "get court case IDs by filter",
        "description": "Retrieves a paged list of court case ids by filter. Requires ROLE_NOMIS_SENTENCING.",
        "operationId": "getCourtCaseIdsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by court cases that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by court cases that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageCourtCaseIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role ROLE_NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bookings/{bookingId}/identifying-marks": {
      "get": {
        "tags": [
          "identifying-marks-resource"
        ],
        "summary": "Get identifying marks for a prisoner's booking",
        "description": "Retrieves identifying marks for a booking. Requires ROLE_NOMIS_PRISON_PERSON",
        "operationId": "getBookingIdentifyingMarks",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "Booking id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Booking id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Identifying marks Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BookingIdentifyingMarksResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_PRISON_PERSON",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attendances/reconciliation/{prisonId}": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get data for an attendance sync reconciliation",
        "description": "Gets the number of active attendances for each booking in the prison",
        "operationId": "getAttendanceReconciliationSummary",
        "parameters": [
          {
            "name": "prisonId",
            "in": "path",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Date",
              "format": "date"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reconciliation data returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceReconciliationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{eventId}": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Get appointment by event id",
        "description": "Get an appointment given the unique event id. Requires role NOMIS_APPOINTMENTS",
        "operationId": "getAppointmentById",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "description": "Event Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Event Id",
              "format": "int64",
              "example": 12345678
            },
            "example": 12345678
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking, location and timestamp combination does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/ids": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "get appointments by filter",
        "description": "Retrieves a paged list of appointment ids by filter. Requires ROLE_NOMIS_APPOINTMENTS.",
        "operationId": "getAppointmentsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2022-04-11"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of composite ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAppointmentIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/counts": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Get appointment counts by prison, event sub type and future / past. Note that the 'future' is everything from tomorrow onwards.",
        "description": "Retrieves counts of appointments for the migration preview. Requires ROLE_NOMIS_APPOINTMENTS.",
        "operationId": "getAppointmentCounts",
        "parameters": [
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by prison ids",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "['MDI','LEI']"
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by appointments that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2022-04-11"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment counts returned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentCountsResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/booking/{bookingId}/location/{locationId}/start/{dateTime}": {
      "get": {
        "tags": [
          "appointments-resource"
        ],
        "summary": "Get an appointment",
        "description": "Get an appointment given the booking id, internal location, date and start time. Requires role NOMIS_APPOINTMENTS",
        "operationId": "getAppointment",
        "parameters": [
          {
            "name": "bookingId",
            "in": "path",
            "description": "NOMIS booking Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS booking Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "locationId",
            "in": "path",
            "description": "Appointment room internal location Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Appointment room internal location Id",
              "format": "int64",
              "example": 1234567
            },
            "example": 1234567
          },
          {
            "name": "dateTime",
            "in": "path",
            "description": "Appointment date and start time",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Appointment date and start time",
              "format": "date-time"
            },
            "example": "2023-02-27T14:40"
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment information with created id",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Booking, location and timestamp combination does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_APPOINTMENTS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/{allocationId}": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get allocation details",
        "description": "Gets allocation details. Requires role NOMIS_ACTIVITIES",
        "operationId": "getAllocation",
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "description": "Allocation id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Allocation id",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetAllocationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/suspended": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find suspended allocations",
        "description": "Searches for suspended prisoners on active course allocations. Requires role NOMIS_ACTIVITIES",
        "operationId": "findSuspendedAllocations",
        "parameters": [
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/excludeProgramCode"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FindSuspendedAllocationsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/reconciliation/{prisonId}": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Get data for an allocation sync reconciliation",
        "description": "Gets the number of active allocations for each booking in the prison",
        "operationId": "getAllocationReconciliationSummary",
        "parameters": [
          {
            "name": "prisonId",
            "in": "path",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Reconciliation data returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AllocationReconciliationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/missing-pay-bands": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find allocations with missing pay bands",
        "description": "Searches for prisoners allocated to a course activity without a pay band assigned. Requires role NOMIS_ACTIVITIES",
        "operationId": "findAllocationsWithMissingPayBands",
        "parameters": [
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/excludeProgramCode"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FindAllocationsMissingPayBandsResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/ids": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find paged active allocations",
        "description": "Searches for active course allocations. Requires role NOMIS_ACTIVITIES",
        "operationId": "findActiveAllocations",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/excludeProgramCode"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageFindActiveAllocationIdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjustments/ids": {
      "get": {
        "tags": [
          "sentencing-adjustment-resource"
        ],
        "summary": "get adjustment IDs (key date and Sentence adjustments) by filter",
        "description": "Retrieves a paged list of adjustment ids by filter. Requires ROLE_NOMIS_SENTENCING.",
        "operationId": "getAdjustmentsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by adjustments that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by adjustments that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdjustmentIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_SENTENCING not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/hearings/{hearingId}": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get hearing by hearing Id",
        "description": "Retrieves a hearing by the hearing Id. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudicationHearing",
        "parameters": [
          {
            "name": "hearingId",
            "in": "path",
            "description": "NOMIS Hearing Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS Hearing Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Hearing Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Hearing does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/hearings/{hearingId}/charge/{chargeSequence}/result": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get hearing result by hearing id",
        "description": "Retrieves a hearing result by the nomis hearing id. DPS migrated and synchronised hearing results always have a result sequence of 1 Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudicationHearingResult",
        "parameters": [
          {
            "name": "hearingId",
            "in": "path",
            "description": "NOMIS Hearing Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "NOMIS Hearing Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Nomis charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Nomis charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Hearing Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Hearing result does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/charges/ids": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get adjudication charge IDs by filter",
        "description": "Retrieves a paged list of adjudication charge ids by filter. Requires ROLE_NOMIS_ADJUDICATIONS.",
        "operationId": "getAdjudicationChargeIdsByFilter",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "fromDate",
            "in": "query",
            "description": "Filter results by adjudication charges that were created on or after the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "toDate",
            "in": "query",
            "description": "Filter results by adjudication charges that were created on or before the given date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-03"
          },
          {
            "name": "prisonIds",
            "in": "query",
            "description": "Filter results by adjudication charges that were created in one of the given prisons",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "example": "MDI"
          }
        ],
        "responses": {
          "200": {
            "description": "Pageable list of ids are returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAdjudicationChargeIdResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint when role NOMIS_ADJUDICATIONS not present",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get adjudication by adjudication number",
        "description": "Retrieves an adjudication by the adjudication number. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudication",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Adjudication Information Returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/adjudications/adjudication-number/{adjudicationNumber}/charge-sequence/{chargeSequence}": {
      "get": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "get adjudication by adjudication number and charge sequence",
        "description": "Retrieves an adjudication by the adjudication number and charge sequence. Will only return the specified charge. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "getAdjudicationByCharge",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          },
          {
            "name": "chargeSequence",
            "in": "path",
            "description": "Charge sequence",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Charge sequence",
              "format": "int32",
              "example": 1
            },
            "example": 1
          }
        ],
        "responses": {
          "200": {
            "description": "Adjudication with charge information returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdjudicationChargeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Adjudication or adjudication charge does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/without-schedule-rules": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find activities without schedule rules",
        "description": "Searches for course activities that are active with active allocations but no schedule rules. Requires role NOMIS_ACTIVITIES",
        "operationId": "findActivitiesWithoutScheduleRules",
        "parameters": [
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/excludeProgramCode"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FindActivitiesWithoutScheduleRulesResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/rates-with-unknown-incentives": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find activities with pay rates with unknown incentive level",
        "description": "Searches for course activities that have an active pay rate with an unknown incentive level. Requires role NOMIS_ACTIVITIES",
        "operationId": "findRatesWithUnknownIncentiveLevel",
        "parameters": [
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/excludeProgramCode"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FindPayRateWithUnknownIncentiveResponse"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/ids": {
      "get": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Find paged active activities",
        "description": "Searches for active course activities with allocated prisoners. Requires role NOMIS_ACTIVITIES",
        "operationId": "findActiveActivities",
        "parameters": [
          {
            "name": "pageRequest",
            "in": "query",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "prisonId",
            "in": "query",
            "description": "Prison id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Prison id"
            }
          },
          {
            "name": "excludeProgramCode",
            "in": "query",
            "description": "Exclude program codes",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/excludeProgramCode"
            }
          },
          {
            "name": "courseActivityId",
            "in": "query",
            "description": "Course Activity ID",
            "required": false,
            "schema": {
              "type": "integer",
              "description": "Course Activity ID"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageFindActiveActivityIdsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident/adjudication-number/{adjudicationNumber}": {
      "delete": {
        "tags": [
          "adjudication-resource"
        ],
        "summary": "**** Used to recover from a duplicate incident creation only ***** Deletes an incident by adjudication number.",
        "description": "Deletes an incident by adjudication number. Supports the removal of a duplicate incident without a DPS mapping. Requires ROLE_NOMIS_ADJUDICATIONS",
        "operationId": "deleteIncident",
        "parameters": [
          {
            "name": "adjudicationNumber",
            "in": "path",
            "description": "Adjudication number",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "Adjudication number",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "200": {
            "description": "Incident deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_ADJUDICATIONS",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/csip/{csipId}": {
      "delete": {
        "tags": [
          "csip-resource"
        ],
        "summary": "Deletes a csip report",
        "description": "Deletes a csip report. Requires ROLE_NOMIS_CSIP",
        "operationId": "deleteCSIP",
        "parameters": [
          {
            "name": "csipId",
            "in": "path",
            "description": "CSIP Factor Id",
            "required": true,
            "schema": {
              "type": "integer",
              "description": "CSIP Factor Id",
              "format": "int64",
              "example": 12345
            },
            "example": 12345
          }
        ],
        "responses": {
          "204": {
            "description": "Csip report Deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden to access this endpoint. Requires ROLE_NOMIS_CSIP",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attendances/{eventId}": {
      "delete": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Delete a NOMIS attendance (from OFFENDER_COURSE_ATTENDANCES table)",
        "description": "Deletes an attendance from NOMIS. Requires role NOMIS_ACTIVITIES",
        "operationId": "deleteAttendance_1",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Attendance is deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/{referenceId}": {
      "delete": {
        "tags": [
          "activities-resource"
        ],
        "summary": "Delete a NOMIS allocation (from OFFENDER_PROGRAM_PROFILES table)",
        "description": "Deletes an allocation from NOMIS and any children - pay rates, attendances. Requires role NOMIS_ACTIVITIES",
        "operationId": "deleteAllocation",
        "parameters": [
          {
            "name": "referenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Allocation is deleted"
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string",
            "description": "For 409 errors this may contain the entity Id for the existing record that causes the duplicate"
          }
        }
      },
      "UpdateSentenceAdjustmentRequest": {
        "required": [
          "adjustmentDays",
          "adjustmentTypeCode",
          "sentenceSequence"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "RX",
            "enum": [
              "RSR",
              "UR",
              "S240A",
              "RST",
              "RX"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          },
          "sentenceSequence": {
            "minimum": 0,
            "type": "integer",
            "description": "Sentence sequence",
            "format": "int64"
          }
        },
        "description": "Sentence adjustment update request"
      },
      "UpsertAttendanceRequest": {
        "required": [
          "endTime",
          "eventStatusCode",
          "scheduleDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "scheduleDate": {
            "type": "string",
            "description": "The date of the course schedule",
            "format": "date",
            "example": "2023-04-03"
          },
          "startTime": {
            "type": "string",
            "description": "The time of the course schedule",
            "format": "partial-time",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time the course schedule ends",
            "format": "partial-time",
            "example": "11:00"
          },
          "eventStatusCode": {
            "type": "string",
            "description": "The status of the attendance",
            "example": "SCH"
          },
          "eventOutcomeCode": {
            "type": "string",
            "description": "The outcome code for a completed attendance",
            "example": "ATT"
          },
          "comments": {
            "type": "string",
            "description": "Comments relating to the attendance",
            "example": "Disruptive"
          },
          "unexcusedAbsence": {
            "type": "boolean",
            "description": "Whether the absence is excused",
            "example": true,
            "default": false
          },
          "authorisedAbsence": {
            "type": "boolean",
            "description": "Whether the absence is authorised",
            "example": true,
            "default": false
          },
          "paid": {
            "type": "boolean",
            "description": "Whether the attendance is to be paid",
            "example": true,
            "default": false
          },
          "bonusPay": {
            "type": "number",
            "description": "Any bonus pay for the attendance",
            "example": 1.5
          }
        },
        "description": "Course activity create/update request"
      },
      "UpsertAttendanceResponse": {
        "required": [
          "courseScheduleId",
          "created",
          "eventId",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The attendance event id",
            "format": "int64"
          },
          "courseScheduleId": {
            "type": "integer",
            "description": "The course schedule id for the attendance",
            "format": "int64"
          },
          "created": {
            "type": "boolean",
            "description": "Whether or the attendance was created"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code"
          }
        },
        "description": "Attendance create/update response"
      },
      "UpdateVisitRequest": {
        "required": [
          "endTime",
          "openClosedStatus",
          "room",
          "startDateTime",
          "visitorPersonIds"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "HH:mm",
            "type": "string",
            "description": "Visit end time",
            "example": "14:30"
          },
          "visitorPersonIds": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "type": "integer",
              "description": "Visitors",
              "format": "int64"
            }
          },
          "room": {
            "type": "string",
            "description": "Name of the real world room where visit will take place"
          },
          "openClosedStatus": {
            "type": "string",
            "description": "Whether visit is restricted to a closed session",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Visit update request"
      },
      "CancelVisitRequest": {
        "required": [
          "outcome"
        ],
        "type": "object",
        "properties": {
          "outcome": {
            "type": "string",
            "description": "The cancellation reason",
            "enum": [
              "VISCANC",
              "OFFCANC",
              "ADMIN",
              "NSHOW"
            ]
          }
        },
        "description": "Visit cancellation"
      },
      "CourtAppearanceRequest": {
        "required": [
          "courtEventChargesToCreate",
          "courtEventChargesToUpdate",
          "courtEventType",
          "courtId",
          "eventDateTime"
        ],
        "type": "object",
        "properties": {
          "eventDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "courtEventType": {
            "type": "string"
          },
          "courtId": {
            "type": "string"
          },
          "outcomeReasonCode": {
            "type": "string"
          },
          "nextEventDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "courtEventChargesToUpdate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExistingOffenderChargeRequest"
            }
          },
          "courtEventChargesToCreate": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffenderChargeRequest"
            }
          },
          "nextCourtId": {
            "type": "string"
          }
        },
        "description": "Court Event"
      },
      "ExistingOffenderChargeRequest": {
        "required": [
          "offenceCode",
          "offenderChargeId"
        ],
        "type": "object",
        "properties": {
          "offenderChargeId": {
            "type": "integer",
            "format": "int64"
          },
          "offenceCode": {
            "type": "string"
          },
          "offenceDate": {
            "type": "string",
            "format": "date"
          },
          "offenceEndDate": {
            "type": "string",
            "format": "date"
          },
          "resultCode1": {
            "type": "string"
          }
        },
        "description": "Court Event"
      },
      "OffenderChargeRequest": {
        "required": [
          "offenceCode"
        ],
        "type": "object",
        "properties": {
          "offenceCode": {
            "type": "string"
          },
          "offenceDate": {
            "type": "string",
            "format": "date"
          },
          "offenceEndDate": {
            "type": "string",
            "format": "date"
          },
          "resultCode1": {
            "type": "string"
          }
        },
        "description": "Court Charge"
      },
      "OffenderChargeIdResponse": {
        "required": [
          "offenderChargeId"
        ],
        "type": "object",
        "properties": {
          "offenderChargeId": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Create offender charge response"
      },
      "UpdateCourtAppearanceResponse": {
        "required": [
          "createdCourtEventChargesIds",
          "deletedOffenderChargesIds"
        ],
        "type": "object",
        "properties": {
          "createdCourtEventChargesIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffenderChargeIdResponse"
            }
          },
          "deletedOffenderChargesIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffenderChargeIdResponse"
            }
          }
        },
        "description": "Create adjustment response"
      },
      "UpsertProfileDetailsRequest": {
        "required": [
          "profileType"
        ],
        "type": "object",
        "properties": {
          "profileType": {
            "type": "string",
            "description": "Profile Type"
          },
          "profileCode": {
            "type": "string",
            "description": "Profile Code"
          }
        },
        "description": "Profile Details to update a prisoner"
      },
      "UpsertProfileDetailsResponse": {
        "required": [
          "bookingId",
          "created"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "boolean",
            "description": "Whether the record was created or updated"
          },
          "bookingId": {
            "type": "integer",
            "description": "The offender booking ID that was changed",
            "format": "int64"
          }
        },
        "description": "Profile Details upsert response"
      },
      "UpsertPhysicalAttributesRequest": {
        "type": "object",
        "properties": {
          "height": {
            "type": "integer",
            "description": "Height (cm)",
            "format": "int32"
          },
          "weight": {
            "type": "integer",
            "description": "Weight (kg)",
            "format": "int32"
          }
        },
        "description": "Physical attributes to update a prisoner"
      },
      "UpsertPhysicalAttributesResponse": {
        "required": [
          "bookingId",
          "created"
        ],
        "type": "object",
        "properties": {
          "created": {
            "type": "boolean",
            "description": "Whether the record was created or updated"
          },
          "bookingId": {
            "type": "integer",
            "description": "The offender booking ID that was changed",
            "format": "int64"
          }
        },
        "description": "Physical attributes upsert response"
      },
      "CreateSentenceRequest": {
        "required": [
          "offenderChargeIds",
          "sentenceCalcType",
          "sentenceCategory",
          "sentenceLevel",
          "sentenceTerm",
          "startDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "status": {
            "type": "string"
          },
          "sentenceCategory": {
            "type": "string"
          },
          "sentenceCalcType": {
            "type": "string"
          },
          "sentenceLevel": {
            "type": "string"
          },
          "fine": {
            "type": "number"
          },
          "sentenceTerm": {
            "$ref": "#/components/schemas/SentenceTermRequest"
          },
          "caseId": {
            "type": "integer",
            "format": "int64"
          },
          "offenderChargeIds": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int64"
            }
          }
        },
        "description": "Sentence request"
      },
      "SentenceTermRequest": {
        "required": [
          "lifeSentenceFlag",
          "sentenceTermType",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "years": {
            "type": "integer",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "format": "int32"
          },
          "weeks": {
            "type": "integer",
            "format": "int32"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "sentenceTermType": {
            "type": "string"
          },
          "lifeSentenceFlag": {
            "type": "boolean"
          }
        },
        "description": "Sentence term request"
      },
      "AlertResponse": {
        "required": [
          "alertCode",
          "alertSequence",
          "audit",
          "bookingId",
          "bookingSequence",
          "date",
          "isActive",
          "isVerified",
          "type"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The prisoner's bookingId related to this alert",
            "format": "int64"
          },
          "bookingSequence": {
            "type": "integer",
            "description": "The prisoner's bookingId sequence related to this alert. Used to show if this is on latest bookings",
            "format": "int64"
          },
          "alertSequence": {
            "type": "integer",
            "description": "The sequence primary key within this booking",
            "format": "int64"
          },
          "alertCode": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "date": {
            "type": "string",
            "description": "Date alert started",
            "format": "date"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date alert expired",
            "format": "date"
          },
          "isActive": {
            "type": "boolean",
            "description": "true if alert is active and has not expired"
          },
          "isVerified": {
            "type": "boolean",
            "description": "true if alert has been verified by another member of staff"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Free format text of person or department that authorised the alert",
            "example": "security"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about an alert associated with a prisoner"
      },
      "CodeDescription": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "NomisAudit": {
        "required": [
          "createDatetime",
          "createUsername"
        ],
        "type": "object",
        "properties": {
          "createDatetime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time record was created",
            "example": "2021-07-05T10:35:17"
          },
          "createUsername": {
            "type": "string",
            "description": "Username of person that created the record (might also be a system) "
          },
          "createDisplayName": {
            "type": "string",
            "description": "Real name of person that created the record (might by null for system users)"
          },
          "modifyUserId": {
            "type": "string",
            "description": "Username of person that last modified the record (might also be a system)"
          },
          "modifyDisplayName": {
            "type": "string",
            "description": "Real name of person that modified the record (might by null for system users)"
          },
          "modifyDatetime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time record was last modified",
            "example": "2021-07-05T10:35:17"
          },
          "auditTimestamp": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Audit Date time",
            "example": "2021-07-05T10:35:17"
          },
          "auditUserId": {
            "type": "string",
            "description": "Audit username"
          },
          "auditModuleName": {
            "type": "string",
            "description": "NOMIS or DPS module that created the record"
          },
          "auditClientUserId": {
            "type": "string",
            "description": "Client userid"
          },
          "auditClientIpAddress": {
            "type": "string",
            "description": "IP Address where request originated from"
          },
          "auditClientWorkstationName": {
            "type": "string",
            "description": "Machine name where request originated from"
          },
          "auditAdditionalInfo": {
            "type": "string",
            "description": "Additional information that is audited"
          }
        },
        "description": "The data held in NOMIS the person or system that created this record"
      },
      "UpdateAlertRequest": {
        "required": [
          "date",
          "isActive",
          "updateUsername"
        ],
        "type": "object",
        "properties": {
          "date": {
            "type": "string",
            "description": "Date alert started",
            "format": "date"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date alert expired",
            "format": "date"
          },
          "isActive": {
            "type": "boolean",
            "description": "true if alert is active and has not expired"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment"
          },
          "updateUsername": {
            "type": "string",
            "description": "Username of person that update the record (might also be a system) "
          },
          "authorisedBy": {
            "type": "string",
            "description": "Free format text of person or department that authorised the alert",
            "example": "security"
          }
        },
        "description": "A request to update an alert in NOMIS"
      },
      "UpdateNonAssociationRequest": {
        "required": [
          "effectiveDate",
          "reason",
          "recipReason",
          "type"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "Reason code of the first prisoner, domain NON_ASSO_RSN",
            "example": "VIC"
          },
          "recipReason": {
            "type": "string",
            "description": "Reason code of the other prisoner, domain NON_ASSO_RSN",
            "example": "PER"
          },
          "type": {
            "type": "string",
            "description": "Type code, domain NON_ASSO_TYP",
            "example": "WING"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Free text name of staff member",
            "example": "Joe Bloggs"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Effective date",
            "format": "date",
            "example": "2022-08-12"
          },
          "comment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date",
            "format": "date",
            "example": "2024-08-12"
          }
        },
        "description": "Offender NonAssociation update request"
      },
      "ProfileRequest": {
        "required": [
          "profileCode",
          "profileType"
        ],
        "type": "object",
        "properties": {
          "profileType": {
            "type": "string",
            "description": "Reference Domain for the attribute",
            "enum": [
              "HOU_SANI_FIT",
              "HOU_UNIT_ATT",
              "HOU_USED_FOR",
              "SUP_LVL_TYPE",
              "NON_ASSO_TYP"
            ]
          },
          "profileCode": {
            "type": "string",
            "description": "Reference Code within the domain for the attribute"
          }
        },
        "description": "Location profile or attribute"
      },
      "UpdateLocationRequest": {
        "required": [
          "description",
          "locationCode",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationType": {
            "type": "string",
            "description": "Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)",
            "enum": [
              "ADJU",
              "ADMI",
              "APP",
              "AREA",
              "ASSO",
              "BOOT",
              "BOX",
              "CELL",
              "CLAS",
              "EXER",
              "EXTE",
              "FAIT",
              "GROU",
              "HCEL",
              "HOLD",
              "IGRO",
              "INSI",
              "INTE",
              "LAND",
              "LOCA",
              "MEDI",
              "MOVE",
              "OFFI",
              "OUTS",
              "POSI",
              "RESI",
              "ROOM",
              "RTU",
              "SHEL",
              "SPOR",
              "SPUR",
              "STOR",
              "TABL",
              "TRAI",
              "TRRM",
              "VIDE",
              "VISIT",
              "WING",
              "WORK"
            ]
          },
          "description": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Full code hierarchy",
            "example": "MDI-C-3-015"
          },
          "userDescription": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Description of location",
            "example": "Some description"
          },
          "locationCode": {
            "type": "string",
            "description": "Usually a number for a cell, a letter for a wing or landing. Used to calculate description",
            "example": "005"
          },
          "parentLocationId": {
            "type": "integer",
            "description": "Parent location if any, e.g. landing for a cell",
            "format": "int64",
            "example": 1234567
          },
          "unitType": {
            "type": "string",
            "description": "Housing Unit type, Reference code (HOU_UN_TYPE)",
            "enum": [
              "HC",
              "HOLC",
              "NA",
              "OU",
              "REC",
              "SEG",
              "SPLC"
            ]
          },
          "listSequence": {
            "type": "integer",
            "description": "Defines the order within parent location",
            "format": "int32"
          },
          "comment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          },
          "profiles": {
            "type": "array",
            "description": "Profiles",
            "items": {
              "$ref": "#/components/schemas/ProfileRequest"
            }
          },
          "usages": {
            "type": "array",
            "description": "Usages",
            "items": {
              "$ref": "#/components/schemas/UsageRequest"
            }
          }
        },
        "description": "Location update request"
      },
      "UsageRequest": {
        "required": [
          "internalLocationUsageType"
        ],
        "type": "object",
        "properties": {
          "internalLocationUsageType": {
            "type": "string",
            "description": "Types of location that the usage applies to",
            "enum": [
              "APP",
              "MOVEMENT",
              "OCCUR",
              "OIC",
              "OTHER",
              "OTH",
              "PROG",
              "PROP",
              "VISIT"
            ]
          },
          "capacity": {
            "type": "integer",
            "format": "int32"
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Location usage"
      },
      "DeactivateRequest": {
        "required": [
          "force"
        ],
        "type": "object",
        "properties": {
          "deactivateDate": {
            "type": "string",
            "description": "The deactivation date, defaults to today",
            "format": "date",
            "example": "2024-12-31"
          },
          "reasonCode": {
            "type": "string",
            "description": "The reason code for deactivation, reference data 'LIV_UN_RSN'",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J",
              "K",
              "L"
            ]
          },
          "reactivateDate": {
            "type": "string",
            "description": "The expected reactivation date if any",
            "format": "date",
            "example": "2024-12-31"
          },
          "force": {
            "type": "boolean",
            "description": "If true, update Nomis even if already inactive. Useful when a temporarily inactive location is deactivated permanently"
          }
        },
        "description": "Location deactivate request"
      },
      "UpdateCertificationRequest": {
        "required": [
          "certified",
          "cnaCapacity"
        ],
        "type": "object",
        "properties": {
          "cnaCapacity": {
            "minimum": 0,
            "type": "integer",
            "description": "The CNA certified capacity",
            "format": "int32"
          },
          "certified": {
            "type": "boolean",
            "description": "Whether the location is certified"
          }
        },
        "description": "Location update certification request"
      },
      "UpdateCapacityRequest": {
        "type": "object",
        "properties": {
          "capacity": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum physical capacity",
            "format": "int32"
          },
          "operationalCapacity": {
            "minimum": 0,
            "type": "integer",
            "description": "The maximum operational capacity",
            "format": "int32"
          }
        },
        "description": "Location update capacity request"
      },
      "UpdateKeyDateAdjustmentRequest": {
        "required": [
          "adjustmentDays",
          "adjustmentFromDate",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "ADA",
            "enum": [
              "LAL",
              "UAL",
              "RADA",
              "ADA",
              "SREM"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Key date adjustment update request"
      },
      "CreateIncentiveRequest": {
        "required": [
          "iepDateTime",
          "iepLevel",
          "prisonId",
          "userId"
        ],
        "type": "object",
        "properties": {
          "iepLevel": {
            "type": "string",
            "description": "IEP Level",
            "example": "Standard"
          },
          "comments": {
            "type": "string",
            "description": "Review comments",
            "example": "A review took place"
          },
          "iepDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time when last review took place",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison ID",
            "example": "MDI"
          },
          "userId": {
            "type": "string",
            "description": "Username of the reviewer",
            "example": "AJONES"
          }
        },
        "description": "IEP creation request"
      },
      "ReferenceCode": {
        "required": [
          "active",
          "code",
          "description",
          "domain",
          "systemDataFlag"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "domain": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "sequence": {
            "type": "integer",
            "format": "int32"
          },
          "parentCode": {
            "type": "string"
          },
          "expiredDate": {
            "type": "string",
            "format": "date"
          },
          "systemDataFlag": {
            "type": "boolean"
          }
        }
      },
      "CreatePrisonIncentiveRequest": {
        "required": [
          "active",
          "defaultOnAdmission",
          "levelCode"
        ],
        "type": "object",
        "properties": {
          "levelCode": {
            "type": "string",
            "description": "Incentive Level code",
            "example": "STD"
          },
          "active": {
            "type": "boolean",
            "description": "active status of the Global Incentive Level",
            "example": true
          },
          "defaultOnAdmission": {
            "type": "boolean",
            "description": "default on admission",
            "example": true
          },
          "visitOrderAllowance": {
            "type": "integer",
            "description": "The number of weekday visits for a convicted prisoner per fortnight",
            "format": "int32",
            "example": 5500
          },
          "privilegedVisitOrderAllowance": {
            "type": "integer",
            "description": "The number of privileged/weekend visits for a convicted prisoner per 4 weeks",
            "format": "int32",
            "example": 5500
          },
          "remandTransferLimitInPence": {
            "type": "integer",
            "description": "The amount transferred weekly from the private cash account to the spends account for a remand prisoner to use",
            "format": "int32",
            "example": 5500
          },
          "remandSpendLimitInPence": {
            "type": "integer",
            "description": "The maximum amount allowed in the spends account for a remand prisoner",
            "format": "int32",
            "example": 5500
          },
          "convictedTransferLimitInPence": {
            "type": "integer",
            "description": "The amount transferred weekly from the private cash account to the spends account for a convicted prisoner to use",
            "format": "int32",
            "example": 5500
          },
          "convictedSpendLimitInPence": {
            "type": "integer",
            "description": "The maximum amount allowed in the spends account for a convicted prisoner",
            "format": "int32",
            "example": 5500
          }
        },
        "description": "Prison Incentive level data create request"
      },
      "PrisonIncentiveLevelDataResponse": {
        "required": [
          "active",
          "defaultOnAdmission",
          "iepLevelCode",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string"
          },
          "iepLevelCode": {
            "type": "string"
          },
          "visitOrderAllowance": {
            "type": "integer",
            "format": "int32"
          },
          "privilegedVisitOrderAllowance": {
            "type": "integer",
            "format": "int32"
          },
          "defaultOnAdmission": {
            "type": "boolean"
          },
          "remandTransferLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "remandSpendLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "convictedTransferLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "convictedSpendLimitInPence": {
            "type": "integer",
            "format": "int32"
          },
          "active": {
            "type": "boolean"
          },
          "expiryDate": {
            "type": "string",
            "format": "date"
          },
          "visitAllowanceActive": {
            "type": "boolean"
          },
          "visitAllowanceExpiryDate": {
            "type": "string",
            "format": "date"
          }
        },
        "description": "Incentive information"
      },
      "CSIPComponent": {
        "required": [
          "component",
          "dpsId",
          "nomisId"
        ],
        "type": "object",
        "properties": {
          "component": {
            "type": "string",
            "description": "The child component created",
            "enum": [
              "ATTENDEE",
              "FACTOR",
              "INTERVIEW",
              "PLAN",
              "REVIEW"
            ]
          },
          "nomisId": {
            "type": "integer",
            "description": "The nomisId of the created component",
            "format": "int64"
          },
          "dpsId": {
            "type": "string",
            "description": "The dpsId of the created component"
          }
        },
        "description": "Any new CSIP components that were created"
      },
      "UpsertCSIPResponse": {
        "required": [
          "components",
          "nomisCSIPReportId",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "nomisCSIPReportId": {
            "type": "integer",
            "description": "The nomis csip id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The prisoner nomis Id relating to this csip"
          },
          "components": {
            "type": "array",
            "description": "Any new CSIP components that were created",
            "items": {
              "$ref": "#/components/schemas/CSIPComponent"
            }
          }
        },
        "description": "A response after a csip has been upserted in NOMIS"
      },
      "ActionsRequest": {
        "required": [
          "csraOrRsraReview",
          "nonAssociationsUpdated",
          "observationBook",
          "openCSIPAlert",
          "serviceReferral",
          "simReferral",
          "unitOrCellMove"
        ],
        "type": "object",
        "properties": {
          "openCSIPAlert": {
            "type": "boolean"
          },
          "nonAssociationsUpdated": {
            "type": "boolean"
          },
          "observationBook": {
            "type": "boolean"
          },
          "unitOrCellMove": {
            "type": "boolean"
          },
          "csraOrRsraReview": {
            "type": "boolean"
          },
          "serviceReferral": {
            "type": "boolean"
          },
          "simReferral": {
            "type": "boolean"
          }
        },
        "description": "Action list"
      },
      "AttendeeRequest": {
        "required": [
          "attended",
          "dpsId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Review Attendee/Contributor Id",
            "format": "int64"
          },
          "dpsId": {
            "type": "string",
            "description": "DPS Attendee id"
          },
          "name": {
            "type": "string",
            "description": "Name of attendee/contributor"
          },
          "role": {
            "type": "string",
            "description": "Role of attendee/contributor"
          },
          "attended": {
            "type": "boolean",
            "description": "If attended (otherwise contributor)"
          },
          "contribution": {
            "type": "string",
            "description": "Contribution"
          }
        },
        "description": "Attendees to the review"
      },
      "CSIPFactorRequest": {
        "required": [
          "dpsId",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Contributory Factor id",
            "format": "int64"
          },
          "dpsId": {
            "type": "string",
            "description": "DPS Factor id"
          },
          "typeCode": {
            "type": "string",
            "description": "Contributory Factor"
          },
          "comment": {
            "type": "string",
            "description": "Factor comment"
          }
        },
        "description": "Contributory factors"
      },
      "DecisionRequest": {
        "required": [
          "actions"
        ],
        "type": "object",
        "properties": {
          "conclusion": {
            "type": "string",
            "description": "Conclusion & Reason for decision"
          },
          "decisionOutcomeCode": {
            "type": "string",
            "description": "Outcome"
          },
          "signedOffRoleCode": {
            "type": "string",
            "description": "Signed off by"
          },
          "recordedBy": {
            "type": "string",
            "description": "The username of the person who recorded the decision"
          },
          "recordedDate": {
            "type": "string",
            "description": "Recorded Date",
            "format": "date"
          },
          "nextSteps": {
            "type": "string",
            "description": "What to do next"
          },
          "otherDetails": {
            "type": "string",
            "description": "Other information to take into consideration"
          },
          "actions": {
            "$ref": "#/components/schemas/ActionsRequest"
          }
        },
        "description": "DecisionAndActions"
      },
      "InterviewDetailRequest": {
        "required": [
          "date",
          "dpsId",
          "interviewee",
          "roleCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Interview Id",
            "format": "int64"
          },
          "dpsId": {
            "type": "string",
            "description": "DPS Interview id"
          },
          "interviewee": {
            "type": "string",
            "description": "Person being interviewed"
          },
          "date": {
            "type": "string",
            "description": "date of interview",
            "format": "date"
          },
          "roleCode": {
            "type": "string",
            "description": "Why the incident occurred"
          },
          "comments": {
            "type": "string",
            "description": "Additional data regarding the interview"
          }
        },
        "description": "Interview"
      },
      "InvestigationDetailRequest": {
        "type": "object",
        "properties": {
          "staffInvolved": {
            "type": "string",
            "description": "Staff involved in the incident"
          },
          "evidenceSecured": {
            "type": "string",
            "description": "Whether any evidence was secured"
          },
          "reasonOccurred": {
            "type": "string",
            "description": "Why the incident occurred"
          },
          "usualBehaviour": {
            "type": "string",
            "description": "Normal behaviour of the offender"
          },
          "trigger": {
            "type": "string",
            "description": "Offender's trigger"
          },
          "protectiveFactors": {
            "type": "string",
            "description": "Protective factors"
          },
          "interviews": {
            "type": "array",
            "description": "Interview",
            "items": {
              "$ref": "#/components/schemas/InterviewDetailRequest"
            }
          }
        },
        "description": "Investigation details of the incident"
      },
      "PlanRequest": {
        "required": [
          "dpsId",
          "identifiedNeed",
          "intervention",
          "referredBy",
          "targetDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Plan Id",
            "format": "int64"
          },
          "dpsId": {
            "type": "string",
            "description": "DPS Plan/IdentifiedNeed id"
          },
          "identifiedNeed": {
            "type": "string",
            "description": "Details of the need"
          },
          "intervention": {
            "type": "string",
            "description": "Intervention plan"
          },
          "progression": {
            "type": "string",
            "description": "Information regarding progression of plan"
          },
          "referredBy": {
            "type": "string",
            "description": "The person reporting - free text"
          },
          "targetDate": {
            "type": "string",
            "description": "Target date of plan",
            "format": "date"
          },
          "closedDate": {
            "type": "string",
            "description": "Plan closed date",
            "format": "date"
          }
        },
        "description": "CSIP Plans"
      },
      "ReviewRequest": {
        "required": [
          "caseNote",
          "closeCSIP",
          "csipUpdated",
          "dpsId",
          "peopleInformed",
          "recordedBy",
          "recordedDate",
          "remainOnCSIP"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Review Id",
            "format": "int64"
          },
          "dpsId": {
            "type": "string",
            "description": "DPS Review id"
          },
          "attendees": {
            "type": "array",
            "description": "Attendees to the review",
            "items": {
              "$ref": "#/components/schemas/AttendeeRequest"
            }
          },
          "remainOnCSIP": {
            "type": "boolean",
            "description": "Whether to remain on CSIP"
          },
          "csipUpdated": {
            "type": "boolean",
            "description": "If the csip has been updated"
          },
          "caseNote": {
            "type": "boolean",
            "description": "If a case note was added"
          },
          "closeCSIP": {
            "type": "boolean",
            "description": "If the csip is closed"
          },
          "peopleInformed": {
            "type": "boolean",
            "description": "Whether people were informed"
          },
          "summary": {
            "type": "string",
            "description": "Summary details"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Next Review date",
            "format": "date"
          },
          "closeDate": {
            "type": "string",
            "description": "Review closed date",
            "format": "date"
          },
          "recordedDate": {
            "type": "string",
            "description": "The date the review was created",
            "format": "date"
          },
          "recordedBy": {
            "type": "string",
            "description": "The username of the person who recorded the review"
          }
        },
        "description": "CSIP Reviews"
      },
      "SaferCustodyScreeningRequest": {
        "required": [
          "recordedBy",
          "recordedDate",
          "scsOutcomeCode"
        ],
        "type": "object",
        "properties": {
          "scsOutcomeCode": {
            "type": "string",
            "description": "Result of the Safer Custody Screening"
          },
          "recordedBy": {
            "type": "string",
            "description": "The username of the person who recorded the data"
          },
          "recordedDate": {
            "type": "string",
            "description": "When the the SCS occurred",
            "format": "date"
          },
          "reasonForDecision": {
            "type": "string",
            "description": "Why the decision was made"
          }
        },
        "description": "Safer custody screening"
      },
      "UpsertCSIPRequest": {
        "required": [
          "areaOfWorkCode",
          "incidentDate",
          "locationCode",
          "offenderNo",
          "proActiveReferral",
          "reportedBy",
          "reportedDate",
          "staffAssaulted",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The csip id",
            "format": "int64",
            "example": 1234
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender No",
            "example": "A11235BC"
          },
          "logNumber": {
            "type": "string",
            "description": "Log number"
          },
          "incidentDate": {
            "type": "string",
            "description": "Date/Time incident occurred",
            "format": "date",
            "example": "2023-04-03"
          },
          "incidentTime": {
            "type": "string",
            "description": "Date/Time incident occurred",
            "format": "partial-time",
            "example": "10:00"
          },
          "typeCode": {
            "type": "string",
            "description": "Type of incident"
          },
          "locationCode": {
            "type": "string",
            "description": "Location of the incident"
          },
          "areaOfWorkCode": {
            "type": "string",
            "description": "The Area of work, aka function"
          },
          "reportedBy": {
            "type": "string",
            "description": "The person reporting the incident - free text"
          },
          "reportedDate": {
            "type": "string",
            "description": "Date reported",
            "format": "date"
          },
          "proActiveReferral": {
            "type": "boolean",
            "description": "proActive Referral"
          },
          "staffAssaulted": {
            "type": "boolean",
            "description": "If a staff member was assaulted"
          },
          "staffAssaultedName": {
            "type": "string",
            "description": "If assaulted, the staff member name"
          },
          "prisonCodeWhenRecorded": {
            "type": "string",
            "description": "Originating Prison Id"
          },
          "reportDetailRequest": {
            "$ref": "#/components/schemas/UpsertReportDetailsRequest"
          },
          "saferCustodyScreening": {
            "$ref": "#/components/schemas/SaferCustodyScreeningRequest"
          },
          "investigation": {
            "$ref": "#/components/schemas/InvestigationDetailRequest"
          },
          "decision": {
            "$ref": "#/components/schemas/DecisionRequest"
          },
          "caseManager": {
            "type": "string",
            "description": "Case Manager involved"
          },
          "planReason": {
            "type": "string",
            "description": "Reason for plan"
          },
          "firstCaseReviewDate": {
            "type": "string",
            "description": "Date of first review",
            "format": "date"
          },
          "plans": {
            "type": "array",
            "description": "CSIP Plans",
            "items": {
              "$ref": "#/components/schemas/PlanRequest"
            }
          },
          "reviews": {
            "type": "array",
            "description": "CSIP Reviews",
            "items": {
              "$ref": "#/components/schemas/ReviewRequest"
            }
          }
        },
        "description": "CSIP Report create/update request"
      },
      "UpsertReportDetailsRequest": {
        "required": [
          "factors",
          "referralComplete",
          "saferCustodyTeamInformed"
        ],
        "type": "object",
        "properties": {
          "involvementCode": {
            "type": "string",
            "description": "How the offender was involved"
          },
          "concern": {
            "type": "string",
            "description": "Concern description"
          },
          "knownReasons": {
            "type": "string",
            "description": "known reasons for the involvement"
          },
          "otherInformation": {
            "type": "string",
            "description": "Additional information"
          },
          "saferCustodyTeamInformed": {
            "type": "boolean",
            "description": "If the safer custody team were informed"
          },
          "referralComplete": {
            "type": "boolean",
            "description": "If the referral has been completed"
          },
          "referralCompletedBy": {
            "type": "string",
            "description": "Who completed the referral"
          },
          "referralCompletedDate": {
            "type": "string",
            "description": "Date the referral was completed",
            "format": "date"
          },
          "factors": {
            "type": "array",
            "description": "Contributory factors",
            "items": {
              "$ref": "#/components/schemas/CSIPFactorRequest"
            }
          }
        },
        "description": "Additional information for the CSIP Report"
      },
      "UpdateAmendment": {
        "required": [
          "authorUsername",
          "createdDateTime",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Free format text body of amendment"
          },
          "authorUsername": {
            "type": "string",
            "description": "Author login name of person or department that added the amendment"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Amendment created timestamp",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Amendments to the text"
      },
      "UpdateCaseNoteRequest": {
        "required": [
          "amendments",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Free format text body of the amendment"
          },
          "amendments": {
            "type": "array",
            "description": "Amendments to the text",
            "items": {
              "$ref": "#/components/schemas/UpdateAmendment"
            }
          }
        },
        "description": "A request to amend a case note in NOMIS"
      },
      "UpdateAppointmentRequest": {
        "required": [
          "endTime",
          "eventDate",
          "eventSubType",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "eventDate": {
            "type": "string",
            "description": "Appointment date",
            "format": "date",
            "example": "2022-08-12"
          },
          "startTime": {
            "type": "string",
            "description": "Appointment start time",
            "format": "partial-time",
            "example": "09:45"
          },
          "endTime": {
            "type": "string",
            "description": "Activity end time",
            "format": "partial-time",
            "example": "15:20"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the appointment is to occur (in cell if null)",
            "format": "int64",
            "example": 112233
          },
          "eventSubType": {
            "type": "string",
            "description": "Appointment event sub-type",
            "example": "MEOT"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          }
        },
        "description": "Offender individual schedule update request"
      },
      "UpdateAlertType": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The alert type description"
          }
        },
        "description": "A request to update an alert type reference data in NOMIS"
      },
      "UpdateAlertCode": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "type": "string",
            "description": "The alert description"
          }
        },
        "description": "A request to update an alert code reference data in NOMIS"
      },
      "Repair": {
        "required": [
          "createdByUsername",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string"
          },
          "cost": {
            "type": "number"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          }
        },
        "description": "The repairs required due to the damage"
      },
      "UpdateRepairsResponse": {
        "required": [
          "repairs"
        ],
        "type": "object",
        "properties": {
          "repairs": {
            "type": "array",
            "description": "The repairs required due to the damage",
            "items": {
              "$ref": "#/components/schemas/Repair"
            }
          }
        }
      },
      "RepairToUpdateOrAdd": {
        "required": [
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "NOMIS repair type code",
            "enum": [
              "CLEA",
              "DECO",
              "ELEC",
              "FABR",
              "LOCK",
              "PLUM"
            ]
          },
          "comment": {
            "type": "string",
            "description": "Description of repair required by damage"
          }
        },
        "description": "Current list of repairs required due to damage"
      },
      "UpdateRepairsRequest": {
        "required": [
          "repairs"
        ],
        "type": "object",
        "properties": {
          "repairs": {
            "type": "array",
            "description": "Current list of repairs required due to damage",
            "items": {
              "$ref": "#/components/schemas/RepairToUpdateOrAdd"
            }
          }
        },
        "description": "Repairs required due to damage. Any items not in this list will be removed from the Adjudication in NOMIS"
      },
      "UpdateHearingRequest": {
        "required": [
          "hearingDate",
          "hearingTime",
          "hearingType",
          "internalLocationId"
        ],
        "type": "object",
        "properties": {
          "hearingType": {
            "type": "string",
            "description": "Type of hearing",
            "example": "GOV"
          },
          "hearingDate": {
            "type": "string",
            "description": "Hearing date",
            "format": "date"
          },
          "hearingTime": {
            "type": "string",
            "description": "Hearing time",
            "format": "partial-time"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "location id for the hearing",
            "format": "int64",
            "example": 123456
          }
        },
        "description": "Hearing update fields"
      },
      "Evidence": {
        "required": [
          "createdByUsername",
          "date",
          "detail",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "date": {
            "type": "string",
            "format": "date"
          },
          "detail": {
            "type": "string"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          }
        }
      },
      "UpdateEvidenceResponse": {
        "required": [
          "evidence"
        ],
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "description": "The evidence associated with the adjudication incident",
            "items": {
              "$ref": "#/components/schemas/Evidence"
            }
          }
        }
      },
      "EvidenceToUpdateOrAdd": {
        "required": [
          "detail",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Type of evidence",
            "example": "PHOTO",
            "enum": [
              "BEHAV",
              "DRUGTEST",
              "EVI_BAG",
              "OTHER",
              "PHOTO",
              "VICTIM",
              "WEAP",
              "WITNESS"
            ]
          },
          "detail": {
            "type": "string",
            "description": "Description of evidence",
            "example": "Image of damages"
          }
        },
        "description": "Current list of evidence items"
      },
      "UpdateEvidenceRequest": {
        "required": [
          "evidence"
        ],
        "type": "object",
        "properties": {
          "evidence": {
            "type": "array",
            "description": "Current list of evidence items",
            "items": {
              "$ref": "#/components/schemas/EvidenceToUpdateOrAdd"
            }
          }
        },
        "description": "Evidence associated with adjudication incident. Any items not in this list will be removed from the Adjudication in NOMIS"
      },
      "HearingResultAwardResponse": {
        "required": [
          "bookingId",
          "sanctionSequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "sanctionSequence": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Provides the generated Hearing Result Award composite ID after creation"
      },
      "UpdateHearingResultAwardResponses": {
        "required": [
          "awardsCreated",
          "awardsDeleted"
        ],
        "type": "object",
        "properties": {
          "awardsCreated": {
            "type": "array",
            "description": "an ordered list of awards created, the order matching the request order for awardRequestsToCreate",
            "items": {
              "$ref": "#/components/schemas/HearingResultAwardResponse"
            }
          },
          "awardsDeleted": {
            "type": "array",
            "description": "a list of awards that were deleted due to this update",
            "items": {
              "$ref": "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "description": "A list of Hearing result awards created (aka punishment)"
      },
      "AdjudicationChargeId": {
        "required": [
          "adjudicationNumber",
          "chargeSequence"
        ],
        "type": "object",
        "properties": {
          "adjudicationNumber": {
            "type": "integer",
            "description": "adjudication number",
            "format": "int64"
          },
          "chargeSequence": {
            "type": "integer",
            "description": "charge sequence within the adjudication",
            "format": "int32"
          }
        },
        "description": "adjudication that contains the matching award that this award is consecutive to"
      },
      "ExistingHearingResultAwardRequest": {
        "required": [
          "award",
          "sanctionSequence"
        ],
        "type": "object",
        "properties": {
          "award": {
            "$ref": "#/components/schemas/HearingResultAwardRequest"
          },
          "sanctionSequence": {
            "type": "integer",
            "description": "sanction sequence for the booking associated with the adjudication",
            "format": "int32"
          }
        },
        "description": "Hearing result award (aka punishment) to be created"
      },
      "HearingResultAwardRequest": {
        "required": [
          "effectiveDate",
          "sanctionStatus",
          "sanctionType"
        ],
        "type": "object",
        "properties": {
          "sanctionType": {
            "type": "string",
            "description": "The type of award",
            "example": "CAUTION",
            "enum": [
              "ADA",
              "CAUTION",
              "CC",
              "EXTRA_WORK",
              "EXTW",
              "FORFEIT",
              "OTHER",
              "REMACT",
              "REMWIN",
              "STOP_EARN",
              "STOP_PCT",
              "PP"
            ]
          },
          "sanctionStatus": {
            "type": "string",
            "description": "The status of the award",
            "example": "IMMEDIATE",
            "enum": [
              "AS_AWARDED",
              "AWARD_RED",
              "IMMEDIATE",
              "PROSPECTIVE",
              "QUASHED",
              "REDAPP",
              "SUSPENDED",
              "SUSPEN_EXT",
              "SUSPEN_RED",
              "SUSP_PROSP"
            ]
          },
          "commentText": {
            "type": "string",
            "description": "Award comment",
            "example": "GUILTY"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Award effective date",
            "format": "date"
          },
          "compensationAmount": {
            "type": "number",
            "description": "optional compensation amount",
            "example": 0.5
          },
          "sanctionDays": {
            "type": "integer",
            "description": "the duration  of the award, in days",
            "format": "int32"
          },
          "consecutiveCharge": {
            "$ref": "#/components/schemas/AdjudicationChargeId"
          }
        },
        "description": "Hearing result award (aka punishment) to be created"
      },
      "UnquashHearingResultAwardRequest": {
        "required": [
          "awards",
          "findingCode"
        ],
        "type": "object",
        "properties": {
          "findingCode": {
            "type": "string",
            "description": "Finding code",
            "example": "PROVED"
          },
          "awards": {
            "$ref": "#/components/schemas/UpdateHearingResultAwardRequest"
          }
        }
      },
      "UpdateHearingResultAwardRequest": {
        "required": [
          "awardsToCreate",
          "awardsToUpdate"
        ],
        "type": "object",
        "properties": {
          "awardsToCreate": {
            "type": "array",
            "description": "a list of award requests to create",
            "items": {
              "$ref": "#/components/schemas/HearingResultAwardRequest"
            }
          },
          "awardsToUpdate": {
            "type": "array",
            "description": "a list of award requests to update",
            "items": {
              "$ref": "#/components/schemas/ExistingHearingResultAwardRequest"
            }
          }
        },
        "description": "A list of Hearing result awards (aka punishment) to be created and updated"
      },
      "CourseScheduleRequest": {
        "required": [
          "cancelled",
          "date",
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the course schedule if known",
            "format": "int64",
            "example": 13245
          },
          "date": {
            "type": "string",
            "description": "The date of the course schedule",
            "format": "date",
            "example": "2023-04-03"
          },
          "startTime": {
            "type": "string",
            "description": "The time of the course schedule",
            "format": "partial-time",
            "example": "10:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time the course schedule ends",
            "format": "partial-time",
            "example": "11:00"
          },
          "cancelled": {
            "type": "boolean",
            "description": "Whether the course schedule has been cancelled",
            "example": true
          }
        },
        "description": "Course schedule request"
      },
      "PayRateRequest": {
        "required": [
          "incentiveLevel",
          "payBand",
          "rate"
        ],
        "type": "object",
        "properties": {
          "incentiveLevel": {
            "type": "string",
            "description": "The incentive level",
            "example": "BAS"
          },
          "payBand": {
            "type": "string",
            "description": "The pay band (1 TO 10)",
            "example": "4"
          },
          "rate": {
            "type": "number",
            "description": "The half day rate",
            "example": 0.5
          },
          "startDate": {
            "type": "string",
            "description": "Pay rate start date, null means 'before every other rate'",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Pay rate end date, if not passed will be derived from start dates",
            "format": "date",
            "example": "2022-08-12"
          }
        },
        "description": "Course activity creation request pay rates"
      },
      "ScheduleRuleRequest": {
        "required": [
          "endTime",
          "friday",
          "monday",
          "saturday",
          "startTime",
          "sunday",
          "thursday",
          "tuesday",
          "wednesday"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Schedule start time in 24 hour clock",
            "format": "partial-time",
            "example": "08:00"
          },
          "endTime": {
            "type": "string",
            "description": "Schedule end time in 24 hour clock",
            "format": "partial-time",
            "example": "11:00"
          },
          "monday": {
            "type": "boolean",
            "description": "Scheduled on Monday",
            "example": true
          },
          "tuesday": {
            "type": "boolean",
            "description": "Scheduled on Tuesday",
            "example": true
          },
          "wednesday": {
            "type": "boolean",
            "description": "Scheduled on Wednesday",
            "example": true
          },
          "thursday": {
            "type": "boolean",
            "description": "Scheduled on Thursday",
            "example": true
          },
          "friday": {
            "type": "boolean",
            "description": "Scheduled on Friday",
            "example": true
          },
          "saturday": {
            "type": "boolean",
            "description": "Scheduled on Saturday",
            "example": false
          },
          "sunday": {
            "type": "boolean",
            "description": "Scheduled on Sunday",
            "example": false
          }
        },
        "description": "Course activity creation request schedule rules"
      },
      "UpdateActivityRequest": {
        "required": [
          "capacity",
          "description",
          "excludeBankHolidays",
          "outsideWork",
          "payPerSession",
          "payRates",
          "programCode",
          "scheduleRules",
          "schedules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the activity is to occur (from activity schedule)",
            "format": "int64"
          },
          "capacity": {
            "maximum": 999,
            "type": "integer",
            "description": "Capacity of activity (from activity schedule)",
            "format": "int32"
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates",
            "items": {
              "$ref": "#/components/schemas/PayRateRequest"
            }
          },
          "description": {
            "type": "string",
            "description": "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode": {
            "type": "string",
            "description": "Minimum Incentive Level"
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H",
            "enum": [
              "F",
              "H"
            ]
          },
          "scheduleRules": {
            "type": "array",
            "description": "Schedule rules",
            "items": {
              "$ref": "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Exclude bank holidays?"
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Outside work?"
          },
          "programCode": {
            "type": "string",
            "description": "Program Service code (from activity category)"
          },
          "schedules": {
            "type": "array",
            "description": "Schedules",
            "items": {
              "$ref": "#/components/schemas/CourseScheduleRequest"
            }
          }
        },
        "description": "Course activity update request"
      },
      "CreateActivityResponse": {
        "required": [
          "courseActivityId",
          "courseSchedules"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "The created course activity id",
            "format": "int64"
          },
          "courseSchedules": {
            "type": "array",
            "description": "The created course schedules",
            "items": {
              "$ref": "#/components/schemas/CreateScheduledInstanceResponse"
            }
          }
        },
        "description": "Activity creation response"
      },
      "CreateScheduledInstanceResponse": {
        "required": [
          "courseScheduleId",
          "date",
          "endTime",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "courseScheduleId": {
            "type": "integer",
            "description": "The created scheduled instance id",
            "format": "int64"
          },
          "date": {
            "type": "string",
            "description": "The instance date",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The instance start time",
            "format": "partial-time"
          },
          "endTime": {
            "type": "string",
            "description": "The instance end time",
            "format": "partial-time"
          }
        },
        "description": "The created course schedules"
      },
      "UpdateCourseScheduleResponse": {
        "required": [
          "courseScheduleId"
        ],
        "type": "object",
        "properties": {
          "courseScheduleId": {
            "type": "integer",
            "description": "The id of the course schedule",
            "format": "int64",
            "example": 123456
          }
        },
        "description": "Course schedule update update response"
      },
      "AllocationExclusion": {
        "required": [
          "day"
        ],
        "type": "object",
        "properties": {
          "day": {
            "type": "string",
            "description": "The day of the exclusion",
            "example": "MON",
            "enum": [
              "MON",
              "TUE",
              "WED",
              "THU",
              "FRI",
              "SAT",
              "SUN"
            ]
          },
          "slot": {
            "type": "string",
            "description": "The session the exclusion applies to (morning, afternoon or evening). Or null for the whole day.",
            "example": "AM",
            "enum": [
              "AM",
              "PM",
              "ED"
            ]
          }
        },
        "description": "A session to exclude from the allocation during which period attendances will not be generated"
      },
      "UpsertAllocationRequest": {
        "required": [
          "bookingId",
          "programStatusCode",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id of the prisoner",
            "format": "int64",
            "example": 1234567
          },
          "payBandCode": {
            "type": "string",
            "description": "The prisoner's pay band",
            "example": "2"
          },
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endReason": {
            "type": "string",
            "description": "Activity end reason (from domain PS_END_RSN)",
            "example": "REL"
          },
          "endComment": {
            "type": "string",
            "description": "Activity end comment"
          },
          "suspended": {
            "type": "boolean",
            "description": "Offender is suspended from Activity?"
          },
          "suspendedComment": {
            "type": "string",
            "description": "Activity suspended comment"
          },
          "programStatusCode": {
            "type": "string",
            "description": "Offender program status from domain OFF_PRG_STS",
            "example": "ALLOC"
          },
          "exclusions": {
            "type": "array",
            "description": "Sessions excluded from the allocation during which period attendances will not be generated",
            "items": {
              "$ref": "#/components/schemas/AllocationExclusion"
            }
          }
        },
        "description": "Course activity create or update allocation request"
      },
      "UpsertAllocationResponse": {
        "required": [
          "created",
          "offenderProgramReferenceId",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "offenderProgramReferenceId": {
            "type": "integer",
            "description": "The created OffenderProgramProfile id",
            "format": "int64",
            "example": 12345678
          },
          "created": {
            "type": "boolean",
            "description": "Whether or not the allocation was created"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code"
          }
        },
        "description": "OffenderProgramProfile create/update response"
      },
      "EndActivitiesRequest": {
        "required": [
          "courseActivityIds"
        ],
        "type": "object",
        "properties": {
          "courseActivityIds": {
            "type": "array",
            "description": "Course activity ids",
            "example": [
              1,
              2
            ],
            "items": {
              "type": "integer",
              "description": "Course activity ids",
              "format": "int64"
            }
          }
        },
        "description": "End activities request"
      },
      "CreateVisitRequest": {
        "required": [
          "endTime",
          "issueDate",
          "openClosedStatus",
          "prisonId",
          "room",
          "startDateTime",
          "visitComment",
          "visitOrderComment",
          "visitType",
          "visitorPersonIds"
        ],
        "type": "object",
        "properties": {
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endTime": {
            "pattern": "HH:mm",
            "type": "string",
            "description": "Visit end time",
            "example": "14:30"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the visit is to occur"
          },
          "visitorPersonIds": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "type": "integer",
              "description": "Visitors",
              "format": "int64"
            }
          },
          "visitType": {
            "type": "string",
            "description": "Visit type, whether social or official",
            "enum": [
              "SCON",
              "OFFI"
            ]
          },
          "issueDate": {
            "type": "string",
            "description": "Issue date",
            "format": "date"
          },
          "visitComment": {
            "type": "string",
            "description": "Comment to be added to visit"
          },
          "visitOrderComment": {
            "type": "string",
            "description": "Comment to be added to visit order (if one is created)"
          },
          "room": {
            "type": "string",
            "description": "Name of the real world room where visit will take place"
          },
          "openClosedStatus": {
            "type": "string",
            "description": "Whether visit is restricted to a closed session",
            "enum": [
              "OPEN",
              "CLOSED"
            ]
          }
        },
        "description": "Visit creation request"
      },
      "CreateVisitResponse": {
        "required": [
          "visitId"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The created Nomis visit id",
            "format": "int64"
          }
        },
        "description": "Visit creation response"
      },
      "CreateSentenceResponse": {
        "required": [
          "sentenceSeq",
          "termSeq"
        ],
        "type": "object",
        "properties": {
          "sentenceSeq": {
            "type": "integer",
            "format": "int64"
          },
          "termSeq": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Create sentence response"
      },
      "CreateCourtCaseRequest": {
        "required": [
          "courtId",
          "legalCaseType",
          "startDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "legalCaseType": {
            "type": "string"
          },
          "courtId": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "courtAppearance": {
            "$ref": "#/components/schemas/CourtAppearanceRequest"
          },
          "caseReference": {
            "type": "string"
          }
        },
        "description": "Court case create request"
      },
      "CreateCourtAppearanceResponse": {
        "required": [
          "courtEventChargesIds",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "courtEventChargesIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffenderChargeIdResponse"
            }
          }
        },
        "description": "Create adjustment response"
      },
      "CreateCourtCaseResponse": {
        "required": [
          "courtAppearanceIds",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "courtAppearanceIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreateCourtAppearanceResponse"
            }
          }
        },
        "description": "Create court case response"
      },
      "CaseIdentifier": {
        "required": [
          "createdDate",
          "reference"
        ],
        "type": "object",
        "properties": {
          "reference": {
            "type": "string"
          },
          "createdDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Court case associated reference"
      },
      "CaseIdentifierRequest": {
        "required": [
          "caseIdentifiers"
        ],
        "type": "object",
        "properties": {
          "caseIdentifiers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseIdentifier"
            }
          }
        },
        "description": "Case identifier list"
      },
      "CreateCaseNoteResponse": {
        "required": [
          "bookingId",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of this case note",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id of this case note (which is the prisoner's latest at creation time)",
            "format": "int64"
          }
        },
        "description": "A response after a case note created in NOMIS"
      },
      "CreateCaseNoteRequest": {
        "required": [
          "authorUsername",
          "caseNoteSubType",
          "caseNoteText",
          "caseNoteType",
          "occurrenceDateTime"
        ],
        "type": "object",
        "properties": {
          "caseNoteType": {
            "type": "string",
            "description": "The case note type"
          },
          "caseNoteSubType": {
            "type": "string",
            "description": "The case note subtype"
          },
          "occurrenceDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date case note occurred",
            "example": "2021-07-05T10:35:17"
          },
          "authorUsername": {
            "type": "string",
            "description": "Free format text of person or department that created the case note"
          },
          "caseNoteText": {
            "type": "string",
            "description": "Free format text body of case note"
          }
        },
        "description": "A request to create a case note in NOMIS"
      },
      "CreateAlertResponse": {
        "required": [
          "alertCode",
          "alertSequence",
          "bookingId",
          "type"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The prisoner's bookingId related to this alert",
            "format": "int64"
          },
          "alertSequence": {
            "type": "integer",
            "description": "The sequence primary key within this booking",
            "format": "int64"
          },
          "alertCode": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        },
        "description": "A response after an alert created in NOMIS"
      },
      "CreateAlertRequest": {
        "required": [
          "alertCode",
          "createUsername",
          "date",
          "isActive"
        ],
        "type": "object",
        "properties": {
          "alertCode": {
            "type": "string",
            "description": "The alert code"
          },
          "date": {
            "type": "string",
            "description": "Date alert started",
            "format": "date"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date alert expired",
            "format": "date"
          },
          "isActive": {
            "type": "boolean",
            "description": "true if alert is active and has not expired"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Free format text of person or department that authorised the alert",
            "example": "security"
          },
          "createUsername": {
            "type": "string",
            "description": "Username of person that created the record (might also be a system) "
          }
        },
        "description": "A request to create an alert in NOMIS"
      },
      "AdjudicationCharge": {
        "required": [
          "chargeSequence",
          "offence"
        ],
        "type": "object",
        "properties": {
          "offence": {
            "$ref": "#/components/schemas/AdjudicationOffence"
          },
          "evidence": {
            "type": "string"
          },
          "reportDetail": {
            "type": "string"
          },
          "offenceId": {
            "type": "string"
          },
          "chargeSequence": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AdjudicationIncident": {
        "required": [
          "adjudicationIncidentId",
          "createdByUsername",
          "createdDateTime",
          "incidentDate",
          "incidentTime",
          "incidentType",
          "internalLocation",
          "otherPrisonersInvolved",
          "otherStaffInvolved",
          "prison",
          "prisonerVictims",
          "prisonerWitnesses",
          "repairs",
          "reportedDate",
          "reportedTime",
          "reportingOfficers",
          "reportingStaff",
          "staffVictims",
          "staffWitnesses"
        ],
        "type": "object",
        "properties": {
          "adjudicationIncidentId": {
            "type": "integer",
            "description": "The adjudication incident Id, part of the composite key with adjudicationSequence",
            "format": "int64"
          },
          "reportingStaff": {
            "$ref": "#/components/schemas/Staff"
          },
          "incidentDate": {
            "type": "string",
            "description": "Date of the associated incident",
            "format": "date"
          },
          "incidentTime": {
            "type": "string",
            "description": "Date and time of the associated incident",
            "format": "partial-time"
          },
          "reportedDate": {
            "type": "string",
            "description": "Date when the associated incident was reported",
            "format": "date"
          },
          "reportedTime": {
            "type": "string",
            "description": "Date and time when the associated incident was reported",
            "format": "partial-time"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time when the record was created in NOMIS",
            "example": "2021-07-05T10:35:17"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "incidentType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "details": {
            "type": "string",
            "description": "Incident details"
          },
          "prison": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "prisonerWitnesses": {
            "type": "array",
            "description": "Prisoners that witnessed the incident. Rarely used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Prisoner"
            }
          },
          "prisonerVictims": {
            "type": "array",
            "description": "Prisoners that were victims in the incident. Not often used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Prisoner"
            }
          },
          "otherPrisonersInvolved": {
            "type": "array",
            "description": "Other suspects involved in the incident that may or may not have been placed on report",
            "items": {
              "$ref": "#/components/schemas/Prisoner"
            }
          },
          "reportingOfficers": {
            "type": "array",
            "description": "The officer who reported the incident who may differ from the reporting officer. Often used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "staffWitnesses": {
            "type": "array",
            "description": "Staff that witnessed the incident. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "staffVictims": {
            "type": "array",
            "description": "Staff that was a victim in the incident. Rarely used in NOMIS",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "otherStaffInvolved": {
            "type": "array",
            "description": "Other staff that was involved in the incident either using force or some other link. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Staff"
            }
          },
          "repairs": {
            "type": "array",
            "description": "The repairs required due to the damage",
            "items": {
              "$ref": "#/components/schemas/Repair"
            }
          }
        },
        "description": "Associated incident details"
      },
      "AdjudicationOffence": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "category": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        }
      },
      "AdjudicationResponse": {
        "required": [
          "adjudicationNumber",
          "adjudicationSequence",
          "bookingId",
          "charges",
          "gender",
          "hearings",
          "incident",
          "investigations",
          "offenderNo",
          "partyAddedDate"
        ],
        "type": "object",
        "properties": {
          "adjudicationSequence": {
            "type": "integer",
            "description": "The adjudication/party sequence, part of the composite key with adjudicationIncidentId",
            "format": "int32"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "bookingId": {
            "type": "integer",
            "description": "The id of the booking associated with the adjudication",
            "format": "int64"
          },
          "adjudicationNumber": {
            "type": "integer",
            "description": "The adjudication number (business key)",
            "format": "int64"
          },
          "gender": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "currentPrison": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "partyAddedDate": {
            "type": "string",
            "description": "Date Prisoner was added to the adjudication ????",
            "format": "date"
          },
          "comment": {
            "type": "string",
            "description": "Adjudication comments"
          },
          "incident": {
            "$ref": "#/components/schemas/AdjudicationIncident"
          },
          "charges": {
            "type": "array",
            "description": "Charges associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/AdjudicationCharge"
            }
          },
          "investigations": {
            "type": "array",
            "description": "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Investigation"
            }
          },
          "hearings": {
            "type": "array",
            "description": "hearings associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/Hearing"
            }
          }
        },
        "description": "Adjudication Information"
      },
      "Hearing": {
        "required": [
          "createdByUsername",
          "createdDateTime",
          "hearingId",
          "hearingResults",
          "notifications"
        ],
        "type": "object",
        "properties": {
          "hearingId": {
            "type": "integer",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "scheduleDate": {
            "type": "string",
            "description": "Hearing scheduled date as set by DPS but not used by NOMIS or set in NOMIS",
            "format": "date"
          },
          "scheduleTime": {
            "type": "string",
            "description": "Hearing scheduled time as set by DPS but not used by NOMIS or set in NOMIS",
            "format": "partial-time"
          },
          "hearingDate": {
            "type": "string",
            "description": "Hearing date",
            "format": "date"
          },
          "hearingTime": {
            "type": "string",
            "description": "Hearing time",
            "format": "partial-time"
          },
          "comment": {
            "type": "string"
          },
          "representativeText": {
            "type": "string"
          },
          "hearingStaff": {
            "$ref": "#/components/schemas/Staff"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "eventStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "hearingResults": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HearingResult"
            }
          },
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time when the record was created the record in NOMIS",
            "example": "2021-07-05T10:35:17"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          },
          "notifications": {
            "type": "array",
            "description": "List of hearing notifications",
            "items": {
              "$ref": "#/components/schemas/HearingNotification"
            }
          }
        },
        "description": "hearings associated with this adjudication"
      },
      "HearingNotification": {
        "required": [
          "deliveryDate",
          "deliveryTime",
          "notifiedStaff"
        ],
        "type": "object",
        "properties": {
          "deliveryDate": {
            "type": "string",
            "description": "Hearing notification date",
            "format": "date"
          },
          "deliveryTime": {
            "type": "string",
            "description": "Hearing notification time",
            "format": "partial-time"
          },
          "comment": {
            "type": "string",
            "description": "Notification comment"
          },
          "notifiedStaff": {
            "$ref": "#/components/schemas/Staff"
          }
        },
        "description": "List of hearing notifications"
      },
      "HearingResult": {
        "required": [
          "charge",
          "createdByUsername",
          "createdDateTime",
          "offence",
          "resultAwards"
        ],
        "type": "object",
        "properties": {
          "pleaFindingType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "findingType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "charge": {
            "$ref": "#/components/schemas/AdjudicationCharge"
          },
          "offence": {
            "$ref": "#/components/schemas/AdjudicationOffence"
          },
          "resultAwards": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HearingResultAward"
            }
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time when the record was created the record in NOMIS",
            "example": "2021-07-05T10:35:17"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          }
        }
      },
      "HearingResultAward": {
        "required": [
          "adjudicationNumber",
          "chargeSequence",
          "createdByUsername",
          "createdDateTime",
          "effectiveDate",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Sequence of this sanction for this prisoner's booking",
            "format": "int32"
          },
          "sanctionType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "sanctionStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string"
          },
          "effectiveDate": {
            "type": "string",
            "format": "date"
          },
          "statusDate": {
            "type": "string",
            "format": "date"
          },
          "sanctionDays": {
            "type": "integer",
            "format": "int32"
          },
          "sanctionMonths": {
            "type": "integer",
            "format": "int32"
          },
          "compensationAmount": {
            "type": "number"
          },
          "consecutiveAward": {
            "$ref": "#/components/schemas/HearingResultAward"
          },
          "chargeSequence": {
            "type": "integer",
            "format": "int32"
          },
          "adjudicationNumber": {
            "type": "integer",
            "format": "int64"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date time when the record was created the record in NOMIS",
            "example": "2021-07-05T10:35:17"
          }
        }
      },
      "InternalLocation": {
        "required": [
          "code",
          "description",
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "NOMIS location id",
            "format": "int64"
          },
          "code": {
            "type": "string",
            "description": "NOMIS location code"
          },
          "description": {
            "type": "string",
            "description": "NOMIS location description"
          }
        }
      },
      "Investigation": {
        "required": [
          "dateAssigned",
          "evidence",
          "investigator"
        ],
        "type": "object",
        "properties": {
          "investigator": {
            "$ref": "#/components/schemas/Staff"
          },
          "comment": {
            "type": "string"
          },
          "dateAssigned": {
            "type": "string",
            "format": "date"
          },
          "evidence": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Evidence"
            }
          }
        },
        "description": "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases"
      },
      "Prisoner": {
        "required": [
          "createdByUsername",
          "dateAddedToIncident",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "firstName": {
            "type": "string",
            "description": "First name of prisoner"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of prisoner"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS where this prisoner is used"
          },
          "dateAddedToIncident": {
            "type": "string",
            "description": "date added in NOMIS to the adjudication incident",
            "format": "date"
          },
          "comment": {
            "type": "string",
            "description": "comment about why they were added to the adjudication incident"
          }
        },
        "description": "Other suspects involved in the incident that may or may not have been placed on report"
      },
      "Staff": {
        "required": [
          "firstName",
          "lastName",
          "staffId",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "Username of first account related to staff"
          },
          "staffId": {
            "type": "integer",
            "description": "NOMIS staff id",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "First name of staff member"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of staff member"
          },
          "createdByUsername": {
            "type": "string",
            "description": "Username of person who created the record in NOMIS where this staff is used"
          },
          "dateAddedToIncident": {
            "type": "string",
            "description": "date added in NOMIS to the adjudication incident",
            "format": "date"
          },
          "comment": {
            "type": "string",
            "description": "comment about why they were added to the adjudication incident"
          }
        },
        "description": "Staff notified"
      },
      "ChargeToCreate": {
        "required": [
          "offenceCode"
        ],
        "type": "object",
        "properties": {
          "offenceCode": {
            "type": "string",
            "description": "Offence code they are charged with",
            "example": "51:1N"
          }
        },
        "description": "Charges associated with this adjudication"
      },
      "CreateAdjudicationRequest": {
        "required": [
          "charges",
          "evidence",
          "incident"
        ],
        "type": "object",
        "properties": {
          "incident": {
            "$ref": "#/components/schemas/IncidentToCreate"
          },
          "charges": {
            "type": "array",
            "description": "Charges associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/ChargeToCreate"
            }
          },
          "evidence": {
            "type": "array",
            "description": "The evidence records as part of the incident",
            "items": {
              "$ref": "#/components/schemas/EvidenceToCreate"
            }
          }
        },
        "description": "Core Adjudication to be created"
      },
      "EvidenceToCreate": {
        "required": [
          "detail",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Type of evidence",
            "example": "PHOTO",
            "enum": [
              "BEHAV",
              "DRUGTEST",
              "EVI_BAG",
              "OTHER",
              "PHOTO",
              "VICTIM",
              "WEAP",
              "WITNESS"
            ]
          },
          "detail": {
            "type": "string",
            "description": "Description of evidence",
            "example": "Image of damages"
          }
        },
        "description": "The evidence records as part of the incident"
      },
      "IncidentToCreate": {
        "required": [
          "details",
          "incidentDate",
          "incidentTime",
          "internalLocationId",
          "prisonId",
          "prisonerVictimsOffenderNumbers",
          "repairs",
          "reportedDate",
          "reportedTime",
          "reportingStaffUsername",
          "staffVictimsUsernames",
          "staffWitnessesUsernames"
        ],
        "type": "object",
        "properties": {
          "reportingStaffUsername": {
            "type": "string",
            "description": "Reporting staff member username",
            "example": "JANE.BROOKES"
          },
          "incidentDate": {
            "type": "string",
            "description": "Date of the associated incident",
            "format": "date"
          },
          "incidentTime": {
            "type": "string",
            "description": "Date and time of the associated incident",
            "format": "partial-time",
            "example": "12:00:00"
          },
          "reportedDate": {
            "type": "string",
            "description": "Date when the associated incident was reported",
            "format": "date"
          },
          "reportedTime": {
            "type": "string",
            "description": "Date and time when the associated incident was reported",
            "format": "partial-time",
            "example": "12:00:00"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "location id where incident took place",
            "format": "int64",
            "example": 123456
          },
          "details": {
            "type": "string",
            "description": "Incident details",
            "example": "The details of the incident are as follows"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code where the incident took place",
            "example": "MDI"
          },
          "prisonerVictimsOffenderNumbers": {
            "type": "array",
            "description": "Prisoners numbers that witnessed the incident",
            "example": [
              "A1234AA",
              "A1234AB"
            ],
            "items": {
              "type": "string",
              "description": "Prisoners numbers that witnessed the incident",
              "example": "[\"A1234AA\",\"A1234AB\"]"
            }
          },
          "staffWitnessesUsernames": {
            "type": "array",
            "description": "Staff usernames that witnessed the incident",
            "example": [
              "A.BARNES",
              "M.ABDULLAH"
            ],
            "items": {
              "type": "string",
              "description": "Staff usernames that witnessed the incident",
              "example": "[\"A.BARNES\",\"M.ABDULLAH\"]"
            }
          },
          "staffVictimsUsernames": {
            "type": "array",
            "description": "Staff usernames that were victims in the incident",
            "example": [
              "A.BARNES",
              "M.ABDULLAH"
            ],
            "items": {
              "type": "string",
              "description": "Staff usernames that were victims in the incident",
              "example": "[\"A.BARNES\",\"M.ABDULLAH\"]"
            }
          },
          "repairs": {
            "type": "array",
            "description": "The repairs required due to the damage",
            "items": {
              "$ref": "#/components/schemas/RepairToCreate"
            }
          }
        },
        "description": "Associated incident details"
      },
      "RepairToCreate": {
        "required": [
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Type of repairs",
            "example": "PLUM",
            "enum": [
              "CLEA",
              "DECO",
              "ELEC",
              "FABR",
              "LOCK",
              "PLUM"
            ]
          },
          "comment": {
            "type": "string",
            "description": "Optional description of repairs",
            "example": "Damage to the plumbing"
          },
          "cost": {
            "type": "number",
            "description": "Optional cost of repairs",
            "example": 62.12
          }
        },
        "description": "The repairs required due to the damage"
      },
      "PrisonerDetails": {
        "required": [
          "active",
          "bookingId",
          "location",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The NOMIS reference",
            "example": "A1234AA"
          },
          "bookingId": {
            "type": "integer",
            "description": "The NOMIS booking ID",
            "format": "int64",
            "example": 1234567
          },
          "location": {
            "type": "string",
            "description": "The prisoner's current location",
            "example": "BXI, OUT"
          },
          "active": {
            "type": "boolean",
            "description": "True if prisoner is active in prison"
          }
        },
        "description": "Details of a prisoner booking"
      },
      "CreateSentenceAdjustmentRequest": {
        "required": [
          "adjustmentDays",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "RX",
            "enum": [
              "RSR",
              "UR",
              "S240A",
              "RST",
              "RX"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Sentence adjustment create request"
      },
      "CreateAdjustmentResponse": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Create adjustment response"
      },
      "CreateIncentiveResponse": {
        "required": [
          "bookingId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The created Nomis booking and sequence",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "format": "int64"
          }
        },
        "description": "Incentive creation response"
      },
      "CreateKeyDateAdjustmentRequest": {
        "required": [
          "adjustmentDays",
          "adjustmentFromDate",
          "adjustmentTypeCode"
        ],
        "type": "object",
        "properties": {
          "adjustmentTypeCode": {
            "type": "string",
            "description": "NOMIS Adjustment type code from SENTENCE_ADJUSTMENTS",
            "example": "ADA",
            "enum": [
              "LAL",
              "UAL",
              "RADA",
              "ADA",
              "SREM"
            ]
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "minimum": 0,
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied",
            "default": true
          }
        },
        "description": "Key date adjustment create request"
      },
      "CreatePersonResponse": {
        "required": [
          "personId"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person Id",
            "format": "int64"
          }
        }
      },
      "CreatePersonRequest": {
        "required": [
          "firstName",
          "interpreterRequired",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person id. When non-zero this will be used rather than the auto generated id",
            "format": "int64",
            "example": 12345
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person",
            "example": "Ashantee"
          },
          "lastName": {
            "type": "string",
            "description": "Surname name of the person",
            "example": "Addo"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the person",
            "example": "Ashwin"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the person",
            "format": "date"
          },
          "genderCode": {
            "type": "string",
            "description": "Gender code of the person",
            "example": "F"
          },
          "titleCode": {
            "type": "string",
            "description": "Title code of the person",
            "example": "DR"
          },
          "languageCode": {
            "type": "string",
            "description": "Language code of the person",
            "example": "FRE-FRA"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "True if the person requires an interpreter"
          },
          "domesticStatusCode": {
            "type": "string",
            "description": "Domestic status code aka marital status of the person",
            "example": "S"
          },
          "isStaff": {
            "type": "boolean",
            "description": "True if a staff member"
          }
        },
        "description": "Request to create an person (aka DPS contact) in NOMIS"
      },
      "CreatePersonPhoneResponse": {
        "required": [
          "phoneId"
        ],
        "type": "object",
        "properties": {
          "phoneId": {
            "type": "integer",
            "description": "Unique NOMIS Id of phone",
            "format": "int64"
          }
        }
      },
      "CreatePersonPhoneRequest": {
        "required": [
          "number",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "The number",
            "example": "0114 555 555"
          },
          "extension": {
            "type": "string",
            "description": "Extension",
            "example": "x432"
          },
          "typeCode": {
            "type": "string",
            "description": "Phone type code",
            "example": "MOB"
          }
        }
      },
      "CreatePersonIdentifierResponse": {
        "required": [
          "sequence"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Unique NOMIS sequence for this identifier for this person",
            "format": "int64"
          }
        }
      },
      "CreatePersonIdentifierRequest": {
        "required": [
          "identifier",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "The identifier type code"
          },
          "identifier": {
            "type": "string",
            "description": "The identifier value",
            "example": "NE121212T"
          },
          "issuedAuthority": {
            "type": "string",
            "description": "The issued authority",
            "example": "Police"
          }
        }
      },
      "CreatePersonEmailResponse": {
        "required": [
          "emailAddressId"
        ],
        "type": "object",
        "properties": {
          "emailAddressId": {
            "type": "integer",
            "description": "Unique NOMIS Id of email address",
            "format": "int64"
          }
        }
      },
      "CreatePersonEmailRequest": {
        "required": [
          "email"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "test@test.justice.gov.uk"
          }
        }
      },
      "CreatePersonContactResponse": {
        "required": [
          "personContactId"
        ],
        "type": "object",
        "properties": {
          "personContactId": {
            "type": "integer",
            "description": "The contact Id",
            "format": "int64"
          }
        }
      },
      "CreatePersonContactRequest": {
        "required": [
          "active",
          "approvedVisitor",
          "contactTypeCode",
          "emergencyContact",
          "nextOfKin",
          "offenderNo",
          "relationshipTypeCode"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Offender no aka prisoner number. Contact will be added to latest booking",
            "example": "A1234AA"
          },
          "contactTypeCode": {
            "type": "string",
            "description": "The contact type",
            "example": "S"
          },
          "relationshipTypeCode": {
            "type": "string",
            "description": "The relationship type",
            "example": "BRO"
          },
          "active": {
            "type": "boolean",
            "description": "True if active"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date contact is no longer active",
            "format": "date"
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "True if approved to visit the prisoner"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "True if next of kin to the prisoner"
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "True if emergency contact for the prisoner"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment text"
          }
        },
        "description": "Request to create a contact (aka DPS prisoner contact) in NOMIS"
      },
      "CreatePersonAddressResponse": {
        "required": [
          "personAddressId"
        ],
        "type": "object",
        "properties": {
          "personAddressId": {
            "type": "integer",
            "description": "The address Id",
            "format": "int64"
          }
        }
      },
      "CreatePersonAddressRequest": {
        "required": [
          "mailAddress",
          "primaryAddress"
        ],
        "type": "object",
        "properties": {
          "typeCode": {
            "type": "string",
            "description": "Address reference code",
            "example": "HOME"
          },
          "flat": {
            "type": "string",
            "description": "Flat name or number",
            "example": "Apartment 3"
          },
          "premise": {
            "type": "string",
            "description": "Premise",
            "example": "22"
          },
          "street": {
            "type": "string",
            "description": "Street",
            "example": "West Street"
          },
          "locality": {
            "type": "string",
            "description": "Locality",
            "example": "Keighley"
          },
          "postcode": {
            "type": "string",
            "description": "Post code",
            "example": "MK15 2ST"
          },
          "cityCode": {
            "type": "string",
            "description": "City reference code",
            "example": "25343"
          },
          "countyCode": {
            "type": "string",
            "description": "County reference code",
            "example": "S.YORKSHIRE"
          },
          "countryCode": {
            "type": "string",
            "description": "Country reference code",
            "example": "ENG"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "true if address not fixed. for example homeless"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "true if this is the person's primary address"
          },
          "mailAddress": {
            "type": "boolean",
            "description": "true if this is used for mail"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment about the address"
          },
          "startDate": {
            "type": "string",
            "description": "Date address was valid from",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Date address was valid to",
            "format": "date"
          }
        }
      },
      "CreateNonAssociationRequest": {
        "required": [
          "effectiveDate",
          "nsOffenderNo",
          "offenderNo",
          "reason",
          "recipReason",
          "type"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Noms id of the prisoner",
            "example": "A1234DF"
          },
          "nsOffenderNo": {
            "type": "string",
            "description": "Noms id of the other prisoner",
            "example": "A1234EG"
          },
          "reason": {
            "type": "string",
            "description": "Reason code of the first prisoner, domain NON_ASSO_RSN",
            "example": "VIC"
          },
          "recipReason": {
            "type": "string",
            "description": "Reason code of the other prisoner, domain NON_ASSO_RSN",
            "example": "PER"
          },
          "type": {
            "type": "string",
            "description": "Type code, domain NON_ASSO_TYP",
            "example": "WING"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Free text name of staff member",
            "example": "Joe Bloggs"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Effective date",
            "format": "date",
            "example": "2022-08-12"
          },
          "comment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          }
        },
        "description": "Offender individual schedule creation request"
      },
      "CreateNonAssociationResponse": {
        "required": [
          "typeSequence"
        ],
        "type": "object",
        "properties": {
          "typeSequence": {
            "type": "integer",
            "description": "The created offender_na_details type sequence number",
            "format": "int32"
          }
        },
        "description": "Non-association creation response"
      },
      "CreateLocationRequest": {
        "required": [
          "description",
          "locationCode",
          "locationType",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "certified": {
            "type": "boolean",
            "description": "Whether certified for use",
            "example": true,
            "default": false
          },
          "locationType": {
            "type": "string",
            "description": "Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)",
            "enum": [
              "ADJU",
              "ADMI",
              "APP",
              "AREA",
              "ASSO",
              "BOOT",
              "BOX",
              "CELL",
              "CLAS",
              "EXER",
              "EXTE",
              "FAIT",
              "GROU",
              "HCEL",
              "HOLD",
              "IGRO",
              "INSI",
              "INTE",
              "LAND",
              "LOCA",
              "MEDI",
              "MOVE",
              "OFFI",
              "OUTS",
              "POSI",
              "RESI",
              "ROOM",
              "RTU",
              "SHEL",
              "SPOR",
              "SPUR",
              "STOR",
              "TABL",
              "TRAI",
              "TRRM",
              "VIDE",
              "VISIT",
              "WING",
              "WORK"
            ]
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code of the location",
            "example": "LEI"
          },
          "parentLocationId": {
            "type": "integer",
            "description": "The containing location id",
            "format": "int64",
            "example": 1234567
          },
          "operationalCapacity": {
            "type": "integer",
            "description": "Max capacity subject to resources",
            "format": "int32",
            "example": 43
          },
          "cnaCapacity": {
            "type": "integer",
            "description": "Certified Normal Accommodation capacity",
            "format": "int32",
            "example": 44
          },
          "userDescription": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "Description of location",
            "example": "Some description"
          },
          "locationCode": {
            "type": "string",
            "description": "Usually a number for a cell, a letter for a wing or landing. Used to calculate description",
            "example": "005"
          },
          "description": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Full code hierarchy",
            "example": "MDI-C-3-015"
          },
          "unitType": {
            "type": "string",
            "description": "Housing Unit type, Reference code (HOU_UN_TYPE)",
            "enum": [
              "HC",
              "HOLC",
              "NA",
              "OU",
              "REC",
              "SEG",
              "SPLC"
            ]
          },
          "capacity": {
            "type": "integer",
            "description": "Physical maximum capacity",
            "format": "int32",
            "example": 45
          },
          "listSequence": {
            "type": "integer",
            "description": "Defines the order within parent location",
            "format": "int32"
          },
          "comment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          },
          "profiles": {
            "type": "array",
            "description": "Profiles",
            "items": {
              "$ref": "#/components/schemas/ProfileRequest"
            }
          },
          "usages": {
            "type": "array",
            "description": "Usages",
            "items": {
              "$ref": "#/components/schemas/UsageRequest"
            }
          }
        },
        "description": "Location creation request"
      },
      "LocationIdResponse": {
        "required": [
          "locationId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "The created agency_internal_locations location id",
            "format": "int64"
          }
        },
        "description": "Location creation response"
      },
      "ReorderRequest": {
        "required": [
          "codeList"
        ],
        "type": "object",
        "properties": {
          "codeList": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "CreateAppointmentRequest": {
        "required": [
          "bookingId",
          "endTime",
          "eventDate",
          "eventSubType",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id of the prisoner",
            "format": "int64",
            "example": 1234567
          },
          "eventDate": {
            "type": "string",
            "description": "Appointment date",
            "format": "date",
            "example": "2022-08-12"
          },
          "startTime": {
            "type": "string",
            "description": "Appointment start time",
            "format": "partial-time",
            "example": "09:45"
          },
          "endTime": {
            "type": "string",
            "description": "Activity end time",
            "format": "partial-time",
            "example": "15:20"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the appointment is to occur (in cell if null)",
            "format": "int64",
            "example": 112233
          },
          "eventSubType": {
            "type": "string",
            "description": "Appointment event sub-type",
            "example": "MEOT"
          },
          "comment": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          }
        },
        "description": "Offender individual schedule creation request"
      },
      "CreateAppointmentResponse": {
        "required": [
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The created offender_ind_schedules id",
            "format": "int64"
          }
        },
        "description": "Offender individual schedule creation response"
      },
      "CreateAlertType": {
        "required": [
          "code",
          "description",
          "listSequence"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The alert type code"
          },
          "description": {
            "type": "string",
            "description": "The alert type description"
          },
          "listSequence": {
            "type": "integer",
            "description": "The sequence in a UI list",
            "format": "int32"
          }
        },
        "description": "A request to create an alert type reference data in NOMIS"
      },
      "CreateAlertCode": {
        "required": [
          "code",
          "description",
          "listSequence",
          "typeCode"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The alert code"
          },
          "typeCode": {
            "type": "string",
            "description": "The parent type code"
          },
          "description": {
            "type": "string",
            "description": "The alert description"
          },
          "listSequence": {
            "type": "integer",
            "description": "The sequence in a UI list",
            "format": "int32"
          }
        },
        "description": "A request to create an alert code reference data in NOMIS"
      },
      "CreateHearingResponse": {
        "required": [
          "hearingId"
        ],
        "type": "object",
        "properties": {
          "hearingId": {
            "type": "integer",
            "description": "The Id for the created Hearing",
            "format": "int64"
          }
        },
        "description": "Provides the generated hearing ID after creation"
      },
      "CreateHearingRequest": {
        "required": [
          "agencyId",
          "hearingDate",
          "hearingTime",
          "hearingType",
          "internalLocationId"
        ],
        "type": "object",
        "properties": {
          "hearingType": {
            "type": "string",
            "description": "Type of hearing",
            "example": "GOV"
          },
          "hearingDate": {
            "type": "string",
            "description": "Hearing date",
            "format": "date"
          },
          "hearingTime": {
            "type": "string",
            "description": "Hearing time",
            "format": "partial-time"
          },
          "agencyId": {
            "type": "string",
            "description": "agency id of hearing"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "location id for the hearing",
            "format": "int64",
            "example": 123456
          }
        },
        "description": "Hearing to be created"
      },
      "CreateHearingResultResponse": {
        "required": [
          "hearingId",
          "resultSequence"
        ],
        "type": "object",
        "properties": {
          "hearingId": {
            "type": "integer",
            "format": "int64"
          },
          "resultSequence": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Provides the generated hearing result composite ID after creation"
      },
      "CreateHearingResultRequest": {
        "required": [
          "findingCode",
          "pleaFindingCode"
        ],
        "type": "object",
        "properties": {
          "adjudicatorUsername": {
            "type": "string",
            "description": "adjudicator username for the hearing record",
            "example": "ASMITH_GEN"
          },
          "pleaFindingCode": {
            "type": "string",
            "description": "The offender's plea code on this charge",
            "example": "NOT_GUILTY"
          },
          "findingCode": {
            "type": "string",
            "description": "Finding code",
            "example": "GUILTY"
          }
        },
        "description": "Hearing result to be created"
      },
      "CreateHearingResultAwardResponses": {
        "required": [
          "awardsCreated"
        ],
        "type": "object",
        "properties": {
          "awardsCreated": {
            "type": "array",
            "description": "an ordered list of award response, the order matching the request order",
            "items": {
              "$ref": "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "description": "A list of Hearing result awards created (aka punishment)"
      },
      "CreateHearingResultAwardRequest": {
        "required": [
          "awards"
        ],
        "type": "object",
        "properties": {
          "awards": {
            "type": "array",
            "description": "a list of award requests",
            "items": {
              "$ref": "#/components/schemas/HearingResultAwardRequest"
            }
          }
        },
        "description": "A list of Hearing result awards (aka punishment) to be created"
      },
      "CreateActivityRequest": {
        "required": [
          "capacity",
          "code",
          "description",
          "excludeBankHolidays",
          "outsideWork",
          "payPerSession",
          "payRates",
          "prisonId",
          "programCode",
          "scheduleRules",
          "schedules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "Code generated from the activity and schedule ids and mapped"
          },
          "startDate": {
            "type": "string",
            "description": "Activity start date",
            "format": "date",
            "example": "2022-08-12"
          },
          "endDate": {
            "type": "string",
            "description": "Activity end date",
            "format": "date",
            "example": "2022-08-12"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the activity is to occur"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Room where the activity is to occur (from activity schedule)",
            "format": "int64"
          },
          "capacity": {
            "maximum": 999,
            "type": "integer",
            "description": "Capacity of activity (from activity schedule)",
            "format": "int32"
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates",
            "items": {
              "$ref": "#/components/schemas/PayRateRequest"
            }
          },
          "description": {
            "type": "string",
            "description": "Description from concatenated activity and activity schedule"
          },
          "minimumIncentiveLevelCode": {
            "type": "string",
            "description": "Minimum Incentive Level"
          },
          "programCode": {
            "type": "string",
            "description": "Program Service code (from activity category)"
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H",
            "enum": [
              "F",
              "H"
            ]
          },
          "schedules": {
            "type": "array",
            "description": "Schedules",
            "items": {
              "$ref": "#/components/schemas/CourseScheduleRequest"
            }
          },
          "scheduleRules": {
            "type": "array",
            "description": "Schedule rules",
            "items": {
              "$ref": "#/components/schemas/ScheduleRuleRequest"
            }
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Exclude bank holidays?"
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Outside work?"
          }
        },
        "description": "Course activity creation request"
      },
      "LeadVisitor": {
        "required": [
          "fullName",
          "personId",
          "telephones"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "visitor NOMIS person Id",
            "format": "int64"
          },
          "fullName": {
            "type": "string",
            "description": "full name of visitor"
          },
          "telephones": {
            "type": "array",
            "description": "Ordered list of telephone numbers for contact with latest first",
            "items": {
              "type": "string",
              "description": "Ordered list of telephone numbers for contact with latest first"
            }
          }
        },
        "description": "the lead visitor"
      },
      "VisitResponse": {
        "required": [
          "agencyInternalLocation",
          "createUserId",
          "endDateTime",
          "offenderNo",
          "prisonId",
          "startDateTime",
          "visitId",
          "visitOutcome",
          "visitStatus",
          "visitType",
          "visitors",
          "whenCreated"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The visit id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Visit end date and time",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the visit is to occur"
          },
          "visitors": {
            "type": "array",
            "description": "Visitors",
            "items": {
              "$ref": "#/components/schemas/Visitor"
            }
          },
          "leadVisitor": {
            "$ref": "#/components/schemas/LeadVisitor"
          },
          "visitType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "visitStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "visitOutcome": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "agencyInternalLocation": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "commentText": {
            "type": "string",
            "description": "Visit comments"
          },
          "visitorConcernText": {
            "type": "string",
            "description": "Visitor concerns text"
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of creation",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of last update",
            "example": "2021-07-05T10:35:17"
          },
          "createUserId": {
            "type": "string",
            "description": "User id for visit creation"
          },
          "modifyUserId": {
            "type": "string",
            "description": "User id for last visit update"
          }
        },
        "description": "Visit information"
      },
      "Visitor": {
        "required": [
          "leadVisitor",
          "personId"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "visitor NOMIS person Id",
            "format": "int64"
          },
          "leadVisitor": {
            "type": "boolean",
            "description": "Indicates lead visitor for the visit"
          }
        },
        "description": "Visitors"
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "VisitRoomCountResponse": {
        "required": [
          "agencyInternalLocationDescription",
          "count",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "agencyInternalLocationDescription": {
            "type": "string",
            "description": "The internal location description"
          },
          "count": {
            "type": "integer",
            "description": "The room usage count",
            "format": "int64"
          },
          "prisonId": {
            "type": "string",
            "description": "The prison id"
          }
        },
        "description": "Visit id"
      },
      "PageVisitIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VisitIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        }
      },
      "VisitIdResponse": {
        "required": [
          "visitId"
        ],
        "type": "object",
        "properties": {
          "visitId": {
            "type": "integer",
            "description": "The visit id",
            "format": "int64"
          }
        },
        "description": "Visit id"
      },
      "SplashConditionDto": {
        "required": [
          "accessBlocked",
          "prisonId",
          "type"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "The prisonId or **ALL**",
            "example": "MDI but can be **ALL** for all"
          },
          "accessBlocked": {
            "type": "boolean",
            "description": "Whether access to the screen is blocked",
            "example": true
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        },
        "description": "Splash Screen Access Condition details"
      },
      "SplashScreenDto": {
        "required": [
          "accessBlockedType",
          "conditions",
          "moduleName"
        ],
        "type": "object",
        "properties": {
          "moduleName": {
            "type": "string",
            "description": "The name of the module/screen",
            "example": "OIDINCRS"
          },
          "accessBlockedType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "warningText": {
            "type": "string",
            "description": "The text shown when a screen is accessible but will shortly be turned off",
            "example": "This screen will be turned off next month."
          },
          "blockedText": {
            "type": "string",
            "description": "The text shown when a screen is blocked",
            "example": "This screen is no longer accessible, use DPS."
          },
          "conditions": {
            "type": "array",
            "description": "Prison access conditions",
            "items": {
              "$ref": "#/components/schemas/SplashConditionDto"
            }
          }
        },
        "description": "Splash screen details"
      },
      "PrisonDto": {
        "required": [
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "The prisonId or **ALL**",
            "example": "MDI but can be **ALL** for all"
          }
        }
      },
      "PrisonDetails": {
        "required": [
          "name",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "The prison code",
            "example": "BXI"
          },
          "name": {
            "type": "string",
            "description": "The prison name",
            "example": "Brixton"
          }
        },
        "description": "A prison"
      },
      "SentenceAdjustmentResponse": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentType",
          "bookingId",
          "hasBeenReleased",
          "hiddenFromUsers",
          "id",
          "offenderNo",
          "prisonId",
          "sentenceSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The sentence adjustment id",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "hasBeenReleased": {
            "type": "boolean",
            "description": "Indicates whether for this booking the prisoner has been released"
          },
          "prisonId": {
            "type": "string",
            "description": "Current prison or OUT"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "sentenceSequence": {
            "type": "integer",
            "description": "The sequence of the sentence within this booking",
            "format": "int64"
          },
          "adjustmentType": {
            "$ref": "#/components/schemas/SentencingAdjustmentType"
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentToDate": {
            "type": "string",
            "description": "End of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied"
          },
          "hiddenFromUsers": {
            "type": "boolean",
            "description": "Flag to indicate the adjustment is hidden from end users. This is true when it was created as part of a key date adjustment"
          }
        },
        "description": "Sentence adjustment"
      },
      "SentencingAdjustmentType": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "code",
            "example": "RX"
          },
          "description": {
            "type": "string",
            "description": "description",
            "example": "Remand"
          }
        },
        "description": "Adjustment type"
      },
      "AnswerResponse": {
        "required": [
          "active",
          "answer",
          "answerSequence",
          "commentRequired",
          "dateRequired",
          "id",
          "listSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The answer id",
            "format": "int64"
          },
          "answer": {
            "type": "string",
            "description": "The answer text"
          },
          "answerSequence": {
            "type": "integer",
            "description": "The answer id used to set the listSequence values",
            "format": "int32",
            "example": 1
          },
          "listSequence": {
            "type": "integer",
            "description": "The order of the answers",
            "format": "int32",
            "example": 1
          },
          "active": {
            "type": "boolean",
            "description": "If the answer is active",
            "example": true
          },
          "expiryDate": {
            "type": "string",
            "description": "The date the answer is no longer used",
            "format": "date"
          },
          "nextQuestion": {
            "$ref": "#/components/schemas/NextQuestionResponse"
          },
          "dateRequired": {
            "type": "boolean",
            "description": "If the answer should include a date",
            "example": true
          },
          "commentRequired": {
            "type": "boolean",
            "description": "If the answer should include a comment",
            "example": true
          }
        },
        "description": "List of Answers to this question"
      },
      "NextQuestionResponse": {
        "required": [
          "id",
          "question"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The question id",
            "format": "int64"
          },
          "question": {
            "type": "string",
            "description": "The question text"
          }
        },
        "description": "Question to be asked following this answer"
      },
      "QuestionResponse": {
        "required": [
          "active",
          "answers",
          "id",
          "listSequence",
          "multipleAnswers",
          "question",
          "questionSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The question id",
            "format": "int64"
          },
          "question": {
            "type": "string",
            "description": "The question text"
          },
          "answers": {
            "type": "array",
            "description": "List of Answers to this question",
            "items": {
              "$ref": "#/components/schemas/AnswerResponse"
            }
          },
          "active": {
            "type": "boolean",
            "description": "If the question is active",
            "example": true
          },
          "expiryDate": {
            "type": "string",
            "description": "The date the question is no longer used",
            "format": "date"
          },
          "multipleAnswers": {
            "type": "boolean",
            "description": "If the question has multiple answers",
            "example": true
          },
          "questionSequence": {
            "type": "integer",
            "description": "The question id used to set the listSequence values",
            "format": "int32",
            "example": 1
          },
          "listSequence": {
            "type": "integer",
            "description": "The order of the questions",
            "format": "int32",
            "example": 1
          }
        },
        "description": "List of Questions (and associated Answers) for this Questionnaire"
      },
      "QuestionnaireResponse": {
        "required": [
          "active",
          "code",
          "createdBy",
          "createdDate",
          "id",
          "listSequence",
          "offenderRoles",
          "questions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The unique identifier of the questionnaire",
            "format": "int64"
          },
          "description": {
            "type": "string",
            "description": "A description of the questionnaire",
            "example": "Escape from Establishment"
          },
          "code": {
            "type": "string",
            "description": "Code to identify this questionnaire",
            "example": "ESCAPE_EST"
          },
          "active": {
            "type": "boolean",
            "description": "If the questionnaire is active",
            "example": true
          },
          "listSequence": {
            "type": "integer",
            "description": "Sequence value of the questionnaires",
            "format": "int32",
            "example": 1
          },
          "questions": {
            "type": "array",
            "description": "List of Questions (and associated Answers) for this Questionnaire",
            "items": {
              "$ref": "#/components/schemas/QuestionResponse"
            }
          },
          "offenderRoles": {
            "type": "array",
            "description": "List of Roles allowed for an offender's participation in an incident",
            "items": {
              "type": "string",
              "description": "List of Roles allowed for an offender's participation in an incident"
            }
          },
          "expiryDate": {
            "type": "string",
            "description": "The date the questionnaire is no longer used",
            "format": "date"
          },
          "createdDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Questionnaire created date",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "Questionnaire created by"
          },
          "modifiedDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Questionnaire modified date",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedBy": {
            "type": "string",
            "description": "Questionnaire modified by"
          }
        },
        "description": "Questionnaire"
      },
      "PageQuestionnaireIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/QuestionnaireIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "QuestionnaireIdResponse": {
        "required": [
          "questionnaireId"
        ],
        "type": "object",
        "properties": {
          "questionnaireId": {
            "type": "integer",
            "description": "The questionnaire id",
            "format": "int64"
          }
        },
        "description": "Questionnaire id"
      },
      "IncentiveLevel": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The incentive level code",
            "example": "STD"
          },
          "description": {
            "type": "string",
            "description": "The incentive level description",
            "example": "Standard"
          }
        },
        "description": "An incentive levels"
      },
      "OffenceResponse": {
        "required": [
          "description",
          "offenceCode",
          "statuteCode"
        ],
        "type": "object",
        "properties": {
          "offenceCode": {
            "type": "string"
          },
          "statuteCode": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "description": "Offence"
      },
      "OffenderChargeResponse": {
        "required": [
          "id",
          "mostSeriousFlag",
          "offence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "offence": {
            "$ref": "#/components/schemas/OffenceResponse"
          },
          "offencesCount": {
            "type": "integer",
            "format": "int32"
          },
          "offenceDate": {
            "type": "string",
            "format": "date"
          },
          "offenceEndDate": {
            "type": "string",
            "format": "date"
          },
          "plea": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "propertyValue": {
            "type": "number"
          },
          "totalPropertyValue": {
            "type": "number"
          },
          "cjitCode1": {
            "type": "string"
          },
          "cjitCode2": {
            "type": "string"
          },
          "cjitCode3": {
            "type": "string"
          },
          "chargeStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "resultCode1": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "resultCode2": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "resultCode1Indicator": {
            "type": "string"
          },
          "resultCode2Indicator": {
            "type": "string"
          },
          "mostSeriousFlag": {
            "type": "boolean"
          },
          "lidsOffenceNumber": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "Offender Charge"
      },
      "CourtEventChargeResponse": {
        "required": [
          "eventId",
          "mostSeriousFlag",
          "offenderCharge"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "format": "int64"
          },
          "offenderCharge": {
            "$ref": "#/components/schemas/OffenderChargeResponse"
          },
          "offencesCount": {
            "type": "integer",
            "format": "int32"
          },
          "offenceDate": {
            "type": "string",
            "format": "date"
          },
          "offenceEndDate": {
            "type": "string",
            "format": "date"
          },
          "plea": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "propertyValue": {
            "type": "number"
          },
          "totalPropertyValue": {
            "type": "number"
          },
          "cjitCode1": {
            "type": "string"
          },
          "cjitCode2": {
            "type": "string"
          },
          "cjitCode3": {
            "type": "string"
          },
          "resultCode1": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "resultCode2": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "resultCode1Indicator": {
            "type": "string"
          },
          "resultCode2Indicator": {
            "type": "string"
          },
          "mostSeriousFlag": {
            "type": "boolean"
          }
        },
        "description": "Court Event Charge"
      },
      "CaseIdentifierResponse": {
        "required": [
          "createDateTime",
          "reference",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of case identifier",
            "example": "CASE/INFO#"
          },
          "reference": {
            "type": "string",
            "description": "The value of the case identifier",
            "example": "asd/123"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the case identifier was created",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the case identifier was last changed",
            "example": "2021-07-05T10:35:17"
          },
          "auditModuleName": {
            "type": "string",
            "description": "The name of the module that last changed it, indicates if this was NOMIS or the synchronisation service",
            "example": "DPS_SYNCHRONISATION"
          }
        },
        "description": "Case related reference"
      },
      "CourtCaseResponse": {
        "required": [
          "bookingId",
          "caseInfoNumbers",
          "caseSequence",
          "caseStatus",
          "courtEvents",
          "courtId",
          "createdByUsername",
          "createdDateTime",
          "id",
          "legalCaseType",
          "lidsCaseNumber",
          "offenderCharges",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string"
          },
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "primaryCaseInfoNumber": {
            "type": "string"
          },
          "caseSequence": {
            "type": "integer",
            "format": "int32"
          },
          "caseStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "legalCaseType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "beginDate": {
            "type": "string",
            "format": "date"
          },
          "courtId": {
            "type": "string"
          },
          "combinedCaseId": {
            "type": "integer",
            "format": "int64"
          },
          "statusUpdateStaffId": {
            "type": "integer",
            "format": "int64"
          },
          "statusUpdateDate": {
            "type": "string",
            "format": "date"
          },
          "statusUpdateComment": {
            "type": "string"
          },
          "statusUpdateReason": {
            "type": "string"
          },
          "lidsCaseId": {
            "type": "integer",
            "format": "int32"
          },
          "lidsCombinedCaseId": {
            "type": "integer",
            "format": "int32"
          },
          "lidsCaseNumber": {
            "type": "integer",
            "format": "int32"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "createdByUsername": {
            "type": "string"
          },
          "courtEvents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtEventResponse"
            }
          },
          "offenderCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffenderChargeResponse"
            }
          },
          "caseInfoNumbers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseIdentifierResponse"
            }
          }
        },
        "description": "Court Case"
      },
      "CourtEventResponse": {
        "required": [
          "courtEventCharges",
          "courtEventType",
          "courtId",
          "courtOrders",
          "createdByUsername",
          "createdDateTime",
          "eventDateTime",
          "eventStatus",
          "id",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "caseId": {
            "type": "integer",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string"
          },
          "eventDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "courtEventType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "eventStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "directionCode": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "judgeName": {
            "type": "string"
          },
          "courtId": {
            "type": "string"
          },
          "outcomeReasonCode": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "commentText": {
            "type": "string"
          },
          "orderRequestedFlag": {
            "type": "boolean"
          },
          "holdFlag": {
            "type": "boolean"
          },
          "nextEventRequestFlag": {
            "type": "boolean"
          },
          "nextEventDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "createdByUsername": {
            "type": "string"
          },
          "courtEventCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtEventChargeResponse"
            }
          },
          "courtOrders": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtOrderResponse"
            }
          }
        },
        "description": "Court Event"
      },
      "CourtOrderResponse": {
        "required": [
          "courtDate",
          "id",
          "issuingCourt",
          "orderStatus",
          "orderType",
          "sentencePurposes"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64"
          },
          "courtDate": {
            "type": "string",
            "format": "date"
          },
          "issuingCourt": {
            "type": "string"
          },
          "courtInfoId": {
            "type": "string"
          },
          "orderType": {
            "type": "string"
          },
          "orderStatus": {
            "type": "string"
          },
          "dueDate": {
            "type": "string",
            "format": "date"
          },
          "requestDate": {
            "type": "string",
            "format": "date"
          },
          "seriousnessLevel": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "commentText": {
            "type": "string"
          },
          "nonReportFlag": {
            "type": "boolean"
          },
          "sentencePurposes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SentencePurposeResponse"
            }
          }
        },
        "description": "Court Order"
      },
      "SentencePurposeResponse": {
        "required": [
          "orderId",
          "orderPartyCode",
          "purposeCode"
        ],
        "type": "object",
        "properties": {
          "orderId": {
            "type": "integer",
            "format": "int64"
          },
          "orderPartyCode": {
            "type": "string"
          },
          "purposeCode": {
            "type": "string"
          }
        },
        "description": "Sentence Purpose"
      },
      "BookingProfileDetailsResponse": {
        "required": [
          "bookingId",
          "latestBooking",
          "profileDetails",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking's unique identifier",
            "format": "int64",
            "example": 1234567
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The start date of the booking",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The end date of the booking, or null if the booking is still active",
            "example": "2021-07-05T10:35:17"
          },
          "profileDetails": {
            "type": "array",
            "description": "A list of profile details for this booking",
            "items": {
              "$ref": "#/components/schemas/ProfileDetailsResponse"
            }
          },
          "latestBooking": {
            "type": "boolean",
            "description": "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example": true
          }
        },
        "description": "Profile details held against a booking"
      },
      "PrisonerProfileDetailsResponse": {
        "required": [
          "bookings",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The prisoner's unique identifier",
            "example": "A1234AA"
          },
          "bookings": {
            "type": "array",
            "description": "A list of bookings and their profile details",
            "items": {
              "$ref": "#/components/schemas/BookingProfileDetailsResponse"
            }
          }
        },
        "description": "Profile details held against a prisoner"
      },
      "ProfileDetailsResponse": {
        "required": [
          "createDateTime",
          "createdBy",
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "The type of profile info",
            "example": "BUILD"
          },
          "code": {
            "type": "string",
            "description": "The value of the profile info",
            "example": "SLIM"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the profile info was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the profile info",
            "example": "AQ425D"
          },
          "modifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the profile info was last changed",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The user who modified the profile info",
            "example": "AQ425D"
          },
          "auditModuleName": {
            "type": "string",
            "description": "The name of the module that last changed the profile info, indicates if this was NOMIS or the synchronisation service",
            "example": "DPS_SYNCHRONISATION"
          }
        },
        "description": "Profile details recorded against a prisoner"
      },
      "PrisonPersonReconciliationResponse": {
        "required": [
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The prisoner's unique identifier",
            "example": "A1234AA"
          },
          "height": {
            "type": "integer",
            "description": "The height of the prisoner in centimetres",
            "format": "int32",
            "example": 180
          },
          "weight": {
            "type": "integer",
            "description": "The weight of the prisoner in kilograms",
            "format": "int32",
            "example": 80
          },
          "face": {
            "type": "string",
            "description": "Shape of face",
            "example": "ROUND"
          },
          "build": {
            "type": "string",
            "description": "Build",
            "example": "SLIM"
          },
          "facialHair": {
            "type": "string",
            "description": "Facial hair",
            "example": "CLEAN_SHAVEN"
          },
          "hair": {
            "type": "string",
            "description": "Hair colour",
            "example": "BLACK"
          },
          "leftEyeColour": {
            "type": "string",
            "description": "Left eye colour",
            "example": "BLUE"
          },
          "rightEyeColour": {
            "type": "string",
            "description": "Right eye colour",
            "example": "BROWN"
          },
          "shoeSize": {
            "type": "string",
            "description": "Shoe size",
            "example": "8.5"
          }
        },
        "description": "Reconciliation details held against a prisoner"
      },
      "BookingPhysicalAttributesResponse": {
        "required": [
          "bookingId",
          "latestBooking",
          "physicalAttributes",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking's unique identifier",
            "format": "int64",
            "example": 1234567
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The start date of the booking",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The end date of the booking, or null if the booking is still active",
            "example": "2021-07-05T10:35:17"
          },
          "physicalAttributes": {
            "type": "array",
            "description": "A list of physical attributes for this booking",
            "items": {
              "$ref": "#/components/schemas/PhysicalAttributesResponse"
            }
          },
          "latestBooking": {
            "type": "boolean",
            "description": "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example": true
          }
        },
        "description": "Physical attributes held against a booking"
      },
      "PhysicalAttributesResponse": {
        "required": [
          "createDateTime",
          "createdBy"
        ],
        "type": "object",
        "properties": {
          "attributeSequence": {
            "type": "integer",
            "description": "Multiple physical attribute records can be created for each booking",
            "format": "int64",
            "example": 1
          },
          "heightCentimetres": {
            "type": "integer",
            "description": "The height of the prisoner in centimetres",
            "format": "int32",
            "example": 180
          },
          "weightKilograms": {
            "type": "integer",
            "description": "The weight of the prisoner in kilograms",
            "format": "int32",
            "example": 80
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the physical attributes were created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the physical attributes",
            "example": "AQ425D"
          },
          "modifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the physical attributes were last changed",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The user who modified the physical attributes",
            "example": "AQ425D"
          },
          "auditModuleName": {
            "type": "string",
            "description": "The name of the module that last changed the physical attributes, indicates if this was NOMIS or the synchronisation service",
            "example": "DPS_SYNCHRONISATION"
          }
        },
        "description": "Physical attributes recorded against a prisoner"
      },
      "PrisonerPhysicalAttributesResponse": {
        "required": [
          "bookings",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The prisoner's unique identifier",
            "example": "A1234AA"
          },
          "bookings": {
            "type": "array",
            "description": "A list of bookings and their physical attributes",
            "items": {
              "$ref": "#/components/schemas/BookingPhysicalAttributesResponse"
            }
          }
        },
        "description": "Physical attributes held against a prisoner"
      },
      "MergeDetail": {
        "required": [
          "activeBookingId",
          "deletedOffenderNo",
          "previousBookingId",
          "requestDateTime",
          "retainedOffenderNo"
        ],
        "type": "object",
        "properties": {
          "deletedOffenderNo": {
            "type": "string",
            "description": "The NOMIS reference of the record that was merged to and was then removed",
            "example": "A1234AA"
          },
          "activeBookingId": {
            "type": "integer",
            "description": "The booking that was merged to and which then became active",
            "format": "int64",
            "example": 12345678
          },
          "retainedOffenderNo": {
            "type": "string",
            "description": "The NOMIS reference of the record that was merged from and was retained",
            "example": "A1234AA"
          },
          "previousBookingId": {
            "type": "integer",
            "description": "The booking that was merged from and was retained as inactive",
            "format": "int64",
            "example": 12345678
          },
          "requestDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "When the merge happened",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Details of a prisoner merge"
      },
      "Actions": {
        "required": [
          "csraOrRsraReview",
          "nonAssociationsUpdated",
          "observationBook",
          "openCSIPAlert",
          "serviceReferral",
          "simReferral",
          "unitOrCellMove"
        ],
        "type": "object",
        "properties": {
          "openCSIPAlert": {
            "type": "boolean"
          },
          "nonAssociationsUpdated": {
            "type": "boolean"
          },
          "observationBook": {
            "type": "boolean"
          },
          "unitOrCellMove": {
            "type": "boolean"
          },
          "csraOrRsraReview": {
            "type": "boolean"
          },
          "serviceReferral": {
            "type": "boolean"
          },
          "simReferral": {
            "type": "boolean"
          }
        },
        "description": "Action list"
      },
      "Attendee": {
        "required": [
          "attended",
          "createDateTime",
          "createdBy",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Review Attendee/Contributor Id",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "Name of attendee/contributor"
          },
          "role": {
            "type": "string",
            "description": "Role of attendee/contributor"
          },
          "attended": {
            "type": "boolean",
            "description": "If attended (otherwise contributor)"
          },
          "contribution": {
            "type": "string",
            "description": "Contribution"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the attendee was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the attendee"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the attendee was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the attendee"
          }
        },
        "description": "Attendees to the review"
      },
      "CSIPFactorResponse": {
        "required": [
          "createDateTime",
          "createdBy",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Factor type id",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string",
            "description": "Factor comment"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the factor was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the factor"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the factor was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the factor"
          }
        },
        "description": "Contributory factors"
      },
      "CSIPResponse": {
        "required": [
          "areaOfWork",
          "bookingId",
          "createDateTime",
          "createdBy",
          "decision",
          "id",
          "incidentDate",
          "investigation",
          "location",
          "offender",
          "plans",
          "proActiveReferral",
          "reportDetails",
          "reportedBy",
          "reportedDate",
          "reviews",
          "saferCustodyScreening",
          "staffAssaulted",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The csip id",
            "format": "int64"
          },
          "offender": {
            "$ref": "#/components/schemas/Offender"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id associated with the CSIP",
            "format": "int64"
          },
          "originalAgencyId": {
            "type": "string",
            "description": "The original location when the CSIP was created"
          },
          "logNumber": {
            "type": "string",
            "description": "Log number"
          },
          "incidentDate": {
            "type": "string",
            "description": "Date/Time incident occurred",
            "format": "date"
          },
          "incidentTime": {
            "type": "string",
            "description": "Date/Time incident occurred",
            "format": "partial-time"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "location": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "areaOfWork": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "reportedBy": {
            "type": "string",
            "description": "The person reporting the incident - free text"
          },
          "reportedDate": {
            "type": "string",
            "description": "Date reported",
            "format": "date"
          },
          "proActiveReferral": {
            "type": "boolean",
            "description": "proActive Referral"
          },
          "staffAssaulted": {
            "type": "boolean",
            "description": "If a staff member was assaulted"
          },
          "staffAssaultedName": {
            "type": "string",
            "description": "If assaulted, the staff member name"
          },
          "reportDetails": {
            "$ref": "#/components/schemas/ReportDetails"
          },
          "saferCustodyScreening": {
            "$ref": "#/components/schemas/SaferCustodyScreening"
          },
          "investigation": {
            "$ref": "#/components/schemas/InvestigationDetails"
          },
          "decision": {
            "$ref": "#/components/schemas/Decision"
          },
          "caseManager": {
            "type": "string",
            "description": "Case Manager involved"
          },
          "planReason": {
            "type": "string",
            "description": "Reason for plan"
          },
          "firstCaseReviewDate": {
            "type": "string",
            "description": "Date of first review",
            "format": "date"
          },
          "plans": {
            "type": "array",
            "description": "CSIP Plans",
            "items": {
              "$ref": "#/components/schemas/Plan"
            }
          },
          "reviews": {
            "type": "array",
            "description": "CSIP Reviews",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          },
          "documents": {
            "type": "array",
            "description": "Associated CSIP document Ids",
            "items": {
              "$ref": "#/components/schemas/DocumentIdResponse"
            }
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the report was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the report"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the report was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the report"
          }
        },
        "description": "CSIP Details"
      },
      "Decision": {
        "required": [
          "actions"
        ],
        "type": "object",
        "properties": {
          "conclusion": {
            "type": "string",
            "description": "Conclusion & Reason for decision"
          },
          "decisionOutcome": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "signedOffRole": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "recordedBy": {
            "type": "string",
            "description": "The username of the person who recorded the decision"
          },
          "recordedByDisplayName": {
            "type": "string",
            "description": "Real name of who recorded the decision"
          },
          "recordedDate": {
            "type": "string",
            "description": "Recorded Date",
            "format": "date"
          },
          "nextSteps": {
            "type": "string",
            "description": "What to do next"
          },
          "otherDetails": {
            "type": "string",
            "description": "Other information to take into consideration"
          },
          "actions": {
            "$ref": "#/components/schemas/Actions"
          }
        },
        "description": "DecisionAndActions"
      },
      "DocumentIdResponse": {
        "required": [
          "documentId"
        ],
        "type": "object",
        "properties": {
          "documentId": {
            "type": "integer",
            "description": "The document id",
            "format": "int64"
          }
        },
        "description": "Document id"
      },
      "InterviewDetails": {
        "required": [
          "createDateTime",
          "createdBy",
          "date",
          "id",
          "interviewee",
          "role"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Interview Id",
            "format": "int64"
          },
          "interviewee": {
            "type": "string",
            "description": "Person being interviewed"
          },
          "date": {
            "type": "string",
            "description": "date of interview",
            "format": "date"
          },
          "role": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comments": {
            "type": "string",
            "description": "Additional data regarding the interview"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the interview was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the interview"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the interview was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the interview"
          }
        },
        "description": "Interview"
      },
      "InvestigationDetails": {
        "type": "object",
        "properties": {
          "staffInvolved": {
            "type": "string",
            "description": "Staff involved in the incident"
          },
          "evidenceSecured": {
            "type": "string",
            "description": "Whether any evidence was secured"
          },
          "reasonOccurred": {
            "type": "string",
            "description": "Why the incident occurred"
          },
          "usualBehaviour": {
            "type": "string",
            "description": "Normal behaviour of the offender"
          },
          "trigger": {
            "type": "string",
            "description": "Offender's trigger"
          },
          "protectiveFactors": {
            "type": "string",
            "description": "Protective factors"
          },
          "interviews": {
            "type": "array",
            "description": "Interview",
            "items": {
              "$ref": "#/components/schemas/InterviewDetails"
            }
          }
        },
        "description": "Investigation details of the incident"
      },
      "Offender": {
        "required": [
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "NOMIS id"
          },
          "firstName": {
            "type": "string",
            "description": "First name of offender"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of offender"
          }
        },
        "description": "The offender"
      },
      "Plan": {
        "required": [
          "createDateTime",
          "createdBy",
          "createdDate",
          "id",
          "identifiedNeed",
          "intervention",
          "targetDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Plan Id",
            "format": "int64"
          },
          "identifiedNeed": {
            "type": "string",
            "description": "Details of the need"
          },
          "intervention": {
            "type": "string",
            "description": "Intervention plan"
          },
          "progression": {
            "type": "string",
            "description": "Information regarding progression of plan"
          },
          "referredBy": {
            "type": "string",
            "description": "The person reporting - free text"
          },
          "createdDate": {
            "type": "string",
            "description": "When created",
            "format": "date"
          },
          "targetDate": {
            "type": "string",
            "description": "Target date of plan",
            "format": "date"
          },
          "closedDate": {
            "type": "string",
            "description": "Plan closed date",
            "format": "date"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the plan was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the plan"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the plan was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the plan"
          }
        },
        "description": "CSIP Plans"
      },
      "PrisonerCSIPsResponse": {
        "required": [
          "offenderCSIPs"
        ],
        "type": "object",
        "properties": {
          "offenderCSIPs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSIPResponse"
            }
          }
        },
        "description": "The list of CSIPs held against a prisoner"
      },
      "ReportDetails": {
        "required": [
          "factors",
          "referralComplete",
          "saferCustodyTeamInformed"
        ],
        "type": "object",
        "properties": {
          "releaseDate": {
            "type": "string",
            "description": "Date the offender is released",
            "format": "date"
          },
          "involvement": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "concern": {
            "type": "string",
            "description": "Concern description"
          },
          "factors": {
            "type": "array",
            "description": "Contributory factors",
            "items": {
              "$ref": "#/components/schemas/CSIPFactorResponse"
            }
          },
          "knownReasons": {
            "type": "string",
            "description": "known reasons for the involvement"
          },
          "otherInformation": {
            "type": "string",
            "description": "Additional information"
          },
          "saferCustodyTeamInformed": {
            "type": "boolean",
            "description": "If the safer custody team were informed"
          },
          "referralComplete": {
            "type": "boolean",
            "description": "If the referral has been completed"
          },
          "referralCompletedBy": {
            "type": "string",
            "description": "Who completed the referral"
          },
          "referralCompletedByDisplayName": {
            "type": "string",
            "description": "Real name of the person who completed the referral"
          },
          "referralCompletedDate": {
            "type": "string",
            "description": "Date the referral was completed",
            "format": "date"
          }
        },
        "description": "Additional information for the CSIP Report"
      },
      "Review": {
        "required": [
          "attendees",
          "caseNote",
          "closeCSIP",
          "createDateTime",
          "createdBy",
          "csipUpdated",
          "id",
          "peopleInformed",
          "recordedBy",
          "recordedDate",
          "remainOnCSIP",
          "reviewSequence"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Review Id",
            "format": "int64"
          },
          "reviewSequence": {
            "type": "integer",
            "description": "Sequence number",
            "format": "int32"
          },
          "attendees": {
            "type": "array",
            "description": "Attendees to the review",
            "items": {
              "$ref": "#/components/schemas/Attendee"
            }
          },
          "remainOnCSIP": {
            "type": "boolean",
            "description": "Whether to remain on CSIP"
          },
          "csipUpdated": {
            "type": "boolean",
            "description": "If the csip has been updated"
          },
          "caseNote": {
            "type": "boolean",
            "description": "If a case note was added"
          },
          "closeCSIP": {
            "type": "boolean",
            "description": "If the csip is closed"
          },
          "peopleInformed": {
            "type": "boolean",
            "description": "Whether people were informed"
          },
          "summary": {
            "type": "string",
            "description": "Summary details"
          },
          "nextReviewDate": {
            "type": "string",
            "description": "Next Review date",
            "format": "date"
          },
          "closeDate": {
            "type": "string",
            "description": "Review closed date",
            "format": "date"
          },
          "recordedDate": {
            "type": "string",
            "description": "The date the review was created",
            "format": "date"
          },
          "recordedBy": {
            "type": "string",
            "description": "The username of the person who recorded the review"
          },
          "recordedByDisplayName": {
            "type": "string",
            "description": "Real name of who recorded the review"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the review was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the review"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the review was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the review"
          }
        },
        "description": "CSIP Reviews"
      },
      "SaferCustodyScreening": {
        "type": "object",
        "properties": {
          "outcome": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "recordedBy": {
            "type": "string",
            "description": "The username of the person who recorded the data"
          },
          "recordedByDisplayName": {
            "type": "string",
            "description": "Real name of who recorded the data"
          },
          "recordedDate": {
            "type": "string",
            "description": "When the the SCS occurred",
            "format": "date"
          },
          "reasonForDecision": {
            "type": "string",
            "description": "Why the decision was made"
          }
        },
        "description": "Safer custody screening"
      },
      "CaseNoteAmendment": {
        "required": [
          "authorUsername",
          "createdDateTime",
          "sourceSystem",
          "text"
        ],
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Free format text body of amendment"
          },
          "authorUsername": {
            "type": "string",
            "description": "Author login name of person or department that added the amendment"
          },
          "authorStaffId": {
            "type": "integer",
            "description": "Author STAFF_ID",
            "format": "int64"
          },
          "authorFirstName": {
            "type": "string",
            "description": "Author first name"
          },
          "authorLastName": {
            "type": "string",
            "description": "Author last name"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Amendment created timestamp",
            "example": "2021-07-05T10:35:17"
          },
          "sourceSystem": {
            "type": "string",
            "description": "Which system (Nomis or DPS) created the amendment",
            "example": "DPS",
            "enum": [
              "DPS",
              "NOMIS"
            ]
          }
        },
        "description": "Amendments to the text"
      },
      "CaseNoteResponse": {
        "required": [
          "amendments",
          "authorLastName",
          "authorStaffId",
          "authorUsername",
          "bookingId",
          "caseNoteId",
          "caseNoteSubType",
          "caseNoteText",
          "caseNoteType",
          "createdDatetime",
          "createdUsername",
          "sourceSystem"
        ],
        "type": "object",
        "properties": {
          "caseNoteId": {
            "type": "integer",
            "description": "The primary key",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The prisoner's bookingId related to this case note",
            "format": "int64"
          },
          "caseNoteType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "caseNoteSubType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "noteSourceCode": {
            "type": "string",
            "description": "Whether system-generated",
            "enum": [
              "AUTO",
              "EXT",
              "INST"
            ]
          },
          "occurrenceDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Datetime case note occurred",
            "example": "2021-07-05T10:35:17"
          },
          "creationDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Datetime case note was created by user",
            "example": "2021-07-05T10:35:17"
          },
          "authorStaffId": {
            "type": "integer",
            "description": "Author STAFF_ID",
            "format": "int64"
          },
          "authorUsername": {
            "type": "string",
            "description": "Author username or login name"
          },
          "authorFirstName": {
            "type": "string",
            "description": "Author first name"
          },
          "authorLastName": {
            "type": "string",
            "description": "Author last name"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison id"
          },
          "caseNoteText": {
            "type": "string",
            "description": "Free format text body of case note"
          },
          "amendments": {
            "type": "array",
            "description": "Amendments to the text",
            "items": {
              "$ref": "#/components/schemas/CaseNoteAmendment"
            }
          },
          "createdDatetime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Created DB timestamp",
            "example": "2021-07-05T10:35:17"
          },
          "createdUsername": {
            "type": "string",
            "description": "Created DB username"
          },
          "auditModuleName": {
            "type": "string",
            "description": "Which screen (or DPS) created the case note",
            "example": "OIDABCDE"
          },
          "sourceSystem": {
            "type": "string",
            "description": "Which system (Nomis or DPS) created the case note",
            "example": "DPS",
            "enum": [
              "DPS",
              "NOMIS"
            ]
          }
        },
        "description": "The data held in NOMIS about a case note associated with a prisoner"
      },
      "PrisonerCaseNotesResponse": {
        "required": [
          "caseNotes"
        ],
        "type": "object",
        "properties": {
          "caseNotes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CaseNoteResponse"
            }
          }
        },
        "description": "The list of case notes held against a booking"
      },
      "PreviousBookingId": {
        "required": [
          "bookingId",
          "bookingSequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The NOMIS booking ID",
            "format": "int64",
            "example": 1234567
          },
          "bookingSequence": {
            "type": "integer",
            "description": "The NOMIS booking sequence",
            "format": "int64",
            "example": 3
          }
        },
        "description": "ID of previous booking"
      },
      "PrisonerAlertsResponse": {
        "required": [
          "latestBookingAlerts"
        ],
        "type": "object",
        "properties": {
          "latestBookingAlerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertResponse"
            }
          }
        },
        "description": "The list of unique alerts held against a prisoner"
      },
      "PagePrisonerIds": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerIds"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PrisonerIds": {
        "required": [
          "bookingId",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Latest booking id",
            "format": "int64",
            "example": 12345
          },
          "offenderNo": {
            "type": "string",
            "description": "The NOMIS reference AKA prisoner number",
            "example": "A1234AA"
          }
        },
        "description": "Prisoner identifiers"
      },
      "PagePrisonerId": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerId"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PrisonerId": {
        "required": [
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The NOMIS reference AKA prisoner number",
            "example": "A1234AA"
          }
        },
        "description": "Prisoner identifier"
      },
      "PrisonerNosWithLast": {
        "required": [
          "lastOffenderId",
          "prisonerIds"
        ],
        "type": "object",
        "properties": {
          "prisonerIds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerId"
            }
          },
          "lastOffenderId": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "SentenceResponse": {
        "required": [
          "bookingId",
          "calculationType",
          "category",
          "createdByUsername",
          "createdDateTime",
          "offenderCharges",
          "sentenceSeq",
          "sentenceTerms",
          "startDate",
          "status"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "sentenceSeq": {
            "type": "integer",
            "format": "int64"
          },
          "status": {
            "type": "string"
          },
          "calculationType": {
            "type": "string"
          },
          "category": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "courtOrder": {
            "$ref": "#/components/schemas/CourtOrderResponse"
          },
          "consecSequence": {
            "type": "integer",
            "format": "int32"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "commentText": {
            "type": "string"
          },
          "absenceCount": {
            "type": "integer",
            "format": "int32"
          },
          "caseId": {
            "type": "integer",
            "format": "int64"
          },
          "etdCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "mtdCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "ltdCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "ardCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "crdCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "pedCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "npdCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "ledCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "sedCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "prrdCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "tariffCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "dprrdCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "tusedCalculatedDate": {
            "type": "string",
            "format": "date"
          },
          "aggSentenceSequence": {
            "type": "integer",
            "format": "int32"
          },
          "aggAdjustDays": {
            "type": "integer",
            "format": "int32"
          },
          "sentenceLevel": {
            "type": "string"
          },
          "extendedDays": {
            "type": "integer",
            "format": "int32"
          },
          "counts": {
            "type": "integer",
            "format": "int32"
          },
          "statusUpdateReason": {
            "type": "string"
          },
          "statusUpdateComment": {
            "type": "string"
          },
          "statusUpdateDate": {
            "type": "string",
            "format": "date"
          },
          "statusUpdateStaffId": {
            "type": "integer",
            "format": "int64"
          },
          "fineAmount": {
            "type": "number"
          },
          "dischargeDate": {
            "type": "string",
            "format": "date"
          },
          "nomSentDetailRef": {
            "type": "integer",
            "format": "int64"
          },
          "nomConsToSentDetailRef": {
            "type": "integer",
            "format": "int64"
          },
          "nomConsFromSentDetailRef": {
            "type": "integer",
            "format": "int64"
          },
          "nomConsWithSentDetailRef": {
            "type": "integer",
            "format": "int64"
          },
          "lineSequence": {
            "type": "integer",
            "format": "int32"
          },
          "hdcExclusionFlag": {
            "type": "boolean"
          },
          "hdcExclusionReason": {
            "type": "string"
          },
          "cjaAct": {
            "type": "string"
          },
          "sled2Calc": {
            "type": "string",
            "format": "date"
          },
          "startDate2Calc": {
            "type": "string",
            "format": "date"
          },
          "createdDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "example": "2021-07-05T10:35:17"
          },
          "createdByUsername": {
            "type": "string"
          },
          "sentenceTerms": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SentenceTermResponse"
            }
          },
          "offenderCharges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OffenderChargeResponse"
            }
          }
        },
        "description": "Offender Sentence"
      },
      "SentenceTermResponse": {
        "required": [
          "startDate",
          "termSequence"
        ],
        "type": "object",
        "properties": {
          "termSequence": {
            "type": "integer",
            "format": "int64"
          },
          "sentenceTermType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "years": {
            "type": "integer",
            "format": "int32"
          },
          "months": {
            "type": "integer",
            "format": "int32"
          },
          "weeks": {
            "type": "integer",
            "format": "int32"
          },
          "days": {
            "type": "integer",
            "format": "int32"
          },
          "hours": {
            "type": "integer",
            "format": "int32"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "lifeSentenceFlag": {
            "type": "boolean"
          }
        },
        "description": "Sentence Term"
      },
      "KeyDateAdjustmentResponse": {
        "required": [
          "active",
          "adjustmentDays",
          "adjustmentType",
          "bookingId",
          "hasBeenReleased",
          "id",
          "offenderNo",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The key date adjustment id",
            "format": "int64"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "hasBeenReleased": {
            "type": "boolean",
            "description": "Indicates whether for this booking the prisoner has been released"
          },
          "prisonId": {
            "type": "string",
            "description": "Current prison or OUT"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "adjustmentType": {
            "$ref": "#/components/schemas/SentencingAdjustmentType"
          },
          "adjustmentDate": {
            "type": "string",
            "description": "Date adjustment is applied",
            "format": "date"
          },
          "adjustmentFromDate": {
            "type": "string",
            "description": "Start of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentToDate": {
            "type": "string",
            "description": "End of the period which contributed to the adjustment",
            "format": "date"
          },
          "adjustmentDays": {
            "type": "integer",
            "description": "Number of days for the adjustment",
            "format": "int64"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if the adjustment is being applied"
          }
        },
        "description": "Key date adjustment"
      },
      "SentencingAdjustmentsResponse": {
        "required": [
          "keyDateAdjustments",
          "sentenceAdjustments"
        ],
        "type": "object",
        "properties": {
          "keyDateAdjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/KeyDateAdjustmentResponse"
            }
          },
          "sentenceAdjustments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SentenceAdjustmentResponse"
            }
          }
        },
        "description": "Sentencing adjustment"
      },
      "ADASummary": {
        "required": [
          "adjudicationNumber",
          "days",
          "effectiveDate",
          "sanctionSequence",
          "sanctionStatus"
        ],
        "type": "object",
        "properties": {
          "adjudicationNumber": {
            "type": "integer",
            "description": "Parent adjudication number that lead to this award",
            "format": "int64"
          },
          "sanctionSequence": {
            "type": "integer",
            "description": "Key to this sanction",
            "format": "int32"
          },
          "days": {
            "type": "integer",
            "description": "Number of days awards",
            "format": "int32"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Date of award",
            "format": "date"
          },
          "sanctionStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          }
        },
        "description": "ADA summary"
      },
      "AdjudicationADAAwardSummaryResponse": {
        "required": [
          "adaSummaries",
          "bookingId",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Booking id for the summary",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "Prisoner number related to booking"
          },
          "adaSummaries": {
            "type": "array",
            "description": "List of ADAs awarded during this booking period",
            "items": {
              "$ref": "#/components/schemas/ADASummary"
            }
          }
        },
        "description": "Summary of adjudication for a booking"
      },
      "BookingAlertsResponse": {
        "required": [
          "alerts"
        ],
        "type": "object",
        "properties": {
          "alerts": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AlertResponse"
            }
          }
        },
        "description": "The list of alerts held against a booking"
      },
      "ContactForPrisoner": {
        "required": [
          "bookingId",
          "bookingSequence",
          "firstName",
          "lastName",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "Unique NOMIS Id of booking associated with the prisoner",
            "format": "int64"
          },
          "bookingSequence": {
            "type": "integer",
            "description": "Booking sequence this contact is related to. WHen 1 this indicates contact is for current term",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "Offender no aka prisoner number",
            "example": "A1234AA"
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the prisoner",
            "example": "Smith"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the prisoner",
            "example": "John"
          }
        },
        "description": "The data held in NOMIS about a person's contact with a prisoner"
      },
      "ContactPerson": {
        "required": [
          "addresses",
          "audit",
          "contacts",
          "emailAddresses",
          "employments",
          "firstName",
          "identifiers",
          "interpreterRequired",
          "lastName",
          "personId",
          "phoneNumbers",
          "restrictions"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person id",
            "format": "int64"
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person"
          },
          "lastName": {
            "type": "string",
            "description": "Surname name of the person"
          },
          "middleName": {
            "type": "string",
            "description": "Middle name of the person"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of birth of the person",
            "format": "date"
          },
          "gender": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "title": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "language": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "True if the person requires an interpreter"
          },
          "domesticStatus": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "deceasedDate": {
            "type": "string",
            "description": "Date the person dies",
            "format": "date"
          },
          "isStaff": {
            "type": "boolean",
            "description": "True if a staff member"
          },
          "isRemitter": {
            "type": "boolean",
            "description": "Set to true when person created via finance remitter page"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "List of phone numbers for the person",
            "items": {
              "$ref": "#/components/schemas/PersonPhoneNumber"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of addresses for the person",
            "items": {
              "$ref": "#/components/schemas/PersonAddress"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "List of email addresses for the person",
            "items": {
              "$ref": "#/components/schemas/PersonEmailAddress"
            }
          },
          "employments": {
            "type": "array",
            "description": "List of employments for the person",
            "items": {
              "$ref": "#/components/schemas/PersonEmployment"
            }
          },
          "identifiers": {
            "type": "array",
            "description": "List of identifiers for the person",
            "items": {
              "$ref": "#/components/schemas/PersonIdentifier"
            }
          },
          "contacts": {
            "type": "array",
            "description": "List of prisoner contacts this person is related to",
            "items": {
              "$ref": "#/components/schemas/PersonContact"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "List of restrictions between all prisoners and this person",
            "items": {
              "$ref": "#/components/schemas/ContactRestriction"
            }
          }
        },
        "description": "The data held in NOMIS about a person who is a contact for a prisoner"
      },
      "ContactRestriction": {
        "required": [
          "audit",
          "effectiveDate",
          "enteredStaff",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique NOMIS Id of the restriction",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment text"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Date restriction became active",
            "format": "date"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date restriction is no longer active",
            "format": "date"
          },
          "enteredStaff": {
            "$ref": "#/components/schemas/ContactRestrictionEnteredStaff"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about a person's restriction with a prisoner"
      },
      "ContactRestrictionEnteredStaff": {
        "required": [
          "staffId",
          "username"
        ],
        "type": "object",
        "properties": {
          "staffId": {
            "type": "integer",
            "description": "NOMIS staff id",
            "format": "int64"
          },
          "username": {
            "type": "string",
            "description": "username for staff member. For staff with multiple accounts this will be the general account username."
          }
        },
        "description": "Staff member who created the restriction"
      },
      "PersonAddress": {
        "required": [
          "addressId",
          "audit",
          "mailAddress",
          "phoneNumbers",
          "primaryAddress",
          "validatedPAF"
        ],
        "type": "object",
        "properties": {
          "addressId": {
            "type": "integer",
            "description": "Unique NOMIS Id of number",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "flat": {
            "type": "string",
            "description": "Flat name or number",
            "example": "Apartment 3"
          },
          "premise": {
            "type": "string",
            "description": "Premise",
            "example": "22"
          },
          "street": {
            "type": "string",
            "description": "Street",
            "example": "West Street"
          },
          "locality": {
            "type": "string",
            "description": "Locality",
            "example": "Keighley"
          },
          "postcode": {
            "type": "string",
            "description": "Post code",
            "example": "MK15 2ST"
          },
          "city": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "county": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "country": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "List of phone numbers for the address",
            "items": {
              "$ref": "#/components/schemas/PersonPhoneNumber"
            }
          },
          "validatedPAF": {
            "type": "boolean",
            "description": "true if address validated by Post Office Address file??"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "true if address not fixed. for example homeless"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "true if this is the person's primary address"
          },
          "mailAddress": {
            "type": "boolean",
            "description": "true if this is used for mail"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment about the address"
          },
          "startDate": {
            "type": "string",
            "description": "Date address was valid from",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Date address was valid to",
            "format": "date"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about a address number"
      },
      "PersonContact": {
        "required": [
          "active",
          "approvedVisitor",
          "audit",
          "contactType",
          "emergencyContact",
          "id",
          "nextOfKin",
          "prisoner",
          "relationshipType",
          "restrictions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique NOMIS sequence for this identifier for this contact",
            "format": "int64"
          },
          "contactType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "relationshipType": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "active": {
            "type": "boolean",
            "description": "True if active"
          },
          "expiryDate": {
            "type": "string",
            "description": "Date contact is no longer active",
            "format": "date"
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "True if approved to visit the prisoner"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "True if next of kin to the prisoner"
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "True if emergency contact for the prisoner"
          },
          "comment": {
            "type": "string",
            "description": "Free format comment text"
          },
          "prisoner": {
            "$ref": "#/components/schemas/ContactForPrisoner"
          },
          "restrictions": {
            "type": "array",
            "description": "List of restrictions specifically between the prisoner and this contact",
            "items": {
              "$ref": "#/components/schemas/ContactRestriction"
            }
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about a person's contact with a prisoner"
      },
      "PersonEmailAddress": {
        "required": [
          "audit",
          "email",
          "emailAddressId"
        ],
        "type": "object",
        "properties": {
          "emailAddressId": {
            "type": "integer",
            "description": "Unique NOMIS Id of email address",
            "format": "int64"
          },
          "email": {
            "type": "string",
            "description": "The email address",
            "example": "john.smith@internet.co.uk"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about a email address"
      },
      "PersonEmployment": {
        "required": [
          "active",
          "audit",
          "corporate",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Unique NOMIS sequence for this employment for this person",
            "format": "int64"
          },
          "corporate": {
            "$ref": "#/components/schemas/PersonEmploymentCorporate"
          },
          "active": {
            "type": "boolean",
            "description": "True is employment is active"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about a person's employment"
      },
      "PersonEmploymentCorporate": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique NOMIS Id of corporate address",
            "format": "int64"
          },
          "name": {
            "type": "string",
            "description": "The corporate name",
            "example": "Police"
          }
        },
        "description": "The data held in NOMIS about a corporate entity"
      },
      "PersonIdentifier": {
        "required": [
          "audit",
          "identifier",
          "sequence",
          "type"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Unique NOMIS sequence for this identifier for this person",
            "format": "int64"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "identifier": {
            "type": "string",
            "description": "The identifier value",
            "example": "NE121212T"
          },
          "issuedAuthority": {
            "type": "string",
            "description": "The issued authority",
            "example": "Police"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about a person's identifiers"
      },
      "PersonPhoneNumber": {
        "required": [
          "audit",
          "number",
          "phoneId",
          "type"
        ],
        "type": "object",
        "properties": {
          "phoneId": {
            "type": "integer",
            "description": "Unique NOMIS Id of number",
            "format": "int64"
          },
          "number": {
            "type": "string",
            "description": "The number"
          },
          "extension": {
            "type": "string",
            "description": "Extension"
          },
          "type": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "audit": {
            "$ref": "#/components/schemas/NomisAudit"
          }
        },
        "description": "The data held in NOMIS about a phone number"
      },
      "PagePersonIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PersonIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PersonIdResponse": {
        "required": [
          "personId"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person Id",
            "format": "int64"
          }
        }
      },
      "NonAssociationResponse": {
        "required": [
          "effectiveDate",
          "nsOffenderNo",
          "offenderNo",
          "reason",
          "recipReason",
          "type",
          "typeSequence",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "Noms id of the prisoner",
            "example": "A1234DF"
          },
          "nsOffenderNo": {
            "type": "string",
            "description": "Noms id of the other prisoner",
            "example": "A1234EG"
          },
          "typeSequence": {
            "type": "integer",
            "description": "Sequence number",
            "format": "int32",
            "example": 1
          },
          "reason": {
            "type": "string",
            "description": "Reason code of the first prisoner, domain NON_ASSO_RSN",
            "example": "VIC"
          },
          "recipReason": {
            "type": "string",
            "description": "Reason code of the other prisoner, domain NON_ASSO_RSN",
            "example": "PER"
          },
          "type": {
            "type": "string",
            "description": "Type code, domain NON_ASSO_TYP",
            "example": "WING"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Free text name of staff member",
            "example": "Joe Bloggs"
          },
          "updatedBy": {
            "type": "string",
            "description": "Last updated by",
            "example": "JSMITH_GEN"
          },
          "effectiveDate": {
            "type": "string",
            "description": "Effective date",
            "format": "date",
            "example": "2022-08-12"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date, open if null",
            "format": "date",
            "example": "2022-08-12"
          },
          "comment": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          }
        },
        "description": "Appointment information"
      },
      "NonAssociationIdResponse": {
        "required": [
          "offenderNo1",
          "offenderNo2"
        ],
        "type": "object",
        "properties": {
          "offenderNo1": {
            "type": "string",
            "description": "The 1st offender"
          },
          "offenderNo2": {
            "type": "string",
            "description": "The 2nd offender"
          }
        },
        "description": "Non association id"
      },
      "PageNonAssociationIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/NonAssociationIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AmendmentResponse": {
        "required": [
          "amendDateTime",
          "amendedBy"
        ],
        "type": "object",
        "properties": {
          "amendDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Amended timestamp",
            "example": "2021-07-05T10:35:17"
          },
          "columnName": {
            "type": "string",
            "description": "Which value was changed",
            "example": "Sequence"
          },
          "oldValue": {
            "type": "string",
            "description": "Original value"
          },
          "newValue": {
            "type": "string",
            "description": "New value"
          },
          "amendedBy": {
            "type": "string",
            "description": "Username of the person who made the change",
            "example": "NQP44X"
          }
        },
        "description": "History"
      },
      "LocationResponse": {
        "required": [
          "active",
          "createDatetime",
          "createUsername",
          "description",
          "locationCode",
          "locationId",
          "locationType",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "The location id",
            "format": "int64",
            "example": 1234567
          },
          "certified": {
            "type": "boolean",
            "description": "Whether certified for use",
            "example": true,
            "default": false
          },
          "locationType": {
            "type": "string",
            "description": "Whether a CELL, VISIT room, Kitchen etc (Ref type ILOC_TYPE)",
            "example": "LAND"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code of the location",
            "example": "LEI"
          },
          "parentLocationId": {
            "type": "integer",
            "description": "The containing location id",
            "format": "int64",
            "example": 1234567
          },
          "parentKey": {
            "type": "string",
            "description": "The containing location id's key (Nomis description field)",
            "example": "WWI-B-2"
          },
          "operationalCapacity": {
            "type": "integer",
            "description": "Max capacity subject to resources",
            "format": "int32",
            "example": 43
          },
          "cnaCapacity": {
            "type": "integer",
            "description": "Certified Normal Accommodation capacity",
            "format": "int32",
            "example": 44
          },
          "userDescription": {
            "type": "string",
            "description": "Description of location",
            "example": "Some description"
          },
          "description": {
            "type": "string",
            "description": "Constructed full code of location",
            "example": "WWI-B-2-004"
          },
          "locationCode": {
            "type": "string",
            "description": "Usually a number for a cell, a letter for a wing or landing. Used to calculate description"
          },
          "capacity": {
            "type": "integer",
            "description": "Physical maximum capacity",
            "format": "int32",
            "example": 45
          },
          "listSequence": {
            "type": "integer",
            "description": "Defines the order within parent location",
            "format": "int32"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "example": "Some comment"
          },
          "unitType": {
            "type": "string",
            "description": "Housing unit type",
            "example": "NA",
            "enum": [
              "HC",
              "HOLC",
              "NA",
              "OU",
              "REC",
              "SEG",
              "SPLC"
            ]
          },
          "active": {
            "type": "boolean",
            "description": "Whether the location is active or has been deactivated",
            "example": true
          },
          "deactivateDate": {
            "type": "string",
            "description": "The deactivation date, defaults to today",
            "format": "date",
            "example": "2024-12-31"
          },
          "reasonCode": {
            "type": "string",
            "description": "The reason code for deactivation, reference data 'LIV_UN_RSN'",
            "enum": [
              "A",
              "B",
              "C",
              "D",
              "E",
              "F",
              "G",
              "H",
              "I",
              "J",
              "K",
              "L"
            ]
          },
          "reactivateDate": {
            "type": "string",
            "description": "The expected reactivation date if any",
            "format": "date",
            "example": "2024-12-31"
          },
          "profiles": {
            "type": "array",
            "description": "Profiles",
            "items": {
              "$ref": "#/components/schemas/ProfileRequest"
            }
          },
          "usages": {
            "type": "array",
            "description": "Usages",
            "items": {
              "$ref": "#/components/schemas/UsageRequest"
            }
          },
          "amendments": {
            "type": "array",
            "description": "History",
            "items": {
              "$ref": "#/components/schemas/AmendmentResponse"
            }
          },
          "createDatetime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Record created date",
            "example": "2021-07-05T10:35:17"
          },
          "createUsername": {
            "type": "string",
            "description": "Record created by"
          },
          "modifyUsername": {
            "type": "string",
            "description": "Record modified by"
          }
        },
        "description": "Location request returned data"
      },
      "PageLocationIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LocationIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "History": {
        "required": [
          "createDateTime",
          "createdBy",
          "incidentChangeDate",
          "incidentChangeStaff",
          "questionnaireId",
          "questions",
          "type"
        ],
        "type": "object",
        "properties": {
          "questionnaireId": {
            "type": "integer",
            "description": "The history questionnaire id for the incident",
            "format": "int64"
          },
          "type": {
            "type": "string",
            "description": "The questionnaire type"
          },
          "description": {
            "type": "string",
            "description": "The questionnaire description"
          },
          "questions": {
            "type": "array",
            "description": "Questions asked for the questionnaire",
            "items": {
              "$ref": "#/components/schemas/HistoryQuestion"
            }
          },
          "incidentChangeDate": {
            "type": "string",
            "description": "When the questionnaire was changed",
            "format": "date"
          },
          "incidentChangeStaff": {
            "$ref": "#/components/schemas/Staff"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the historical incident questionnaire was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the historical incident questionnaire"
          }
        },
        "description": "Historical questionnaire details for the incident"
      },
      "HistoryQuestion": {
        "required": [
          "answers",
          "question",
          "questionId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "description": "The sequence number of the response question for this incident",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence number of the question for this incident",
            "format": "int32"
          },
          "question": {
            "type": "string",
            "description": "The Question being asked"
          },
          "answers": {
            "type": "array",
            "description": "Historical list of Responses to this question",
            "items": {
              "$ref": "#/components/schemas/HistoryResponse"
            }
          }
        },
        "description": "Questions asked for the questionnaire"
      },
      "HistoryResponse": {
        "required": [
          "recordingStaff",
          "responseSequence"
        ],
        "type": "object",
        "properties": {
          "questionResponseId": {
            "type": "integer",
            "description": "The id of the questionnaire question answer",
            "format": "int64"
          },
          "responseSequence": {
            "type": "integer",
            "description": "The sequence number of the response for this incident",
            "format": "int32"
          },
          "answer": {
            "type": "string",
            "description": "The answer text"
          },
          "comment": {
            "type": "string",
            "description": "Comment added to the response by recording staff"
          },
          "responseDate": {
            "type": "string",
            "description": "Response date added to the response by recording staff",
            "format": "date"
          },
          "recordingStaff": {
            "$ref": "#/components/schemas/Staff"
          }
        },
        "description": "Historical list of Responses to this question"
      },
      "IncidentResponse": {
        "required": [
          "agency",
          "createDateTime",
          "createdBy",
          "history",
          "incidentDateTime",
          "incidentId",
          "lockedResponse",
          "offenderParties",
          "questionnaireId",
          "questions",
          "reportedDateTime",
          "reportingStaff",
          "requirements",
          "staffParties",
          "status",
          "type"
        ],
        "type": "object",
        "properties": {
          "incidentId": {
            "type": "integer",
            "description": "The incident id",
            "format": "int64"
          },
          "questionnaireId": {
            "type": "integer",
            "description": "The id of the questionnaire associated with this incident",
            "format": "int64"
          },
          "title": {
            "type": "string",
            "description": "A summary of the incident"
          },
          "description": {
            "type": "string",
            "description": "The incident details"
          },
          "agency": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "type": {
            "type": "string",
            "description": "The incident questionnaire type"
          },
          "lockedResponse": {
            "type": "boolean",
            "description": "If the response is locked ie if the response is completed"
          },
          "incidentDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time of the incident",
            "example": "2021-07-05T10:35:17"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the incident was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the incident"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the incident was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the incident"
          },
          "followUpDate": {
            "type": "string",
            "description": "The follow up date for the incident",
            "format": "date"
          },
          "reportingStaff": {
            "$ref": "#/components/schemas/Staff"
          },
          "reportedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the incident was reported",
            "example": "2021-07-05T10:35:17"
          },
          "staffParties": {
            "type": "array",
            "description": "Staff involved in the incident",
            "items": {
              "$ref": "#/components/schemas/StaffParty"
            }
          },
          "offenderParties": {
            "type": "array",
            "description": "Offenders involved in the incident",
            "items": {
              "$ref": "#/components/schemas/OffenderParty"
            }
          },
          "requirements": {
            "type": "array",
            "description": "Requirements for completing the incident report",
            "items": {
              "$ref": "#/components/schemas/Requirement"
            }
          },
          "questions": {
            "type": "array",
            "description": "Questions asked for the incident",
            "items": {
              "$ref": "#/components/schemas/Question"
            }
          },
          "history": {
            "type": "array",
            "description": "Historical questionnaire details for the incident",
            "items": {
              "$ref": "#/components/schemas/History"
            }
          }
        },
        "description": "Incident Details"
      },
      "IncidentStatus": {
        "required": [
          "code",
          "description",
          "enhancedUser",
          "standardUser"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "listSequence": {
            "type": "integer",
            "format": "int32"
          },
          "standardUser": {
            "type": "boolean"
          },
          "enhancedUser": {
            "type": "boolean"
          }
        },
        "description": "Status details"
      },
      "OffenderParty": {
        "required": [
          "createDateTime",
          "createdBy",
          "offender",
          "role"
        ],
        "type": "object",
        "properties": {
          "offender": {
            "$ref": "#/components/schemas/Offender"
          },
          "role": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "outcome": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string",
            "description": "General information about the incident"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the offender party was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the offender party"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the offender party was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the offender party"
          }
        },
        "description": "Offenders involved in the incident"
      },
      "Question": {
        "required": [
          "answers",
          "createDateTime",
          "createdBy",
          "question",
          "questionId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "questionId": {
            "type": "integer",
            "description": "The questionnaire question id",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence number of the question for this incident",
            "format": "int32"
          },
          "question": {
            "type": "string",
            "description": "The Question being asked"
          },
          "answers": {
            "type": "array",
            "description": "List of Responses to this question",
            "items": {
              "$ref": "#/components/schemas/Response"
            }
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the question was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the question"
          }
        },
        "description": "Questions asked for the incident"
      },
      "Requirement": {
        "required": [
          "agencyId",
          "createDateTime",
          "createdBy",
          "date",
          "staff"
        ],
        "type": "object",
        "properties": {
          "comment": {
            "type": "string",
            "description": "The update required to the incident report"
          },
          "date": {
            "type": "string",
            "description": "Date the requirement was recorded",
            "format": "date"
          },
          "staff": {
            "$ref": "#/components/schemas/Staff"
          },
          "agencyId": {
            "type": "string",
            "description": "The reporting agency of the staff"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the requirement was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the requirement"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the requirement was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the requirement"
          }
        },
        "description": "Requirements for completing the incident report"
      },
      "Response": {
        "required": [
          "createDateTime",
          "createdBy",
          "recordingStaff",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "questionResponseId": {
            "type": "integer",
            "description": "The id of the questionnaire question answer",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence number of the response for this incident",
            "format": "int32"
          },
          "answer": {
            "type": "string",
            "description": "The answer text"
          },
          "comment": {
            "type": "string",
            "description": "Comment added to the response by recording staff"
          },
          "responseDate": {
            "type": "string",
            "description": "Response date added to the response by recording staff",
            "format": "date"
          },
          "recordingStaff": {
            "$ref": "#/components/schemas/Staff"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the response was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the response"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the response was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the response"
          }
        },
        "description": "List of Responses to this question"
      },
      "StaffParty": {
        "required": [
          "createDateTime",
          "createdBy",
          "role",
          "staff"
        ],
        "type": "object",
        "properties": {
          "staff": {
            "$ref": "#/components/schemas/Staff"
          },
          "role": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "comment": {
            "type": "string",
            "description": "General information about the incident"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the staff party was created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the person who created the staff party"
          },
          "lastModifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The date and time the staff party was last updated",
            "example": "2021-07-05T10:35:17"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the person who last updated the staff party"
          }
        },
        "description": "Staff involved in the incident"
      },
      "IncidentIdResponse": {
        "required": [
          "incidentId"
        ],
        "type": "object",
        "properties": {
          "incidentId": {
            "type": "integer",
            "description": "The incident id",
            "format": "int64"
          }
        },
        "description": "Incident id"
      },
      "PageIncidentIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "IncidentsCount": {
        "required": [
          "closedIncidents",
          "openIncidents"
        ],
        "type": "object",
        "properties": {
          "openIncidents": {
            "type": "integer",
            "description": "A count for the number of open incidents i.e. all incidents that are not closed or duplicates",
            "format": "int64",
            "example": 4
          },
          "closedIncidents": {
            "type": "integer",
            "description": "A count for the number of closed or duplicate incidents",
            "format": "int64",
            "example": 2
          }
        },
        "description": "A count for incidents at an agency"
      },
      "IncidentsReconciliationResponse": {
        "required": [
          "agencyId",
          "incidentCount"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "The agency we checked the incidents for",
            "example": "BXI"
          },
          "incidentCount": {
            "$ref": "#/components/schemas/IncidentsCount"
          }
        },
        "description": "Incidents reconciliation count response"
      },
      "IncidentAgencyId": {
        "required": [
          "agencyId"
        ],
        "type": "object",
        "properties": {
          "agencyId": {
            "type": "string",
            "description": "The agency id",
            "example": "BXI"
          }
        },
        "description": "Incident Agency Id"
      },
      "IncentiveIdResponse": {
        "required": [
          "bookingId",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "sequence": {
            "type": "integer",
            "description": "The sequence of the incentive within this booking",
            "format": "int64"
          }
        },
        "description": "Incentive id"
      },
      "PageIncentiveIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncentiveIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "IncentiveResponse": {
        "required": [
          "auditModule",
          "bookingId",
          "currentIep",
          "iepDateTime",
          "iepLevel",
          "incentiveSequence",
          "offenderNo",
          "prisonId",
          "whenCreated"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "incentiveSequence": {
            "type": "integer",
            "description": "The sequence of the incentive within this booking",
            "format": "int64"
          },
          "commentText": {
            "type": "string",
            "description": "Comment for Incentive level"
          },
          "iepDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Date and time of Incentive level creation",
            "example": "2021-07-05T10:35:17"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the Incentive level was created"
          },
          "iepLevel": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "userId": {
            "type": "string",
            "description": "User id of user creating prisoner incentive level"
          },
          "currentIep": {
            "type": "boolean",
            "description": "Is this IEP the current IEP for the booking?"
          },
          "auditModule": {
            "type": "string",
            "description": "The NOMIS module that created this IEP",
            "enum": [
              "OCUWARNG",
              "PRISON_API",
              "OIDADMIS",
              "MERGE",
              "OIDOIEPS",
              "OIDITRAN",
              "OSIOSEAR"
            ]
          },
          "whenCreated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of creation",
            "example": "2021-07-05T10:35:17"
          },
          "whenUpdated": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "date and time of last update",
            "example": "2021-07-05T10:35:17"
          }
        },
        "description": "Incentive information"
      },
      "IdentifyingMarkImageDetailsResponse": {
        "required": [
          "bodyPartCode",
          "bookingId",
          "captureDateTime",
          "createDateTime",
          "createdBy",
          "default",
          "idMarksSeq",
          "imageExists",
          "imageId",
          "imageSourceCode",
          "markTypeCode"
        ],
        "type": "object",
        "properties": {
          "imageId": {
            "type": "integer",
            "description": "The unique image identifier",
            "format": "int64",
            "example": 1234567
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking's unique identifier",
            "format": "int64",
            "example": 1234567
          },
          "idMarksSeq": {
            "type": "integer",
            "description": "The identifying mark sequence, part of the identifying mark unique key",
            "format": "int64",
            "example": 1
          },
          "captureDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the image was captured",
            "example": "2021-07-05T10:35:17"
          },
          "bodyPartCode": {
            "type": "string",
            "description": "The body part",
            "example": "ARM"
          },
          "markTypeCode": {
            "type": "string",
            "description": "The type of identifying mark",
            "example": "TAT"
          },
          "default": {
            "type": "boolean",
            "description": "Whether this is the default image for the bookingId/idMarksSeq",
            "example": true
          },
          "imageExists": {
            "type": "boolean",
            "description": "Whether image data exists yet. Image records are created prior to the actual image being added to them (which sometimes never happens).",
            "example": true
          },
          "imageSourceCode": {
            "type": "string",
            "description": "The source of the image",
            "example": "FILE"
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the image record was created. Note records are created without an image which is added later.",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the image record",
            "example": "AQ425D"
          },
          "modifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the image record was last changed",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The user who modified the image record",
            "example": "AQ425D"
          },
          "auditModuleName": {
            "type": "string",
            "description": "The name of the module that last changed the image, indicates if this was NOMIS or the synchronisation service",
            "example": "DPS_SYNCHRONISATION"
          }
        },
        "description": "Image details, not including the image itself"
      },
      "CSIPIdResponse": {
        "required": [
          "csipId"
        ],
        "type": "object",
        "properties": {
          "csipId": {
            "type": "integer",
            "description": "The csip id",
            "format": "int64"
          }
        },
        "description": "CSIP id"
      },
      "PageCSIPIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CSIPIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "CourtCaseIdResponse": {
        "required": [
          "caseId"
        ],
        "type": "object",
        "properties": {
          "caseId": {
            "type": "integer",
            "description": "Court case Id",
            "format": "int64"
          }
        },
        "description": "court case id"
      },
      "PageCourtCaseIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CourtCaseIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "BookingIdentifyingMarksResponse": {
        "required": [
          "bookingId",
          "identifyingMarks",
          "latestBooking",
          "startDateTime"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking's unique identifier",
            "format": "int64",
            "example": 1234567
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The start date of the booking",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The end date of the booking, or null if the booking is still active",
            "example": "2021-07-05T10:35:17"
          },
          "latestBooking": {
            "type": "boolean",
            "description": "Whether this is the latest booking or not. Note that latest does not imply active.",
            "example": true
          },
          "identifyingMarks": {
            "type": "array",
            "description": "A list of identifying marks for this booking",
            "items": {
              "$ref": "#/components/schemas/IdentifyingMarksResponse"
            }
          }
        },
        "description": "Identifying marks held against a booking"
      },
      "IdentifyingMarksResponse": {
        "required": [
          "bodyPartCode",
          "createDateTime",
          "createdBy",
          "imageIds",
          "markTypeCode"
        ],
        "type": "object",
        "properties": {
          "idMarksSeq": {
            "type": "integer",
            "description": "Multiple identifying marks records can be created for each booking",
            "format": "int64",
            "example": 1
          },
          "bodyPartCode": {
            "type": "string",
            "description": "The body part code",
            "example": "TORSO"
          },
          "markTypeCode": {
            "type": "string",
            "description": "The mark type code",
            "example": "TAT"
          },
          "sideCode": {
            "type": "string",
            "description": "The side code",
            "example": "F"
          },
          "partOrientationCode": {
            "type": "string",
            "description": "The part orientation code",
            "example": "LOW"
          },
          "commentText": {
            "type": "string",
            "description": "Optional comments",
            "example": "Scar above left eye"
          },
          "imageIds": {
            "type": "array",
            "description": "The IDs of images associated to the mark",
            "example": [
              12345,
              56789
            ],
            "items": {
              "type": "integer",
              "description": "The IDs of images associated to the mark",
              "format": "int64"
            }
          },
          "createDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the identifying marks were created",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the identifying marks",
            "example": "AQ425D"
          },
          "modifiedDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "The time the identifying marks were last changed",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The user who modified the identifying marks",
            "example": "AQ425D"
          },
          "auditModuleName": {
            "type": "string",
            "description": "The name of the module that last changed the identifying marks, indicates if this was NOMIS or the synchronisation service",
            "example": "DPS_SYNCHRONISATION"
          }
        },
        "description": "Identifying marks"
      },
      "AttendanceReconciliationResponse": {
        "required": [
          "bookings",
          "date",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "The prison we checked the attendance for",
            "example": "BXI"
          },
          "date": {
            "type": "string",
            "description": "Date of the attendance check",
            "format": "date",
            "example": "2021-01-01"
          },
          "bookings": {
            "type": "array",
            "description": "All active bookings and their attendance count",
            "example": "[ { bookingId: 1234567, count: 2 } ]",
            "items": {
              "$ref": "#/components/schemas/BookingCount"
            }
          }
        },
        "description": "Attendance reconciliation check response"
      },
      "BookingCount": {
        "required": [
          "bookingId",
          "count"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The offender booking id",
            "format": "int64",
            "example": 1234567
          },
          "count": {
            "type": "integer",
            "description": "The count for the offender booking",
            "format": "int64",
            "example": 2
          }
        },
        "description": "A count for an offender booking",
        "example": "[ { bookingId: 1234567, count: 2 } ]"
      },
      "AppointmentResponse": {
        "required": [
          "bookingId",
          "createdBy",
          "createdDate",
          "endDateTime",
          "internalLocation",
          "offenderNo",
          "prisonId",
          "startDateTime",
          "status",
          "subtype"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "description": "The booking id",
            "format": "int64"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison where the appointment occurs"
          },
          "internalLocation": {
            "type": "integer",
            "description": "NOMIS room id",
            "format": "int64"
          },
          "startDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Start date and time",
            "example": "2021-07-05T10:35:17"
          },
          "endDateTime": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "End date and time",
            "example": "2021-07-05T10:35:17"
          },
          "comment": {
            "type": "string",
            "description": "Comment"
          },
          "subtype": {
            "type": "string",
            "description": "Event subtype"
          },
          "status": {
            "type": "string",
            "description": "Status"
          },
          "createdDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Record created date",
            "example": "2021-07-05T10:35:17"
          },
          "createdBy": {
            "type": "string",
            "description": "Record created by"
          },
          "modifiedDate": {
            "pattern": "^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}$",
            "type": "string",
            "description": "Record modified date",
            "example": "2021-07-05T10:35:17"
          },
          "modifiedBy": {
            "type": "string",
            "description": "Record modified by"
          }
        },
        "description": "Appointment information"
      },
      "AppointmentIdResponse": {
        "required": [
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "integer",
            "description": "The event id",
            "format": "int64"
          }
        },
        "description": "Event id"
      },
      "PageAppointmentIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AppointmentIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AppointmentCountsResponse": {
        "required": [
          "count",
          "eventSubType",
          "future",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "The prison id"
          },
          "eventSubType": {
            "type": "string",
            "description": "The event sub type"
          },
          "future": {
            "type": "boolean",
            "description": "Future appointments?"
          },
          "count": {
            "type": "integer",
            "description": "The count",
            "format": "int64"
          }
        },
        "description": "Appointment counts"
      },
      "GetAllocationResponse": {
        "required": [
          "bookingId",
          "courseActivityId",
          "exclusions",
          "nomisId",
          "prisonId",
          "scheduleRules",
          "startDate",
          "suspended"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "Prison ID",
            "example": "BXI"
          },
          "courseActivityId": {
            "type": "integer",
            "description": "Nomis Course Activity ID",
            "format": "int64",
            "example": 1234
          },
          "nomisId": {
            "type": "string",
            "description": "Nomis ID",
            "example": "A1234BC"
          },
          "bookingId": {
            "type": "integer",
            "description": "ID of the active booking",
            "format": "int64",
            "example": 12345
          },
          "startDate": {
            "type": "string",
            "description": "Date allocated to the course",
            "format": "date",
            "example": "2023-03-12"
          },
          "endDate": {
            "type": "string",
            "description": "Date deallocated from the course",
            "format": "date",
            "example": "2023-05-26"
          },
          "endComment": {
            "type": "string",
            "description": "Deallocation comment",
            "example": "Removed due to schedule clash"
          },
          "endReasonCode": {
            "type": "string",
            "description": "Nomis reason code for ending (reference code domain PS_END_RSN)",
            "example": "WDRAWN"
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether the prisoner is currently suspended from the course",
            "example": false
          },
          "payBand": {
            "type": "string",
            "description": "Pay band",
            "example": "1"
          },
          "livingUnitDescription": {
            "type": "string",
            "description": "Cell description (can be null if OUT or being transferred)",
            "example": "RSI-A-1-001"
          },
          "exclusions": {
            "type": "array",
            "description": "Sessions excluded from the allocation during which period attendances will not be generated",
            "items": {
              "$ref": "#/components/schemas/AllocationExclusion"
            }
          },
          "scheduleRules": {
            "type": "array",
            "description": "Rules for creating schedules - days and times",
            "items": {
              "$ref": "#/components/schemas/ScheduleRulesResponse"
            }
          }
        },
        "description": "Allocation to an activity"
      },
      "ScheduleRulesResponse": {
        "required": [
          "endTime",
          "friday",
          "monday",
          "saturday",
          "slotCategoryCode",
          "startTime",
          "sunday",
          "thursday",
          "tuesday",
          "wednesday"
        ],
        "type": "object",
        "properties": {
          "startTime": {
            "type": "string",
            "description": "Course start time",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "Course end time",
            "format": "partial-time",
            "example": "11:00"
          },
          "monday": {
            "type": "boolean",
            "description": "Runs on Mondays",
            "example": true
          },
          "tuesday": {
            "type": "boolean",
            "description": "Runs on Tuesdays",
            "example": true
          },
          "wednesday": {
            "type": "boolean",
            "description": "Runs on Wednesdays",
            "example": true
          },
          "thursday": {
            "type": "boolean",
            "description": "Runs on Thursdays",
            "example": true
          },
          "friday": {
            "type": "boolean",
            "description": "Runs on Fridays",
            "example": true
          },
          "saturday": {
            "type": "boolean",
            "description": "Runs on Saturdays",
            "example": true
          },
          "sunday": {
            "type": "boolean",
            "description": "Runs on Sundays",
            "example": true
          },
          "slotCategoryCode": {
            "type": "string",
            "description": "Time slot",
            "example": "AM"
          }
        },
        "description": "Activity Schedule Rules"
      },
      "excludeProgramCode": {
        "type": "array",
        "description": "Exclude program codes",
        "items": {
          "type": "string",
          "description": "Exclude program codes"
        }
      },
      "FindSuspendedAllocationsResponse": {
        "required": [
          "courseActivityDescription",
          "courseActivityId",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "NOMIS offender number",
            "example": "A1234BC"
          },
          "courseActivityId": {
            "type": "integer",
            "description": "Course Activity ID",
            "format": "int64",
            "example": 1234567
          },
          "courseActivityDescription": {
            "type": "string",
            "description": "Course description",
            "example": "Kitchens AM"
          }
        },
        "description": "Find suspended prisoners from active allocations"
      },
      "AllocationReconciliationResponse": {
        "required": [
          "bookings",
          "prisonId"
        ],
        "type": "object",
        "properties": {
          "prisonId": {
            "type": "string",
            "description": "The prison we checked the allocations for",
            "example": "BXI"
          },
          "bookings": {
            "type": "array",
            "description": "All active bookings and their allocation count",
            "example": "[ { bookingId: 1234567, count: 2 } ]",
            "items": {
              "$ref": "#/components/schemas/BookingCount"
            }
          }
        },
        "description": "Allocation reconciliation check response"
      },
      "FindAllocationsMissingPayBandsResponse": {
        "required": [
          "courseActivityDescription",
          "courseActivityId",
          "incentiveLevel",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "offenderNo": {
            "type": "string",
            "description": "NOMIS offender number",
            "example": "A1234BC"
          },
          "incentiveLevel": {
            "type": "string",
            "description": "NOMIS incentive level",
            "example": "STD"
          },
          "courseActivityId": {
            "type": "integer",
            "description": "Course Activity ID",
            "format": "int64",
            "example": 1234567
          },
          "courseActivityDescription": {
            "type": "string",
            "description": "Course description",
            "example": "Kitchens AM"
          }
        },
        "description": "Find active allocations with missing pay bands"
      },
      "FindActiveAllocationIdsResponse": {
        "required": [
          "allocationId"
        ],
        "type": "object",
        "properties": {
          "allocationId": {
            "type": "integer",
            "description": "Allocation id",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Find active allocation ids response"
      },
      "PageFindActiveAllocationIdsResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FindActiveAllocationIdsResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AdjustmentIdResponse": {
        "required": [
          "adjustmentCategory",
          "adjustmentId"
        ],
        "type": "object",
        "properties": {
          "adjustmentId": {
            "type": "integer",
            "description": "The adjustment id",
            "format": "int64"
          },
          "adjustmentCategory": {
            "type": "string",
            "description": "SENTENCE or KEY_DATE"
          }
        },
        "description": "Adjustment id"
      },
      "PageAdjustmentIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdjustmentIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AdjudicationChargeIdResponse": {
        "required": [
          "adjudicationNumber",
          "chargeSequence",
          "offenderNo"
        ],
        "type": "object",
        "properties": {
          "adjudicationNumber": {
            "type": "integer",
            "description": "The adjudication number",
            "format": "int64"
          },
          "chargeSequence": {
            "type": "integer",
            "description": "The adjudication charge sequence",
            "format": "int32"
          },
          "offenderNo": {
            "type": "string",
            "description": "The prisoner number"
          }
        },
        "description": "adjudication id"
      },
      "PageAdjudicationChargeIdResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AdjudicationChargeIdResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "AdjudicationChargeResponse": {
        "required": [
          "adjudicationNumber",
          "adjudicationSequence",
          "bookingId",
          "charge",
          "gender",
          "hasMultipleCharges",
          "hearings",
          "incident",
          "investigations",
          "offenderNo",
          "partyAddedDate"
        ],
        "type": "object",
        "properties": {
          "adjudicationSequence": {
            "type": "integer",
            "description": "The adjudication/party sequence, part of the composite key with adjudicationIncidentId",
            "format": "int32"
          },
          "offenderNo": {
            "type": "string",
            "description": "The offender number, aka nomsId, prisonerId"
          },
          "bookingId": {
            "type": "integer",
            "description": "The id of the booking associated with the adjudication",
            "format": "int64"
          },
          "adjudicationNumber": {
            "type": "integer",
            "description": "The adjudication number (business key)",
            "format": "int64"
          },
          "gender": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "currentPrison": {
            "$ref": "#/components/schemas/CodeDescription"
          },
          "partyAddedDate": {
            "type": "string",
            "description": "Date Prisoner was added to the adjudication ????",
            "format": "date"
          },
          "comment": {
            "type": "string",
            "description": "Adjudication comments"
          },
          "incident": {
            "$ref": "#/components/schemas/AdjudicationIncident"
          },
          "charge": {
            "$ref": "#/components/schemas/AdjudicationCharge"
          },
          "investigations": {
            "type": "array",
            "description": "Investigator that gathers evidence. Used in NOMIS in a small percentage of cases",
            "items": {
              "$ref": "#/components/schemas/Investigation"
            }
          },
          "hearings": {
            "type": "array",
            "description": "hearings associated with this adjudication",
            "items": {
              "$ref": "#/components/schemas/Hearing"
            }
          },
          "hasMultipleCharges": {
            "type": "boolean",
            "description": "indicates if this charge was part of a larger multi-charge adjudication in NOMIS"
          }
        },
        "description": "The requested adjudication charge and associated adjudication details. Note: the adjudication may have other charges associated with it"
      },
      "GetActivityResponse": {
        "required": [
          "capacity",
          "courseActivityId",
          "description",
          "excludeBankHolidays",
          "outsideWork",
          "payPerSession",
          "payRates",
          "prisonId",
          "programCode",
          "scheduleRules",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "Activity id",
            "format": "int64",
            "example": 1
          },
          "programCode": {
            "type": "string",
            "description": "Program service code",
            "example": "INDUCTION"
          },
          "prisonId": {
            "type": "string",
            "description": "Prison code",
            "example": "RSI"
          },
          "startDate": {
            "type": "string",
            "description": "Date course started",
            "format": "date",
            "example": "2020-04-11"
          },
          "endDate": {
            "type": "string",
            "description": "Date course ended",
            "format": "date",
            "example": "2023-11-15"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "Course internal location",
            "format": "int64",
            "example": 1234
          },
          "internalLocationCode": {
            "type": "string",
            "description": "Course internal location code",
            "example": "KITCH"
          },
          "internalLocationDescription": {
            "type": "string",
            "description": "Course internal location description",
            "example": "RSI-WORK_IND-KITCH"
          },
          "capacity": {
            "type": "integer",
            "description": "Course capacity",
            "format": "int32",
            "example": 10
          },
          "description": {
            "type": "string",
            "description": "Course description",
            "example": "Kitchen work"
          },
          "minimumIncentiveLevel": {
            "type": "string",
            "description": "The minimum incentive level allowed on the course",
            "example": "BAS"
          },
          "excludeBankHolidays": {
            "type": "boolean",
            "description": "Whether the course runs on bank holidays",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Half or Full day (H or F)",
            "example": "H"
          },
          "scheduleRules": {
            "type": "array",
            "description": "Rules for creating schedules - days and times",
            "items": {
              "$ref": "#/components/schemas/ScheduleRulesResponse"
            }
          },
          "payRates": {
            "type": "array",
            "description": "Pay rates available",
            "items": {
              "$ref": "#/components/schemas/PayRatesResponse"
            }
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Outside work flag",
            "example": false
          }
        },
        "description": "Activity details"
      },
      "PayRatesResponse": {
        "required": [
          "incentiveLevelCode",
          "payBand",
          "rate"
        ],
        "type": "object",
        "properties": {
          "incentiveLevelCode": {
            "type": "string",
            "description": "Incentive level code",
            "example": "BAS"
          },
          "payBand": {
            "type": "string",
            "description": "Pay band",
            "example": "1"
          },
          "rate": {
            "type": "number",
            "description": "rate",
            "example": 3.2
          }
        },
        "description": "Activity Pay Rates"
      },
      "FindActivitiesWithoutScheduleRulesResponse": {
        "required": [
          "courseActivityDescription",
          "courseActivityId"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "Course Activity ID",
            "format": "int64",
            "example": 1234567
          },
          "courseActivityDescription": {
            "type": "string",
            "description": "Course description",
            "example": "Kitchens AM"
          }
        },
        "description": "Active activities with allocations but no schedule rules"
      },
      "FindPayRateWithUnknownIncentiveResponse": {
        "required": [
          "courseActivityDescription",
          "courseActivityId",
          "incentiveLevelCode",
          "payBandCode"
        ],
        "type": "object",
        "properties": {
          "courseActivityDescription": {
            "type": "string",
            "description": "Course description",
            "example": "Kitchens AM"
          },
          "courseActivityId": {
            "type": "integer",
            "description": "Course Activity ID",
            "format": "int64",
            "example": 1234567
          },
          "payBandCode": {
            "type": "string",
            "description": "Pay band code",
            "example": "5"
          },
          "incentiveLevelCode": {
            "type": "string",
            "description": "Incentive level",
            "example": "STD"
          }
        },
        "description": "Find activities with a pay rate with unknown incentive level"
      },
      "FindActiveActivityIdsResponse": {
        "required": [
          "courseActivityId"
        ],
        "type": "object",
        "properties": {
          "courseActivityId": {
            "type": "integer",
            "description": "Activity id",
            "format": "int64",
            "example": 1
          }
        },
        "description": "Find active activity ids response"
      },
      "PageFindActiveActivityIdsResponse": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FindActiveActivityIdsResponse"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "DeleteHearingResultResponse": {
        "required": [
          "awardsDeleted"
        ],
        "type": "object",
        "properties": {
          "awardsDeleted": {
            "type": "array",
            "description": "a list of awards that were deleted",
            "items": {
              "$ref": "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "description": "A list of Hearing result awards deleted (aka punishment) as a side effect of deleting a hearing result"
      },
      "DeleteHearingResultAwardResponses": {
        "required": [
          "awardsDeleted"
        ],
        "type": "object",
        "properties": {
          "awardsDeleted": {
            "type": "array",
            "description": "a list of awards that were deleted",
            "items": {
              "$ref": "#/components/schemas/HearingResultAwardResponse"
            }
          }
        },
        "description": "A list of Hearing result awards deleted (aka punishment)"
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
