{
  "openapi": "3.0.1",
  "info": {
    "title": "Alerts API",
    "description": "API for retrieving and managing alerts relating to a person.\n\n## Authentication\n\nThis API uses OAuth2 with JWTs. You will need to pass the JWT in the `Authorization` header using the `Bearer` scheme.\n\n## Authorisation\n\nThe API uses roles to control access to the endpoints. The roles required for each endpoint are documented in the endpoint descriptions.\n\n## Identifying the user\n\nThe majority of the endpoints in this API require the user to be identified via their username. This is to correctly populate the change history of alerts e.g. who created or updated an alert and for auditing purposes. The username is required when the service is called directly by a user or when another service is acting on behalf of a user. The following methods for supplying the username are supported to cater for these scenarios:\n\n1. **Token claim** - The username can be passed in via a `user_name` or `username` claim in the JWT.\n2. **Username header** - The username can be passed in via a `Username` header in the request.\n\nThe username is taken in priority order from the `user_name` or `username` claim in the JWT if present, followed by the `Username` header if no claim is found.\n\n### 4XX response codes related to username:\n\n- A 400 Bad Request response will be returned if the username cannot be found via any of the above methods.\n- A 400 Bad Request response will be returned if the username cannot be found in the user management service.\n- A 403 Forbidden response will also be returned if the user identified by the username does not have access to the caseload associated with the person.",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2024-06-06.1791.207969d"
  },
  "servers": [
    {
      "url": "https://alerts-api-dev.hmpps.service.justice.gov.uk",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/alerts/{alertUuid}": {
      "get": {
        "tags": [
          "alerts-controller"
        ],
        "summary": "Get an alert by its unique identifier",
        "description": "Returns the alert with the matching identifier.\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON\n* ROLE_NOMIS_ALERTS",
        "operationId": "retrieveAlert",
        "parameters": [
          {
            "name": "alertUuid",
            "in": "path",
            "description": "Alert unique identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The alert associated with this identifier was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "alerts-controller"
        ],
        "summary": "Update an alert",
        "description": "\n\nRequires one of the following roles:\n* ROLE_ALERTS_WRITER\n* ROLE_ALERTS_ADMIN\n* UPDATE_ALERT\n* ROLE_NOMIS_ALERTS",
        "operationId": "updateAlert",
        "parameters": [
          {
            "name": "alertUuid",
            "in": "path",
            "description": "Alert unique identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "Source",
            "in": "header",
            "description": "The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "DPS",
                    "NOMIS"
                  ]
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Alert updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "alerts-controller"
        ],
        "summary": "Delete an alert",
        "description": "This endpoint fully removes the alert from the system. It is used when an alert has been created in error or should otherwise be removed from this service. This endpoint will return 200 OK if the alert was not found or already deleted. This is to prevent low value warnings being logged.\n\nRequires one of the following roles:\n* ROLE_ALERTS_WRITER\n* ROLE_ALERTS_ADMIN\n* UPDATE_ALERT\n* ROLE_NOMIS_ALERTS",
        "operationId": "deleteAlert",
        "parameters": [
          {
            "name": "alertUuid",
            "in": "path",
            "description": "Alert unique identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "Source",
            "in": "header",
            "description": "The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "DPS",
                    "NOMIS"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Alert deleted"
          },
          "404": {
            "description": "Alert was not found or already deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/migrate/{prisonNumber}/alerts": {
      "post": {
        "tags": [
          "migrate-prisoner-alerts-controller"
        ],
        "summary": "Migrate all alerts for a prisoner from NOMIS",
        "description": "\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN\n* ROLE_NOMIS_ALERTS",
        "operationId": "createAlert",
        "parameters": [
          {
            "name": "prisonNumber",
            "in": "path",
            "description": "Prison number of the prisoner. Also referred to as the offender number, offender id or NOMS id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The alert data to use to create an alert in the service",
                "items": {
                  "$ref": "#/components/schemas/MigrateAlert"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Alerts migrated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/MigratedAlert"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/merge-alerts": {
      "post": {
        "tags": [
          "merge-alerts-controller"
        ],
        "summary": "Merge alerts associated with two prison numbers",
        "description": "\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN\n* ROLE_NOMIS_ALERTS",
        "operationId": "mergeAlerts",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MergeAlerts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Alerts merged successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MergedAlerts"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/bulk-alerts": {
      "post": {
        "tags": [
          "bulk-alerts-controller"
        ],
        "summary": "Create alerts for multiple people in bulk",
        "description": "\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "bulkCreateAlerts",
        "parameters": [
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "Source",
            "in": "header",
            "description": "The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "DPS",
                    "NOMIS"
                  ]
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkCreateAlerts"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alerts created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAlert"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts": {
      "post": {
        "tags": [
          "alerts-controller"
        ],
        "summary": "Create an alert",
        "description": "\n\nRequires one of the following roles:\n* ROLE_ALERTS_WRITER\n* ROLE_ALERTS_ADMIN\n* UPDATE_ALERT\n* ROLE_NOMIS_ALERTS",
        "operationId": "createAlert_1",
        "parameters": [
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          {
            "name": "Source",
            "in": "header",
            "description": "The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "DPS",
                    "NOMIS"
                  ]
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlert"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Alert created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Alert"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict, the person already has an active alert using the supplied alert code",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert-types": {
      "get": {
        "tags": [
          "alert-types-controller"
        ],
        "summary": "Get all alert types",
        "description": "Returns the full list of alert types and the alert codes within those types. By default this endpoint only returns active alert types and codes. The include inactive parameter can be used to return all alert types and codes.\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON",
        "operationId": "retrieveAlertTypes",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Include inactive alert types and codes. Defaults to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alert types and codes found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "alert-types-controller"
        ],
        "summary": "Create an alert type",
        "description": "Create a new alert type, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "createAlertType",
        "parameters": [
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlertTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Conflict, the alert type code already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Alert type created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert-codes": {
      "get": {
        "tags": [
          "alert-codes-controller"
        ],
        "summary": "Retrieve all alert codes",
        "description": "Retrieve all alert codes, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON",
        "operationId": "retrieveAlertCodes",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "Include inactive alert types and codes. Defaults to false",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert code retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertCode"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "alert-codes-controller"
        ],
        "summary": "Create an alert code",
        "description": "Create a new alert code, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "createAlertCode",
        "parameters": [
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateAlertCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the parent alert type has not been found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Alert code created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCode"
                }
              }
            }
          },
          "409": {
            "description": "Conflict, the alert code already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert-types/{alertType}": {
      "patch": {
        "tags": [
          "alert-types-controller"
        ],
        "summary": "Update alert type",
        "description": "Set the properties of an alert type to the submitted value.\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "updateAlertType",
        "parameters": [
          {
            "name": "alertType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertTypeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Not found, the alert type was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert type updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertType"
                }
              }
            }
          }
        }
      }
    },
    "/alert-types/{alertType}/reactivate": {
      "patch": {
        "tags": [
          "alert-types-controller"
        ],
        "summary": "Reactivate an alert type",
        "description": "Reactivate an alert type, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "reactivateAlertType",
        "parameters": [
          {
            "name": "alertType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not found, the alert type was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert type reactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertType"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alert-types/{alertType}/deactivate": {
      "patch": {
        "tags": [
          "alert-types-controller"
        ],
        "summary": "Deactivate an alert type",
        "description": "Deactivate an alert type, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "deactivateAlertType",
        "parameters": [
          {
            "name": "alertType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not found, the alert type was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert type deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertType"
                }
              }
            }
          }
        }
      }
    },
    "/alert-codes/{alertCode}": {
      "get": {
        "tags": [
          "alert-codes-controller"
        ],
        "summary": "Retrieve an alert code",
        "description": "Retrieve an alert code, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON",
        "operationId": "retrieveAlertCode",
        "parameters": [
          {
            "name": "alertCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the alert code was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert code retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCode"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "alert-codes-controller"
        ],
        "summary": "Update alert code",
        "description": "Set the properties of an alert code to the submitted value.\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "updateAlertCode",
        "parameters": [
          {
            "name": "alertCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateAlertCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the alert code was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert code updated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCode"
                }
              }
            }
          }
        }
      }
    },
    "/alert-codes/{alertCode}/reactivate": {
      "patch": {
        "tags": [
          "alert-codes-controller"
        ],
        "summary": "Reactivate an alert code",
        "description": "Reactivate an alert code, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "reactivateAlertCode",
        "parameters": [
          {
            "name": "alertCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the alert code was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert code reactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCode"
                }
              }
            }
          }
        }
      }
    },
    "/alert-codes/{alertCode}/deactivate": {
      "patch": {
        "tags": [
          "alert-codes-controller"
        ],
        "summary": "Deactivate an alert code",
        "description": "Deactivate an alert code, typically from the Alerts UI\n\nRequires one of the following roles:\n* ROLE_ALERTS_ADMIN",
        "operationId": "deactivateAlertCode",
        "parameters": [
          {
            "name": "alertCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Username",
            "in": "header",
            "description": "The username of the user interacting with the client service. This can be used instead of the `user_name` or `username` token claim when the client service is acting on behalf of a user. The value passed in the username header will only be used if a `user_name` or `username` token claim is not present.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alert code deactivated",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AlertCode"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not found, the alert code was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/{prisonNumber}/alerts": {
      "get": {
        "tags": [
          "prisoner-alerts-controller"
        ],
        "summary": "Gets all the alerts for a prisoner by their prison number",
        "description": "\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON",
        "operationId": "retrievePrisonerAlerts",
        "parameters": [
          {
            "name": "prisonNumber",
            "in": "path",
            "description": "Prison number of the prisoner. Also referred to as the offender number, offender id or NOMS id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234AA"
          },
          {
            "name": "isActive",
            "in": "query",
            "description": "Return only active (true) or inactive (false) alerts. If not provided or a null value is supplied, all alerts are returned",
            "required": false,
            "schema": {
              "type": "boolean"
            },
            "example": true
          },
          {
            "name": "alertType",
            "in": "query",
            "description": "Filter by alert type code or codes. Supply a comma separated list of alert type codes to filter by more than one code",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "M"
          },
          {
            "name": "alertCode",
            "in": "query",
            "description": "Filter by alert code or codes. Supply a comma separated list of alert codes to filter by more than one code",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "AS"
          },
          {
            "name": "activeFromStart",
            "in": "query",
            "description": "Filter alerts that have an active on date or after the supplied date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2023-09-27"
          },
          {
            "name": "activeFromEnd",
            "in": "query",
            "description": "Filter alerts that have an active on date up to or before the supplied date",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            },
            "example": "2021-11-15"
          },
          {
            "name": "search",
            "in": "query",
            "description": "Filter alerts that contain the search text in their description, authorised by or comments. The search is case insensitive and will match any part of the description, authorised by or comment text",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Search text"
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "default": [
                "activeFrom,DESC"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageAlert"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoners/alerts": {
      "get": {
        "tags": [
          "prisoner-alerts-controller"
        ],
        "summary": "Gets all the alerts for prisoners by their prison numbers",
        "description": "Returns all the alerts for the supplied prison numbers. The alerts for each prisoner are mapped to their prison number.\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON",
        "operationId": "retrievePrisonerAlerts_1",
        "parameters": [
          {
            "name": "prisonNumbers",
            "in": "query",
            "description": "The prison numbers of the prisoners",
            "required": true,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Alerts found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/Alert"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/alerts/{alertUuid}/audit-events": {
      "get": {
        "tags": [
          "alerts-controller"
        ],
        "summary": "Get audit events for an alert",
        "description": "This endpoint retrieves all the audit events for a given alert\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON\n* ROLE_NOMIS_ALERTS",
        "operationId": "retrieveAlertAuditEvents",
        "parameters": [
          {
            "name": "alertUuid",
            "in": "path",
            "description": "Alert unique identifier",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "Source",
            "in": "header",
            "description": "The source of the request. Will default to 'DPS' if not suppliedThis value will be assigned to the additionalInformation.source property in published domain events. A source value of 'NOMIS' will allow any username value that is less than 32 characters to be supplied. If this username is not found, its value will be used for the user display name property. A source value of 'NOMIS' will also allow no username value to be supplied and will use 'NOMIS' for both the username and display name properties.",
            "content": {
              "*/*": {
                "schema": {
                  "type": "string",
                  "enum": [
                    "DPS",
                    "NOMIS"
                  ]
                }
              }
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Alert was not found or already deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Audit events retrieved for a given alert",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AuditEvent"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/alert-types/{alertTypeCode}": {
      "get": {
        "tags": [
          "alert-types-controller"
        ],
        "summary": "Get an alert type",
        "description": "Returns the specified alert type.\n\nRequires one of the following roles:\n* ROLE_ALERTS_READER\n* ROLE_ALERTS_ADMIN\n* PRISON",
        "operationId": "retrieveAlertType",
        "parameters": [
          {
            "name": "alertTypeCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Not found, the alert type was is not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Alert type found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AlertType"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UpdateAlert": {
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The updated description of the alert. Will be ignored if null and will clear the description if empty. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.",
            "example": "Alert description"
          },
          "authorisedBy": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The updated user, staff member, approving person or organisation that authorised the alert to be added. Will be ignored if null and will clear the authorised by value if empty. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.",
            "example": "A. Nurse, An Agency"
          },
          "activeFrom": {
            "type": "string",
            "description": "The date the alert should be active from. If set to null the field will be ignoredThe active from date can be in the past or the future, but must be before the active to date",
            "format": "date",
            "example": "2021-09-27"
          },
          "activeTo": {
            "type": "string",
            "description": "The date the alert should be active until. If set to null i.e. cleared, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date",
            "format": "date",
            "example": "2022-07-15"
          },
          "appendComment": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "description": "An additional comment to append to comments thread associated with the alert. Will be ignored if null or empty. It is a free text field limited to 1000 characters.",
            "example": "Additional user comment on the alert comment thread"
          }
        },
        "description": "The alert data to use to update an alert in the service"
      },
      "Alert": {
        "required": [
          "activeFrom",
          "alertCode",
          "alertUuid",
          "comments",
          "createdAt",
          "createdBy",
          "createdByDisplayName",
          "isActive",
          "prisonNumber"
        ],
        "type": "object",
        "properties": {
          "alertUuid": {
            "type": "string",
            "description": "The unique identifier assigned to the alert",
            "format": "uuid",
            "example": "8cdadcf3-b003-4116-9956-c99bd8df6a00"
          },
          "prisonNumber": {
            "type": "string",
            "description": "The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.",
            "example": "A1234AA"
          },
          "alertCode": {
            "$ref": "#/components/schemas/AlertCodeSummary"
          },
          "description": {
            "type": "string",
            "description": "The description of the alert. It is a free text field and is used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.",
            "example": "Alert description"
          },
          "authorisedBy": {
            "type": "string",
            "description": "The user, staff member, approving person or organisation that authorised the alert to be added. It is a free text field and is used to record the name of the person who authorised the alert. It is limited to 40 characters.",
            "example": "A. Nurse, An Agency"
          },
          "activeFrom": {
            "type": "string",
            "description": "The date the alert should be active from. If not provided, the alert will be active from the current date. The active from date can be in the past or the future, but must be before the active to date",
            "format": "date",
            "example": "2021-09-27"
          },
          "activeTo": {
            "type": "string",
            "description": "The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date",
            "format": "date",
            "example": "2022-07-15"
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates that the alert is active for the person. Alerts are active if their active from date is in the past and their active to date is either null or in the future. Note that this field is read only and cannot be set directly using the API.",
            "example": true
          },
          "comments": {
            "type": "array",
            "description": "The comments thread associated with the alert. The comments are ordered by the date and time they were created, with the most recent comment first.",
            "items": {
              "$ref": "#/components/schemas/Comment"
            }
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the alert was created",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user who created the alert",
            "example": "USER1234"
          },
          "createdByDisplayName": {
            "type": "string",
            "description": "The displayable name of the user who created the alert",
            "example": "Firstname Lastname"
          },
          "lastModifiedAt": {
            "type": "string",
            "description": "The date and time the alert was last modified",
            "format": "date-time"
          },
          "lastModifiedBy": {
            "type": "string",
            "description": "The username of the user who last modified the alert",
            "example": "USER1234"
          },
          "lastModifiedByDisplayName": {
            "type": "string",
            "description": "The displayable name of the user who last modified the alert",
            "example": "Firstname Lastname"
          },
          "activeToLastSetAt": {
            "type": "string",
            "description": "The date and time the alert was last set to expire.",
            "format": "date-time"
          },
          "activeToLastSetBy": {
            "type": "string",
            "description": "The username of the user who last set the alert to expire.",
            "example": "USER1234"
          },
          "activeToLastSetByDisplayName": {
            "type": "string",
            "description": "The displayable name of the user who last set the alert to expire.",
            "example": "Firstname Lastname"
          }
        },
        "description": "An alert associated with a person"
      },
      "AlertCodeSummary": {
        "required": [
          "alertTypeCode",
          "alertTypeDescription",
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "alertTypeCode": {
            "type": "string",
            "description": "The short code for the alert type",
            "example": "A"
          },
          "alertTypeDescription": {
            "type": "string",
            "description": "The description of the alert type",
            "example": "Alert type description"
          },
          "code": {
            "type": "string",
            "description": "The short code for the alert code. Usually starts with the alert type code",
            "example": "ABC"
          },
          "description": {
            "type": "string",
            "description": "The description of the alert code",
            "example": "Alert code description"
          }
        },
        "description": "The summary information of an alert code used to categorise alerts"
      },
      "Comment": {
        "required": [
          "comment",
          "commentUuid",
          "createdAt",
          "createdBy",
          "createdByDisplayName"
        ],
        "type": "object",
        "properties": {
          "commentUuid": {
            "type": "string",
            "description": "The unique identifier assigned to the comment",
            "format": "uuid",
            "example": "476939e3-7cc1-4c5f-8f54-e7d055d1d50c"
          },
          "comment": {
            "type": "string",
            "description": "The comment text appended to the alert comment thread. It is a free text field limited to 1000 characters.",
            "example": "Additional user comment on the alert comment thread"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the comment was created and appended to the alert comment thread",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user who created the comment and appended it to the alert comment thread",
            "example": "USER1234"
          },
          "createdByDisplayName": {
            "type": "string",
            "description": "The displayable name of the user who created the comment and appended it to the alert comment thread",
            "example": "Firstname Lastname"
          }
        },
        "description": "A comment appended to an alert comment thread"
      },
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "string"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "MigrateAlert": {
        "required": [
          "activeFrom",
          "alertCode",
          "alertSeq",
          "bookingSeq",
          "createdAt",
          "createdBy",
          "createdByDisplayName",
          "offenderBookId"
        ],
        "type": "object",
        "properties": {
          "offenderBookId": {
            "type": "integer",
            "description": "The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.",
            "format": "int64",
            "example": 12345
          },
          "bookingSeq": {
            "type": "integer",
            "description": "The sequence of the NOMIS offender booking. A sequence of 1 means the alert is from the current booking. A sequence of > 1 means the alert is from a historic booking.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.",
            "format": "int32",
            "example": 1
          },
          "alertSeq": {
            "type": "integer",
            "description": "The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.",
            "format": "int32",
            "example": 2
          },
          "alertCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "The alert code for the alert. A person should only have one alert using each code active at any one time however this is not enforced during migration. The alert code must exist but can be inactive.",
            "example": "ABC"
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters when migrating an alert.",
            "example": "Alert description"
          },
          "authorisedBy": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.",
            "example": "A. Nurse, An Agency"
          },
          "activeFrom": {
            "type": "string",
            "description": "The date the alert should be active from. The active from date can be in the past or the future, but should be on or before the active to date",
            "format": "date",
            "example": "2021-09-27"
          },
          "activeTo": {
            "type": "string",
            "description": "The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but should be on or after the active from date",
            "format": "date",
            "example": "2022-07-15"
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the alert was created.",
            "format": "date-time"
          },
          "createdBy": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "The user id of the person who created the alert.",
            "example": "AB11DZ"
          },
          "createdByDisplayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The displayable name of the person who created the alert.",
            "example": "C Reated"
          },
          "updatedAt": {
            "type": "string",
            "description": "The date and time the alert was updated. Only provide if the alert has been updated since creation.",
            "format": "date-time"
          },
          "updatedBy": {
            "maxLength": 32,
            "minLength": 1,
            "type": "string",
            "description": "The user id of the person who updated the alert. Required if updated at has been supplied.",
            "example": "AB11DZ"
          },
          "updatedByDisplayName": {
            "maxLength": 255,
            "minLength": 1,
            "type": "string",
            "description": "The displayable name of the person who updated the alert. Required if updated at has been supplied.",
            "example": "Up Dated"
          }
        },
        "description": "The request body for migrating an alert from NOMIS to DPS"
      },
      "MigratedAlert": {
        "required": [
          "alertSeq",
          "alertUuid",
          "bookingSeq",
          "offenderBookId"
        ],
        "type": "object",
        "properties": {
          "offenderBookId": {
            "type": "integer",
            "description": "The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.",
            "format": "int64",
            "example": 12345
          },
          "bookingSeq": {
            "type": "integer",
            "description": "The sequence of the NOMIS offender booking. A sequence of 1 means the alert is from the current booking. A sequence of > 1 means the alert is from a historic booking.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.",
            "format": "int32",
            "example": 1
          },
          "alertSeq": {
            "type": "integer",
            "description": "The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the migrated alert response for mapping between NOMIS and DPS.",
            "format": "int32",
            "example": 2
          },
          "alertUuid": {
            "type": "string",
            "description": "The unique identifier assigned to the alert",
            "format": "uuid",
            "example": "8cdadcf3-b003-4116-9956-c99bd8df6a00"
          }
        }
      },
      "MergeAlert": {
        "required": [
          "activeFrom",
          "alertCode",
          "alertSeq",
          "offenderBookId"
        ],
        "type": "object",
        "properties": {
          "offenderBookId": {
            "type": "integer",
            "description": "The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the merged alert response for mapping between NOMIS and DPS.",
            "format": "int64",
            "example": 12345
          },
          "alertSeq": {
            "type": "integer",
            "description": "The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the merged alert response for mapping between NOMIS and DPS.",
            "format": "int32",
            "example": 2
          },
          "alertCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "The alert code for the alert. A person should only have one alert using each code active at any one time however this is not enforced during merging. The alert code must exist but can be inactive.",
            "example": "ABC"
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters when merging an alert.",
            "example": "Alert description"
          },
          "authorisedBy": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.",
            "example": "A. Nurse, An Agency"
          },
          "activeFrom": {
            "type": "string",
            "description": "The date the alert should be active from. The active from date can be in the past or the future, but should be on or before the active to date",
            "format": "date",
            "example": "2021-09-27"
          },
          "activeTo": {
            "type": "string",
            "description": "The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but should be on or after the active from date",
            "format": "date",
            "example": "2022-07-15"
          }
        },
        "description": "The request body for merging a new alert for a person"
      },
      "MergeAlerts": {
        "required": [
          "newAlerts",
          "prisonNumberMergeFrom",
          "prisonNumberMergeTo"
        ],
        "type": "object",
        "properties": {
          "prisonNumberMergeFrom": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "The prison number of the person the alerts are being merged from. Also referred to as the offender number, offender id or NOMS id. Existing alerts associated with this prison number will be deleted",
            "example": "B2222BB"
          },
          "prisonNumberMergeTo": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "The prison number of the person the alerts are being merged to. Also referred to as the offender number, offender id or NOMS id.",
            "example": "A1111AA"
          },
          "newAlerts": {
            "type": "array",
            "description": "The alerts to add to the prison number being merged into",
            "items": {
              "$ref": "#/components/schemas/MergeAlert"
            }
          }
        },
        "description": "The merge request data containing the from and to prison numbers and new alerts to create in the service"
      },
      "MergedAlert": {
        "required": [
          "alertSeq",
          "alertUuid",
          "offenderBookId"
        ],
        "type": "object",
        "properties": {
          "offenderBookId": {
            "type": "integer",
            "description": "The internal NOMIS id for the offender booking. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the merged alert response for mapping between NOMIS and DPS.",
            "format": "int64",
            "example": 12345
          },
          "alertSeq": {
            "type": "integer",
            "description": "The NOMIS alert sequence. An alert in NOMIS is uniquely identified by the offender booking id and alert sequence.This is returned as part of the merged alert response for mapping between NOMIS and DPS.",
            "format": "int32",
            "example": 2
          },
          "alertUuid": {
            "type": "string",
            "description": "The unique identifier assigned to the alert",
            "format": "uuid",
            "example": "8cdadcf3-b003-4116-9956-c99bd8df6a00"
          }
        },
        "description": "The identifiers associated with the merged alerts added to the prison number to merge to"
      },
      "MergedAlerts": {
        "required": [
          "alertsCreated",
          "alertsDeleted"
        ],
        "type": "object",
        "properties": {
          "alertsCreated": {
            "type": "array",
            "description": "The identifiers associated with the merged alerts added to the prison number to merge to",
            "items": {
              "$ref": "#/components/schemas/MergedAlert"
            }
          },
          "alertsDeleted": {
            "type": "array",
            "description": "The unique identifiers of the deleted alerts associated with the prison number to merge from",
            "items": {
              "type": "string",
              "description": "The unique identifiers of the deleted alerts associated with the prison number to merge from",
              "format": "uuid"
            }
          }
        }
      },
      "BulkCreateAlerts": {
        "required": [
          "alertCode",
          "cleanupMode",
          "mode",
          "prisonNumbers"
        ],
        "type": "object",
        "properties": {
          "prisonNumbers": {
            "type": "array",
            "description": "The prison numbers of the people to create alerts for. Also referred to as the offender number, offender id or NOMS id.",
            "example": "A1234AA",
            "items": {
              "type": "string",
              "description": "The prison numbers of the people to create alerts for. Also referred to as the offender number, offender id or NOMS id.",
              "example": "A1234AA"
            }
          },
          "alertCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "The alert code for the alert. A person can only have one alert using each code active at any one time. The alert code must exist and be active.",
            "example": "ABC"
          },
          "mode": {
            "type": "string",
            "description": "The strategy to use when creating alerts in bulk",
            "example": "ADD_MISSING",
            "enum": [
              "ADD_MISSING",
              "EXPIRE_AND_REPLACE"
            ]
          },
          "cleanupMode": {
            "type": "string",
            "description": "The strategy to use when cleaning up existing alerts for people supplied list of prison numbers",
            "example": "KEEP_ALL",
            "enum": [
              "KEEP_ALL",
              "EXPIRE_FOR_PRISON_NUMBERS_NOT_SPECIFIED"
            ]
          }
        },
        "description": "The request body for bulk creating alerts for multiple people"
      },
      "BulkAlert": {
        "required": [
          "alertsCreated",
          "alertsExpired",
          "alertsUpdated",
          "bulkAlertUuid",
          "completedAt",
          "existingActiveAlerts",
          "messages",
          "request",
          "requestedAt",
          "requestedBy",
          "requestedByDisplayName",
          "successful"
        ],
        "type": "object",
        "properties": {
          "bulkAlertUuid": {
            "type": "string",
            "description": "The unique identifier assigned to the alerts created in bulk",
            "format": "uuid",
            "example": "b49053d8-3f29-4b1e-a9c5-15bde8c6e6cf"
          },
          "request": {
            "$ref": "#/components/schemas/BulkCreateAlerts"
          },
          "requestedAt": {
            "type": "string",
            "description": "The date and time the alerts were created in bulk",
            "format": "date-time"
          },
          "requestedBy": {
            "type": "string",
            "description": "The username of the user who created the alerts in bulk",
            "example": "USER1234"
          },
          "requestedByDisplayName": {
            "type": "string",
            "description": "The displayable name of the user who created the alerts in bulk",
            "example": "Firstname Lastname"
          },
          "completedAt": {
            "type": "string",
            "description": "The date and time the request to create alerts in bulk was completed",
            "format": "date-time"
          },
          "successful": {
            "type": "boolean",
            "description": "Whether the request to create alerts in bulk was successful or not",
            "example": true
          },
          "messages": {
            "type": "array",
            "description": "Collection of displayable messages relating to the result of the bulk alert creation request as a whole",
            "items": {
              "type": "string",
              "description": "Collection of displayable messages relating to the result of the bulk alert creation request as a whole"
            }
          },
          "existingActiveAlerts": {
            "type": "array",
            "description": "Collection of existing active alerts that were not modified and resulted in no additional alert being created for the associated prison number.",
            "items": {
              "$ref": "#/components/schemas/BulkAlertAlert"
            }
          },
          "alertsCreated": {
            "type": "array",
            "description": "Collection of new alerts that were created in bulk",
            "items": {
              "$ref": "#/components/schemas/BulkAlertAlert"
            }
          },
          "alertsUpdated": {
            "type": "array",
            "description": "Collection of existing alerts that were updated as a result of the bulk alert creation request. The message for updated alerts will contain what was updated for example changing the active from date.",
            "items": {
              "$ref": "#/components/schemas/BulkAlertAlert"
            }
          },
          "alertsExpired": {
            "type": "array",
            "description": "Collection of existing alerts that were made inactive as a result of the bulk alert creation request",
            "items": {
              "$ref": "#/components/schemas/BulkAlertAlert"
            }
          }
        },
        "description": "A set of alerts created in bulk. Contains detailed information of the result of a bulk alert creation request."
      },
      "BulkAlertAlert": {
        "required": [
          "alertUuid",
          "message",
          "prisonNumber"
        ],
        "type": "object",
        "properties": {
          "alertUuid": {
            "type": "string",
            "description": "The unique identifier assigned to the alert",
            "format": "uuid",
            "example": "8cdadcf3-b003-4116-9956-c99bd8df6a00"
          },
          "prisonNumber": {
            "type": "string",
            "description": "The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.",
            "example": "A1234AA"
          },
          "message": {
            "type": "string",
            "description": "Optional displayable message relating to the result of the bulk alert creation request specific to this alert. For example the description of the updates that were applied to this alert."
          }
        },
        "description": "Summary information of an alert affected by a bulk alert creation request"
      },
      "CreateAlert": {
        "required": [
          "alertCode",
          "prisonNumber"
        ],
        "type": "object",
        "properties": {
          "prisonNumber": {
            "maxLength": 10,
            "minLength": 1,
            "type": "string",
            "description": "The prison number of the person the alert is for. Also referred to as the offender number, offender id or NOMS id.",
            "example": "A1234AA"
          },
          "alertCode": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "The alert code for the alert. A person can only have one alert using each code active at any one time. The alert code must exist and be active.",
            "example": "ABC"
          },
          "description": {
            "maxLength": 4000,
            "minLength": 0,
            "type": "string",
            "description": "The description of the alert. This is a free text field and can be used to provide additional information about the alert e.g. the reasons for adding it.It is limited to 4000 characters.",
            "example": "Alert description"
          },
          "authorisedBy": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The user, staff member, approving person or organisation that authorised the alert to be added. This is a free text field and can be used to record the name of the person who authorised the alert. It is limited to 40 characters.",
            "example": "A. Nurse, An Agency"
          },
          "activeFrom": {
            "type": "string",
            "description": "The date the alert should be active from. If not provided, the alert will be active from the current date. The active from date can be in the past or the future, but must be before the active to date",
            "format": "date",
            "example": "2021-09-27"
          },
          "activeTo": {
            "type": "string",
            "description": "The date the alert should be active until. If not provided, the alert will be active indefinitely. The active to date can be in the past or the future, but must be after the active from date",
            "format": "date",
            "example": "2022-07-15"
          }
        },
        "description": "The alert data to use to create an alert in the service"
      },
      "CreateAlertTypeRequest": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "The short code for the alert type",
            "example": "A"
          },
          "description": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The description of the alert type",
            "example": "Alert type description"
          }
        },
        "description": "The request body for creating a new alert type"
      },
      "AlertCode": {
        "required": [
          "alertTypeCode",
          "code",
          "createdAt",
          "createdBy",
          "description",
          "isActive",
          "listSequence"
        ],
        "type": "object",
        "properties": {
          "alertTypeCode": {
            "type": "string",
            "description": "The short code for the alert type",
            "example": "A"
          },
          "code": {
            "type": "string",
            "description": "The short code for the alert code. Usually starts with the alert type code",
            "example": "ABC"
          },
          "description": {
            "type": "string",
            "description": "The description of the alert code",
            "example": "Alert code description"
          },
          "listSequence": {
            "type": "integer",
            "description": "The sequence number of the alert code within the alert type. Used for ordering alert codes correctly in lists and drop downs. A value of 0 indicates this is the default alert code for the alert type",
            "format": "int32",
            "example": 3
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates that the alert code is active and can be used. Inactive alert codes are not returned by default in the API",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the alert code was created",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user who created the alert code",
            "example": "USER1234"
          },
          "modifiedAt": {
            "type": "string",
            "description": "The date and time the alert code was last modified",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The username of the user who last modified the alert code",
            "example": "USER1234"
          },
          "deactivatedAt": {
            "type": "string",
            "description": "The date and time the alert code was deactivated",
            "format": "date-time"
          },
          "deactivatedBy": {
            "type": "string",
            "description": "The username of the user who deactivated the alert code",
            "example": "USER1234"
          }
        },
        "description": "An alert code used to categorise alerts"
      },
      "AlertType": {
        "required": [
          "alertCodes",
          "code",
          "createdAt",
          "createdBy",
          "description",
          "isActive",
          "listSequence"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The short code for the alert type",
            "example": "A"
          },
          "description": {
            "type": "string",
            "description": "The description of the alert type",
            "example": "Alert type description"
          },
          "listSequence": {
            "type": "integer",
            "description": "The sequence number of the alert type. Used for ordering alert types correctly in lists and drop downs. A value of 0 indicates this is the default alert type",
            "format": "int32",
            "example": 3
          },
          "isActive": {
            "type": "boolean",
            "description": "Indicates that the alert type is active and can be used. Inactive alert types are not returned by default in the API",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "description": "The date and time the alert type was created",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The username of the user who created the alert type",
            "example": "USER1234"
          },
          "modifiedAt": {
            "type": "string",
            "description": "The date and time the alert type was last modified",
            "format": "date-time"
          },
          "modifiedBy": {
            "type": "string",
            "description": "The username of the user who last modified the alert type",
            "example": "USER1234"
          },
          "deactivatedAt": {
            "type": "string",
            "description": "The date and time the alert type was deactivated",
            "format": "date-time"
          },
          "deactivatedBy": {
            "type": "string",
            "description": "The username of the user who deactivated the alert type",
            "example": "USER1234"
          },
          "alertCodes": {
            "type": "array",
            "description": "The alert codes associated with this alert type",
            "items": {
              "$ref": "#/components/schemas/AlertCode"
            }
          }
        },
        "description": "An alert type used to categorise alerts"
      },
      "CreateAlertCodeRequest": {
        "required": [
          "code",
          "description",
          "parent"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "The short code for the alert code",
            "example": "A"
          },
          "description": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The description of the alert code",
            "example": "Alert code description"
          },
          "parent": {
            "maxLength": 12,
            "minLength": 1,
            "type": "string",
            "description": "The short code for the parent type",
            "example": "A"
          }
        },
        "description": "The request body for creating a new alert code"
      },
      "UpdateAlertTypeRequest": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The new property value(s) to be updated onto an alert type",
            "example": "New description value for an alert type"
          }
        },
        "description": "The request body for updating the properties of an alert type"
      },
      "UpdateAlertCodeRequest": {
        "required": [
          "description"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 40,
            "minLength": 1,
            "type": "string",
            "description": "The new property value(s) to be updated onto an alert code",
            "example": "New description value for an alert code"
          }
        },
        "description": "The request body for updating the properties of an alert code"
      },
      "PageAlert": {
        "type": "object",
        "properties": {
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "type": "boolean"
          },
          "last": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Alert"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string"
          },
          "nullHandling": {
            "type": "string"
          },
          "ascending": {
            "type": "boolean"
          },
          "property": {
            "type": "string"
          },
          "ignoreCase": {
            "type": "boolean"
          }
        }
      },
      "AuditEvent": {
        "required": [
          "action",
          "actionedAt",
          "actionedBy",
          "actionedByDisplayName",
          "description"
        ],
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "description": "The audit event type",
            "example": "CREATED",
            "enum": [
              "CREATED",
              "UPDATED",
              "DELETED"
            ]
          },
          "description": {
            "type": "string",
            "description": "A description of what has changed",
            "example": "The active to date was updated from 2012-02-03 to 2012-04-05"
          },
          "actionedAt": {
            "type": "string",
            "description": "When the event happened",
            "format": "date-time"
          },
          "actionedBy": {
            "type": "string",
            "description": "The user id of the person who was audited",
            "example": "AB1234AA"
          },
          "actionedByDisplayName": {
            "type": "string",
            "description": "The friendly name of the person who was audited",
            "example": "An Auditer"
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
