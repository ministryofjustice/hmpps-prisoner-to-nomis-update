{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "Locations Inside Prison API",
    "description" : "API for viewing and managing locations inside a prison",
    "contact" : {
      "name" : "HMPPS Digital Studio",
      "email" : "feedback@digital.justice.gov.uk"
    },
    "version" : "2025-09-08.85.f56a761"
  },
  "servers" : [ {
    "url" : "/",
    "description" : "Current url"
  } ],
  "security" : [ {
    "bearer-jwt" : [ "read", "write" ]
  }, {
    "hmpps-auth" : [ ]
  } ],
  "tags" : [ {
    "name" : "Prison Configuration",
    "description" : "Allows views and updates on prison configuration"
  }, {
    "name" : "Prison roll count",
    "description" : "Returns prison roll count information"
  }, {
    "name" : "Sync",
    "description" : "Sync NOMIS to Locations Inside Prison Service API endpoints."
  }, {
    "name" : "Cell Certificates",
    "description" : "Cell Certificate Management"
  }, {
    "name" : "Transactions",
    "description" : "Returns a transaction history applied to a list of locations"
  }, {
    "name" : "Locations",
    "description" : "Returns location information"
  }, {
    "name" : "Constants",
    "description" : "Returns location reference data."
  }, {
    "name" : "Location Occupancy",
    "description" : "Returns location information with occupancy information"
  }, {
    "name" : "Signed Operation Capacity",
    "description" : "Returns Signed Operation Capacity data per prison."
  }, {
    "name" : "Bulk Location Operations",
    "description" : "Performs bulk operations"
  }, {
    "name" : "Certification",
    "description" : "Functionality to manage certification of residential locations"
  }, {
    "name" : "Prisoner locations",
    "description" : "Returns the locations prisoners"
  } ],
  "paths" : {
    "/queue-admin/retry-dlq/{dlqName}" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "retryDlq",
        "parameters" : [ {
          "name" : "dlqName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetryDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-all-dlqs" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "retryAllDlqs",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RetryDlqResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/purge-queue/{queueName}" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "purgeQueue",
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurgeQueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/prison-configuration/{prisonId}/resi-service/{status}" : {
      "put" : {
        "tags" : [ "Prison Configuration" ],
        "summary" : "Update the status of the service service for a prison",
        "description" : "Requires role LOCATION_CONFIG_ADMIN",
        "operationId" : "updateResiLocationServiceActiveStatus",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "status",
          "in" : "path",
          "description" : "Status of the resi service to change",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Status of the resi service to change",
            "enum" : [ "ACTIVE", "INACTIVE" ],
            "example" : "ACTIVE"
          },
          "example" : "ACTIVE"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CONFIG_ADMIN role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonConfigurationDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison-configuration/{prisonId}/certification-approval-required/{approvalProcessStatus}" : {
      "put" : {
        "tags" : [ "Prison Configuration" ],
        "summary" : "Update the certification approval process for a prison",
        "description" : "Requires role LOCATION_CONFIG_ADMIN",
        "operationId" : "updateCertificationApprovalProcessForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "approvalProcessStatus",
          "in" : "path",
          "description" : "Activate/Deactivate the certification approval process for this prison",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Activate/Deactivate the certification approval process for this prison",
            "enum" : [ "ACTIVE", "INACTIVE" ],
            "example" : "ACTIVE"
          },
          "example" : "ACTIVE"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CONFIG_ADMIN role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonConfigurationDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/used-for-type" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Update Used For types at cell location below the specified location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "updateUsedForType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "description" : "Used For Types",
                  "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
                },
                "uniqueItems" : true
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns details of the updated locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/update/temporary-deactivation" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Update the details of the deactivation of a location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "updateDeactivateDetails",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemporaryDeactivationLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns deactivated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/update-non-res-cell" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Updates a non res cell type",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "updateNonResidentialCellType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateNonResCellTypeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/specialist-cell-types" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Update specialist cell types for a cell",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "updateSpecialistCellTypes",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string",
                  "description" : "Specialist Cell Types",
                  "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
                },
                "uniqueItems" : true
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns details of the updated cell",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/reactivate" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Re-activate a location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "reactivateLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        }, {
          "name" : "cascade-reactivation",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns reactivation location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        },
        "deprecated" : true
      }
    },
    "/locations/{id}/deactivate/temporary" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Temporarily deactivate a location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "temporarilyDeactivateLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/TemporaryDeactivationLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns deactivated locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/deactivate/permanent" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Permanently deactivate a location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "permanentlyDeactivateLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PermanentDeactivationLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns archived location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/convert-to-cell" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Makes a non-res cell location a cell",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "convertToCellLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConvertToCellRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location Accommodation Type Other Non Residential cannot be accepted",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/convert-cell-to-non-res-cell" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Converts a cell to a non res cell location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "convertCellToNonResidentialLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ConvertCellToNonResidentialLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/change-local-name" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Update local name details of a location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "updateLocalName",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateLocationLocalNameRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns cell location changes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/capacity" : {
      "put" : {
        "tags" : [ "Locations" ],
        "summary" : "Set the capacity of a cell",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "changeCapacity",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/Capacity"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns cell location changes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/bulk/reactivate" : {
      "put" : {
        "tags" : [ "Bulk Location Operations" ],
        "summary" : "Re-activates a series of locations",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "bulkReactivateLocations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ReactivateLocationsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/bulk/deactivate/temporary" : {
      "put" : {
        "tags" : [ "Bulk Location Operations" ],
        "summary" : "Bulk temporarily deactivate a location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "bulkDeactivateLocations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/DeactivateLocationsRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns deactivated locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/bulk/deactivate/permanent" : {
      "put" : {
        "tags" : [ "Bulk Location Operations" ],
        "summary" : "Bulk permanently deactivate a location, the location must already be temporarily deactivated",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "bulkPermanentlyDeactivateLocations",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/BulkPermanentDeactivationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns perm deactivated locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/bulk/capacity-update" : {
      "put" : {
        "tags" : [ "Bulk Location Operations" ],
        "summary" : "Update capacity in map of cell locations",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "bulkUpdateCapacity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCapacityRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns list of changes made to capacity locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/CapacityChanges"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certification/prison/signed-op-cap-change" : {
      "put" : {
        "tags" : [ "Certification" ],
        "summary" : "Requests approval for a signed operation capacity change",
        "description" : "Requires role LOCATION_CERTIFICATION",
        "operationId" : "requestSignedOpCapApproval",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SignedOpCapApprovalRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CERTIFICATION role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the approval request status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificationApprovalRequestDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certification/location/withdraw" : {
      "put" : {
        "tags" : [ "Certification" ],
        "summary" : "Withdraw a certification request for a location",
        "description" : "Requires role LOCATION_CERTIFICATION",
        "operationId" : "withdrawCertificationRequest",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/WithdrawCertificationRequestDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CERTIFICATION role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the approval request status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificationApprovalRequestDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Approval request not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certification/location/request-approval" : {
      "put" : {
        "tags" : [ "Certification" ],
        "summary" : "Requests approval for a location currently either LOCKED or in DRAFT status, locations below this will be included in the request",
        "description" : "Requires role LOCATION_CERTIFICATION",
        "operationId" : "requestApproval",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/LocationApprovalRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CERTIFICATION role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the approval request status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificationApprovalRequestDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certification/location/reject" : {
      "put" : {
        "tags" : [ "Certification" ],
        "summary" : "Rejects a certification request for a location",
        "description" : "Requires role LOCATION_CERTIFICATION",
        "operationId" : "rejectCertificationRequest",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/RejectCertificationRequestDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CERTIFICATION role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the approval request status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificationApprovalRequestDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Approval request not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certification/location/approve" : {
      "put" : {
        "tags" : [ "Certification" ],
        "summary" : "Approves a certification request for a location",
        "description" : "Requires role LOCATION_CERTIFICATION",
        "operationId" : "approveCertificationRequest",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ApproveCertificationRequestDto"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CERTIFICATION role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the approval request status",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificationApprovalRequestDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Approval request not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/upsert" : {
      "post" : {
        "tags" : [ "Sync" ],
        "summary" : "Upsert of a location",
        "description" : "Requires role SYNC_LOCATIONS and write scope",
        "operationId" : "upsertLocation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/NomisSyncLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the SYNC_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegacyLocation"
                }
              }
            }
          },
          "201" : {
            "description" : "Created location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegacyLocation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/signed-op-cap/" : {
      "post" : {
        "tags" : [ "Signed Operation Capacity" ],
        "summary" : "Create or update the signed operation capacity",
        "description" : "Requires role ROLE_MAINTAIN_LOCATIONS",
        "operationId" : "updateSignedOperationCapacity",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/SignedOperationCapacityValidRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the ROLE_MAINTAIN_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns created Signed Operation Capacity",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignedOperationCapacityDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "PrisonID not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Signed Operation Capacity already has this value",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/residential" : {
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Creates a residential location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "createResidentialLocation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateResidentialLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns created location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/non-residential" : {
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Creates a non-residential location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "createNonResidentialLocation",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateNonResidentialLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns created location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/keys" : {
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Gets locations by their keys",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationsByKeys",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "items" : {
                  "type" : "string"
                }
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/create-wing" : {
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Creates a residential wing and its structure without other locations",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "createWing",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateWingAndStructureRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns created locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/create-cells" : {
      "post" : {
        "tags" : [ "Locations" ],
        "summary" : "Creates a list of cells below a parent location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "createCells",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CellInitialisationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns created locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/residential/{id}" : {
      "patch" : {
        "tags" : [ "Locations" ],
        "summary" : "Partial update of a location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "patchResidentialLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchResidentialLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/residential/key/{key}" : {
      "patch" : {
        "tags" : [ "Locations" ],
        "summary" : "Partial update of a location by key",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "patchResidentialLocationByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Location key",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Location key",
            "example" : "MDI-A-1-001"
          },
          "example" : "MDI-A-1-001"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchResidentialLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/non-residential/{id}" : {
      "patch" : {
        "tags" : [ "Locations" ],
        "summary" : "Partial update of a non-residential location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "patchNonResidentialLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchNonResidentialLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/non-residential/key/{key}" : {
      "patch" : {
        "tags" : [ "Locations" ],
        "summary" : "Partial update of a non-residential location",
        "description" : "Requires role MAINTAIN_LOCATIONS and write scope",
        "operationId" : "patchNonResidentialLocationByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The location key",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The location key",
            "example" : "MDI-VISIT"
          },
          "example" : "MDI-VISIT"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/PatchNonResidentialLocationRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409" : {
            "description" : "Location already exists",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/transactions/{txId}" : {
      "get" : {
        "tags" : [ "Transactions" ],
        "summary" : "Returns transaction history information for this transaction ID",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getTransaction",
        "parameters" : [ {
          "name" : "txId",
          "in" : "path",
          "description" : "The transaction Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The transaction Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns transaction information",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/TransactionHistory"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Tx not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/id/{id}" : {
      "get" : {
        "tags" : [ "Sync" ],
        "summary" : "Returns location information for this ID in Legacy NOMIS format",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        }, {
          "name" : "includeHistory",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location in NOMIS format",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/LegacyLocation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/signed-op-cap/{prisonId}" : {
      "get" : {
        "tags" : [ "Signed Operation Capacity" ],
        "summary" : "Get Signed Operation Capacity",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getSignedOperationCapacity",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the ROLE_VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns Signed Operation Capacity data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SignedOperationCapacityDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Signed operation capacity not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}/{reportVariantId}" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiDataset",
        "parameters" : [ {
          "name" : "selectedPage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 1,
            "minimum" : 1
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 10,
            "minimum" : 1
          }
        }, {
          "name" : "sortColumn",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortedAsc",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "additionalProperties" : { }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/{fieldId}" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiDynamicFilter",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 10,
            "minimum" : 1
          }
        }, {
          "name" : "sortedAsc",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "prefix",
          "in" : "query",
          "description" : "The value to match the start of the fieldId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Lond"
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The name of the schema field which will be used as a dynamic filter.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1
          },
          "example" : "name"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/count" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiCount",
        "parameters" : [ {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/queue-admin/get-dlq-messages/{dlqName}" : {
      "get" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "getDlqMessages",
        "parameters" : [ {
          "name" : "dlqName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "maxMessages",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-locations/prison/{prisonId}" : {
      "get" : {
        "tags" : [ "Prisoner locations" ],
        "summary" : "Returns a map of prisoners in cells within this prison",
        "description" : "Requires role VIEW_PRISONER_LOCATIONS",
        "operationId" : "getPrisonersInLocationByPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison ID",
            "examples" : [ "MDI", "LEI", "PVI" ],
            "minLength" : 1,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_PRISONER_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerLocation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-locations/key/{key}" : {
      "get" : {
        "tags" : [ "Prisoner locations" ],
        "summary" : "Returns a map of prisoners in cells within this location",
        "description" : "Requires role VIEW_PRISONER_LOCATIONS",
        "operationId" : "getPrisonersInLocationByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Full location key, can be a wing, landing or cell, prisonId must be included",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Full location key, can be a wing, landing or cell, prisonId must be included",
            "examples" : [ "MDI-1", "LEI-A-1-001", "PVI-1-2" ]
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_PRISONER_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerLocation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-locations/id/{id}" : {
      "get" : {
        "tags" : [ "Prisoner locations" ],
        "summary" : "Returns a map of prisoners in cells within this location",
        "description" : "Requires role VIEW_PRISONER_LOCATIONS",
        "operationId" : "getPrisonersInLocationById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Location Id, can be a wing, landing or cell",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id, can be a wing, landing or cell",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_PRISONER_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerLocation"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/roll-count/{prisonId}" : {
      "get" : {
        "tags" : [ "Prison roll count" ],
        "summary" : "Roll count for a specific prison",
        "description" : "Requires role ESTABLISHMENT_ROLL",
        "operationId" : "getPrisonRollCount",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "include-cells",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the ESTABLISHMENT_ROLL role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns roll count for a specific prison",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonRollCount"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/roll-count/{prisonId}/cells-only/{locationId}" : {
      "get" : {
        "tags" : [ "Prison roll count" ],
        "summary" : "Provides the list of cells with roll counts under a specified location provided",
        "description" : "Requires role ESTABLISHMENT_ROLL or agency in caseload.",
        "operationId" : "getCellLevelRollCount",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "locationId",
          "in" : "path",
          "description" : "Location ID of parent of the cells",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location ID of parent of the cells",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the ESTABLISHMENT_ROLL role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns cell list of roll-counts for a specific prison and sub-location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonCellRollCount"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison-configuration/{prisonId}" : {
      "get" : {
        "tags" : [ "Prison Configuration" ],
        "summary" : "Get prison configuration",
        "description" : "Requires role LOCATION_CONFIG_ADMIN",
        "operationId" : "getPrisonConfiguration",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CONFIG_ADMIN role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns configuration",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PrisonConfigurationDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get locations, filtered and paged",
        "description" : "Requires VIEW_LOCATIONS role, max of 200 records per request",
        "operationId" : "getLocations",
        "parameters" : [ {
          "name" : "page",
          "in" : "query",
          "description" : "Zero-based page index (0..N)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The size of the page to be returned",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 20,
            "minimum" : 1
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "default" : [ "id,ASC" ],
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "When input parameters are not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "A page of locations are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PageLegacyLocation"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{prisonId}/local-name/{localName}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Finds a location matching the local name for a given prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "findLocationByLocalName",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison ID where the location is situated",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "localName",
          "in" : "path",
          "description" : "Alternative description to display for location",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A",
            "maxLength" : 30,
            "minLength" : 0
          },
          "example" : "Wing A"
        }, {
          "name" : "parentLocationId",
          "in" : "query",
          "description" : "The level above in this hierarchy to look below, empty will check prison level",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The level above in this hierarchy to look below, empty will check prison level",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns cell location matching",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Returns location information for this ID",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocation_1",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        }, {
          "name" : "includeChildren",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "includeHistory",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "formatLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Locations" ],
        "summary" : "Delete a draft location",
        "description" : "Requires role ROLE_MAINTAIN_LOCATIONS and write scope, only locations marked as DRAFT can be deleted",
        "operationId" : "deleteLocations",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Location UUID to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location UUID to remove",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the ROLE_MAINTAIN_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "Deleted location"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Location not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/{id}/attributes" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get attributes for a cell",
        "description" : "Requires VIEW_LOCATIONS role, attributes will either be specialist cell types or legacy attributes",
        "operationId" : "getCellAttributes",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The location Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The location Id",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "When input parameters are not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "A cell's attributes are returned",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CellAttributes"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/residential-summary/{prisonId}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return locations for this prison below the parent location, is not provided - top level (w.g. WINGS)",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationForPrisonBelowParent",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "parentLocationId",
          "in" : "query",
          "description" : "Parent location ID",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Parent location ID",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        }, {
          "name" : "parentPathHierarchy",
          "in" : "query",
          "description" : "Parent location path hierarchy, can be a Wing code, or landing code",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Parent location path hierarchy, can be a Wing code, or landing code",
            "example" : "A-1"
          },
          "example" : "A-1"
        }, {
          "name" : "latestHistory",
          "in" : "query",
          "description" : "Include latest history",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Include latest history"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns locations for this level",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ResidentialSummary"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return locations for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/residential-hierarchy" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return the entire hierarchy for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getPrisonHierarchy",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "maxLevel",
          "in" : "query",
          "description" : "The maximum level to return, default is all if not defined.  Most APIs will just need the first level so maxLevel=1",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum level to return, default is all if not defined.  Most APIs will just need the first level so maxLevel=1",
            "example" : 1
          },
          "example" : 1
        }, {
          "name" : "includeVirtualLocations",
          "in" : "query",
          "description" : "Include virtual locations such as CSWAP and RECP",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Include virtual locations such as CSWAP and RECP",
            "example" : false
          },
          "example" : false
        }, {
          "name" : "includeInactive",
          "in" : "query",
          "description" : "Include temporarily inactive locations",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Include temporarily inactive locations",
            "example" : false
          },
          "example" : false
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns hierarchy for this prison",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonHierarchyDto"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/residential-hierarchy/{parentPathHierarchy}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return the hierarchy below the parent path specified for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getPrisonHierarchyBelowLocation",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "parentPathHierarchy",
          "in" : "path",
          "description" : "Parent path",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Parent path",
            "example" : "A-1",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "example" : "A-1"
        }, {
          "name" : "maxLevel",
          "in" : "query",
          "description" : "The maximum level to return, default is all if not defined.  Most APIs will just need the first level so maxLevel=1",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The maximum level to return, default is all if not defined.  Most APIs will just need the first level so maxLevel=1",
            "example" : 1
          },
          "example" : 1
        }, {
          "name" : "includeVirtualLocations",
          "in" : "query",
          "description" : "Include virtual locations such as CSWAP and RECP",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Include virtual locations such as CSWAP and RECP",
            "example" : false
          },
          "example" : false
        }, {
          "name" : "includeInactive",
          "in" : "query",
          "description" : "Include temporarily inactive locations",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Include temporarily inactive locations",
            "example" : false
          },
          "example" : false
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns hierarchy for this prison below the path specified for this prison",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonHierarchyDto"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/residential-first-level" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return the entire hierarchy for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getTopLevelResidentialLocations",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "includeVirtualLocations",
          "in" : "query",
          "description" : "Include virtual locations such as CSWAP and RECP",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Include virtual locations such as CSWAP and RECP",
            "example" : false
          },
          "example" : false
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns hierarchy for this prison",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonHierarchyDto"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/non-residential" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get a list of active non-residential locations for a prison (excluding RTU)",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getNonResidentialLocationsForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "sortByLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        }, {
          "name" : "formatLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns a list of non-residential locations for a prison",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Prison not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/non-residential-usage-type" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return non-residential locations by usage for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationsByPrisonWithUsageTypes",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "sortByLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "formatLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filterParents",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns non-residential locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/non-residential-usage-type/{usageType}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return non-residential locations by usage for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationsByPrisonAndNonResidentialUsageType",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "usageType",
          "in" : "path",
          "description" : "Usage type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Usage type",
            "enum" : [ "ADJUDICATION_HEARING", "APPOINTMENT", "MOVEMENT", "OCCURRENCE", "PROGRAMMES_ACTIVITIES", "PROPERTY", "VISIT", "OTHER" ],
            "example" : "APPOINTMENTS"
          },
          "example" : "APPOINTMENTS"
        }, {
          "name" : "sortByLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "formatLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "filterParents",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : true
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns non-residential locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/location-type/{locationType}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return locations by their type for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationsByPrisonAndLocationType",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "locationType",
          "in" : "path",
          "description" : "Location type",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "example" : "CELL"
        }, {
          "name" : "sortByLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "formatLocalName",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/inactive-cells" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return residential inactive cells for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getInactiveLocationsForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "parentLocationId",
          "in" : "query",
          "description" : "location ID below which all inactive cells will be returned",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "location ID below which all inactive cells will be returned",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns inactive locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/groups" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return location groups for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationGroupsForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location groups",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/LocationGroupDto"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/group/{group}/location-prefix" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Get location prefix by group.",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationPrefixFromGroup",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "group",
          "in" : "path",
          "description" : "The group name",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The group name",
            "example" : "Houseblock 1"
          },
          "example" : "Houseblock 1"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Unrecoverable error occurred whilst processing request.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonId}/archived" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Return residential archived locations for this prison",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getArchivedLocationForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns archived locations",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/key/{key}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "Returns location information for this key",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationByKey",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "Location Key",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Location Key",
            "example" : "MDI-A-1-001"
          },
          "example" : "MDI-A-1-001"
        }, {
          "name" : "includeChildren",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        }, {
          "name" : "includeHistory",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Location"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/groups/{prisonId}/{name}" : {
      "get" : {
        "tags" : [ "Locations" ],
        "summary" : "List of cell locations by group at prison location.",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getLocationGroup",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "name",
          "in" : "path",
          "description" : "Group name",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns cell locations by group",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/location-occupancy/cells-with-capacity/{prisonId}" : {
      "get" : {
        "tags" : [ "Location Occupancy" ],
        "summary" : "List of cells by group at prison which have capacity.",
        "description" : "Requires role VIEW_LOCATIONS",
        "operationId" : "getCellsWithCapacity",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "locationId",
          "in" : "query",
          "description" : "Location Id in the prison below which to find cells",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id in the prison below which to find cells",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
          },
          "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0"
        }, {
          "name" : "groupName",
          "in" : "query",
          "description" : "Group name for a sub location to find cells",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Group name for a sub location to find cells",
            "example" : "Wing A"
          },
          "example" : "Wing A"
        }, {
          "name" : "specialistCellType",
          "in" : "query",
          "description" : "Only return cells of a specified specialist type",
          "required" : false,
          "schema" : {
            "type" : "string",
            "description" : "Specialist Cell Types",
            "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ],
            "example" : "CSU"
          },
          "example" : "CSU"
        }, {
          "name" : "includePrisonerInformation",
          "in" : "query",
          "description" : "Include prisoner details in this cell",
          "required" : false,
          "schema" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Include prisoner details in this cell"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_LOCATIONS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns cells with capacity available",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CellWithSpecialistCellTypes"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/definitions" : {
      "get" : {
        "tags" : [ "Report Definition API" ],
        "description" : "Gets summaries of all report definitions",
        "operationId" : "definitions",
        "parameters" : [ {
          "name" : "renderMethod",
          "in" : "query",
          "description" : "Set this parameter to filter the list to only include reports for the given rendering method.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "HTML", "PDF", "SVG" ]
          },
          "example" : "HTML"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportDefinitionSummary"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/definitions/{reportId}/{variantId}" : {
      "get" : {
        "tags" : [ "Report Definition API" ],
        "description" : "Gets report definition containing a single variant.",
        "operationId" : "definition",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The ID of the report definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "external-movements"
        }, {
          "name" : "variantId",
          "in" : "path",
          "description" : "The ID of the variant definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "list"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleVariantReportDefinition"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/definitions/{dataProductDefinitionId}/dashboards/{dashboardId}" : {
      "get" : {
        "tags" : [ "Metric Definition API" ],
        "description" : "Gets the metric dashboard definition.",
        "operationId" : "dashboardDefinition",
        "parameters" : [ {
          "name" : "dataProductDefinitionId",
          "in" : "path",
          "description" : "The ID of the Data Product Definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "external-movements"
        }, {
          "name" : "dashboardId",
          "in" : "path",
          "description" : "The ID of the dashboard.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "dashboardId"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDefinition"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/constants/used-for-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get all used for types",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "getUsedForTypeConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns used for type reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/used-for-type/{prisonId}" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get used for type data for not female or secure estate",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "getUsedForTypeConstantsForSpecifiedPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns used for type reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/specialist-cell-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get specialist cell type data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "getSpecialistCellTypeConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns specialist cell reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/residential-housing-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get residential housing reference data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "locationAttributeConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/residential-attribute-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get residential attribute reference data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "residentialAttributeTypeConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns residential attribute reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/CompoundConstant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/non-residential-usage-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get non-residential usage reference data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "nonResidentialUsageTypeConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/location-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get location reference data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "locationConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/deactivated-reason" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get deactivated reason reference data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "deactivatedReasonsConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns location reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/converted-cell-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get converted cell type data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "getConvertedCellType",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns converted cell reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/constants/accommodation-type" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "Get accommodation type data",
        "description" : "Requires the READ_LOCATION_REFERENCE_DATA role.",
        "operationId" : "getAccommodationTypeConstants",
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the READ_LOCATION_REFERENCE_DATA role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns accommodation reference data",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object",
                  "additionalProperties" : {
                    "type" : "array",
                    "items" : {
                      "$ref" : "#/components/schemas/Constant"
                    }
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certification/request-approvals/{id}" : {
      "get" : {
        "tags" : [ "Certification" ],
        "summary" : "Get a certification approval request by ID",
        "description" : "Requires role LOCATION_CERTIFICATION",
        "operationId" : "getApprovalRequest",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Approval request ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          },
          "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CERTIFICATION role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns the certification approval request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CertificationApprovalRequestDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Approval request not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/certification/request-approvals/prison/{prisonId}" : {
      "get" : {
        "tags" : [ "Certification" ],
        "summary" : "Get all certification approval requests with optional filtering",
        "description" : "Requires role LOCATION_CERTIFICATION",
        "operationId" : "getApprovalRequests",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        }, {
          "name" : "status",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "PENDING",
            "enum" : [ "PENDING", "APPROVED", "REJECTED", "WITHDRAWN" ]
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the LOCATION_CERTIFICATION role.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns a list of certification approval requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CertificationApprovalRequestDto"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/cell-certificates/{id}" : {
      "get" : {
        "tags" : [ "Cell Certificates" ],
        "summary" : "Get a cell certificate by ID",
        "description" : "Returns a cell certificate by ID",
        "operationId" : "getCellCertificate",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Cell certificate ID",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden to access this endpoint",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Cell certificate found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CellCertificateDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "Cell certificate not found",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/cell-certificates/prison/{prisonId}" : {
      "get" : {
        "tags" : [ "Cell Certificates" ],
        "summary" : "Get all cell certificates for a prison",
        "description" : "Returns all cell certificates for a prison",
        "operationId" : "getCellCertificatesForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden to access this endpoint",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Cell certificates found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CellCertificateDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/cell-certificates/prison/{prisonId}/current" : {
      "get" : {
        "tags" : [ "Cell Certificates" ],
        "summary" : "Get the current cell certificate for a prison",
        "description" : "Returns the current cell certificate for a prison",
        "operationId" : "getCurrentCellCertificateForPrison",
        "parameters" : [ {
          "name" : "prisonId",
          "in" : "path",
          "description" : "Prison Id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "Prison Id",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "example" : "MDI"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden to access this endpoint",
            "content" : {
              "application/json" : { }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Current cell certificate found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/CellCertificateDto"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : { }
            }
          },
          "404" : {
            "description" : "No current cell certificate found",
            "content" : {
              "application/json" : { }
            }
          }
        }
      }
    },
    "/sync/delete/{id}" : {
      "delete" : {
        "tags" : [ "Sync" ],
        "summary" : "Delete a location",
        "description" : "Requires role SYNC_LOCATIONS and write scope",
        "operationId" : "deleteLocation",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "Location UUID to remove",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location UUID to remove",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the SYNC_LOCATIONS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid Request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204" : {
            "description" : "Deleted location"
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorResponse" : {
        "type" : "object",
        "description" : "Error response",
        "properties" : {
          "status" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "HTTP status code",
            "example" : 500
          },
          "userMessage" : {
            "type" : "string",
            "description" : "User message for the error",
            "example" : "No location found for ID `de91dfa7-821f-4552-a427-bf2f32eafeb0`"
          },
          "developerMessage" : {
            "type" : "string",
            "description" : "More detailed error message",
            "example" : "[Details, sometimes a stack trace]"
          },
          "errorCode" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "When present, uniquely identifies the type of error making it easier for clients to discriminate without relying on error description or HTTP status code; see `uk.gov.justice.digital.hmpps.locationsinsideprison.resources.ErrorCode` enumeration in hmpps-locations-inside-prison-api",
            "example" : 101
          },
          "moreInfo" : {
            "type" : "string",
            "description" : "More information about the error",
            "example" : "[Rarely used, error-specific]"
          }
        },
        "required" : [ "developerMessage", "status", "userMessage" ]
      },
      "RetryDlqResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "messagesFoundCount" ]
      },
      "PurgeQueueResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "messagesFoundCount" ]
      },
      "PrisonConfigurationDto" : {
        "type" : "object",
        "description" : "Prison configuration",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI"
          },
          "resiLocationServiceActive" : {
            "type" : "string",
            "description" : "Indicates that the residential service is active",
            "enum" : [ "ACTIVE", "INACTIVE" ],
            "example" : "ACTIVE"
          },
          "includeSegregationInRollCount" : {
            "type" : "string",
            "description" : "Indicates that roll count should include segregation in its calculations for net vacancies",
            "enum" : [ "ACTIVE", "INACTIVE" ],
            "example" : "INACTIVE"
          },
          "certificationApprovalRequired" : {
            "type" : "string",
            "description" : "Indicates that this prison must go through the certification process to create or change cells",
            "enum" : [ "ACTIVE", "INACTIVE" ],
            "example" : "INACTIVE"
          }
        },
        "required" : [ "certificationApprovalRequired", "includeSegregationInRollCount", "prisonId", "resiLocationServiceActive" ]
      },
      "Capacity" : {
        "type" : "object",
        "description" : "Capacity",
        "properties" : {
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Max capacity of the location",
            "example" : 2,
            "maximum" : 99
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Working capacity of the location",
            "example" : 2,
            "maximum" : 99
          }
        },
        "required" : [ "maxCapacity", "workingCapacity" ]
      },
      "Certification" : {
        "type" : "object",
        "description" : "Certification",
        "properties" : {
          "certified" : {
            "type" : "boolean",
            "description" : "Indicates that this location is certified for use as a residential location",
            "example" : true
          },
          "capacityOfCertifiedCell" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Old name for CNA (Certified normal accommodation)",
            "example" : 1
          },
          "certifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "CNA (Certified normal accommodation)",
            "example" : 1
          }
        },
        "required" : [ "capacityOfCertifiedCell", "certified" ]
      },
      "ChangeHistory" : {
        "type" : "object",
        "description" : "Change History",
        "properties" : {
          "transactionId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Transaction ID",
            "example" : "019464e9-05da-77b3-810b-887e199d8190"
          },
          "transactionType" : {
            "type" : "string",
            "description" : "Transaction type",
            "enum" : [ "LOCATION_CREATE", "LOCATION_UPDATE", "SYNC", "DELETE", "CAPACITY_CHANGE", "CELL_TYPE_CHANGES", "DEACTIVATION", "PERMANENT_DEACTIVATION", "REACTIVATION", "CELL_CONVERTION_TO_ROOM", "ROOM_CONVERTION_TO_CELL", "SIGNED_OP_CAP", "RESI_SERVICE_ACTIVATION", "APPROVAL_PROCESS_ACTIVATION", "PENDING_CELL_CHANGE", "REQUEST_CERTIFICATION_APPROVAL", "APPROVE_CERTIFICATION_REQUEST", "REJECT_CERTIFICATION_REQUEST", "WITHDRAW_CERTIFICATION_REQUEST" ],
            "example" : "CAPACITY_CHANGE"
          },
          "attribute" : {
            "type" : "string",
            "description" : "Location Attribute",
            "example" : "Location Type"
          },
          "oldValues" : {
            "type" : "array",
            "description" : "Previous values of this attribute",
            "example" : [ "Dry cell", "Safe cell" ],
            "items" : {
              "type" : "string"
            }
          },
          "newValues" : {
            "type" : "array",
            "description" : "New values of this attribute",
            "example" : [ "Dry cell", "Safe cell" ],
            "items" : {
              "type" : "string"
            }
          },
          "amendedBy" : {
            "type" : "string",
            "description" : "User who made the change",
            "example" : "user"
          },
          "amendedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date the change was made",
            "example" : "2023-01-23T10:15:30"
          }
        },
        "required" : [ "amendedBy", "amendedDate", "attribute" ]
      },
      "Location" : {
        "type" : "object",
        "description" : "Location Information",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI"
          },
          "code" : {
            "type" : "string",
            "description" : "Location Code",
            "example" : "001"
          },
          "cellMark" : {
            "type" : "string",
            "description" : "Cell mark",
            "example" : "A1"
          },
          "pathHierarchy" : {
            "type" : "string",
            "description" : "Full path of the location within the prison",
            "example" : "A-1-001"
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location, (Not Cells)",
            "example" : "Wing A"
          },
          "wingStructure" : {
            "type" : "array",
            "description" : "The structure of the wing",
            "items" : {
              "type" : "string",
              "enum" : [ "CELL", "LANDING", "SPUR", "WING" ]
            }
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments that can be made about this location",
            "example" : "Not to be used"
          },
          "permanentlyInactive" : {
            "type" : "boolean",
            "description" : "Indicates if the location is permanently inactive",
            "example" : false
          },
          "permanentlyInactiveReason" : {
            "type" : "string",
            "description" : "Reason for permanently deactivating",
            "example" : "Demolished"
          },
          "capacity" : {
            "$ref" : "#/components/schemas/Capacity",
            "description" : "Capacity details of the location"
          },
          "pendingChanges" : {
            "$ref" : "#/components/schemas/PendingChangeDto",
            "description" : "Pending changes of draft or pending approval location"
          },
          "oldWorkingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "When a cell is inactive, show the active working capacity value"
          },
          "certification" : {
            "$ref" : "#/components/schemas/Certification",
            "description" : "Indicates that this location is certified for use as a residential location"
          },
          "usage" : {
            "type" : "array",
            "description" : "Location Usage",
            "items" : {
              "$ref" : "#/components/schemas/NonResidentialUsageDto"
            }
          },
          "internalMovementAllowed" : {
            "type" : "boolean",
            "description" : "Indicates that this location can used for internal movements"
          },
          "accommodationTypes" : {
            "type" : "array",
            "description" : "Accommodation Types",
            "items" : {
              "type" : "string",
              "description" : "Accommodation Types",
              "enum" : [ "CARE_AND_SEPARATION", "HEALTHCARE_INPATIENTS", "NORMAL_ACCOMMODATION", "OTHER_NON_RESIDENTIAL" ]
            }
          },
          "specialistCellTypes" : {
            "type" : "array",
            "description" : "Specialist Cell Types",
            "items" : {
              "type" : "string",
              "description" : "Specialist Cell Types",
              "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
            }
          },
          "usedFor" : {
            "type" : "array",
            "description" : "Usage For",
            "items" : {
              "type" : "string",
              "description" : "Used For Types",
              "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
            }
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the location",
            "enum" : [ "ACTIVE", "INACTIVE", "ARCHIVED", "DRAFT", "NON_RESIDENTIAL", "LOCKED_ACTIVE", "LOCKED_INACTIVE", "LOCKED_DRAFT", "LOCKED_NON_RESIDENTIAL" ],
            "example" : "ACTIVE"
          },
          "locked" : {
            "type" : "boolean",
            "description" : "Location is locked",
            "example" : false
          },
          "convertedCellType" : {
            "type" : "string",
            "description" : "Convert Cell Type",
            "enum" : [ "HOLDING_ROOM", "INTERVIEW_ROOM", "KITCHEN_SERVERY", "LISTENERS_ROOM", "OFFICE", "SHOWER", "STAFF_ROOM", "STORE", "TREATMENT_ROOM", "UTILITY_ROOM", "OTHER" ]
          },
          "otherConvertedCellType" : {
            "type" : "string",
            "description" : "Convert Cell Type (Other)"
          },
          "active" : {
            "type" : "boolean",
            "deprecated" : true,
            "description" : "Indicates the location is enabled",
            "example" : true
          },
          "inCellSanitation" : {
            "type" : "boolean",
            "description" : "In-cell sanitation",
            "example" : true
          },
          "deactivatedByParent" : {
            "type" : "boolean",
            "description" : "Indicates the location in inactive as a parent is deactivated",
            "example" : false
          },
          "deactivatedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date the location was deactivated",
            "example" : "2023-01-23T12:23:00"
          },
          "deactivatedReason" : {
            "type" : "string",
            "description" : "Reason for deactivation",
            "enum" : [ "DAMAGED", "DAMP", "MAINTENANCE", "MOTHBALLED", "PEST", "REFURBISHMENT", "SECURITY_SEALED", "STAFF_SHORTAGE", "OTHER" ],
            "example" : "DAMAGED"
          },
          "deactivationReasonDescription" : {
            "type" : "string",
            "description" : "For OTHER deactivation reason, a free text comment is provided",
            "example" : "Window damage"
          },
          "deactivatedBy" : {
            "type" : "string",
            "description" : "Staff username who deactivated the location"
          },
          "proposedReactivationDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Estimated reactivation date for location reactivation",
            "example" : "2026-01-24"
          },
          "planetFmReference" : {
            "type" : "string",
            "description" : "Planet FM reference number",
            "example" : "2323/45M"
          },
          "topLevelId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Top Level Location Id",
            "example" : "57718979-573c-433a-9e51-2d83f887c11c"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Current Level within hierarchy, starts at 1, e.g Wing = 1",
            "examples" : [ "1", "2", "3" ]
          },
          "leafLevel" : {
            "type" : "boolean",
            "description" : "Indicates this is the lowest level, often a cell",
            "example" : false
          },
          "parentId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Parent Location Id",
            "example" : "57718979-573c-433a-9e51-2d83f887c11c"
          },
          "parentLocation" : {
            "$ref" : "#/components/schemas/Location",
            "description" : "Parent Location"
          },
          "inactiveCells" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of inactive cells below this location"
          },
          "numberOfCellLocations" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of non-structural locations are below this level, e.g. cells and rooms"
          },
          "childLocations" : {
            "type" : "array",
            "description" : "Child Locations",
            "items" : {
              "type" : "object",
              "description" : "Location Information",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "Location Id",
                  "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
                },
                "prisonId" : {
                  "type" : "string",
                  "description" : "Prison ID",
                  "example" : "MDI"
                },
                "code" : {
                  "type" : "string",
                  "description" : "Location Code",
                  "example" : "001"
                },
                "cellMark" : {
                  "type" : "string",
                  "description" : "Cell mark",
                  "example" : "A1"
                },
                "pathHierarchy" : {
                  "type" : "string",
                  "description" : "Full path of the location within the prison",
                  "example" : "A-1-001"
                },
                "locationType" : {
                  "type" : "string",
                  "description" : "Location Type",
                  "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
                  "example" : "CELL"
                },
                "localName" : {
                  "type" : "string",
                  "description" : "Alternative description to display for location, (Not Cells)",
                  "example" : "Wing A"
                },
                "wingStructure" : {
                  "type" : "array",
                  "description" : "The structure of the wing",
                  "items" : {
                    "type" : "string",
                    "enum" : [ "CELL", "LANDING", "SPUR", "WING" ]
                  }
                },
                "comments" : {
                  "type" : "string",
                  "description" : "Additional comments that can be made about this location",
                  "example" : "Not to be used"
                },
                "permanentlyInactive" : {
                  "type" : "boolean",
                  "description" : "Indicates if the location is permanently inactive",
                  "example" : false
                },
                "permanentlyInactiveReason" : {
                  "type" : "string",
                  "description" : "Reason for permanently deactivating",
                  "example" : "Demolished"
                },
                "capacity" : {
                  "$ref" : "#/components/schemas/Capacity",
                  "description" : "Capacity details of the location"
                },
                "pendingChanges" : {
                  "$ref" : "#/components/schemas/PendingChangeDto",
                  "description" : "Pending changes of draft or pending approval location"
                },
                "oldWorkingCapacity" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "When a cell is inactive, show the active working capacity value"
                },
                "certification" : {
                  "$ref" : "#/components/schemas/Certification",
                  "description" : "Indicates that this location is certified for use as a residential location"
                },
                "usage" : {
                  "type" : "array",
                  "description" : "Location Usage",
                  "items" : {
                    "$ref" : "#/components/schemas/NonResidentialUsageDto"
                  }
                },
                "internalMovementAllowed" : {
                  "type" : "boolean",
                  "description" : "Indicates that this location can used for internal movements"
                },
                "accommodationTypes" : {
                  "type" : "array",
                  "description" : "Accommodation Types",
                  "items" : {
                    "type" : "string",
                    "description" : "Accommodation Types",
                    "enum" : [ "CARE_AND_SEPARATION", "HEALTHCARE_INPATIENTS", "NORMAL_ACCOMMODATION", "OTHER_NON_RESIDENTIAL" ]
                  }
                },
                "specialistCellTypes" : {
                  "type" : "array",
                  "description" : "Specialist Cell Types",
                  "items" : {
                    "type" : "string",
                    "description" : "Specialist Cell Types",
                    "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
                  }
                },
                "usedFor" : {
                  "type" : "array",
                  "description" : "Usage For",
                  "items" : {
                    "type" : "string",
                    "description" : "Used For Types",
                    "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
                  }
                },
                "status" : {
                  "type" : "string",
                  "description" : "Status of the location",
                  "enum" : [ "ACTIVE", "INACTIVE", "ARCHIVED", "DRAFT", "NON_RESIDENTIAL", "LOCKED_ACTIVE", "LOCKED_INACTIVE", "LOCKED_DRAFT", "LOCKED_NON_RESIDENTIAL" ],
                  "example" : "ACTIVE"
                },
                "locked" : {
                  "type" : "boolean",
                  "description" : "Location is locked",
                  "example" : false
                },
                "convertedCellType" : {
                  "type" : "string",
                  "description" : "Convert Cell Type",
                  "enum" : [ "HOLDING_ROOM", "INTERVIEW_ROOM", "KITCHEN_SERVERY", "LISTENERS_ROOM", "OFFICE", "SHOWER", "STAFF_ROOM", "STORE", "TREATMENT_ROOM", "UTILITY_ROOM", "OTHER" ]
                },
                "otherConvertedCellType" : {
                  "type" : "string",
                  "description" : "Convert Cell Type (Other)"
                },
                "active" : {
                  "type" : "boolean",
                  "deprecated" : true,
                  "description" : "Indicates the location is enabled",
                  "example" : true
                },
                "inCellSanitation" : {
                  "type" : "boolean",
                  "description" : "In-cell sanitation",
                  "example" : true
                },
                "deactivatedByParent" : {
                  "type" : "boolean",
                  "description" : "Indicates the location in inactive as a parent is deactivated",
                  "example" : false
                },
                "deactivatedDate" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Date the location was deactivated",
                  "example" : "2023-01-23T12:23:00"
                },
                "deactivatedReason" : {
                  "type" : "string",
                  "description" : "Reason for deactivation",
                  "enum" : [ "DAMAGED", "DAMP", "MAINTENANCE", "MOTHBALLED", "PEST", "REFURBISHMENT", "SECURITY_SEALED", "STAFF_SHORTAGE", "OTHER" ],
                  "example" : "DAMAGED"
                },
                "deactivationReasonDescription" : {
                  "type" : "string",
                  "description" : "For OTHER deactivation reason, a free text comment is provided",
                  "example" : "Window damage"
                },
                "deactivatedBy" : {
                  "type" : "string",
                  "description" : "Staff username who deactivated the location"
                },
                "proposedReactivationDate" : {
                  "type" : "string",
                  "format" : "date",
                  "description" : "Estimated reactivation date for location reactivation",
                  "example" : "2026-01-24"
                },
                "planetFmReference" : {
                  "type" : "string",
                  "description" : "Planet FM reference number",
                  "example" : "2323/45M"
                },
                "topLevelId" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "Top Level Location Id",
                  "example" : "57718979-573c-433a-9e51-2d83f887c11c"
                },
                "level" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Current Level within hierarchy, starts at 1, e.g Wing = 1",
                  "examples" : [ "1", "2", "3" ]
                },
                "leafLevel" : {
                  "type" : "boolean",
                  "description" : "Indicates this is the lowest level, often a cell",
                  "example" : false
                },
                "parentId" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "Parent Location Id",
                  "example" : "57718979-573c-433a-9e51-2d83f887c11c"
                },
                "parentLocation" : {
                  "description" : "Parent Location",
                  "required" : [ "active", "code", "deactivatedByParent", "id", "leafLevel", "level", "locationType", "locked", "pathHierarchy", "permanentlyInactive", "prisonId", "status", "topLevelId" ]
                },
                "inactiveCells" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Number of inactive cells below this location"
                },
                "numberOfCellLocations" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of non-structural locations are below this level, e.g. cells and rooms"
                },
                "childLocations" : {
                  "type" : "array",
                  "description" : "Child Locations",
                  "items" : {
                    "description" : "Location Information",
                    "required" : [ "active", "code", "deactivatedByParent", "id", "leafLevel", "level", "locationType", "locked", "pathHierarchy", "permanentlyInactive", "prisonId", "status", "topLevelId" ]
                  }
                },
                "changeHistory" : {
                  "type" : "array",
                  "description" : "History of changes",
                  "items" : {
                    "$ref" : "#/components/schemas/ChangeHistory"
                  }
                },
                "transactionHistory" : {
                  "type" : "array",
                  "description" : "A list of transactions applied to this location",
                  "items" : {
                    "$ref" : "#/components/schemas/TransactionHistory"
                  }
                },
                "lastModifiedBy" : {
                  "type" : "string",
                  "description" : "Staff username who last changed the location"
                },
                "lastModifiedDate" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Date and time of the last change"
                },
                "key" : {
                  "type" : "string",
                  "description" : "Business Key for a location",
                  "example" : "MDI-A-1-001"
                },
                "isResidential" : {
                  "type" : "boolean",
                  "description" : "Indicates if the location is a residential location",
                  "example" : true
                }
              },
              "required" : [ "active", "code", "deactivatedByParent", "id", "isResidential", "key", "lastModifiedBy", "lastModifiedDate", "leafLevel", "level", "locationType", "locked", "pathHierarchy", "permanentlyInactive", "prisonId", "status", "topLevelId" ]
            }
          },
          "changeHistory" : {
            "type" : "array",
            "description" : "History of changes",
            "items" : {
              "$ref" : "#/components/schemas/ChangeHistory"
            }
          },
          "transactionHistory" : {
            "type" : "array",
            "description" : "A list of transactions applied to this location",
            "items" : {
              "$ref" : "#/components/schemas/TransactionHistory"
            }
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "Staff username who last changed the location"
          },
          "lastModifiedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of the last change"
          },
          "key" : {
            "type" : "string",
            "description" : "Business Key for a location",
            "example" : "MDI-A-1-001"
          },
          "isResidential" : {
            "type" : "boolean",
            "description" : "Indicates if the location is a residential location",
            "example" : true
          }
        },
        "required" : [ "active", "code", "deactivatedByParent", "id", "isResidential", "key", "lastModifiedBy", "lastModifiedDate", "leafLevel", "level", "locationType", "locked", "pathHierarchy", "permanentlyInactive", "prisonId", "status", "topLevelId" ]
      },
      "NonResidentialUsageDto" : {
        "type" : "object",
        "description" : "Non Residential Usage",
        "properties" : {
          "usageType" : {
            "type" : "string",
            "enum" : [ "ADJUDICATION_HEARING", "APPOINTMENT", "MOVEMENT", "OCCURRENCE", "PROGRAMMES_ACTIVITIES", "PROPERTY", "VISIT", "OTHER" ]
          },
          "capacity" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "sequence", "usageType" ]
      },
      "PendingChangeDto" : {
        "type" : "object",
        "description" : "Pending changes",
        "properties" : {
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Pending max capacity",
            "example" : 2
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Pending working capacity",
            "example" : 1
          },
          "certifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Pending CNA",
            "example" : 2
          }
        }
      },
      "TransactionDetail" : {
        "type" : "object",
        "description" : "Transaction Detail",
        "properties" : {
          "locationId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id",
            "example" : "019483f5-fee7-7ed0-924c-3ee4b2b51904"
          },
          "locationKey" : {
            "type" : "string",
            "description" : "Location key",
            "example" : "BXI-1-1-001"
          },
          "attributeCode" : {
            "type" : "string",
            "description" : "Attribute Code",
            "enum" : [ "STATUS", "CERTIFICATION", "ACCOMMODATION_TYPE", "USED_FOR", "SPECIALIST_CELL_TYPE", "CONVERTED_CELL_TYPE", "WORKING_CAPACITY", "MAX_CAPACITY", "DEACTIVATION_REASON", "PROPOSED_REACTIVATION_DATE", "PLANET_FM_NUMBER", "LOCAL_NAME", "USAGE", "NON_RESIDENTIAL_CAPACITY", "INTERNAL_MOVEMENT_ALLOWED", "CODE", "LOCATION_TYPE", "RESIDENTIAL_HOUSING_TYPE", "CERTIFIED_CAPACITY", "PARENT_LOCATION", "ORDER_WITHIN_PARENT_LOCATION", "COMMENTS", "ATTRIBUTES", "PERMANENT_DEACTIVATION", "LOCATION_CREATED", "ACTIVE", "DEACTIVATED_DATE", "DEACTIVATED_REASON", "DEACTIVATED_REASON_DESCRIPTION" ]
          },
          "attribute" : {
            "type" : "string",
            "description" : "Location Attribute",
            "example" : "Location Type"
          },
          "amendedBy" : {
            "type" : "string",
            "description" : "User who made the change",
            "example" : "user"
          },
          "amendedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date the change was made",
            "example" : "2023-01-23T10:15:30"
          },
          "oldValues" : {
            "type" : "array",
            "description" : "Previous values of this attribute",
            "example" : [ "Dry cell", "Safe cell" ],
            "items" : {
              "type" : "string"
            }
          },
          "newValues" : {
            "type" : "array",
            "description" : "New values of this attribute",
            "example" : [ "Dry cell", "Safe cell" ],
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "amendedBy", "amendedDate", "attribute", "attributeCode", "locationId", "locationKey" ]
      },
      "TransactionHistory" : {
        "type" : "object",
        "description" : "Transaction history for location",
        "properties" : {
          "transactionId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Unique transaction ID",
            "example" : "019464e9-05da-77b3-810b-887e199d8190"
          },
          "transactionType" : {
            "type" : "string",
            "description" : "Type of transaction",
            "enum" : [ "LOCATION_CREATE", "LOCATION_UPDATE", "SYNC", "DELETE", "CAPACITY_CHANGE", "CELL_TYPE_CHANGES", "DEACTIVATION", "PERMANENT_DEACTIVATION", "REACTIVATION", "CELL_CONVERTION_TO_ROOM", "ROOM_CONVERTION_TO_CELL", "SIGNED_OP_CAP", "RESI_SERVICE_ACTIVATION", "APPROVAL_PROCESS_ACTIVATION", "PENDING_CELL_CHANGE", "REQUEST_CERTIFICATION_APPROVAL", "APPROVE_CERTIFICATION_REQUEST", "REJECT_CERTIFICATION_REQUEST", "WITHDRAW_CERTIFICATION_REQUEST" ],
            "example" : "CAPACITY_CHANGE"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID of the transaction",
            "example" : "MDI"
          },
          "transactionDetail" : {
            "type" : "string",
            "description" : "Description of the transaction",
            "example" : "Working capacity changed from 0 to 1"
          },
          "transactionInvokedBy" : {
            "type" : "string",
            "description" : "User who invoked the change",
            "example" : "STAFF_USER1"
          },
          "txStartTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the transaction started"
          },
          "txEndTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the transaction ended"
          },
          "transactionDetails" : {
            "type" : "array",
            "description" : "The list of changes that were made in the transaction",
            "items" : {
              "$ref" : "#/components/schemas/TransactionDetail"
            }
          }
        },
        "required" : [ "prisonId", "transactionDetail", "transactionDetails", "transactionId", "transactionInvokedBy", "transactionType", "txEndTime", "txStartTime" ]
      },
      "TemporaryDeactivationLocationRequest" : {
        "type" : "object",
        "description" : "Request to temporarily deactivate a location",
        "properties" : {
          "deactivationReason" : {
            "type" : "string",
            "description" : "Reason for temporary deactivation",
            "enum" : [ "DAMAGED", "DAMP", "MAINTENANCE", "MOTHBALLED", "PEST", "REFURBISHMENT", "SECURITY_SEALED", "STAFF_SHORTAGE", "OTHER" ],
            "example" : "MOTHBALLED"
          },
          "deactivationReasonDescription" : {
            "type" : "string",
            "description" : "Additional information on deactivation, for OTHER DeactivatedReason must be provided",
            "example" : "Window broken",
            "maxLength" : 255,
            "minLength" : 0
          },
          "proposedReactivationDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Estimated reactivation date",
            "example" : "2025-01-05"
          },
          "planetFmReference" : {
            "type" : "string",
            "description" : "Planet FM reference number",
            "example" : "23423TH/5",
            "maxLength" : 60,
            "minLength" : 0
          }
        },
        "required" : [ "deactivationReason" ]
      },
      "UpdateNonResCellTypeRequest" : {
        "type" : "object",
        "description" : "Request to update the type of a non-res cell location",
        "properties" : {
          "convertedCellType" : {
            "type" : "string",
            "description" : "Cell type to change to",
            "enum" : [ "HOLDING_ROOM", "INTERVIEW_ROOM", "KITCHEN_SERVERY", "LISTENERS_ROOM", "OFFICE", "SHOWER", "STAFF_ROOM", "STORE", "TREATMENT_ROOM", "UTILITY_ROOM", "OTHER" ],
            "example" : "SHOWER"
          },
          "otherConvertedCellType" : {
            "type" : "string",
            "description" : "When other, the cell type name",
            "example" : "Hot Tub",
            "maxLength" : 255,
            "minLength" : 0
          }
        },
        "required" : [ "convertedCellType" ]
      },
      "PermanentDeactivationLocationRequest" : {
        "type" : "object",
        "description" : "Request to permanently deactivate a location",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "Reason for permanent deactivation",
            "example" : "Wing demolished",
            "maxLength" : 200,
            "minLength" : 0
          }
        },
        "required" : [ "reason" ]
      },
      "ConvertToCellRequest" : {
        "type" : "object",
        "description" : "Request to convert a non-res location to a cell",
        "properties" : {
          "accommodationType" : {
            "type" : "string",
            "description" : "Accommodation type of the location",
            "enum" : [ "NORMAL_ACCOMMODATION", "HEALTHCARE_INPATIENTS", "CARE_AND_SEPARATION" ],
            "example" : "NORMAL_ACCOMMODATION"
          },
          "specialistCellTypes" : {
            "type" : "array",
            "description" : "Specialist cell types",
            "example" : [ "BIOHAZARD_DIRTY_PROTEST", "ACCESSIBLE_CELL" ],
            "items" : {
              "type" : "string",
              "description" : "Specialist Cell Types",
              "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
            },
            "uniqueItems" : true
          },
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Maximum capacity",
            "example" : 2,
            "maximum" : 99
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Working capacity",
            "example" : 1,
            "maximum" : 99
          },
          "usedForTypes" : {
            "type" : "array",
            "description" : "Used For list",
            "example" : [ "STANDARD_ACCOMMODATION", "PERSONALITY_DISORDER" ],
            "items" : {
              "type" : "string",
              "description" : "Used For Types",
              "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
            }
          }
        },
        "required" : [ "accommodationType", "maxCapacity", "workingCapacity" ]
      },
      "ConvertCellToNonResidentialLocationRequest" : {
        "type" : "object",
        "description" : "Request to convert a cell to a non-res location",
        "properties" : {
          "convertedCellType" : {
            "type" : "string",
            "description" : "Cell type to convert to",
            "enum" : [ "HOLDING_ROOM", "INTERVIEW_ROOM", "KITCHEN_SERVERY", "LISTENERS_ROOM", "OFFICE", "SHOWER", "STAFF_ROOM", "STORE", "TREATMENT_ROOM", "UTILITY_ROOM", "OTHER" ],
            "example" : "SHOWER"
          },
          "otherConvertedCellType" : {
            "type" : "string",
            "description" : "Other type of converted cell",
            "example" : "Swimming pool",
            "maxLength" : 255,
            "minLength" : 0
          }
        },
        "required" : [ "convertedCellType" ]
      },
      "UpdateLocationLocalNameRequest" : {
        "type" : "object",
        "description" : "Request to update the local name of a location",
        "properties" : {
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A",
            "maxLength" : 30,
            "minLength" : 0
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "Username of the staff updating the location"
          }
        }
      },
      "ReactivateLocationsRequest" : {
        "type" : "object",
        "description" : "Reactivate Locations Request",
        "properties" : {
          "locations" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/ReactivationDetail"
            },
            "description" : "List of locations to reactivate",
            "example" : {
              "de91dfa7-821f-4552-a427-bf2f32eafeb0" : {
                "cascadeReactivation" : false,
                "capacity" : {
                  "workingCapacity" : 1,
                  "maxCapacity" : 2
                }
              }
            }
          }
        },
        "required" : [ "locations" ]
      },
      "ReactivationDetail" : {
        "type" : "object",
        "description" : "Reactivation Details",
        "properties" : {
          "cascadeReactivation" : {
            "type" : "boolean",
            "default" : false,
            "description" : "List of locations to reactivate",
            "example" : true
          },
          "capacity" : {
            "$ref" : "#/components/schemas/Capacity",
            "description" : "New capacity of the location, if null the old values are used",
            "example" : {
              "workingCapacity" : 1,
              "maxCapacity" : 2
            }
          }
        },
        "required" : [ "cascadeReactivation" ]
      },
      "DeactivateLocationsRequest" : {
        "type" : "object",
        "description" : "Deactivate Locations Request",
        "properties" : {
          "locations" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/TemporaryDeactivationLocationRequest"
            },
            "description" : "List of locations to deactivate",
            "example" : {
              "de91dfa7-821f-4552-a427-bf2f32eafeb0" : {
                "deactivationReason" : "DAMAGED"
              }
            }
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "Username of the user requesting to deactivate the locations, if not provided the token username or client id will be used",
            "example" : "TESTUSER",
            "maxLength" : 80,
            "minLength" : 0
          }
        },
        "required" : [ "locations" ]
      },
      "BulkPermanentDeactivationRequest" : {
        "type" : "object",
        "description" : "Bulk permanent deactivation request",
        "properties" : {
          "reason" : {
            "type" : "string",
            "description" : "Reason for permanent deactivation",
            "example" : "Wing demolished",
            "maxLength" : 100,
            "minLength" : 0
          },
          "locations" : {
            "type" : "array",
            "description" : "List of locations to permanently deactivate",
            "example" : [ "TCI-A-1-001", "TCI-B-1-001", "TCI-A-2-001" ],
            "items" : {
              "type" : "string"
            },
            "minItems" : 1
          }
        },
        "required" : [ "locations", "reason" ]
      },
      "CellCapacityUpdateDetail" : {
        "type" : "object",
        "description" : "Bulk Update Cell Capacity Details",
        "properties" : {
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Max capacity of the location",
            "example" : 2,
            "maximum" : 99
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Working capacity of the location",
            "example" : 2,
            "maximum" : 99
          },
          "certifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Indicates the capacity of the certified location (cell)",
            "example" : 1,
            "maximum" : 99
          },
          "cellMark" : {
            "type" : "string",
            "description" : "Working capacity of the location",
            "example" : "A1-03",
            "maxLength" : 12,
            "minLength" : 0
          },
          "inCellSanitation" : {
            "type" : "boolean",
            "description" : "Indicate that the cell as in-cell sanitation",
            "example" : true
          }
        },
        "required" : [ "inCellSanitation", "maxCapacity", "workingCapacity" ]
      },
      "UpdateCapacityRequest" : {
        "type" : "object",
        "description" : "Update Capacities Request",
        "properties" : {
          "locations" : {
            "type" : "object",
            "additionalProperties" : {
              "$ref" : "#/components/schemas/CellCapacityUpdateDetail"
            },
            "description" : "List of capacities to update",
            "example" : {
              "TCI-A-1-001" : {
                "maxCapacity" : 2,
                "workingCapacity" : 1,
                "certifiedNormalAccommodation" : 2
              },
              "TCI-A-1-002" : {
                "maxCapacity" : 3,
                "workingCapacity" : 1,
                "certifiedNormalAccommodation" : 1
              }
            }
          }
        },
        "required" : [ "locations" ]
      },
      "CapacityChanges" : {
        "type" : "object",
        "description" : "Capacity change audit",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Location reference",
            "example" : "MDI-1-1-001"
          },
          "message" : {
            "type" : "string",
            "description" : "textual description of the changes",
            "example" : "Working capacity from 2 ==> 1"
          },
          "type" : {
            "type" : "string",
            "description" : "Attribute changed in the update",
            "example" : "workingCapacity"
          },
          "previousValue" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Old value of this attribute",
            "example" : 2
          },
          "newValue" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "New value of this attribute",
            "example" : 1
          }
        },
        "required" : [ "key", "message" ]
      },
      "SignedOpCapApprovalRequest" : {
        "type" : "object",
        "description" : "Request to approve a location or set of locations and cells below it",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "The prison where the signed op cap is to be approved",
            "example" : "MDI"
          },
          "signedOperationalCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The new value of the signed operational capacity",
            "example" : 456
          }
        },
        "required" : [ "prisonId", "signedOperationalCapacity" ]
      },
      "CertificationApprovalRequestDto" : {
        "type" : "object",
        "description" : "Certification Approval Request",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Approval request reference",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "locationId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "approvalType" : {
            "type" : "string",
            "description" : "Type of approval",
            "enum" : [ "SIGNED_OP_CAP", "DRAFT", "DEACTIVATION", "REACTIVATION", "CAPACITY_CHANGE" ],
            "example" : "SIGNED_OP_CAP"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI"
          },
          "locationKey" : {
            "type" : "string",
            "description" : "Location key",
            "example" : "MDI-A-1-001"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the approval request",
            "enum" : [ "PENDING", "APPROVED", "REJECTED", "WITHDRAWN" ],
            "example" : "PENDING"
          },
          "requestedBy" : {
            "type" : "string",
            "description" : "User who requested the approval",
            "example" : "USER1"
          },
          "requestedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of the request"
          },
          "approvedOrRejectedBy" : {
            "type" : "string",
            "description" : "User who approved or rejected the request",
            "example" : "USER2"
          },
          "approvedOrRejectedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of the approval or rejection"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments about the approval or rejection"
          },
          "certifiedNormalAccommodationChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Change in certified normal accommodation",
            "example" : 1
          },
          "workingCapacityChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Change in working capacity",
            "example" : 1
          },
          "maxCapacityChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Change in maximum capacity",
            "example" : 1
          },
          "signedOperationCapacityChange" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Change signed operational capacity",
            "example" : 1
          },
          "locations" : {
            "type" : "array",
            "description" : "Locations affected by the approval",
            "items" : {
              "$ref" : "#/components/schemas/CertificationApprovalRequestLocationDto"
            }
          }
        },
        "required" : [ "approvalType", "certifiedNormalAccommodationChange", "id", "maxCapacityChange", "prisonId", "requestedBy", "requestedDate", "signedOperationCapacityChange", "status", "workingCapacityChange" ]
      },
      "CertificationApprovalRequestLocationDto" : {
        "type" : "object",
        "description" : "Location affected by certification approval",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location ID",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "locationCode" : {
            "type" : "string",
            "description" : "Location code",
            "example" : "MDI-A-1-001"
          },
          "cellMark" : {
            "type" : "string",
            "description" : "Cell mark",
            "example" : "Standard"
          },
          "localName" : {
            "type" : "string",
            "description" : "Local name",
            "example" : "Cell 1"
          },
          "pathHierarchy" : {
            "type" : "string",
            "description" : "Path hierarchy",
            "example" : "MDI-A-1-001"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Level in the hierarchy",
            "example" : 3
          },
          "certifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Capacity of certified cell",
            "example" : 2
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Working capacity",
            "example" : 2
          },
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Maximum capacity",
            "example" : 2
          },
          "inCellSanitation" : {
            "type" : "boolean",
            "description" : "In-cell sanitation",
            "example" : true
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "specialistCellTypes" : {
            "type" : "array",
            "description" : "Specialist cell types",
            "example" : "LISTENER,SAFE_CELL",
            "items" : {
              "type" : "string",
              "description" : "Specialist Cell Types",
              "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
            }
          },
          "convertedCellType" : {
            "type" : "string",
            "description" : "Converted cell type",
            "enum" : [ "HOLDING_ROOM", "INTERVIEW_ROOM", "KITCHEN_SERVERY", "LISTENERS_ROOM", "OFFICE", "SHOWER", "STAFF_ROOM", "STORE", "TREATMENT_ROOM", "UTILITY_ROOM", "OTHER" ],
            "example" : "OFFICE"
          },
          "subLocations" : {
            "description" : "Sub-locations"
          }
        },
        "required" : [ "id", "level", "locationCode", "locationType", "pathHierarchy" ]
      },
      "WithdrawCertificationRequestDto" : {
        "type" : "object",
        "description" : "Request to withdraw a certification request",
        "properties" : {
          "approvalRequestReference" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Approval request reference",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments about the withdrawal"
          }
        },
        "required" : [ "approvalRequestReference", "comments" ]
      },
      "LocationApprovalRequest" : {
        "type" : "object",
        "description" : "Request to approve a location or set of locations and cells below it",
        "properties" : {
          "locationId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id of location requiring approval for being certified",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "approvalType" : {
            "type" : "string",
            "description" : "Type of approval request",
            "enum" : [ "SIGNED_OP_CAP", "DRAFT", "DEACTIVATION", "REACTIVATION", "CAPACITY_CHANGE" ],
            "example" : "DRAFT"
          }
        },
        "required" : [ "approvalType", "locationId" ]
      },
      "RejectCertificationRequestDto" : {
        "type" : "object",
        "description" : "Request to reject a certification request",
        "properties" : {
          "approvalRequestReference" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Approval request reference",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments about the rejection"
          }
        },
        "required" : [ "approvalRequestReference", "comments" ]
      },
      "ApproveCertificationRequestDto" : {
        "type" : "object",
        "description" : "Request to approve a certification request",
        "properties" : {
          "approvalRequestReference" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Approval request reference",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "comments" : {
            "type" : "string",
            "description" : "Comments about the approval"
          }
        },
        "required" : [ "approvalRequestReference", "comments" ]
      },
      "NomisSyncLocationRequest" : {
        "type" : "object",
        "description" : "Request to upsert/sync a location from NOMIS to the Locations API",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location UUID, provided if already exists",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "code" : {
            "type" : "string",
            "description" : "Code of the location",
            "example" : "001",
            "minLength" : 1
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A",
            "maxLength" : 80,
            "minLength" : 0
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments that can be made about this location",
            "example" : "Not to be used",
            "maxLength" : 255,
            "minLength" : 0
          },
          "orderWithinParentLocation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Sequence of locations within the current parent location",
            "example" : 1
          },
          "residentialHousingType" : {
            "type" : "string",
            "description" : "If residential location, its type",
            "enum" : [ "HEALTHCARE", "HOLDING_CELL", "NORMAL_ACCOMMODATION", "RECEPTION", "SEGREGATION", "SPECIALIST_CELL", "OTHER_USE" ],
            "example" : "NORMAL_ACCOMMODATION"
          },
          "deactivationReason" : {
            "type" : "string",
            "description" : "Reason for deactivation",
            "enum" : [ "REFURBISHMENT", "LOCAL_WORK", "STAFF_SHORTAGE", "MOTHBALLED", "DAMAGED", "NEW_BUILDING", "CELL_RECLAIMS", "CHANGE_OF_USE", "CLOSURE", "OUT_OF_USE", "CELLS_RETURNING_TO_USE", "OTHER" ],
            "example" : "DAMAGED"
          },
          "proposedReactivationDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Estimated reactivation date",
            "example" : "2025-01-05"
          },
          "deactivatedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date deactivation occurred",
            "example" : "2023-01-05"
          },
          "parentLocationPath" : {
            "type" : "string",
            "description" : "Path hierarchy of the parent (if one exists)",
            "example" : "A-1"
          },
          "parentId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Parent UUID of the parent location (if one exists)",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4e"
          },
          "capacity" : {
            "$ref" : "#/components/schemas/Capacity",
            "description" : "Capacity details of the location"
          },
          "certification" : {
            "$ref" : "#/components/schemas/Certification",
            "description" : "Indicates that this location is certified for use as a residential location"
          },
          "attributes" : {
            "type" : "array",
            "description" : "Location Attributes",
            "items" : {
              "type" : "string",
              "enum" : [ "ANTI_BARRICADE_DOOR", "AUDITABLE_CELL_BELL", "FIXED_BED", "METAL_DOOR", "MOVABLE_BED", "PRIVACY_CURTAIN", "PRIVACY_SCREEN", "STANDARD_CELL_BELL", "SEPARATE_TOILET", "WOODEN_DOOR", "CAT_A_CELL", "DOUBLE_OCCUPANCY", "E_LIST_CELL", "GATED_CELL", "LISTENER_CELL", "LOCATE_FLAT", "MULTIPLE_OCCUPANCY", "NON_SMOKER_CELL", "OBSERVATION_CELL", "SAFE_CELL", "SINGLE_OCCUPANCY", "SPECIAL_CELL", "WHEELCHAIR_ACCESS", "UNCONVICTED_JUVENILES", "SENTENCED_JUVENILES", "UNCONVICTED_18_20", "SENTENCED_18_20", "UNCONVICTED_ADULTS", "SENTENCED_ADULTS", "VULNERABLE_PRISONER_UNIT", "SPECIAL_UNIT", "RESETTLEMENT_HOSTEL", "HEALTHCARE_CENTRE", "NATIONAL_RESOURCE_HOSPITAL", "OTHER_SPECIFIED", "REMAND_CENTRE", "LOCAL_PRISON", "CLOSED_PRISON", "OPEN_TRAINING", "HOSTEL", "CLOSED_YOUNG_OFFENDER", "OPEN_YOUNG_OFFENDER", "REMAND_UNDER_18", "SENTENCED_UNDER_18", "ECL_COMPONENT", "ADDITIONAL_SPECIAL_UNIT", "SECOND_CLOSED_TRAINER", "IMMIGRATION_DETAINEES", "CELL", "LANDING", "WING", "CAT_A", "CAT_A_EX", "CAT_A_HI", "CAT_B", "CAT_C", "CAT_D", "ELIGIBLE", "PAROLE_GRANTED", "INELIGIBLE", "YOI_CLOSED", "YOI_OPEN", "YOI_RESTRICTED", "YOI_SHORT_SENTENCE", "YOI_LONG_TERM_CLOSED", "UNCLASSIFIED", "UNCATEGORISED_SENTENCED_MALE", "LOW", "MEDIUM", "HIGH", "NOT_APPLICABLE", "PROV_A", "PENDING", "REF_REVIEW", "REFUSED_NO_REVIEW", "STANDARD", "FEMALE_RESTRICTED", "FEMALE_CLOSED", "FEMALE_SEMI", "FEMALE_OPEN", "UN_SENTENCED", "YES", "NO" ]
            },
            "uniqueItems" : true
          },
          "usage" : {
            "type" : "array",
            "description" : "Location Usage",
            "items" : {
              "$ref" : "#/components/schemas/NonResidentialUsageDto"
            },
            "uniqueItems" : true
          },
          "internalMovementAllowed" : {
            "type" : "boolean",
            "description" : "Indicates that this location can used for internal movements"
          },
          "createDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date location was created, if not provided then the current time will be used for a new location"
          },
          "lastModifiedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Last updated, if not provided then the current time will be used"
          },
          "lastUpdatedBy" : {
            "type" : "string",
            "description" : "Username of the staff updating the location"
          },
          "isDeactivated" : {
            "type" : "boolean"
          }
        },
        "required" : [ "code", "isDeactivated", "lastUpdatedBy", "locationType", "prisonId" ]
      },
      "LegacyLocation" : {
        "type" : "object",
        "description" : "Location Information - for NOMIS sync",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI"
          },
          "code" : {
            "type" : "string",
            "description" : "Location Code",
            "example" : "001"
          },
          "pathHierarchy" : {
            "type" : "string",
            "description" : "Full path of the location within the prison",
            "example" : "A-1-001"
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "residentialHousingType" : {
            "type" : "string",
            "description" : "If residential location, its type",
            "enum" : [ "HEALTHCARE", "HOLDING_CELL", "NORMAL_ACCOMMODATION", "RECEPTION", "SEGREGATION", "SPECIALIST_CELL", "OTHER_USE" ],
            "example" : "NORMAL_ACCOMMODATION"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location, (Not Cells)",
            "example" : "Wing A"
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments that can be made about this location",
            "example" : "Not to be used"
          },
          "ignoreWorkingCapacity" : {
            "type" : "boolean",
            "default" : false,
            "description" : "When set to true DO NOT SYNC the working capacity"
          },
          "capacity" : {
            "$ref" : "#/components/schemas/Capacity",
            "description" : "Capacity details of the location"
          },
          "certification" : {
            "$ref" : "#/components/schemas/Certification",
            "description" : "Indicates that this location is certified for use as a residential location"
          },
          "attributes" : {
            "type" : "array",
            "description" : "Location Attributes",
            "items" : {
              "type" : "string",
              "enum" : [ "ANTI_BARRICADE_DOOR", "AUDITABLE_CELL_BELL", "FIXED_BED", "METAL_DOOR", "MOVABLE_BED", "PRIVACY_CURTAIN", "PRIVACY_SCREEN", "STANDARD_CELL_BELL", "SEPARATE_TOILET", "WOODEN_DOOR", "CAT_A_CELL", "DOUBLE_OCCUPANCY", "E_LIST_CELL", "GATED_CELL", "LISTENER_CELL", "LOCATE_FLAT", "MULTIPLE_OCCUPANCY", "NON_SMOKER_CELL", "OBSERVATION_CELL", "SAFE_CELL", "SINGLE_OCCUPANCY", "SPECIAL_CELL", "WHEELCHAIR_ACCESS", "UNCONVICTED_JUVENILES", "SENTENCED_JUVENILES", "UNCONVICTED_18_20", "SENTENCED_18_20", "UNCONVICTED_ADULTS", "SENTENCED_ADULTS", "VULNERABLE_PRISONER_UNIT", "SPECIAL_UNIT", "RESETTLEMENT_HOSTEL", "HEALTHCARE_CENTRE", "NATIONAL_RESOURCE_HOSPITAL", "OTHER_SPECIFIED", "REMAND_CENTRE", "LOCAL_PRISON", "CLOSED_PRISON", "OPEN_TRAINING", "HOSTEL", "CLOSED_YOUNG_OFFENDER", "OPEN_YOUNG_OFFENDER", "REMAND_UNDER_18", "SENTENCED_UNDER_18", "ECL_COMPONENT", "ADDITIONAL_SPECIAL_UNIT", "SECOND_CLOSED_TRAINER", "IMMIGRATION_DETAINEES", "CELL", "LANDING", "WING", "CAT_A", "CAT_A_EX", "CAT_A_HI", "CAT_B", "CAT_C", "CAT_D", "ELIGIBLE", "PAROLE_GRANTED", "INELIGIBLE", "YOI_CLOSED", "YOI_OPEN", "YOI_RESTRICTED", "YOI_SHORT_SENTENCE", "YOI_LONG_TERM_CLOSED", "UNCLASSIFIED", "UNCATEGORISED_SENTENCED_MALE", "LOW", "MEDIUM", "HIGH", "NOT_APPLICABLE", "PROV_A", "PENDING", "REF_REVIEW", "REFUSED_NO_REVIEW", "STANDARD", "FEMALE_RESTRICTED", "FEMALE_CLOSED", "FEMALE_SEMI", "FEMALE_OPEN", "UN_SENTENCED", "YES", "NO" ]
            }
          },
          "usage" : {
            "type" : "array",
            "description" : "Location Usage",
            "items" : {
              "$ref" : "#/components/schemas/NonResidentialUsageDto"
            }
          },
          "internalMovementAllowed" : {
            "type" : "boolean",
            "description" : "Indicates that this location can used for internal movements"
          },
          "orderWithinParentLocation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Sequence of locations within the current parent location",
            "example" : 1
          },
          "active" : {
            "type" : "boolean",
            "description" : "Indicates the location is enabled",
            "example" : true
          },
          "deactivatedDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Date the location was deactivated",
            "example" : "2023-01-23"
          },
          "deactivatedReason" : {
            "type" : "string",
            "description" : "Reason for deactivation",
            "enum" : [ "DAMAGED", "DAMP", "MAINTENANCE", "MOTHBALLED", "PEST", "REFURBISHMENT", "SECURITY_SEALED", "STAFF_SHORTAGE", "OTHER" ],
            "example" : "DAMAGED"
          },
          "proposedReactivationDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Estimated reactivation date for location reactivation",
            "example" : "2026-01-24"
          },
          "permanentlyDeactivated" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Indicates that this location has been permanently deactivated and should not be changed in NOMIS",
            "example" : false
          },
          "parentId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Parent Location Id",
            "example" : "57718979-573c-433a-9e51-2d83f887c11c"
          },
          "changeHistory" : {
            "type" : "array",
            "description" : "History of changes",
            "items" : {
              "$ref" : "#/components/schemas/ChangeHistory"
            }
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "Staff username who last changed the location"
          },
          "lastModifiedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of the last change"
          },
          "key" : {
            "type" : "string",
            "description" : "Business Key for a location",
            "example" : "MDI-A-1-001"
          }
        },
        "required" : [ "active", "code", "id", "ignoreWorkingCapacity", "key", "lastModifiedBy", "lastModifiedDate", "locationType", "pathHierarchy", "permanentlyDeactivated", "prisonId" ]
      },
      "SignedOperationCapacityValidRequest" : {
        "type" : "object",
        "description" : "Request to create a Signed Operation Capacity Information",
        "properties" : {
          "signedOperationCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Signed Operation Capacity value",
            "example" : 100,
            "minimum" : 0
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 3,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZZ$"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The user who updated the record",
            "example" : "USER",
            "maxLength" : 255,
            "minLength" : 1
          }
        },
        "required" : [ "prisonId", "signedOperationCapacity", "updatedBy" ]
      },
      "SignedOperationCapacityDto" : {
        "type" : "object",
        "description" : "Signed Operation Capacity Information",
        "properties" : {
          "signedOperationCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Signed Operation Capacity",
            "example" : 100
          },
          "prisonId" : {
            "type" : "string",
            "description" : "The prison ID where for this signed operation capacity",
            "example" : "MDI"
          },
          "whenUpdated" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time of last update",
            "example" : "2024-11-11T08:00:00"
          },
          "updatedBy" : {
            "type" : "string",
            "description" : "The user who updated the record",
            "example" : "MALEMAN"
          }
        },
        "required" : [ "prisonId", "signedOperationCapacity", "updatedBy", "whenUpdated" ]
      },
      "CreateResidentialLocationRequest" : {
        "type" : "object",
        "description" : "Request to create a location",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "code" : {
            "type" : "string",
            "description" : "Code of the location",
            "example" : "001",
            "minLength" : 1
          },
          "cellMark" : {
            "type" : "string",
            "description" : "Cell mark of the location",
            "example" : "A1",
            "minLength" : 1
          },
          "accommodationType" : {
            "type" : "string",
            "description" : "Accommodation Type",
            "enum" : [ "CARE_AND_SEPARATION", "HEALTHCARE_INPATIENTS", "NORMAL_ACCOMMODATION", "OTHER_NON_RESIDENTIAL" ],
            "example" : "NORMAL_ACCOMMODATION"
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "RESIDENTIAL_UNIT", "HOLDING_CELL", "MEDICAL", "ADJUDICATION_ROOM", "FAITH_AREA", "GROUP", "STORE", "AREA", "HOLDING_AREA", "MOVEMENT_AREA", "EXTERNAL_GROUNDS" ],
            "example" : "CELL"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A",
            "maxLength" : 80,
            "minLength" : 0
          },
          "parentId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "ID of parent location",
            "example" : "c73e8ad1-191b-42b8-bfce-2550cc858dab"
          },
          "parentLocationKey" : {
            "type" : "string",
            "description" : "Key of parent location (can be used instead of parentId)",
            "example" : "MDI-B-1"
          },
          "capacity" : {
            "$ref" : "#/components/schemas/Capacity",
            "description" : "Capacity of the residential location"
          },
          "certified" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Certified status of the residential location"
          },
          "usedFor" : {
            "type" : "array",
            "description" : "Used For Types",
            "items" : {
              "type" : "string",
              "description" : "Used For Types",
              "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
            },
            "uniqueItems" : true
          },
          "specialistCellTypes" : {
            "type" : "array",
            "description" : "Specialist Cell Types",
            "items" : {
              "type" : "string",
              "description" : "Specialist Cell Types",
              "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
            },
            "uniqueItems" : true
          },
          "certifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "description" : "CNA value",
            "maximum" : 99
          },
          "inCellSanitation" : {
            "type" : "boolean",
            "default" : false,
            "description" : "In-cell sanitation"
          },
          "isCell" : {
            "type" : "boolean"
          }
        },
        "required" : [ "accommodationType", "code", "isCell", "locationType", "prisonId" ]
      },
      "CreateNonResidentialLocationRequest" : {
        "type" : "object",
        "description" : "Request to create a non-residential location",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "code" : {
            "type" : "string",
            "description" : "Code of the location",
            "example" : "ADJ",
            "minLength" : 1
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "ADJUDICATION_ROOM"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Adj Room",
            "maxLength" : 80,
            "minLength" : 0
          },
          "parentId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "ID of parent location",
            "example" : "c73e8ad1-191b-42b8-bfce-2550cc858dab"
          },
          "usage" : {
            "type" : "array",
            "description" : "Location Usage",
            "items" : {
              "$ref" : "#/components/schemas/NonResidentialUsageDto"
            },
            "uniqueItems" : true
          },
          "internalMovementAllowed" : {
            "type" : "boolean",
            "description" : "Indicates that this location can used for internal movements"
          }
        },
        "required" : [ "code", "locationType", "prisonId" ]
      },
      "CreateWingAndStructureRequest" : {
        "type" : "object",
        "description" : "Request to create a wing",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "wingCode" : {
            "type" : "string",
            "description" : "Code assigned to a wing",
            "example" : "B",
            "maxLength" : 12,
            "minLength" : 0
          },
          "wingDescription" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A",
            "maxLength" : 80,
            "minLength" : 0
          },
          "wingStructure" : {
            "type" : "array",
            "description" : "The structure of the wing",
            "items" : {
              "type" : "string",
              "enum" : [ "CELL", "LANDING", "SPUR", "WING" ]
            }
          }
        },
        "required" : [ "prisonId", "wingCode", "wingStructure" ]
      },
      "CellInitialisationRequest" : {
        "type" : "object",
        "description" : "Request to a create location and cell locations below it",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "parentLocation" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Parent location under which the structure and/or cells should be created, if not specified then will add to the top level of the prison, is specified but no `newLevelAboveCells` is specified then cells will be created under this location"
          },
          "newLevelAboveCells" : {
            "$ref" : "#/components/schemas/LevelAboveCells",
            "description" : "The location to create above the cells, this is normally a landing or spur, if the location where cells should be created under already exists then leave null"
          },
          "cellsUsedFor" : {
            "type" : "array",
            "description" : "Used For Types for all cells",
            "items" : {
              "type" : "string",
              "description" : "Used For Types",
              "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
            },
            "uniqueItems" : true
          },
          "accommodationType" : {
            "type" : "string",
            "default" : "NORMAL_ACCOMMODATION",
            "description" : "Accommodation Type for all cells",
            "enum" : [ "CARE_AND_SEPARATION", "HEALTHCARE_INPATIENTS", "NORMAL_ACCOMMODATION", "OTHER_NON_RESIDENTIAL" ],
            "example" : "NORMAL_ACCOMMODATION"
          },
          "cells" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/NewCellRequest"
            },
            "uniqueItems" : true
          }
        },
        "required" : [ "prisonId" ]
      },
      "LevelAboveCells" : {
        "type" : "object",
        "properties" : {
          "levelCode" : {
            "type" : "string",
            "description" : "Code assigned to the new structural location",
            "example" : 1,
            "maxLength" : 12,
            "minLength" : 0
          },
          "levelLocalName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Landing A",
            "maxLength" : 80,
            "minLength" : 0
          },
          "locationType" : {
            "type" : "string",
            "default" : "LANDING",
            "description" : "Parent location type",
            "enum" : [ "CELL", "LANDING", "SPUR", "WING" ],
            "example" : "LANDING"
          }
        },
        "required" : [ "levelCode" ]
      },
      "NewCellRequest" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Code of the location",
            "example" : "001",
            "minLength" : 1
          },
          "cellMark" : {
            "type" : "string",
            "description" : "Cell mark of the location",
            "example" : "A1",
            "minLength" : 1
          },
          "certifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "description" : "CNA value",
            "maximum" : 99
          },
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "description" : "Max capacity of the location",
            "example" : 2,
            "maximum" : 99
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 0,
            "description" : "Working capacity of the location",
            "example" : 2,
            "maximum" : 99
          },
          "specialistCellTypes" : {
            "type" : "array",
            "description" : "Specialist Cell Types",
            "items" : {
              "type" : "string",
              "description" : "Specialist Cell Types",
              "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
            },
            "uniqueItems" : true
          },
          "inCellSanitation" : {
            "type" : "boolean",
            "default" : true,
            "description" : "In-cell sanitation for cell"
          },
          "isCapacityValid" : {
            "type" : "boolean"
          }
        },
        "required" : [ "code", "isCapacityValid" ]
      },
      "PatchResidentialLocationRequest" : {
        "type" : "object",
        "description" : "Request to update a residential location",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Code of the location",
            "example" : "001",
            "minLength" : 1
          },
          "parentId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "ID of parent location",
            "example" : "c73e8ad1-191b-42b8-bfce-2550cc858dab"
          },
          "parentLocationKey" : {
            "type" : "string",
            "description" : "Key of parent location",
            "example" : "MDI-B-1",
            "maxLength" : 80,
            "minLength" : 0
          },
          "removeParent" : {
            "type" : "boolean",
            "description" : "Indicates this location should move to the top of the hierarchy",
            "example" : false
          },
          "accommodationType" : {
            "type" : "string",
            "description" : "Accommodation type",
            "enum" : [ "CARE_AND_SEPARATION", "HEALTHCARE_INPATIENTS", "NORMAL_ACCOMMODATION", "OTHER_NON_RESIDENTIAL" ],
            "example" : "NORMAL_ACCOMMODATION"
          },
          "usedFor" : {
            "type" : "array",
            "description" : "used For types",
            "items" : {
              "type" : "string",
              "description" : "Used For Types",
              "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
            },
            "uniqueItems" : true
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A",
            "maxLength" : 30,
            "minLength" : 0
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "RESIDENTIAL_UNIT", "HOLDING_CELL", "MEDICAL", "ADJUDICATION_ROOM", "FAITH_AREA", "GROUP", "STORE", "AREA", "HOLDING_AREA", "MOVEMENT_AREA", "EXTERNAL_GROUNDS" ],
            "example" : "CELL"
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments that can be made about this location",
            "example" : "Not to be used"
          }
        },
        "required" : [ "code" ]
      },
      "PatchNonResidentialLocationRequest" : {
        "type" : "object",
        "description" : "Request to update a non-res location",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Code of the location",
            "example" : "001",
            "minLength" : 1
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "APPOINTMENTS"
          },
          "parentId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "ID of parent location",
            "example" : "c73e8ad1-191b-42b8-bfce-2550cc858dab"
          },
          "parentLocationKey" : {
            "type" : "string",
            "description" : "Key of parent location",
            "example" : "MDI-B-1"
          },
          "removeParent" : {
            "type" : "boolean",
            "description" : "Indicates this location should move to the top of the hierarchy",
            "example" : false
          },
          "usage" : {
            "type" : "array",
            "description" : "Non-residential usage",
            "items" : {
              "$ref" : "#/components/schemas/NonResidentialUsageDto"
            },
            "uniqueItems" : true
          },
          "internalMovementAllowed" : {
            "type" : "boolean",
            "description" : "Indicates that this location can used for internal movements"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A",
            "maxLength" : 30,
            "minLength" : 0
          },
          "comments" : {
            "type" : "string",
            "description" : "Additional comments that can be made about this location",
            "example" : "Not to be used"
          }
        },
        "required" : [ "code", "locationType" ]
      },
      "Count" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The total number of records",
            "example" : 501
          }
        },
        "required" : [ "count" ]
      },
      "DlqMessage" : {
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "object",
            "additionalProperties" : { }
          },
          "messageId" : {
            "type" : "string"
          }
        },
        "required" : [ "body", "messageId" ]
      },
      "GetDlqResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messagesReturnedCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DlqMessage"
            }
          }
        },
        "required" : [ "messages", "messagesFoundCount", "messagesReturnedCount" ]
      },
      "Alert" : {
        "type" : "object",
        "properties" : {
          "alertType" : {
            "type" : "string",
            "description" : "Alert type",
            "example" : "X"
          },
          "alertCode" : {
            "type" : "string",
            "description" : "Alert code",
            "example" : "XA"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Active alert",
            "example" : true
          },
          "expired" : {
            "type" : "boolean",
            "description" : "Expired",
            "example" : false
          }
        },
        "required" : [ "active", "alertCode", "alertType", "expired" ]
      },
      "Prisoner" : {
        "type" : "object",
        "description" : "Prisoner Information",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner Information",
            "example" : "A1234AA"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "LEI"
          },
          "prisonName" : {
            "type" : "string",
            "description" : "Prison Name",
            "example" : "HMP Leeds"
          },
          "cellLocation" : {
            "type" : "string",
            "description" : "Cell location of the prisoner",
            "example" : "1-1-001"
          },
          "firstName" : {
            "type" : "string",
            "description" : "Prisoner first name",
            "example" : "Dave"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Prisoner last name",
            "example" : "Jones"
          },
          "gender" : {
            "type" : "string",
            "description" : "Prisoner gender",
            "example" : "Male"
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the prisoner",
            "example" : "ACTIVE IN"
          },
          "inOutStatus" : {
            "type" : "string",
            "description" : "In/Out status",
            "example" : "IN"
          },
          "csra" : {
            "type" : "string",
            "description" : "Prisoner CSRA",
            "example" : "High"
          },
          "category" : {
            "type" : "string",
            "description" : "Prisoner category",
            "example" : "C"
          },
          "alerts" : {
            "type" : "array",
            "description" : "Prisoner alerts",
            "items" : {
              "$ref" : "#/components/schemas/Alert"
            }
          },
          "lastMovementTypeCode" : {
            "type" : "string",
            "description" : "Last Movement Type Code of prisoner",
            "example" : "CRT"
          }
        },
        "required" : [ "firstName", "gender", "inOutStatus", "lastName", "prisonerNumber", "status" ]
      },
      "PrisonerLocation" : {
        "type" : "object",
        "description" : "Prisoner Location Information",
        "properties" : {
          "cellLocation" : {
            "type" : "string",
            "description" : "Cell location of the prisoner",
            "example" : "1-1-001"
          },
          "prisoners" : {
            "type" : "array",
            "description" : "list of prisoners in the cell",
            "items" : {
              "$ref" : "#/components/schemas/Prisoner"
            }
          }
        },
        "required" : [ "cellLocation", "prisoners" ]
      },
      "LocationRollCount" : {
        "type" : "object",
        "description" : "Summary of cell usage for this level",
        "properties" : {
          "bedsInUse" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Beds in use"
          },
          "currentlyInCell" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Currently in cell"
          },
          "currentlyOut" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Currently out"
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Working capacity"
          },
          "netVacancies" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Net vacancies"
          },
          "outOfOrder" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Out of order"
          }
        },
        "required" : [ "bedsInUse", "currentlyInCell", "currentlyOut", "netVacancies", "outOfOrder", "workingCapacity" ]
      },
      "PrisonRollCount" : {
        "type" : "object",
        "description" : "Establishment Roll Count",
        "properties" : {
          "prisonId" : {
            "type" : "string",
            "description" : "Prison Id"
          },
          "numUnlockRollToday" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Unlock roll today"
          },
          "numCurrentPopulation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Current population"
          },
          "numArrivedToday" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Arrived today"
          },
          "numInReception" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "In reception"
          },
          "numStillToArrive" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Still to arrive"
          },
          "numOutToday" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Out today"
          },
          "numNoCellAllocated" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "No cell allocated"
          },
          "totals" : {
            "$ref" : "#/components/schemas/LocationRollCount",
            "description" : "Totals"
          },
          "locations" : {
            "type" : "array",
            "description" : "Residential location roll count summary",
            "items" : {
              "$ref" : "#/components/schemas/ResidentialLocationRollCount"
            }
          }
        },
        "required" : [ "locations", "numArrivedToday", "numCurrentPopulation", "numInReception", "numNoCellAllocated", "numOutToday", "numStillToArrive", "numUnlockRollToday", "prisonId", "totals" ]
      },
      "ResidentialLocationRollCount" : {
        "type" : "object",
        "description" : "Residential Prisoner Location Information",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Unique key to this location",
            "example" : "LEI-A-1-001"
          },
          "locationId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "locationCode" : {
            "type" : "string",
            "description" : "Location Code",
            "example" : "001"
          },
          "fullLocationPath" : {
            "type" : "string",
            "description" : "Full path of the location within the prison",
            "example" : "A-1-001"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location, (Not Cells)",
            "example" : "Wing A"
          },
          "certified" : {
            "type" : "boolean",
            "description" : "Indicates that this location is certified for use as a residential location"
          },
          "deactivatedReason" : {
            "type" : "string",
            "description" : "Reason for deactivation",
            "enum" : [ "DAMAGED", "DAMP", "MAINTENANCE", "MOTHBALLED", "PEST", "REFURBISHMENT", "SECURITY_SEALED", "STAFF_SHORTAGE", "OTHER" ],
            "example" : "DAMAGED"
          },
          "rollCount" : {
            "$ref" : "#/components/schemas/LocationRollCount",
            "description" : "Roll count details"
          },
          "subLocations" : {
            "description" : "Sub Locations"
          }
        },
        "required" : [ "certified", "fullLocationPath", "key", "locationCode", "locationId", "locationType", "rollCount" ]
      },
      "LocationSummary" : {
        "type" : "object",
        "description" : "Location Hierarchy Summary",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "ID of location",
            "example" : "c73e8ad1-191b-42b8-bfce-2550cc858dab"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID where the location is situated",
            "example" : "MDI",
            "maxLength" : 5,
            "minLength" : 3,
            "pattern" : "^[A-Z]{2}I|ZZGHI$"
          },
          "code" : {
            "type" : "string",
            "description" : "Code of the location",
            "example" : "001",
            "minLength" : 1
          },
          "type" : {
            "type" : "string",
            "description" : "Location type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "WING"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location",
            "example" : "Wing A"
          },
          "pathHierarchy" : {
            "type" : "string",
            "description" : "Full path of the location within the prison",
            "example" : "A-1-001"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Current Level within hierarchy, starts at 1, e.g Wing = 1",
            "examples" : [ "1", "2", "3" ]
          }
        },
        "required" : [ "code", "level", "pathHierarchy", "prisonId", "type" ]
      },
      "PrisonCellRollCount" : {
        "type" : "object",
        "description" : "Establishment Roll Count for Cells",
        "properties" : {
          "locationHierarchy" : {
            "type" : "array",
            "description" : "Parent locations, top to bottom",
            "items" : {
              "$ref" : "#/components/schemas/LocationSummary"
            }
          },
          "totals" : {
            "$ref" : "#/components/schemas/LocationRollCount",
            "description" : "Totals"
          },
          "locations" : {
            "type" : "array",
            "description" : "Residential location roll count summary",
            "items" : {
              "$ref" : "#/components/schemas/ResidentialLocationRollCount"
            }
          }
        },
        "required" : [ "locationHierarchy", "locations", "totals" ]
      },
      "PageLegacyLocation" : {
        "type" : "object",
        "properties" : {
          "totalElements" : {
            "type" : "integer",
            "format" : "int64"
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32"
          },
          "first" : {
            "type" : "boolean"
          },
          "last" : {
            "type" : "boolean"
          },
          "size" : {
            "type" : "integer",
            "format" : "int32"
          },
          "content" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/LegacyLocation"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32"
          },
          "pageable" : {
            "$ref" : "#/components/schemas/PageableObject"
          },
          "empty" : {
            "type" : "boolean"
          }
        }
      },
      "PageableObject" : {
        "type" : "object",
        "properties" : {
          "offset" : {
            "type" : "integer",
            "format" : "int64"
          },
          "sort" : {
            "$ref" : "#/components/schemas/SortObject"
          },
          "pageSize" : {
            "type" : "integer",
            "format" : "int32"
          },
          "paged" : {
            "type" : "boolean"
          },
          "pageNumber" : {
            "type" : "integer",
            "format" : "int32"
          },
          "unpaged" : {
            "type" : "boolean"
          }
        }
      },
      "SortObject" : {
        "type" : "object",
        "properties" : {
          "empty" : {
            "type" : "boolean"
          },
          "sorted" : {
            "type" : "boolean"
          },
          "unsorted" : {
            "type" : "boolean"
          }
        }
      },
      "CellAttributes" : {
        "type" : "object",
        "description" : "Cell attribute Information",
        "properties" : {
          "code" : {
            "description" : "Attribute Code",
            "example" : "CAT_A"
          },
          "description" : {
            "type" : "string",
            "description" : "Attribute description",
            "example" : "Cat A cell"
          }
        },
        "required" : [ "code", "description" ]
      },
      "PrisonSummary" : {
        "type" : "object",
        "description" : "Prison Summary Information",
        "properties" : {
          "prisonName" : {
            "type" : "string",
            "description" : "Prison name"
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Prison working capacity"
          },
          "signedOperationalCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Prison signed operational capacity"
          },
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Prison max capacity"
          },
          "numberOfCellLocations" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of non-structural locations  e.g. cells and rooms"
          }
        },
        "required" : [ "maxCapacity", "numberOfCellLocations", "prisonName", "signedOperationalCapacity", "workingCapacity" ]
      },
      "ResidentialSummary" : {
        "type" : "object",
        "description" : "Residential Summary",
        "properties" : {
          "prisonSummary" : {
            "$ref" : "#/components/schemas/PrisonSummary",
            "description" : "Prison summary for top level view"
          },
          "topLevelLocationType" : {
            "type" : "string",
            "description" : "The top level type of locations",
            "example" : "Wings"
          },
          "subLocationName" : {
            "type" : "string",
            "description" : "The description of the type of sub locations most common",
            "examples" : [ "Wings", "Landings", "Spurs", "Cells" ]
          },
          "wingStructure" : {
            "type" : "array",
            "description" : "The structure of the wing",
            "items" : {
              "type" : "string",
              "enum" : [ "CELL", "LANDING", "SPUR", "WING" ]
            }
          },
          "locationHierarchy" : {
            "type" : "array",
            "description" : "Parent locations, top to bottom",
            "items" : {
              "$ref" : "#/components/schemas/LocationSummary"
            }
          },
          "parentLocation" : {
            "$ref" : "#/components/schemas/Location",
            "description" : "The current parent location (e.g Wing or Landing) details"
          },
          "subLocations" : {
            "type" : "array",
            "description" : "All residential locations under this parent",
            "items" : {
              "type" : "object",
              "description" : "Location Information",
              "properties" : {
                "id" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "Location Id",
                  "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
                },
                "prisonId" : {
                  "type" : "string",
                  "description" : "Prison ID",
                  "example" : "MDI"
                },
                "code" : {
                  "type" : "string",
                  "description" : "Location Code",
                  "example" : "001"
                },
                "cellMark" : {
                  "type" : "string",
                  "description" : "Cell mark",
                  "example" : "A1"
                },
                "pathHierarchy" : {
                  "type" : "string",
                  "description" : "Full path of the location within the prison",
                  "example" : "A-1-001"
                },
                "locationType" : {
                  "type" : "string",
                  "description" : "Location Type",
                  "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
                  "example" : "CELL"
                },
                "localName" : {
                  "type" : "string",
                  "description" : "Alternative description to display for location, (Not Cells)",
                  "example" : "Wing A"
                },
                "wingStructure" : {
                  "type" : "array",
                  "description" : "The structure of the wing",
                  "items" : {
                    "type" : "string",
                    "enum" : [ "CELL", "LANDING", "SPUR", "WING" ]
                  }
                },
                "comments" : {
                  "type" : "string",
                  "description" : "Additional comments that can be made about this location",
                  "example" : "Not to be used"
                },
                "permanentlyInactive" : {
                  "type" : "boolean",
                  "description" : "Indicates if the location is permanently inactive",
                  "example" : false
                },
                "permanentlyInactiveReason" : {
                  "type" : "string",
                  "description" : "Reason for permanently deactivating",
                  "example" : "Demolished"
                },
                "capacity" : {
                  "$ref" : "#/components/schemas/Capacity",
                  "description" : "Capacity details of the location"
                },
                "pendingChanges" : {
                  "$ref" : "#/components/schemas/PendingChangeDto",
                  "description" : "Pending changes of draft or pending approval location"
                },
                "oldWorkingCapacity" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "When a cell is inactive, show the active working capacity value"
                },
                "certification" : {
                  "$ref" : "#/components/schemas/Certification",
                  "description" : "Indicates that this location is certified for use as a residential location"
                },
                "usage" : {
                  "type" : "array",
                  "description" : "Location Usage",
                  "items" : {
                    "$ref" : "#/components/schemas/NonResidentialUsageDto"
                  }
                },
                "internalMovementAllowed" : {
                  "type" : "boolean",
                  "description" : "Indicates that this location can used for internal movements"
                },
                "accommodationTypes" : {
                  "type" : "array",
                  "description" : "Accommodation Types",
                  "items" : {
                    "type" : "string",
                    "description" : "Accommodation Types",
                    "enum" : [ "CARE_AND_SEPARATION", "HEALTHCARE_INPATIENTS", "NORMAL_ACCOMMODATION", "OTHER_NON_RESIDENTIAL" ]
                  }
                },
                "specialistCellTypes" : {
                  "type" : "array",
                  "description" : "Specialist Cell Types",
                  "items" : {
                    "type" : "string",
                    "description" : "Specialist Cell Types",
                    "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
                  }
                },
                "usedFor" : {
                  "type" : "array",
                  "description" : "Usage For",
                  "items" : {
                    "type" : "string",
                    "description" : "Used For Types",
                    "enum" : [ "CLOSE_SUPERVISION_CENTRE", "SUB_MISUSE_DRUG_RECOVERY", "FIRST_NIGHT_CENTRE", "HIGH_SECURITY", "IPP_LONG_TERM_SENTENCES", "MOTHER_AND_BABY", "OPEN_UNIT", "PATHWAY_TO_PROG", "PERINATAL_UNIT", "PERSONALITY_DISORDER", "PIPE", "REMAND", "SEPARATION_CENTRE", "STANDARD_ACCOMMODATION", "THERAPEUTIC_COMMUNITY", "VULNERABLE_PRISONERS", "YOUNG_PERSONS" ]
                  }
                },
                "status" : {
                  "type" : "string",
                  "description" : "Status of the location",
                  "enum" : [ "ACTIVE", "INACTIVE", "ARCHIVED", "DRAFT", "NON_RESIDENTIAL", "LOCKED_ACTIVE", "LOCKED_INACTIVE", "LOCKED_DRAFT", "LOCKED_NON_RESIDENTIAL" ],
                  "example" : "ACTIVE"
                },
                "locked" : {
                  "type" : "boolean",
                  "description" : "Location is locked",
                  "example" : false
                },
                "convertedCellType" : {
                  "type" : "string",
                  "description" : "Convert Cell Type",
                  "enum" : [ "HOLDING_ROOM", "INTERVIEW_ROOM", "KITCHEN_SERVERY", "LISTENERS_ROOM", "OFFICE", "SHOWER", "STAFF_ROOM", "STORE", "TREATMENT_ROOM", "UTILITY_ROOM", "OTHER" ]
                },
                "otherConvertedCellType" : {
                  "type" : "string",
                  "description" : "Convert Cell Type (Other)"
                },
                "active" : {
                  "type" : "boolean",
                  "deprecated" : true,
                  "description" : "Indicates the location is enabled",
                  "example" : true
                },
                "inCellSanitation" : {
                  "type" : "boolean",
                  "description" : "In-cell sanitation",
                  "example" : true
                },
                "deactivatedByParent" : {
                  "type" : "boolean",
                  "description" : "Indicates the location in inactive as a parent is deactivated",
                  "example" : false
                },
                "deactivatedDate" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Date the location was deactivated",
                  "example" : "2023-01-23T12:23:00"
                },
                "deactivatedReason" : {
                  "type" : "string",
                  "description" : "Reason for deactivation",
                  "enum" : [ "DAMAGED", "DAMP", "MAINTENANCE", "MOTHBALLED", "PEST", "REFURBISHMENT", "SECURITY_SEALED", "STAFF_SHORTAGE", "OTHER" ],
                  "example" : "DAMAGED"
                },
                "deactivationReasonDescription" : {
                  "type" : "string",
                  "description" : "For OTHER deactivation reason, a free text comment is provided",
                  "example" : "Window damage"
                },
                "deactivatedBy" : {
                  "type" : "string",
                  "description" : "Staff username who deactivated the location"
                },
                "proposedReactivationDate" : {
                  "type" : "string",
                  "format" : "date",
                  "description" : "Estimated reactivation date for location reactivation",
                  "example" : "2026-01-24"
                },
                "planetFmReference" : {
                  "type" : "string",
                  "description" : "Planet FM reference number",
                  "example" : "2323/45M"
                },
                "topLevelId" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "Top Level Location Id",
                  "example" : "57718979-573c-433a-9e51-2d83f887c11c"
                },
                "level" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Current Level within hierarchy, starts at 1, e.g Wing = 1",
                  "examples" : [ "1", "2", "3" ]
                },
                "leafLevel" : {
                  "type" : "boolean",
                  "description" : "Indicates this is the lowest level, often a cell",
                  "example" : false
                },
                "parentId" : {
                  "type" : "string",
                  "format" : "uuid",
                  "description" : "Parent Location Id",
                  "example" : "57718979-573c-433a-9e51-2d83f887c11c"
                },
                "parentLocation" : {
                  "description" : "Parent Location",
                  "required" : [ "active", "code", "deactivatedByParent", "id", "leafLevel", "level", "locationType", "locked", "pathHierarchy", "permanentlyInactive", "prisonId", "status", "topLevelId" ]
                },
                "inactiveCells" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Number of inactive cells below this location"
                },
                "numberOfCellLocations" : {
                  "type" : "integer",
                  "format" : "int32",
                  "description" : "Total number of non-structural locations are below this level, e.g. cells and rooms"
                },
                "childLocations" : {
                  "type" : "array",
                  "description" : "Child Locations",
                  "items" : {
                    "description" : "Location Information",
                    "required" : [ "active", "code", "deactivatedByParent", "id", "leafLevel", "level", "locationType", "locked", "pathHierarchy", "permanentlyInactive", "prisonId", "status", "topLevelId" ]
                  }
                },
                "changeHistory" : {
                  "type" : "array",
                  "description" : "History of changes",
                  "items" : {
                    "$ref" : "#/components/schemas/ChangeHistory"
                  }
                },
                "transactionHistory" : {
                  "type" : "array",
                  "description" : "A list of transactions applied to this location",
                  "items" : {
                    "$ref" : "#/components/schemas/TransactionHistory"
                  }
                },
                "lastModifiedBy" : {
                  "type" : "string",
                  "description" : "Staff username who last changed the location"
                },
                "lastModifiedDate" : {
                  "type" : "string",
                  "format" : "date-time",
                  "description" : "Date and time of the last change"
                },
                "key" : {
                  "type" : "string",
                  "description" : "Business Key for a location",
                  "example" : "MDI-A-1-001"
                },
                "isResidential" : {
                  "type" : "boolean",
                  "description" : "Indicates if the location is a residential location",
                  "example" : true
                }
              },
              "required" : [ "active", "code", "deactivatedByParent", "id", "isResidential", "key", "lastModifiedBy", "lastModifiedDate", "leafLevel", "level", "locationType", "locked", "pathHierarchy", "permanentlyInactive", "prisonId", "status", "topLevelId" ]
            }
          }
        },
        "required" : [ "locationHierarchy", "subLocations", "topLevelLocationType" ]
      },
      "PrisonHierarchyDto" : {
        "type" : "object",
        "description" : "Prison hierarchy",
        "properties" : {
          "locationId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Location Id",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location Type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "locationCode" : {
            "type" : "string",
            "description" : "Location Code",
            "example" : "001"
          },
          "fullLocationPath" : {
            "type" : "string",
            "description" : "Full path of the location within the prison",
            "example" : "A-1-001"
          },
          "localName" : {
            "type" : "string",
            "description" : "Alternative description to display for location, (Not Cells)",
            "example" : "Wing A"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Current Level within hierarchy, starts at 1, e.g Wing = 1",
            "examples" : [ "1", "2", "3" ]
          },
          "status" : {
            "type" : "string",
            "description" : "Status of the location",
            "enum" : [ "ACTIVE", "INACTIVE", "ARCHIVED", "DRAFT" ],
            "example" : "ACTIVE"
          },
          "subLocations" : {
            "type" : "array",
            "description" : "Sub residential locations",
            "items" : {
              "description" : "Prison hierarchy",
              "required" : [ "fullLocationPath", "level", "locationCode", "locationId", "locationType", "status" ]
            }
          }
        },
        "required" : [ "fullLocationPath", "level", "locationCode", "locationId", "locationType", "status" ]
      },
      "LocationGroupDto" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string",
            "description" : "Group name",
            "example" : "Block A"
          },
          "key" : {
            "type" : "string",
            "description" : "Group key",
            "example" : "A"
          },
          "children" : {
            "type" : "array",
            "description" : "The child groups of this group",
            "example" : [ {
              "name" : "Landing A/1",
              "key" : "1"
            }, {
              "name" : "Landing A/2",
              "key" : "2"
            } ],
            "items" : {
              "required" : [ "key", "name" ]
            }
          }
        },
        "required" : [ "children", "key", "name" ]
      },
      "CellType" : {
        "type" : "object",
        "description" : "Cell with specialist cell attribute",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "description" : "Specialist Cell Types",
            "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ],
            "title" : "Specialist Cell Type Code"
          },
          "typeDescription" : {
            "type" : "string",
            "title" : "Specialist Cell Type Description"
          }
        },
        "required" : [ "typeCode", "typeDescription" ]
      },
      "CellWithSpecialistCellTypes" : {
        "type" : "object",
        "description" : "Cell with specialist cell attributes details",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "example" : "de91dfa7-821f-4552-a427-bf2f32eafeb0",
            "title" : "Location identifier."
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI"
          },
          "pathHierarchy" : {
            "type" : "string",
            "description" : "Full path of the location within the prison",
            "example" : "A-1-001"
          },
          "noOfOccupants" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 1,
            "title" : "Current occupancy of location."
          },
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 2,
            "title" : "Max capacity of the location."
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "example" : 1,
            "title" : "Working capacity of the location."
          },
          "localName" : {
            "type" : "string",
            "example" : "RES-HB1-ALE",
            "title" : "Local Name of the location."
          },
          "specialistCellTypes" : {
            "type" : "array",
            "example" : [ {
              "typeCode" : "LISTENER_CRISIS",
              "typeDescription" : "Listener / crisis cell"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/CellType"
            },
            "title" : "List of specialist types for the cell."
          },
          "legacyAttributes" : {
            "type" : "array",
            "example" : [ {
              "typeCode" : "DOUBLE_OCCUPANCY",
              "typeDescription" : "Double Occupancy"
            } ],
            "items" : {
              "$ref" : "#/components/schemas/ResidentialLocationAttribute"
            },
            "title" : "List of the old location attributes."
          },
          "prisonersInCell" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/Prisoner"
            },
            "title" : "List prisoners in this cell"
          },
          "key" : {
            "type" : "string",
            "description" : "Business Key for a location",
            "example" : "MDI-A-1-001"
          }
        },
        "required" : [ "id", "key", "legacyAttributes", "maxCapacity", "noOfOccupants", "pathHierarchy", "prisonId", "prisonersInCell", "specialistCellTypes", "workingCapacity" ]
      },
      "ResidentialLocationAttribute" : {
        "type" : "object",
        "description" : "Cell with old location attribute",
        "properties" : {
          "typeCode" : {
            "type" : "string",
            "enum" : [ "ANTI_BARRICADE_DOOR", "AUDITABLE_CELL_BELL", "FIXED_BED", "METAL_DOOR", "MOVABLE_BED", "PRIVACY_CURTAIN", "PRIVACY_SCREEN", "STANDARD_CELL_BELL", "SEPARATE_TOILET", "WOODEN_DOOR", "CAT_A_CELL", "DOUBLE_OCCUPANCY", "E_LIST_CELL", "GATED_CELL", "LISTENER_CELL", "LOCATE_FLAT", "MULTIPLE_OCCUPANCY", "NON_SMOKER_CELL", "OBSERVATION_CELL", "SAFE_CELL", "SINGLE_OCCUPANCY", "SPECIAL_CELL", "WHEELCHAIR_ACCESS", "UNCONVICTED_JUVENILES", "SENTENCED_JUVENILES", "UNCONVICTED_18_20", "SENTENCED_18_20", "UNCONVICTED_ADULTS", "SENTENCED_ADULTS", "VULNERABLE_PRISONER_UNIT", "SPECIAL_UNIT", "RESETTLEMENT_HOSTEL", "HEALTHCARE_CENTRE", "NATIONAL_RESOURCE_HOSPITAL", "OTHER_SPECIFIED", "REMAND_CENTRE", "LOCAL_PRISON", "CLOSED_PRISON", "OPEN_TRAINING", "HOSTEL", "CLOSED_YOUNG_OFFENDER", "OPEN_YOUNG_OFFENDER", "REMAND_UNDER_18", "SENTENCED_UNDER_18", "ECL_COMPONENT", "ADDITIONAL_SPECIAL_UNIT", "SECOND_CLOSED_TRAINER", "IMMIGRATION_DETAINEES", "CELL", "LANDING", "WING", "CAT_A", "CAT_A_EX", "CAT_A_HI", "CAT_B", "CAT_C", "CAT_D", "ELIGIBLE", "PAROLE_GRANTED", "INELIGIBLE", "YOI_CLOSED", "YOI_OPEN", "YOI_RESTRICTED", "YOI_SHORT_SENTENCE", "YOI_LONG_TERM_CLOSED", "UNCLASSIFIED", "UNCATEGORISED_SENTENCED_MALE", "LOW", "MEDIUM", "HIGH", "NOT_APPLICABLE", "PROV_A", "PENDING", "REF_REVIEW", "REFUSED_NO_REVIEW", "STANDARD", "FEMALE_RESTRICTED", "FEMALE_CLOSED", "FEMALE_SEMI", "FEMALE_OPEN", "UN_SENTENCED", "YES", "NO" ],
            "title" : "Attribute Type Code"
          },
          "typeDescription" : {
            "type" : "string",
            "title" : "Attribute Type Description"
          }
        },
        "required" : [ "typeCode", "typeDescription" ]
      },
      "DashboardDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "loadType" : {
            "type" : "string",
            "enum" : [ "sync", "async" ]
          }
        },
        "required" : [ "id", "name" ]
      },
      "ReportDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VariantDefinitionSummary"
            }
          },
          "dashboards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardDefinitionSummary"
            }
          },
          "authorised" : {
            "type" : "boolean"
          }
        },
        "required" : [ "authorised", "id", "name", "variants" ]
      },
      "VariantDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "isMissing" : {
            "type" : "boolean"
          },
          "loadType" : {
            "type" : "string",
            "enum" : [ "sync", "async" ]
          }
        },
        "required" : [ "id", "isMissing", "name" ]
      },
      "ChildVariantDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "specification" : {
            "$ref" : "#/components/schemas/Specification"
          },
          "joinFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "id", "joinFields", "name", "resourceName" ]
      },
      "DynamicFilterOption" : {
        "type" : "object",
        "properties" : {
          "minimumLength" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "FieldDefinition" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "wordWrap" : {
            "type" : "string",
            "enum" : [ "none", "normal", "break-words" ]
          },
          "filter" : {
            "$ref" : "#/components/schemas/FilterDefinition"
          },
          "sortable" : {
            "type" : "boolean"
          },
          "defaultsort" : {
            "type" : "boolean"
          },
          "sortDirection" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "boolean", "date", "double", "HTML", "long", "string", "time" ]
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "visible" : {
            "type" : "boolean"
          },
          "calculated" : {
            "type" : "boolean"
          },
          "header" : {
            "type" : "boolean"
          }
        },
        "required" : [ "calculated", "defaultsort", "display", "header", "mandatory", "name", "sortable", "type", "visible" ]
      },
      "FilterDefinition" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Radio", "Select", "multiselect", "daterange", "autocomplete", "text", "date", "granulardaterange" ]
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "pattern" : {
            "type" : "string"
          },
          "staticOptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilterOption"
            }
          },
          "dynamicOptions" : {
            "$ref" : "#/components/schemas/DynamicFilterOption"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "min" : {
            "type" : "string"
          },
          "max" : {
            "type" : "string"
          },
          "interactive" : {
            "type" : "boolean"
          },
          "defaultGranularity" : {
            "type" : "string",
            "enum" : [ "hourly", "daily", "weekly", "monthly", "quarterly", "annually" ]
          },
          "defaultQuickFilterValue" : {
            "type" : "string",
            "enum" : [ "today", "yesterday", "last-seven-days", "last-thirty-days", "last-month", "last-full-month", "last-ninety-days", "last-three-months", "last-full-three-months", "last-year", "last-full-year", "tomorrow", "next-seven-days", "next-thirty-days", "next-month", "next-full-month", "next-ninety-days", "next-three-months", "next-full-three-months", "next-year", "next-full-year" ]
          }
        },
        "required" : [ "mandatory", "type" ]
      },
      "FilterOption" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          }
        },
        "required" : [ "display", "name" ]
      },
      "ReportSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "template" : {
            "type" : "string",
            "enum" : [ "table-header", "table-footer", "section-header", "section-footer", "page-header", "page-footer" ]
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SummaryField"
            }
          }
        },
        "required" : [ "fields", "id", "template" ]
      },
      "SingleVariantReportDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "variant" : {
            "$ref" : "#/components/schemas/VariantDefinition"
          }
        },
        "required" : [ "id", "name", "variant" ]
      },
      "Specification" : {
        "type" : "object",
        "properties" : {
          "template" : {
            "type" : "string",
            "enum" : [ "list", "list-section", "list-tab", "summary", "summary-section", "parent-child", "parent-child-section", "row-section", "row-section-child" ]
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "fields", "sections", "template" ]
      },
      "SummaryField" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "boolean", "date", "double", "HTML", "long", "string", "time" ]
          },
          "header" : {
            "type" : "boolean"
          },
          "mergeRows" : {
            "type" : "boolean"
          }
        },
        "required" : [ "name" ]
      },
      "VariantDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "specification" : {
            "$ref" : "#/components/schemas/Specification"
          },
          "classification" : {
            "type" : "string"
          },
          "printable" : {
            "type" : "boolean"
          },
          "summaries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportSummary"
            }
          },
          "interactive" : {
            "type" : "boolean"
          },
          "childVariants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChildVariantDefinition"
            }
          }
        },
        "required" : [ "id", "name", "resourceName" ]
      },
      "DashboardDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardSectionDefinition"
            }
          },
          "filterFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          }
        },
        "required" : [ "id", "name", "sections" ]
      },
      "DashboardSectionDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "visualisations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationDefinition"
            }
          }
        },
        "required" : [ "id", "visualisations" ]
      },
      "DashboardVisualisationColumnDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "aggregate" : {
            "type" : "string",
            "enum" : [ "sum", "average" ]
          },
          "unit" : {
            "type" : "string",
            "enum" : [ "NUMBER", "PERCENTAGE" ]
          },
          "displayValue" : {
            "type" : "boolean"
          },
          "axis" : {
            "type" : "string"
          }
        },
        "required" : [ "display", "id" ]
      },
      "DashboardVisualisationColumnsDefinition" : {
        "type" : "object",
        "properties" : {
          "keys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationColumnDefinition"
            }
          },
          "measures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationColumnDefinition"
            }
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ValueVisualisationColumnDefinition"
            }
          },
          "expectNulls" : {
            "type" : "boolean"
          }
        },
        "required" : [ "expectNulls", "measures" ]
      },
      "DashboardVisualisationDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "list", "doughnut", "bar", "bar-timeseries", "line", "scorecard", "scorecard-group" ]
          },
          "display" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "columns" : {
            "$ref" : "#/components/schemas/DashboardVisualisationColumnsDefinition"
          }
        },
        "required" : [ "columns", "id", "type" ]
      },
      "ValueVisualisationColumnDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "equals" : {
            "type" : "string"
          }
        },
        "required" : [ "equals", "id" ]
      },
      "Constant" : {
        "type" : "object",
        "description" : "Reference data information",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Code of reference information",
            "example" : "ACCESSIBLE_CELL"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of reference code",
            "example" : "Accessible cell"
          },
          "attributes" : {
            "type" : "object",
            "additionalProperties" : { }
          },
          "additionalInformation" : {
            "type" : "string",
            "description" : "Additional information about this reference code",
            "example" : "Some useful extra info"
          }
        },
        "required" : [ "description", "key" ]
      },
      "CompoundConstant" : {
        "type" : "object",
        "description" : "Reference data information",
        "properties" : {
          "key" : {
            "type" : "string",
            "description" : "Code of reference information",
            "example" : "ACCESSIBLE_CELL"
          },
          "description" : {
            "type" : "string",
            "description" : "Description of reference code",
            "example" : "Accessible cell"
          },
          "values" : {
            "type" : "array",
            "description" : "Sub list of reference data values",
            "items" : {
              "$ref" : "#/components/schemas/Constant"
            }
          }
        },
        "required" : [ "description", "key", "values" ]
      },
      "CellCertificateDto" : {
        "type" : "object",
        "description" : "Cell Certificate",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "ID of the cell certificate",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "Prison ID",
            "example" : "MDI"
          },
          "approvedBy" : {
            "type" : "string",
            "description" : "Who approved the certificate",
            "example" : "USER1"
          },
          "approvedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the certificate was approved",
            "example" : "2023-01-01T12:00:00"
          },
          "certificationApprovalRequestId" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "ID of the certification approval request",
            "example" : "2475f250-434a-4257-afe7-b911f1773a4d"
          },
          "totalWorkingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total working capacity for the prison",
            "example" : 100
          },
          "totalMaxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total max capacity for the prison",
            "example" : 120
          },
          "totalCertifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total capacity of certified cells for the prison",
            "example" : 110
          },
          "current" : {
            "type" : "boolean",
            "description" : "Whether this is the current certificate",
            "example" : true
          },
          "approvedRequest" : {
            "$ref" : "#/components/schemas/CertificationApprovalRequestDto",
            "description" : "The approval request that created the certificate"
          },
          "locations" : {
            "type" : "array",
            "description" : "Locations in the certificate",
            "items" : {
              "$ref" : "#/components/schemas/CellCertificateLocationDto"
            }
          }
        },
        "required" : [ "approvedBy", "approvedDate", "approvedRequest", "certificationApprovalRequestId", "current", "id", "locations", "prisonId", "totalCertifiedNormalAccommodation", "totalMaxCapacity", "totalWorkingCapacity" ]
      },
      "CellCertificateLocationDto" : {
        "type" : "object",
        "description" : "Cell Certificate Location",
        "properties" : {
          "locationCode" : {
            "type" : "string",
            "description" : "Location code",
            "example" : "001"
          },
          "pathHierarchy" : {
            "type" : "string",
            "description" : "Path hierarchy",
            "example" : "A-1-001"
          },
          "certifiedNormalAccommodation" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Capacity of certified cell",
            "example" : 2
          },
          "workingCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Working capacity",
            "example" : 1
          },
          "maxCapacity" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Max capacity",
            "example" : 2
          },
          "inCellSanitation" : {
            "type" : "boolean",
            "description" : "Whether the cell has in-cell sanitation",
            "example" : true
          },
          "locationType" : {
            "type" : "string",
            "description" : "Location type",
            "enum" : [ "WING", "SPUR", "LANDING", "CELL", "ROOM", "HOLDING_AREA", "MOVEMENT_AREA", "RESIDENTIAL_UNIT", "EXTERNAL_GROUNDS", "HOLDING_CELL", "MEDICAL", "GROUP", "OFFICE", "ADMINISTRATION_AREA", "BOOTH", "BOX", "RETURN_TO_UNIT", "CLASSROOM", "TRAINING_AREA", "TRAINING_ROOM", "EXERCISE_AREA", "AREA", "SPORTS", "WORKSHOP", "INSIDE_PARTY", "OUTSIDE_PARTY", "FAITH_AREA", "ADJUDICATION_ROOM", "APPOINTMENTS", "VISITS", "VIDEO_LINK", "ASSOCIATION", "INTERNAL_GROUNDS", "INTERVIEW", "LOCATION", "POSITION", "SHELF", "STORE", "TABLE" ],
            "example" : "CELL"
          },
          "specialistCellTypes" : {
            "type" : "array",
            "description" : "Specialist cell types",
            "items" : {
              "type" : "string",
              "description" : "Specialist Cell Types",
              "enum" : [ "ACCESSIBLE_CELL", "BIOHAZARD_DIRTY_PROTEST", "CSU", "CAT_A", "CONSTANT_SUPERVISION", "DRY", "ESCAPE_LIST", "ISOLATION_DISEASES", "LISTENER_CRISIS", "LOCATE_FLAT_CELL", "MEDICAL", "MOTHER_AND_BABY", "SAFE_CELL", "UNFURNISHED" ]
            }
          },
          "localName" : {
            "type" : "string",
            "description" : "Local name for the location, not used in cells",
            "example" : "Houseblock A"
          },
          "cellMark" : {
            "type" : "string",
            "description" : "Cell mark",
            "example" : "T-01"
          },
          "level" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Level within the hierarchy",
            "example" : 3
          },
          "convertedCellType" : {
            "type" : "string",
            "description" : "If converted, the type of cell this location has been converted to",
            "enum" : [ "HOLDING_ROOM", "INTERVIEW_ROOM", "KITCHEN_SERVERY", "LISTENERS_ROOM", "OFFICE", "SHOWER", "STAFF_ROOM", "STORE", "TREATMENT_ROOM", "UTILITY_ROOM", "OTHER" ]
          },
          "subLocations" : {
            "description" : "Sub locations within this cell certificate location"
          }
        },
        "required" : [ "level", "locationCode", "locationType", "pathHierarchy", "specialistCellTypes" ]
      }
    },
    "securitySchemes" : {
      "bearer-jwt" : {
        "type" : "http",
        "name" : "Authorization",
        "in" : "header",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "hmpps-auth" : {
        "type" : "oauth2",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes" : {
              "read" : "Allows read of data",
              "write" : "Allows write of data"
            }
          },
          "authorizationCode" : {
            "authorizationUrl" : "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/authorize",
            "tokenUrl" : "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes" : {
              "read" : "Allows read of data",
              "write" : "Allows write of data"
            }
          }
        },
        "openIdConnectUrl" : "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/.well-known/openid-configuration"
      }
    }
  }
}