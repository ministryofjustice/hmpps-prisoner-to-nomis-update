{
  "openapi": "3.0.1",
  "info": {
    "title": "Activities management API",
    "description": "API for management of prisoner activities",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2023-05-02.5452.809e035"
  },
  "servers": [
    {
      "url": "https://activities-api-dev.prison.service.justice.gov.uk",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/scheduled-instances/{instanceId}/uncancel": {
      "put": {
        "tags": [
          "scheduled-instance-controller"
        ],
        "summary": "Un-cancels a scheduled instance.",
        "description": "Un-cancels a previously cancelled scheduled instance.",
        "operationId": "uncancelScheduledInstance",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UncancelScheduledInstanceRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found, the scheduled instance does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The scheduled instance is not cancelled or it is in the past",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "The scheduled instance was successfully un cancelled."
          }
        }
      }
    },
    "/scheduled-instances/{instanceId}/cancel": {
      "put": {
        "tags": [
          "scheduled-instance-controller"
        ],
        "summary": "Cancel a scheduled instance",
        "description": "Cancels scheduled instance and associated attendance records",
        "operationId": "cancelScheduledInstance",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ScheduleInstanceCancelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "The scheduled instance was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Scheduled instance successfully cancelled",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-dlq/{dlqName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryDlq",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RetryDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-all-dlqs": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryAllDlqs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetryDlqResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/purge-queue/{queueName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "purgeQueue",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeQueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/attendances": {
      "put": {
        "tags": [
          "attendance-controller"
        ],
        "summary": "Updates attendance records.",
        "description": "Updates the given attendance records with the supplied update request details. Requires the 'ACTIVITY_ADMIN' role.",
        "operationId": "markAttendances",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttendanceUpdateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The attendance records were updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-occurrences/{appointmentOccurrenceId}/cancel": {
      "put": {
        "tags": [
          "appointment-occurrence-controller"
        ],
        "summary": "Cancel an appointment occurrence or series of appointment occurrences",
        "description": "\n    Cancel an appointment occurrence or series of appointment occurrences based on the applyTo property.\n    Does not require any specific roles\n    ",
        "operationId": "cancelAppointmentOccurrence",
        "parameters": [
          {
            "name": "appointmentOccurrenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentOccurrenceCancelRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "The appointment occurrence for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202": {
            "description": "The appointment occurrence or series of appointment occurrences was cancelled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduleId}/allocations": {
      "get": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Get a list of activity schedule allocations",
        "description": "Returns zero or more activity schedule allocations.",
        "operationId": "getAllocationsBy",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "If true will only return active allocations. Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The allocations for an activity schedule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Allocation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schedule ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Allocate offender to schedule",
        "description": "Allocates the supplied offender allocation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].",
        "operationId": "allocate",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrisonerAllocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The allocation was created and added to the schedule.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The activity schedule for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-events/prison/{prisonCode}": {
      "get": {
        "tags": [
          "scheduled-event-controller"
        ],
        "summary": "Get a list of scheduled events for a prison, prisoner, date range (max 3 months) and optional time slot.",
        "description": "\n      Returns scheduled events for the prison, prisoner, date range (max 3 months) and optional time slot.\n      Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).\n      Activities and appointments come from either NOMIS or the local database depending on whether the prison is\n      marked as active for appointments and/or activities.\n      (Intended usage: Prisoner calendar / schedule)\n    ",
        "operationId": "getScheduledEventsForSinglePrisoner",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "description": "The 3-digit prison code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prisonerNumber",
            "in": "query",
            "description": "Prisoner number (required). Format A9999AA.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of query (required). Format YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of query (required). Format YYYY-MM-DD. The end date must be within 3 months of the start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "Time slot for the events (optional). If supplied, one of AM, PM or ED.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful call - zero or more scheduled events found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerScheduledEvents"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scheduled-event-controller"
        ],
        "summary": "Get a list of scheduled events for a prison and list of prisoner numbers for a date and time slot",
        "description": "\n      Returns scheduled events for the prison, prisoner numbers, single date and an optional time slot.\n      Court hearings, adjudication hearings, transfers and visits come from NOMIS (via prison API).\n      Activities and appointments come from either NOMIS or the local database depending on whether the prison is\n      marked as rolled-out for activities and/or appointments.\n      (Intended usage: Unlock list)\n    ",
        "operationId": "getScheduledEventsForMultiplePrisoners",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "description": "The 3-character prison code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The exact date to return events for (required) in format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "Time slot of the events (optional). If supplied, one of AM, PM or ED.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "Set of prisoner numbers (required). Example ['G11234YI', 'B5234YI'].",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful call - zero or more scheduled events found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerScheduledEvents"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisons/{prisonCode}/prisoner-allocations": {
      "post": {
        "tags": [
          "prisoner-allocation-controller"
        ],
        "summary": "Get all allocations for prisoners",
        "description": "Returns zero or more allocations for the supplied list of prisoners.",
        "operationId": "prisonerAllocations",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "If true will only return active allocations. Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required prisoner numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The allocations for the prisoners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerAllocations"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/job/manage-allocations": {
      "post": {
        "tags": [
          "job-trigger-controller"
        ],
        "summary": "Trigger the job to manage allocations",
        "description": "Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.",
        "operationId": "triggerManageAllocationsJob",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/job/create-scheduled-instances": {
      "post": {
        "tags": [
          "job-trigger-controller"
        ],
        "summary": "Trigger the job to create the scheduled instances in advance for the active schedules on activities",
        "description": "Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.",
        "operationId": "triggerCreateScheduledInstancesJob",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/job/create-attendance-records": {
      "post": {
        "tags": [
          "job-trigger-controller"
        ],
        "summary": "Trigger the job to create attendance records in advance",
        "description": "Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.",
        "operationId": "triggerCreateAttendanceRecordsJob",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/bulk-appointments": {
      "post": {
        "tags": [
          "bulk-appointment-controller"
        ],
        "summary": "Bulk create a set of appointments",
        "description": "\n    Create a list of appointments and allocate the supplied prisoner or prisoners to them.\n    Does not require any specific roles\n    ",
        "operationId": "bulkCreateAppointment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BulkAppointmentsRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "The appointments were created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BulkAppointment"
                }
              }
            }
          }
        }
      }
    },
    "/audit/search": {
      "post": {
        "tags": [
          "audit-controller"
        ],
        "summary": "Search for audit records",
        "description": "Returns all records that match the search criteria.",
        "operationId": "getAuditRecords",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 3
            }
          },
          {
            "name": "sortDirection",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "default": ""
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuditRecordSearchFilters"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Search performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": [
          "appointment-controller"
        ],
        "summary": "Create an appointment or series of appointment occurrences",
        "description": "\n    Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.\n    Does not require any specific roles\n    ",
        "operationId": "createAppointment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "The appointment or series of appointment occurrences was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-occurrences/{prisonCode}/search": {
      "post": {
        "tags": [
          "appointment-occurrence-controller"
        ],
        "summary": "Search for appointment occurrences within the specified prison",
        "description": "\n    Uses the supplied prison code and search parameters to filter and return appointment occurrence search results.\n    Does not require any specific roles\n    ",
        "operationId": "searchAppointmentOccurrences",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentOccurrenceSearchRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202": {
            "description": "Prison code and search parameters were accepted and results returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentOccurrenceSearchResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "post": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Create an activity",
        "description": "Create an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The activity was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-occurrences/{appointmentOccurrenceId}": {
      "patch": {
        "tags": [
          "appointment-occurrence-controller"
        ],
        "summary": "Update an appointment occurrence or series of appointment occurrences",
        "description": "\n    Update an appointment occurrence or series of appointment occurrences based on the applyTo property.\n    Does not require any specific roles\n    ",
        "operationId": "updateAppointmentOccurrence",
        "parameters": [
          {
            "name": "appointmentOccurrenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentOccurrenceUpdateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "The appointment occurrence for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "202": {
            "description": "The appointment occurrence or series of appointment occurrences was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          }
        }
      }
    },
    "/synchronisation/attendance/{attendanceId}": {
      "get": {
        "tags": [
          "synchronisation-controller"
        ],
        "summary": "Retrieves Nomis synchronisation details",
        "description": "Retrieves all details required in order to synchronise an attendance with the Nomis database. Requires role NOMIS_ACTIVITIES",
        "operationId": "getAttendanceSync",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "path",
            "description": "Attendance id",
            "required": true,
            "schema": {
              "type": "string",
              "description": "Attendance id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttendanceSync"
                }
              }
            }
          },
          "400": {
            "description": "There was an error with the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized to access this endpoint",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires role NOMIS_ACTIVITIES",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Attendance not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduleId}": {
      "get": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Get an activity schedule by its id",
        "description": "Returns a single activity schedule by its unique identifier.",
        "operationId": "getScheduleId",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The activity for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitySchedule"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduleId}/candidates": {
      "get": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Get the suitable candidates for an activity",
        "description": "Returns a paginated view of the list of candidates suitable for a given activity schedule. Filterable by employment status, workplace risk assessment, and incentive level. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].",
        "operationId": "candidates",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "suitableIncentiveLevel",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "suitableRiskLevel",
            "in": "query",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "suitableForEmployed",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "Zero-based page index (0..N)",
            "required": false,
            "schema": {
              "minimum": 0,
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "size",
            "in": "query",
            "description": "The size of the page to be returned",
            "required": false,
            "schema": {
              "minimum": 1,
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of candidates was returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PageActivityCandidate"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The activity schedule for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{activityScheduleId}/capacity": {
      "get": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity schedule",
        "operationId": "getActivityScheduleCapacity",
        "parameters": [
          {
            "name": "activityScheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Schedule ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity schedule capacity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapacityAndAllocated"
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-instances/{instanceId}": {
      "get": {
        "tags": [
          "scheduled-instance-controller"
        ],
        "summary": "Get a scheduled instance by ID",
        "description": "Returns a scheduled instance.",
        "operationId": "getScheduledInstanceById",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The scheduled instance was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Scheduled instance found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityScheduleInstance"
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-instances/{instanceId}/attendances": {
      "get": {
        "tags": [
          "scheduled-instance-controller"
        ],
        "summary": "Get a list of attendances for a scheduled instance",
        "description": "Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.",
        "operationId": "getAttendancesByScheduledInstance",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The scheduled instance was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Attendance records found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attendance"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rollout/{prisonCode}": {
      "get": {
        "tags": [
          "rollout-controller"
        ],
        "summary": "Get a prison's rollout plan by prison code",
        "description": "Returns a single prison and its activities management service rollout plan by its unique code.",
        "operationId": "getPrisonByCode",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Prison rollout plan found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutPrisonPlan"
                }
              }
            }
          },
          "404": {
            "description": "The prison for this code was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/get-dlq-messages/{dlqName}": {
      "get": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "getDlqMessages",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxMessages",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/prisons/{prisonCode}/scheduled-instances": {
      "get": {
        "tags": [
          "activity-schedule-instance-controller"
        ],
        "summary": "Get a list of scheduled instances for a prison, date range (max 3 months) and time slot (AM, PM or ED - optional)",
        "description": "Returns zero or more scheduled instances for a prison and date range (max 3 months).",
        "operationId": "getActivityScheduleInstancesByDateRange",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "description": "The 3-character prison code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of query (required). Format YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of query (required). The end date must be within 3 months of the start date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "slot",
            "in": "query",
            "description": "The time slot (optional). If supplied, one of AM, PM or ED.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful call - zero or more scheduled instance records found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityScheduleInstance"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/schedules": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get a list of activity schedules at a given prison",
        "description": "Returns zero or more activity schedules at a given prison.",
        "operationId": "getSchedulesByPrisonCode",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of activity, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The internal NOMIS location id of the activity",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity schedules found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivitySchedule"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/prison-pay-bands": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get a list of pay bands at a given prison",
        "description": "Returns the pay bands at a given prison or a default list of values if none present.",
        "operationId": "getPrisonPayBands",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prison pay bands found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonPayBand"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/locations": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get scheduled prison locations",
        "description": "Returns a list of zero or more scheduled prison locations for the supplied criteria.",
        "operationId": "getScheduledPrisonLocations",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of activity, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Locations found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InternalLocation"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/activity-categories/{categoryId}/capacity": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity category within a prison",
        "operationId": "getActivityCategoryCapacity",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity category capacity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapacityAndAllocated"
                }
              }
            }
          },
          "404": {
            "description": "Category ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/activity-categories/{categoryId}/activities": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get list of activities within a category at a specified prison",
        "operationId": "getActivitiesInCategory",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activities within the category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityLite"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/activities": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get list of activities at a specified prison",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityLite"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/prison-regime/{prisonCode}": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get a prison regime by its code",
        "description": "Returns a single prison regime and its details by its unique prison code.",
        "operationId": "getPrisonRegimeByPrisonCode",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Prison regime found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonRegime"
                }
              }
            }
          },
          "404": {
            "description": "The prison regime for this prison code was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonCode}": {
      "get": {
        "tags": [
          "location-controller"
        ],
        "summary": "List of cell locations for a prison group supplied as a query parameter",
        "description": "List of cell locations for a prison group supplied as a query parameter",
        "operationId": "getCellLocationsForGroup",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call - zero or more cell locations found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonCode}/location-prefix": {
      "get": {
        "tags": [
          "location-controller"
        ],
        "summary": "Get the location prefix for a location group supplied as a query parameter",
        "description": "Get location prefix for a location group name supplied as a query parameter",
        "operationId": "getLocationPrefixForGroup",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful call - Location prefix found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationPrefixDto"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonCode}/location-groups": {
      "get": {
        "tags": [
          "location-controller"
        ],
        "summary": "List of all available location groups defined at a prison",
        "description": "List of all available location groups defined at a prison",
        "operationId": "getLocationGroups",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Successful call - zero or more location groups found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attendances/{attendanceId}": {
      "get": {
        "tags": [
          "attendance-controller"
        ],
        "summary": "Get an attendance by ID",
        "description": "Returns an attendance.",
        "operationId": "getAttendanceById",
        "parameters": [
          {
            "name": "attendanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The attendance was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Attendance found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Attendance"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/attendance-reasons": {
      "get": {
        "tags": [
          "attendance-reason-controller"
        ],
        "summary": "Get the list of attendance reasons",
        "operationId": "getAttendanceReasons",
        "responses": {
          "200": {
            "description": "Attendance reasons found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AttendanceReason"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "appointment-controller"
        ],
        "summary": "Get an appointment by its id",
        "description": "Returns an appointment and its details by its unique identifier.",
        "operationId": "getAppointmentById",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The appointment for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Appointment found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-occurrence-details/{appointmentOccurrenceId}": {
      "get": {
        "tags": [
          "appointment-occurrence-details-controller"
        ],
        "summary": "Gets the appointment occurrence details for display purposes identified by the appointment occurrence's id",
        "description": "Returns the displayable details of an appointment occurrence by its unique identifier.",
        "operationId": "getAppointmentOccurrenceDetailsById",
        "parameters": [
          {
            "name": "appointmentOccurrenceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The appointment occurrence for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Appointment Occurrence found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentOccurrenceDetails"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-locations/{prisonCode}": {
      "get": {
        "tags": [
          "appointment-location-controller"
        ],
        "summary": "Get the list of appointment locations",
        "operationId": "getAppointmentLocations",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment locations found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentLocationSummary"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-instances/{appointmentInstanceId}": {
      "get": {
        "tags": [
          "appointment-instance-controller"
        ],
        "summary": "Get an appointment instance by its id",
        "description": "Returns an appointment instance and its details by its unique identifier.",
        "operationId": "getAppointmentInstanceById",
        "parameters": [
          {
            "name": "appointmentInstanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The appointment instance for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Appointment instance found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentInstance"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-details/{appointmentId}": {
      "get": {
        "tags": [
          "appointment-details-controller"
        ],
        "summary": "Gets the top level appointment details for display purposes identified by the appointment's id",
        "description": "Returns the displayable details of an appointment by its unique identifier.",
        "operationId": "getAppointmentDetailsById",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The appointment for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Appointment found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AppointmentDetails"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-categories": {
      "get": {
        "tags": [
          "appointment-category-controller"
        ],
        "summary": "Get the list of appointment categories",
        "operationId": "getAppointmentCategories",
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Appointment categories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentCategorySummary"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/allocations/id/{allocationId}": {
      "get": {
        "tags": [
          "allocation-controller"
        ],
        "summary": "Get an allocation by its id",
        "description": "Returns a single allocation and its details by its unique identifier.",
        "operationId": "getAllocationById",
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "allocation found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                }
              }
            }
          },
          "404": {
            "description": "The allocation for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activity-categories": {
      "get": {
        "tags": [
          "activity-category-controller"
        ],
        "summary": "Get the list of top-level activity categories",
        "operationId": "getCategories",
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity categories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityCategory"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get an activity by its id",
        "description": "Returns a single activity and its details by its unique identifier.",
        "operationId": "getActivityById",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "404": {
            "description": "The activity for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/schedules": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity",
        "operationId": "getActivitySchedules",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Activity ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityScheduleLite"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/capacity": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity",
        "operationId": "getActivityCapacity",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Activity ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity capacity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapacityAndAllocated"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UncancelScheduledInstanceRequest": {
        "required": [
          "displayName",
          "username"
        ],
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The username of the user performing the unschedule operation",
            "example": "RJ56DDE"
          },
          "displayName": {
            "type": "string",
            "description": "The displayName of the user performing the unschedule operation",
            "example": "Bob Adams"
          }
        },
        "description": "The uncancel request with the user details"
      },
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "ScheduleInstanceCancelRequest": {
        "required": [
          "reason",
          "username"
        ],
        "type": "object",
        "properties": {
          "reason": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The reason for cancelling the schedule instance",
            "example": "No tutor available"
          },
          "username": {
            "type": "string",
            "description": "The username of the user cancelling the schedule instance",
            "example": "RJ56DDE"
          },
          "comment": {
            "type": "string",
            "description": "A field for any additional comments",
            "example": "Resume tomorrow"
          }
        },
        "description": "The scheduled instance cancellation request"
      },
      "DlqMessage": {
        "required": [
          "body",
          "messageId"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "messageId": {
            "type": "string"
          }
        }
      },
      "RetryDlqResult": {
        "required": [
          "messages",
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DlqMessage"
            }
          }
        }
      },
      "PurgeQueueResult": {
        "required": [
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AttendanceUpdateRequest": {
        "required": [
          "id",
          "prisonCode",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this attendance",
            "format": "int64",
            "example": 123456
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code",
            "example": "MDI"
          },
          "status": {
            "type": "string",
            "description": "The status - WAITING, COMPLETED, LOCKED",
            "example": "WAITING",
            "enum": [
              "WAITING",
              "COMPLETED",
              "LOCKED"
            ]
          },
          "attendanceReason": {
            "type": "string",
            "description": "The reason codes- SICK, REFUSED, NOT_REQUIRED, REST, CLASH, OTHER, SUSPENDED, CANCELLED, ATTENDED",
            "example": "ATTENDED"
          },
          "comment": {
            "type": "string",
            "description": "Comments such as more detail for SICK",
            "example": "Prisoner has COVID-19"
          },
          "issuePayment": {
            "type": "boolean",
            "description": "Should payment be issued for SICK, REST or OTHER",
            "example": true
          },
          "payAmount": {
            "type": "integer",
            "description": "The payment amount in pence",
            "format": "int32",
            "example": 100
          },
          "caseNote": {
            "type": "string",
            "description": "Case note provided for REFUSED",
            "example": "Prisoner refused to attend the scheduled activity without reasonable excuse"
          },
          "incentiveLevelWarningIssued": {
            "type": "boolean",
            "description": "Was an incentive level warning issued for REFUSED",
            "example": true
          },
          "otherAbsenceReason": {
            "type": "string",
            "description": "The absence reason for OTHER",
            "example": "Prisoner has another reason for missing the activity"
          }
        },
        "description": "Request object for updating an attendance record"
      },
      "AppointmentOccurrenceCancelRequest": {
        "required": [
          "applyTo",
          "cancellationReasonId"
        ],
        "type": "object",
        "properties": {
          "cancellationReasonId": {
            "type": "integer",
            "description": "\n    Specifies the id of the reason for the cancellation. The cancellation reason, identified byt this ID, will determine \n    whether the cancellation is also treated as a soft delete\n    ",
            "format": "int64",
            "example": 1234
          },
          "applyTo": {
            "type": "string",
            "description": "\n    Specifies which appointment occurrence or occurrences this cancellation should apply to.\n    Defaults to THIS_OCCURRENCE meaning the cancellation will be applied to the appointment occurrence specified by the\n    supplied id only.\n    ",
            "example": "THIS_OCCURRENCE",
            "enum": [
              "THIS_OCCURRENCE",
              "THIS_AND_ALL_FUTURE_OCCURRENCES",
              "ALL_FUTURE_OCCURRENCES"
            ]
          }
        },
        "description": "The cancel request with the appointment occurrence details and how to apply the cancellation"
      },
      "Appointment": {
        "required": [
          "appointmentType",
          "categoryCode",
          "comment",
          "created",
          "createdBy",
          "id",
          "inCell",
          "occurrences",
          "prisonCode",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment",
            "format": "int64",
            "example": 12345
          },
          "appointmentType": {
            "type": "string",
            "description": "The appointment type (INDIVIDUAL or GROUP)",
            "example": "INDIVIDUAL",
            "enum": [
              "INDIVIDUAL",
              "GROUP"
            ]
          },
          "prisonCode": {
            "type": "string",
            "description": "The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS",
            "example": "SKI"
          },
          "categoryCode": {
            "type": "string",
            "description": "The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS",
            "example": "CHAP"
          },
          "appointmentDescription": {
            "type": "string",
            "description": "\n    Free text description for an appointment.  This is used to add more context to the appointment category.\n    ",
            "example": "Meeting with the governor"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.\n    Will be null if in cell = true\n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location id should be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date of the appointment or first appointment occurrence in the series",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "10:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to the appointment.\n    The default value if no notes are specified at the occurrence or instance levels\n    ",
            "example": "This appointment will help adjusting to life outside of prison"
          },
          "created": {
            "type": "string",
            "description": "The date and time this appointment was created. Will not change",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that created the appointment.\n    Usually a NOMIS username\n    ",
            "example": "AAA01U"
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment was last changed.\n    Will be null if the appointment has not been altered since it was created\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that edited the appointment.\n    Will be null if the appointment has not been altered since it was created\n    ",
            "example": "AAA01U"
          },
          "schedule": {
            "$ref": "#/components/schemas/AppointmentSchedule"
          },
          "occurrences": {
            "type": "array",
            "description": "\n    The individual occurrence or occurrences of this appointment. Non recurring appointments will have a single\n    appointment occurrence containing the same property values as the parent appointment. The same start date, time\n    and end time. Recurring appointments will have a series of occurrences. The first in the series will also\n    contain the same property values as the parent appointment and subsequent occurrences will have start dates\n    following on from the original start date incremented as specified by the appointment's schedule. Each occurrence\n    can be edited independently of the parent. All properties of an occurrence override those of the parent appointment\n    with a null coalesce back to the parent for nullable properties. The full series of occurrences specified by the\n    schedule will be created in advance.\n    ",
            "items": {
              "$ref": "#/components/schemas/AppointmentOccurrence"
            }
          }
        },
        "description": "\n  The top level appointment containing the initial values for all appointment properties.\n  Joins together one or more appointment occurrences and optionally a schedule if the appointment is recurring.\n  The child appointment occurrences will by default have the same property values.\n  The occurrence property values can be changed independently to support rescheduling, cancelling and altered\n  attendee lists at an individual occurrence level.\n  Editing a property at the appointment level will cascade the edit to all *future* child occurrences\n  "
      },
      "AppointmentOccurrence": {
        "required": [
          "allocations",
          "id",
          "inCell",
          "sequenceNumber",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment occurrence",
            "format": "int64",
            "example": 123456
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number of this appointment occurrence within the recurring appointment series",
            "format": "int32",
            "example": 3
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.\n    Will be null if in cell = true\n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location id should be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date this appointment occurrence is taking place on",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to this appointment occurrence.\n    The comment value from the parent appointment will be used if this is null\n    ",
            "example": "This appointment occurrence has been rescheduled due to staff availability"
          },
          "cancelled": {
            "type": "string",
            "description": "\n    The time at which this appointment occurrence was cancelled (if applicable).\n    ",
            "format": "date-time"
          },
          "cancellationReasonId": {
            "type": "integer",
            "description": "\n    The ID of the reason why this appointment occurrence was cancelled (if applicable).\n    ",
            "format": "int64",
            "example": 12345
          },
          "cancelledBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that cancelled this appointment instance (if applicable).\n    Usually a NOMIS username. Will be null if the appointment occurrence has not been altered independently from the\n    parent appointment since it was created\n    ",
            "example": "AAA01U"
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment occurrence was last changed.\n    Will be null if the appointment occurrence has not been altered independently from the parent appointment\n    since it was created\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that edited this appointment instance.\n    Usually a NOMIS username. Will be null if the appointment occurrence has not been altered independently from the\n    parent appointment since it was created\n    ",
            "example": "AAA01U"
          },
          "allocations": {
            "type": "array",
            "description": "\n    The prisoner or prisoners attending this appointment occurrence. Single appointments such as medical will have one\n    allocation record. A group appointment e.g. gym or chaplaincy sessions will have more than one allocation record.\n    Allocations are at the occurrence level supporting alteration of attendees in any future occurrence.\n    When viewing or editing a recurring appointment, the allocations from the next appointment occurrence in the series\n    will be used.\n    ",
            "items": {
              "$ref": "#/components/schemas/AppointmentOccurrenceAllocation"
            }
          }
        },
        "description": "\n  Represents a specific appointment occurrence. Non recurring appointments will have a single appointment occurrence\n  containing the same property values as the parent appointment. The same start date, time and end time. Recurring\n  appointments will have a series of occurrences. The first in the series will also contain the same property values\n  as the parent appointment and subsequent occurrences will have start dates following on from the original start date\n  incremented as specified by the appointment's schedule. Each occurrence can be edited independently of the parent.\n  All properties of an occurrence override those of the parent appointment with a null coalesce back to the parent for\n  nullable properties. The full series of occurrences specified by the schedule will be created in advance.\n  "
      },
      "AppointmentOccurrenceAllocation": {
        "required": [
          "bookingId",
          "id",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment occurrence allocation",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS",
            "example": "A1234BC"
          },
          "bookingId": {
            "type": "integer",
            "description": "The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS",
            "format": "int64",
            "example": 456
          }
        },
        "description": "\n  The allocation of a prisoner to an appointment occurrence. Appointments of type INDIVIDUAL will have one prisoner\n  allocated to each appointment occurrence. Appointments of type GROUP can have more than one prisoner allocated to each\n  appointment occurrence\n  "
      },
      "AppointmentSchedule": {
        "required": [
          "endDate",
          "fridayFlag",
          "id",
          "mondayFlag",
          "saturdayFlag",
          "sundayFlag",
          "thursdayFlag",
          "tuesdayFlag",
          "wednesdayFlag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment schedule",
            "format": "int64",
            "example": 12345
          },
          "endDate": {
            "type": "string",
            "description": "\n    The date the series of appointment occurrences should end. The UI will provide options to specify an end date or\n    a number of occurrences. The later case should be used to calculate the end date internally\n    ",
            "format": "date"
          },
          "mondayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Monday",
            "example": false
          },
          "tuesdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Tuesday",
            "example": true
          },
          "wednesdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Wednesday",
            "example": false
          },
          "thursdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Thursday",
            "example": false
          },
          "fridayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Friday",
            "example": false
          },
          "saturdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Saturday",
            "example": false
          },
          "sundayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Sunday",
            "example": false
          }
        },
        "description": "\n  Describes the recurrence of an appointment. The days of the week an occurrence of the appointment will be scheduled\n  and the end date of the series.\n  "
      },
      "PrisonerAllocationRequest": {
        "required": [
          "payBandId",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "maxLength": 7,
            "minLength": 0,
            "type": "string",
            "description": "The prisoner number (Nomis ID)",
            "example": "A1234AA"
          },
          "payBandId": {
            "type": "integer",
            "description": "Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner",
            "format": "int64",
            "example": 1
          }
        },
        "description": "The prisoner allocation request details"
      },
      "PrisonerScheduledEvents": {
        "type": "object",
        "properties": {
          "prisonCode": {
            "type": "string",
            "description": "The prison code for these scheduled events",
            "example": "MDI"
          },
          "prisonerNumbers": {
            "uniqueItems": true,
            "type": "array",
            "description": "The set of prisoner numbers for theses scheduled events ",
            "example": "['GF10101', 'GR123YI']",
            "items": {
              "type": "string",
              "description": "The set of prisoner numbers for theses scheduled events ",
              "example": "['GF10101', 'GR123YI']"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The start date for this collection of scheduled events",
            "format": "date",
            "example": "2022-11-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date (inclusive) for this collection of scheduled events",
            "format": "date",
            "example": "2022-11-28"
          },
          "appointments": {
            "type": "array",
            "description": "A list of scheduled appointments for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "courtHearings": {
            "type": "array",
            "description": "A list of (active) scheduled court hearings for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "visits": {
            "type": "array",
            "description": "A list of scheduled visits for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "activities": {
            "type": "array",
            "description": "A list of scheduled activities for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "externalTransfers": {
            "type": "array",
            "description": "A list of external transfers for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "adjudications": {
            "type": "array",
            "description": "A list of adjudications for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          }
        },
        "description": "Describes a prisons scheduled events"
      },
      "ScheduledEvent": {
        "required": [
          "cancelled",
          "inCell",
          "outsidePrison",
          "priority",
          "startTime",
          "suspended"
        ],
        "type": "object",
        "properties": {
          "prisonCode": {
            "type": "string",
            "description": "The prison code for this scheduled event",
            "example": "MDI"
          },
          "eventSource": {
            "type": "string",
            "description": "The source of this event - valid values are NOMIS or SAA (scheduling activities and appointments)",
            "example": "NOMIS"
          },
          "eventType": {
            "type": "string",
            "description": "The event type (APPOINTMENT, ACTIVITY, COURT_HEARING, EXTERNAL_TRANSFER, ADJUDICATION_HEARING, VISIT)",
            "example": "APPOINTMENT"
          },
          "scheduledInstanceId": {
            "type": "integer",
            "description": "For activities from SAA the ID for the activity scheduled instance, or null when from NOMIS",
            "format": "int64",
            "example": 9999
          },
          "appointmentId": {
            "type": "integer",
            "description": "For appointments from SAA the ID for the appointment, or null when from NOMIS",
            "format": "int64",
            "example": 9999
          },
          "appointmentOccurrenceId": {
            "type": "integer",
            "description": "For appointments from SAA the ID for the appointment occurrence, or null when from NOMIS",
            "format": "int64",
            "example": 9999
          },
          "appointmentInstanceId": {
            "type": "integer",
            "description": "For appointments from SAA the ID for the appointment instance, or null when from NOMIS",
            "format": "int64",
            "example": 9999
          },
          "oicHearingId": {
            "type": "integer",
            "description": "For adjudication hearings from NOMIS the ID for the OIC hearing, or null for other types",
            "format": "int64",
            "example": 9999
          },
          "eventId": {
            "type": "integer",
            "description": "The event ID for events from NOMIS, otherwise null if from SAA",
            "format": "int64",
            "example": 10001
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id of the prisoner this event relates to.",
            "format": "int64",
            "example": 10001
          },
          "internalLocationId": {
            "type": "integer",
            "description": "The NOMIS internal location id where this event takes place",
            "format": "int64",
            "example": 10001
          },
          "internalLocationCode": {
            "type": "string",
            "description": "The NOMIS location code for this event",
            "example": "MDI-HB1-EDUCATION-RM1"
          },
          "internalLocationDescription": {
            "type": "string",
            "description": "The NOMIS location description for this event",
            "example": "Education Room One"
          },
          "categoryCode": {
            "type": "string",
            "description": "Event category code (e.g appointment category code, activity category code)",
            "example": "GOVE"
          },
          "categoryDescription": {
            "type": "string",
            "description": "Event category description.",
            "example": "Governor"
          },
          "summary": {
            "type": "string",
            "description": "The event summary to show on unlock lists, schedules and calendars",
            "example": "Court hearing"
          },
          "comments": {
            "type": "string",
            "description": "Any comments supplied that relate to this event",
            "example": "Reception for 8am please."
          },
          "inCell": {
            "type": "boolean",
            "description": "Set to true if this event will take place in the prisoner's cell",
            "example": false
          },
          "outsidePrison": {
            "type": "boolean",
            "description": "Set to true if this event takes place outside the prison",
            "example": false
          },
          "cancelled": {
            "type": "boolean",
            "description": "Set to true if this event has been cancelled",
            "example": false
          },
          "suspended": {
            "type": "boolean",
            "description": "Set to true if this prisoner is suspended for this event (only applies to activities)",
            "example": false
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "GF10101"
          },
          "date": {
            "type": "string",
            "description": "The specific date for this event",
            "format": "date",
            "example": "2022-09-30"
          },
          "startTime": {
            "type": "string",
            "description": "The start time for this scheduled instance",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time for this scheduled instance",
            "format": "partial-time",
            "example": "10:00"
          },
          "priority": {
            "type": "integer",
            "description": "The event priority - configurable by prison, or via defaults.",
            "format": "int32"
          }
        },
        "description": "Describes a scheduled event"
      },
      "Allocation": {
        "required": [
          "activitySummary",
          "id",
          "isUnemployment",
          "prisonPayBand",
          "prisonerNumber",
          "scheduleDescription",
          "scheduleId",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this allocation",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number (Nomis ID)",
            "example": "A1234AA"
          },
          "bookingId": {
            "type": "integer",
            "description": "The offender booking id",
            "format": "int64",
            "example": 10001
          },
          "activitySummary": {
            "type": "string"
          },
          "scheduleId": {
            "type": "integer",
            "format": "int64"
          },
          "scheduleDescription": {
            "type": "string"
          },
          "isUnemployment": {
            "type": "boolean",
            "description": "Indicates whether this allocation is to an activity within the 'Not in work' category"
          },
          "prisonPayBand": {
            "$ref": "#/components/schemas/PrisonPayBand"
          },
          "startDate": {
            "type": "string",
            "description": "The date when the prisoner will start the activity",
            "format": "date",
            "example": "2022-09-10"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the prisoner will stop attending the activity",
            "format": "date",
            "example": "2023-09-10"
          },
          "allocatedTime": {
            "type": "string",
            "description": "The date and time the prisoner was allocated to the activity",
            "format": "date-time"
          },
          "allocatedBy": {
            "type": "string",
            "description": "The person who allocated the prisoner to the activity",
            "example": "Mr Blogs"
          },
          "deallocatedTime": {
            "type": "string",
            "description": "The date and time the prisoner was deallocated from the activity",
            "format": "date-time"
          },
          "deallocatedBy": {
            "type": "string",
            "description": "The person who deallocated the prisoner from the activity",
            "example": "Mrs Blogs"
          },
          "deallocatedReason": {
            "type": "string",
            "description": "The descriptive reason why this prisoner was deallocated from the activity",
            "example": "Not attending regularly"
          }
        },
        "description": "A prisoner who is allocated to an activity"
      },
      "PrisonPayBand": {
        "required": [
          "alias",
          "description",
          "displaySequence",
          "id",
          "nomisPayBand",
          "prisonCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this prison pay band",
            "format": "int64",
            "example": 123456
          },
          "displaySequence": {
            "type": "integer",
            "description": "The order in which the pay band should be presented within a list e.g. dropdown",
            "format": "int32",
            "example": 1
          },
          "alias": {
            "type": "string",
            "description": "The alternative text to use in place of the description e.g. Low, Medium, High",
            "example": "Low"
          },
          "description": {
            "type": "string",
            "description": "The description of pay band in this prison",
            "example": "Pay band 1"
          },
          "nomisPayBand": {
            "type": "integer",
            "description": "The pay band number this is associated with in NOMIS (1-10)",
            "format": "int32",
            "example": 1
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code for the pay band. Can also be 'DEFAULT' if none set up for prison",
            "example": "MDI"
          }
        },
        "description": "Describes one instance of a prison pay band"
      },
      "PrisonerAllocations": {
        "required": [
          "allocations",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "GF10101"
          },
          "allocations": {
            "type": "array",
            "description": "The list of allocations for the prisoner",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          }
        },
        "description": "Describes a prisoners allocations"
      },
      "BulkAppointmentsRequest": {
        "required": [
          "appointmentDescription",
          "appointments",
          "categoryCode",
          "inCell",
          "internalLocationId",
          "prisonCode",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "prisonCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The NOMIS prison code where these appointments takes place",
            "example": "PVI"
          },
          "categoryCode": {
            "type": "string",
            "description": "The NOMIS reference code for these appointments. Must exist and be active",
            "example": "CHAP"
          },
          "appointmentDescription": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "\n    Free text description for these appointments.  This is used to add more context to the appointment category.\n    ",
            "example": "Meeting with the governor"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.\n    The internal location id must exist, must be within the prison specified by the prisonCode property and be active. \n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointments is in cell rather than an internal prison location.\n    Internal location id will be ignored if inCell is true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date of the appointments",
            "format": "date"
          },
          "appointments": {
            "type": "array",
            "description": "\n    The list of appointments to create\n    ",
            "items": {
              "$ref": "#/components/schemas/IndividualAppointment"
            }
          }
        },
        "description": "The create request containing the new appointments"
      },
      "IndividualAppointment": {
        "required": [
          "endTime",
          "prisonerNumber",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner to allocate to the created appointment",
            "example": "A1234BC"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of the appointment",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the appointment",
            "format": "partial-time",
            "example": "10:30"
          }
        },
        "description": "\n    The list of appointments to create\n    "
      },
      "BulkAppointment": {
        "required": [
          "appointments",
          "bulkAppointmentId",
          "created",
          "createdBy"
        ],
        "type": "object",
        "properties": {
          "bulkAppointmentId": {
            "type": "integer",
            "description": "The internally generated identifier for this bulk appointment",
            "format": "int64",
            "example": 12345
          },
          "appointments": {
            "type": "array",
            "description": "The list of appointments created in bulk.",
            "items": {
              "$ref": "#/components/schemas/Appointment"
            }
          },
          "created": {
            "type": "string",
            "description": "The date and time this appointment was created. Will not change",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that created the appointment.\n    Usually a NOMIS username\n    ",
            "example": "AAA01U"
          }
        },
        "description": "Describes a list of activities created as part of a single bulk operation"
      },
      "AuditRecordSearchFilters": {
        "type": "object",
        "properties": {
          "prisonCode": {
            "type": "string",
            "description": "The code of the prison",
            "example": "PVI"
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234AA"
          },
          "username": {
            "type": "string",
            "description": "The username of the logged-in user",
            "example": "JONESA"
          },
          "auditType": {
            "type": "string",
            "description": "The top-level audit category",
            "example": "ACTIVITY",
            "enum": [
              "PRISONER",
              "ACTIVITY"
            ]
          },
          "auditEventType": {
            "type": "string",
            "description": "The specific event type",
            "example": "ACTIVITY_CREATED",
            "enum": [
              "ACTIVITY_CREATED",
              "ACTIVITY_UPDATED",
              "BONUS_PAYMENT_MADE_FOR_ACTIVITY_ATTENDANCE",
              "INCENTIVE_LEVEL_WARNING_GIVEN_FOR_ACTIVITY_ATTENDANCE",
              "PRISONER_ACCEPTED_FROM_WAITING_LIST",
              "PRISONER_ADDED_TO_WAITING_LIST",
              "PRISONER_ALLOCATED",
              "PRISONER_DEALLOCATED",
              "PRISONER_REJECTED_FROM_WAITING_LIST",
              "PRISONER_SUSPENDED_FROM_ACTIVITY",
              "PRISONER_UNSUSPENDED_FROM_ACTIVITY"
            ]
          },
          "startTime": {
            "type": "string",
            "description": "The date and time on or after which to search for events",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "description": "The date and time on or before which to search for events",
            "format": "date-time"
          },
          "activityId": {
            "type": "integer",
            "description": "The ID of the activity",
            "format": "int64",
            "example": 123456
          },
          "scheduleId": {
            "type": "integer",
            "description": "The ID of the activity schedule",
            "format": "int64",
            "example": 123456
          }
        },
        "description": "Set of search filters for searching audit records"
      },
      "Activity": {
        "required": [
          "attendanceRequired",
          "category",
          "createdBy",
          "createdTime",
          "eligibilityRules",
          "id",
          "inCell",
          "minimumEducationLevel",
          "minimumIncentiveLevel",
          "minimumIncentiveNomisCode",
          "outsideWork",
          "pay",
          "payPerSession",
          "pieceWork",
          "prisonCode",
          "riskLevel",
          "schedules",
          "startDate",
          "summary",
          "waitingList"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity",
            "format": "int64",
            "example": 123456
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "PVI"
          },
          "attendanceRequired": {
            "type": "boolean",
            "description": "Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance",
            "example": false
          },
          "inCell": {
            "type": "boolean",
            "description": "Flag to indicate if the location of the activity is in cell",
            "example": false
          },
          "pieceWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity is piece work",
            "example": false
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity carried out outside of the prison",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes). ",
            "example": "H",
            "enum": [
              "H",
              "F"
            ]
          },
          "summary": {
            "type": "string",
            "description": "A brief summary description of this activity for use in forms and lists",
            "example": "Maths level 1"
          },
          "description": {
            "type": "string",
            "description": "A detailed description for this activity",
            "example": "A basic maths course suitable for introduction to the subject"
          },
          "category": {
            "$ref": "#/components/schemas/ActivityCategory"
          },
          "tier": {
            "$ref": "#/components/schemas/ActivityTier"
          },
          "eligibilityRules": {
            "type": "array",
            "description": "A list of eligibility rules which apply to this activity. These can be positive (include) and negative (exclude)",
            "example": "[FEMALE_ONLY,AGED_18-25]",
            "items": {
              "$ref": "#/components/schemas/ActivityEligibility"
            }
          },
          "schedules": {
            "type": "array",
            "description": "A list of schedules for this activity. These contain the time slots / recurrence settings for instances of this activity.",
            "items": {
              "$ref": "#/components/schemas/ActivitySchedule"
            }
          },
          "waitingList": {
            "type": "array",
            "description": "A list of prisoners who are waiting for allocation to this activity. This list is held against the activity, though allocation is against particular schedules of the activity",
            "items": {
              "$ref": "#/components/schemas/PrisonerWaiting"
            }
          },
          "pay": {
            "type": "array",
            "description": "The list of pay rates by incentive level and pay band that can apply to this activity",
            "items": {
              "$ref": "#/components/schemas/ActivityPay"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this activity will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-09-21"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.",
            "format": "date",
            "example": "2022-12-21"
          },
          "riskLevel": {
            "type": "string",
            "description": "The most recent risk assessment level for this activity",
            "example": "high"
          },
          "minimumIncentiveNomisCode": {
            "type": "string",
            "description": "The NOMIS code for the minimum incentive/earned privilege level for this activity",
            "example": "BAS"
          },
          "minimumIncentiveLevel": {
            "type": "string",
            "description": "The minimum incentive/earned privilege level for this activity",
            "example": "Basic"
          },
          "createdTime": {
            "type": "string",
            "description": "The date and time when this activity was created",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The person who created this activity",
            "example": "Adam Smith"
          },
          "minimumEducationLevel": {
            "type": "array",
            "description": "The list of minimum education levels that can apply to this activity",
            "items": {
              "$ref": "#/components/schemas/ActivityMinimumEducationLevel"
            }
          }
        },
        "description": "Describes a top-level activity"
      },
      "ActivityCategory": {
        "required": [
          "code",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated identifier for this activity category",
            "format": "int64",
            "example": 1
          },
          "code": {
            "type": "string",
            "description": "The activity category code",
            "example": "LEISURE_SOCIAL"
          },
          "name": {
            "type": "string",
            "description": "The name of the activity category",
            "example": "Leisure and social"
          },
          "description": {
            "type": "string",
            "description": "The description of the activity category",
            "example": "Such as association, library time and social clubs, like music or art"
          }
        },
        "description": "Describes a top-level activity category"
      },
      "ActivityEligibility": {
        "required": [
          "eligibility",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internal ID of the activity that these rules apply to",
            "format": "int64",
            "example": 123456
          },
          "eligibility": {
            "$ref": "#/components/schemas/EligibilityRule"
          }
        },
        "description": "Describes an eligibility rule as applied to an activity",
        "example": "[FEMALE_ONLY,AGED_18-25]"
      },
      "ActivityLite": {
        "required": [
          "attendanceRequired",
          "category",
          "id",
          "inCell",
          "minimumEducationLevel",
          "minimumIncentiveLevel",
          "minimumIncentiveNomisCode",
          "outsideWork",
          "payPerSession",
          "pieceWork",
          "prisonCode",
          "riskLevel",
          "summary"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity",
            "format": "int64",
            "example": 123456
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "PVI"
          },
          "attendanceRequired": {
            "type": "boolean",
            "description": "Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance",
            "example": false
          },
          "inCell": {
            "type": "boolean",
            "description": "Flag to indicate if the location of the activity is in cell",
            "example": false
          },
          "pieceWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity is piece work",
            "example": false
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity carried out outside of the prison",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes). ",
            "example": "H",
            "enum": [
              "H",
              "F"
            ]
          },
          "summary": {
            "type": "string",
            "description": "A brief summary description of this activity for use in forms and lists",
            "example": "Maths level 1"
          },
          "description": {
            "type": "string",
            "description": "A detailed description for this activity",
            "example": "A basic maths course suitable for introduction to the subject"
          },
          "category": {
            "$ref": "#/components/schemas/ActivityCategory"
          },
          "riskLevel": {
            "type": "string",
            "description": "The most recent risk assessment level for this activity",
            "example": "high"
          },
          "minimumIncentiveNomisCode": {
            "type": "string",
            "description": "The NOMIS code for the minimum incentive/earned privilege level for this activity",
            "example": "BAS"
          },
          "minimumIncentiveLevel": {
            "type": "string",
            "description": "The minimum incentive/earned privilege level for this activity",
            "example": "Basic"
          },
          "minimumEducationLevel": {
            "type": "array",
            "description": "The list of minimum education levels that can apply to this activity",
            "items": {
              "$ref": "#/components/schemas/ActivityMinimumEducationLevel"
            }
          }
        },
        "description": "Describes a top-level activity"
      },
      "ActivityMinimumEducationLevel": {
        "required": [
          "educationLevelCode",
          "educationLevelDescription",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity minimum education level",
            "format": "int64",
            "example": 123456
          },
          "educationLevelCode": {
            "type": "string",
            "description": "The education level code",
            "example": "Basic"
          },
          "educationLevelDescription": {
            "type": "string",
            "description": "The education level description",
            "example": "Basic"
          }
        },
        "description": "Describes the minimum education levels which apply to an activity"
      },
      "ActivityPay": {
        "required": [
          "id",
          "incentiveLevel",
          "incentiveNomisCode",
          "prisonPayBand"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity pay",
            "format": "int64",
            "example": 123456
          },
          "incentiveNomisCode": {
            "type": "string",
            "description": "The NOMIS code for the incentive/earned privilege level",
            "example": "BAS"
          },
          "incentiveLevel": {
            "type": "string",
            "description": "The incentive/earned privilege level",
            "example": "Basic"
          },
          "prisonPayBand": {
            "$ref": "#/components/schemas/PrisonPayBand"
          },
          "rate": {
            "type": "integer",
            "description": "The earning rate for one half day session for someone of this incentive level and pay band (in pence)",
            "format": "int32",
            "example": 150
          },
          "pieceRate": {
            "type": "integer",
            "description": "Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced",
            "format": "int32",
            "example": 150
          },
          "pieceRateItems": {
            "type": "integer",
            "description": "Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate",
            "format": "int32",
            "example": 10
          }
        },
        "description": "Describes the pay rates and bands which apply to an activity"
      },
      "ActivitySchedule": {
        "required": [
          "activity",
          "allocations",
          "capacity",
          "description",
          "id",
          "instances",
          "runsOnBankHoliday",
          "slots",
          "startDate",
          "suspensions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity schedule",
            "format": "int64",
            "example": 123456
          },
          "instances": {
            "type": "array",
            "description": "The planned instances associated with this activity schedule",
            "items": {
              "$ref": "#/components/schemas/ScheduledInstance"
            }
          },
          "allocations": {
            "type": "array",
            "description": "The list of allocated prisoners who are allocated to this schedule, at this time and location",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of this activity schedule",
            "example": "Entry level Maths 1"
          },
          "suspensions": {
            "type": "array",
            "description": "Indicates the dates between which the schedule has been suspended",
            "items": {
              "$ref": "#/components/schemas/Suspension"
            }
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "capacity": {
            "type": "integer",
            "description": "The maximum number of prisoners allowed for a scheduled instance of this schedule",
            "format": "int32",
            "example": 10
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityLite"
          },
          "slots": {
            "type": "array",
            "description": "The slots associated with this activity schedule",
            "items": {
              "$ref": "#/components/schemas/ActivityScheduleSlot"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this schedule will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-09-21"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this schedule will end. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-10-21"
          },
          "runsOnBankHoliday": {
            "type": "boolean",
            "description": "Whether the schedule runs on bank holidays",
            "example": true
          }
        },
        "description": "\n  Describes the weekly schedule for an activity. There can be several of these defined for one activity.\n  An activity schedule describes when, during the week, an activity will be run and where.\n  e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.\n  e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.\n  "
      },
      "ActivityScheduleSlot": {
        "required": [
          "daysOfWeek",
          "endTime",
          "fridayFlag",
          "id",
          "mondayFlag",
          "saturdayFlag",
          "startTime",
          "sundayFlag",
          "thursdayFlag",
          "tuesdayFlag",
          "wednesdayFlag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity schedule slot",
            "format": "int64",
            "example": 123456
          },
          "startTime": {
            "type": "string",
            "description": "The time that any instances of this schedule slot will start",
            "format": "partial-time",
            "example": "9:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time that any instances of this schedule slot will finish",
            "format": "partial-time",
            "example": "11:30"
          },
          "daysOfWeek": {
            "type": "array",
            "description": "The days of the week on which the schedule slot takes place",
            "example": "[Mon,Tue,Wed]",
            "items": {
              "type": "string",
              "description": "The days of the week on which the schedule slot takes place",
              "example": "[Mon,Tue,Wed]"
            }
          },
          "mondayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Monday",
            "example": true
          },
          "tuesdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Tuesday",
            "example": true
          },
          "wednesdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Wednesday",
            "example": true
          },
          "thursdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Thursday",
            "example": false
          },
          "fridayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Friday",
            "example": false
          },
          "saturdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Saturday",
            "example": false
          },
          "sundayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Sunday",
            "example": false
          }
        },
        "description": "\n  Describes a slot for an activity schedule. There can be several of these defined for one activity schedule.\n  An activity schedule slot describes when, during the week, an activity will be run.\n  e.g. Tuesday PM on a Monday and Thursday.\n  "
      },
      "ActivityTier": {
        "required": [
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity tier",
            "format": "int64",
            "example": 123456
          },
          "code": {
            "type": "string",
            "description": "The code for this activity tier",
            "example": "Tier1"
          },
          "description": {
            "type": "string",
            "description": "The detailed description for this activity tier",
            "example": "Work, education and maintenance"
          }
        },
        "description": "An activity tier",
        "example": "Tier 1, Tier 2, Foundation"
      },
      "Attendance": {
        "required": [
          "attendanceHistory",
          "id",
          "prisonerNumber",
          "scheduleInstanceId",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this attendance",
            "format": "int64",
            "example": 123456
          },
          "scheduleInstanceId": {
            "type": "integer",
            "description": "The ID for scheduled instance for this attendance",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prison number this attendance record is for",
            "example": "A1234AA"
          },
          "attendanceReason": {
            "$ref": "#/components/schemas/AttendanceReason"
          },
          "comment": {
            "type": "string",
            "description": "Free text to allow comments to be put against the attendance",
            "example": "Prisoner was too unwell to attend the activity."
          },
          "recordedTime": {
            "type": "string",
            "description": "The date and time the attendance was updated",
            "format": "date-time"
          },
          "recordedBy": {
            "type": "string",
            "description": "The person who updated the attendance",
            "example": "A.JONES"
          },
          "status": {
            "type": "string",
            "description": "WAITING, COMPLETED, LOCKED.",
            "example": "WAITING"
          },
          "payAmount": {
            "type": "integer",
            "description": "The amount in pence to pay the prisoner for the activity",
            "format": "int32",
            "example": 100
          },
          "bonusAmount": {
            "type": "integer",
            "description": "The bonus amount in pence to pay the prisoner for the activity",
            "format": "int32",
            "example": 50
          },
          "pieces": {
            "type": "integer",
            "format": "int32"
          },
          "issuePayment": {
            "type": "boolean",
            "description": "Should payment be issued for SICK, REST or OTHER",
            "example": true
          },
          "incentiveLevelWarningIssued": {
            "type": "boolean",
            "description": "Was an incentive level warning issued for REFUSED",
            "example": true
          },
          "otherAbsenceReason": {
            "type": "string",
            "description": "Free text to allow other reasons for non attendance against the attendance",
            "example": "Prisoner has a valid reason to miss the activity."
          },
          "caseNoteText": {
            "type": "string",
            "description": "Free text for any case note entered against the attendance record",
            "example": "Prisoner has refused to attend the activity without a valid reason to miss the activity."
          },
          "attendanceHistory": {
            "type": "array",
            "description": "The attendance history records for this attendance",
            "items": {
              "$ref": "#/components/schemas/AttendanceHistory"
            }
          }
        },
        "description": "An attendance record for a prisoner, can be marked or unmarked"
      },
      "AttendanceHistory": {
        "required": [
          "id",
          "recordedBy",
          "recordedTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this attendance",
            "format": "int64",
            "example": 123456
          },
          "attendanceReason": {
            "$ref": "#/components/schemas/AttendanceReason"
          },
          "comment": {
            "type": "string",
            "description": "Free text to allow comments to be put against the attendance",
            "example": "Prisoner was too unwell to attend the activity."
          },
          "recordedTime": {
            "type": "string",
            "description": "The date and time the attendance was updated",
            "format": "date-time"
          },
          "recordedBy": {
            "type": "string",
            "description": "The person who updated the attendance",
            "example": "A.JONES"
          },
          "issuePayment": {
            "type": "boolean",
            "description": "Should payment be issued for SICK, REST or OTHER",
            "example": true
          },
          "incentiveLevelWarningIssued": {
            "type": "boolean",
            "description": "Was an incentive level warning issued for REFUSED",
            "example": true
          },
          "otherAbsenceReason": {
            "type": "string",
            "description": "Free text to allow other reasons for non attendance against the attendance",
            "example": "Prisoner has a valid reason to miss the activity."
          }
        },
        "description": "An attendance record for a prisoner, can be marked or unmarked"
      },
      "AttendanceReason": {
        "required": [
          "attended",
          "captureCaseNote",
          "captureIncentiveLevelWarning",
          "captureMoreDetail",
          "captureOtherText",
          "capturePay",
          "code",
          "description",
          "displayInAbsence",
          "id",
          "notes"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this (non) attendance reason",
            "format": "int64",
            "example": 1
          },
          "code": {
            "type": "string",
            "description": "The code for the (non) attendance reason",
            "example": "SICK"
          },
          "description": {
            "type": "string",
            "description": "The description of the (non) attendance reason",
            "example": "Sick"
          },
          "attended": {
            "type": "boolean",
            "description": "A flag to show whether the reason is Attended (true) or Not Attended (false)",
            "example": true
          },
          "capturePay": {
            "type": "boolean",
            "description": "A flag to show whether or not to capture whether the prisoner should still be paid",
            "example": true
          },
          "captureMoreDetail": {
            "type": "boolean",
            "description": "A flag to show whether or not to capture more detail",
            "example": true
          },
          "captureCaseNote": {
            "type": "boolean",
            "description": "A flag to show whether or not to capture a case note",
            "example": true
          },
          "captureIncentiveLevelWarning": {
            "type": "boolean",
            "description": "A flag to show whether or not to capture whether an incentive level warning has been issued due to non attendance",
            "example": false
          },
          "captureOtherText": {
            "type": "boolean",
            "description": "A flag to show whether or not to capture other text",
            "example": false
          },
          "displayInAbsence": {
            "type": "boolean",
            "description": "A flag to show whether or not the reason should be displayed in the UI as an option for non attendance",
            "example": false
          },
          "displaySequence": {
            "type": "number",
            "description": "The sequence in which the reason should be displayed in the UI",
            "example": 1
          },
          "notes": {
            "type": "string",
            "description": "Any internal notes to explain the use of the reason",
            "example": "Maps to ACCAB in NOMIS"
          }
        },
        "description": "The reason for attending or not"
      },
      "EligibilityRule": {
        "required": [
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this eligibility rule",
            "format": "int64",
            "example": 123456
          },
          "code": {
            "type": "string",
            "description": "The code for this eligibility rule",
            "example": "OVER_21"
          },
          "description": {
            "type": "string",
            "description": "The description for this eligibility rule",
            "example": "The prisoner must be over 21 to attend"
          }
        },
        "description": "Defines one eligibility rule"
      },
      "InternalLocation": {
        "required": [
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The NOMIS internal location id for this schedule",
            "format": "int32",
            "example": 98877667
          },
          "code": {
            "type": "string",
            "description": "The NOMIS internal location code for this schedule",
            "example": "EDU-ROOM-1"
          },
          "description": {
            "type": "string",
            "description": "The NOMIS internal location description for this schedule",
            "example": "Education - R1"
          }
        },
        "description": "An internal NOMIS location for an activity to take place",
        "example": 98877667
      },
      "PrisonerWaiting": {
        "required": [
          "createdBy",
          "createdTime",
          "id",
          "priority",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this prisoner waiting",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number (NomisId) of the person on the waiting list",
            "example": "A1234AA"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of this person in the waiting list. The lower the number, the higher the priority",
            "format": "int32",
            "example": 1
          },
          "createdTime": {
            "type": "string",
            "description": "The date and time when this person was added to the waiting list",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The staff members name who added this person to the waiting list",
            "example": "Adam Smith"
          }
        },
        "description": "Describes a person who is on a waiting list for an activity"
      },
      "ScheduledInstance": {
        "required": [
          "attendances",
          "cancelled",
          "date",
          "endTime",
          "id",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this scheduled instance",
            "format": "int64",
            "example": 123456
          },
          "date": {
            "type": "string",
            "description": "The specific date for this scheduled instance",
            "format": "date",
            "example": "2022-09-30"
          },
          "startTime": {
            "type": "string",
            "description": "The start time for this scheduled instance",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time for this scheduled instance",
            "format": "partial-time",
            "example": "10:00"
          },
          "cancelled": {
            "type": "boolean",
            "description": "Flag to indicate if this scheduled instance has been cancelled since being scheduled",
            "example": false
          },
          "cancelledTime": {
            "type": "string",
            "description": "Date and time this scheduled instance was cancelled (or null if not cancelled)",
            "format": "date-time"
          },
          "cancelledBy": {
            "type": "string",
            "description": "The person who cancelled this scheduled instance (or null if not cancelled)",
            "example": "Adam Smith"
          },
          "attendances": {
            "type": "array",
            "description": "The attendance records for this scheduled instance",
            "items": {
              "$ref": "#/components/schemas/Attendance"
            }
          }
        },
        "description": "Describes one instance of an activity schedule"
      },
      "Suspension": {
        "required": [
          "suspendedFrom"
        ],
        "type": "object",
        "properties": {
          "suspendedFrom": {
            "type": "string",
            "description": "The date from which the activity schedule was suspended",
            "format": "date",
            "example": "2022-09-02"
          },
          "suspendedUntil": {
            "type": "string",
            "description": "The date until which the activity schedule was suspended. If null, the schedule is suspended indefinitely",
            "format": "date",
            "example": "2022-09-02"
          }
        },
        "description": "Describes the period of time an activity schedule has been suspended"
      },
      "AppointmentCreateRequest": {
        "required": [
          "appointmentType",
          "categoryCode",
          "comment",
          "endTime",
          "inCell",
          "prisonCode",
          "prisonerNumbers",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "appointmentType": {
            "type": "string",
            "description": "The appointment type (INDIVIDUAL or GROUP)",
            "example": "INDIVIDUAL",
            "enum": [
              "INDIVIDUAL",
              "GROUP"
            ]
          },
          "prisonCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The NOMIS prison code where this appointment takes place",
            "example": "PVI"
          },
          "prisonerNumbers": {
            "type": "array",
            "description": "The prisoner or prisoners to allocate to the created appointment or series of appointment occurrences",
            "example": [
              "A1234BC"
            ],
            "items": {
              "type": "string",
              "description": "The prisoner or prisoners to allocate to the created appointment or series of appointment occurrences",
              "example": "[\"A1234BC\"]"
            }
          },
          "categoryCode": {
            "type": "string",
            "description": "The NOMIS reference code for this appointment. Must exist and be active",
            "example": "CHAP"
          },
          "appointmentDescription": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "\n    Free text description for an appointment.  This is used to add more context to the appointment category.\n    ",
            "example": "Meeting with the governor"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.\n    The internal location id must exist, must be within the prison specified by the prisonCode property and be active. \n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location id will be ignored if inCell is true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date of the appointment or first appointment occurrence in the series",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "10:30"
          },
          "repeat": {
            "$ref": "#/components/schemas/AppointmentRepeat"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to the appointment.\n    The default value if no notes are specified at the occurrence or instance levels\n    ",
            "example": "This appointment will help adjusting to life outside of prison"
          }
        },
        "description": "The create request with the new appointment or series of appointment occurrences details"
      },
      "AppointmentRepeat": {
        "required": [
          "count",
          "period"
        ],
        "type": "object",
        "properties": {
          "period": {
            "type": "string",
            "description": "\n    The period or frequency of the occurrences in the repeating appointment series. When they will repeat and how often\n    ",
            "example": "WEEKLY",
            "enum": [
              "WEEKDAY",
              "DAILY",
              "WEEKLY",
              "FORTNIGHTLY",
              "MONTHLY"
            ]
          },
          "count": {
            "minimum": 1,
            "type": "integer",
            "description": "\n    The total number of occurrences in the appointment series\n    ",
            "format": "int32",
            "example": 6
          }
        },
        "description": "\n  Describes how an appointment will repeat. The period or frequency of those occurrences and how many occurrences there\n  will be in total in the series.\n  "
      },
      "AppointmentOccurrenceSearchRequest": {
        "required": [
          "startDate"
        ],
        "type": "object",
        "properties": {
          "appointmentType": {
            "type": "string",
            "description": "\n    The appointment type (INDIVIDUAL or GROUP) match with the parent appointments. Will restrict the search results to\n    appointment occurrences that have a parent appointment with the matching type when this search parameter is supplied.\n    ",
            "example": "INDIVIDUAL",
            "enum": [
              "INDIVIDUAL",
              "GROUP"
            ]
          },
          "startDate": {
            "type": "string",
            "description": "\n    The start date to match with the appointment occurrences. Will restrict the search results to appointment\n    occurrences that have the matching start date when this search parameter is supplied but no end date is supplied.\n    When an end date is also supplied, the search uses a date range and will restrict the search results to appointment\n    occurrences that have a start date within the date range.\n    ",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "\n    The end date of the date range to match with the appointment occurrences. Start date must be supplied if an end date\n    is specified. Will restrict the search results to appointment occurrences that have a start date within the date range.\n    ",
            "format": "date"
          },
          "timeSlot": {
            "type": "string",
            "description": "\n    The time slot to match with the appointment occurrences. Will restrict the search results to appointment occurrences\n    that have a start time between the times defined by the prison for that time slot when this search parameter is\n    supplied.\n    ",
            "example": "PM",
            "enum": [
              "AM",
              "PM",
              "ED"
            ]
          },
          "categoryCode": {
            "type": "string",
            "description": "\n    The NOMIS reference code to match with the parent appointments. Will restrict the search results to appointment\n    occurrences that have a parent appointment with the matching category code when this search parameter is supplied.\n    ",
            "example": "GYMW"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS internal location id to match with the appointment occurrences. Will restrict the search results to\n    appointment occurrences that have the matching internal location id when this search parameter is supplied.\n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    The in cell flag value to match with the appointment occurrences. Will restrict the search results to appointment\n    occurrences that have the matching in cell value when this search parameter is supplied.\n    ",
            "example": false
          },
          "prisonerNumbers": {
            "type": "array",
            "description": "\n    The allocated prisoner or prisoners to match with the appointment occurrences. Will restrict the search results to\n    appointment occurrences that have the at least one of the supplied prisoner numbers allocated to them when this\n    search parameter is supplied.\n    ",
            "example": [
              "A1234BC"
            ],
            "items": {
              "type": "string",
              "description": "\n    The allocated prisoner or prisoners to match with the appointment occurrences. Will restrict the search results to\n    appointment occurrences that have the at least one of the supplied prisoner numbers allocated to them when this\n    search parameter is supplied.\n    ",
              "example": "[\"A1234BC\"]"
            }
          },
          "createdBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth to match with the parent appointments. Will restrict the\n    search results to appointment occurrences that have a parent appointment created by this username when this search\n    parameter is supplied.\n    ",
            "example": "AAA01U"
          }
        },
        "description": "The search parameters to use to filter appointment occurrences"
      },
      "AppointmentCategorySummary": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "description": "The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS",
            "example": "CHAP"
          },
          "description": {
            "type": "string",
            "description": "The description of the appointment category",
            "example": "Chaplaincy"
          }
        },
        "description": "\n  Summarises an appointment category for display purposes. Contains only properties needed to make additional API calls\n  and to display.\n  "
      },
      "AppointmentLocationSummary": {
        "required": [
          "description",
          "id",
          "prisonCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.",
            "format": "int64",
            "example": 27
          },
          "prisonCode": {
            "type": "string",
            "description": "\n    The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.\n    ",
            "example": "SKI"
          },
          "description": {
            "type": "string",
            "description": "The description of the appointment location. Mapped from AGENCY_INTERNAL_LOCATIONS.USER_DESC",
            "example": "Chapel"
          }
        },
        "description": "\n  Summarises an appointment location for display purposes. Contains only properties needed to make additional API calls\n  and to display. NOMIS is the current system of record for appointment locations and they are managed there.\n  "
      },
      "AppointmentOccurrenceSearchResult": {
        "required": [
          "allocations",
          "appointmentId",
          "appointmentOccurrenceId",
          "appointmentType",
          "category",
          "inCell",
          "isCancelled",
          "isEdited",
          "isRepeat",
          "maxSequenceNumber",
          "prisonCode",
          "sequenceNumber",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "appointmentId": {
            "type": "integer",
            "description": "The internally generated identifier for the parent appointment",
            "format": "int64",
            "example": 12345
          },
          "appointmentOccurrenceId": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment occurrence",
            "format": "int64",
            "example": 123456
          },
          "appointmentType": {
            "type": "string",
            "description": "The parent appointment's type (INDIVIDUAL or GROUP)",
            "example": "INDIVIDUAL",
            "enum": [
              "INDIVIDUAL",
              "GROUP"
            ]
          },
          "prisonCode": {
            "type": "string",
            "description": "\n    The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.\n    Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences\n    ",
            "example": "SKI"
          },
          "allocations": {
            "type": "array",
            "description": "\n    The prisoner or prisoners attending this appointment occurrence. Appointments of type INDIVIDUAL will have one\n    prisoner allocated to each appointment occurrence. Appointments of type GROUP can have more than one prisoner\n    allocated to each appointment occurrence\n    ",
            "items": {
              "$ref": "#/components/schemas/AppointmentOccurrenceAllocation"
            }
          },
          "category": {
            "$ref": "#/components/schemas/AppointmentCategorySummary"
          },
          "appointmentDescription": {
            "type": "string",
            "description": "\n    Free text description for an appointment.  This is used to add more context to the appointment category.\n    ",
            "example": "Meeting with the governor"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/AppointmentLocationSummary"
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location will be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date this appointment occurrence is taking place on",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:30"
          },
          "isRepeat": {
            "type": "boolean",
            "description": "Indicates whether the parent appointment was specified to repeat",
            "example": false
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number of this appointment occurrence within the recurring appointment series",
            "format": "int32",
            "example": 3
          },
          "maxSequenceNumber": {
            "type": "integer",
            "description": "The sequence number of the final appointment occurrence within the recurring appointment series",
            "format": "int32",
            "example": 6
          },
          "isEdited": {
            "type": "boolean",
            "description": "Indicates whether this appointment occurrence has been changed from its original state",
            "example": false
          },
          "isCancelled": {
            "type": "boolean",
            "description": "Indicates whether this appointment occurrence has been cancelled",
            "example": false
          }
        },
        "description": "\n  Summary search result details of a specific appointment occurrence found via search. Will contain copies of the parent\n  appointment's properties unless they have been changed on this appointment occurrence. Contains properties needed to\n  make additional API calls and to populate a table of search results.\n  "
      },
      "ActivityCreateRequest": {
        "required": [
          "attendanceRequired",
          "categoryId",
          "eligibilityRuleIds",
          "inCell",
          "minimumEducationLevel",
          "minimumIncentiveLevel",
          "minimumIncentiveNomisCode",
          "outsideWork",
          "pay",
          "pieceWork",
          "prisonCode",
          "riskLevel",
          "runsOnBankHoliday",
          "slots",
          "summary"
        ],
        "type": "object",
        "properties": {
          "prisonCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "PVI"
          },
          "attendanceRequired": {
            "type": "boolean",
            "description": "Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance",
            "example": false
          },
          "inCell": {
            "type": "boolean",
            "description": "Flag to indicate if the location of the activity is in cell",
            "example": false
          },
          "pieceWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity is piece work",
            "example": false
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity carried out outside of the prison",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes). ",
            "example": "H",
            "enum": [
              "H",
              "F"
            ]
          },
          "summary": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "A brief summary description of this activity for use in forms and lists",
            "example": "Maths level 1"
          },
          "description": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string",
            "description": "A detailed description for this activity",
            "example": "A basic maths course suitable for introduction to the subject"
          },
          "categoryId": {
            "type": "integer",
            "description": "The category id for this activity, one of the high-level categories",
            "format": "int64"
          },
          "tierId": {
            "type": "integer",
            "description": "The tier id for this activity, as defined by the Future Prison Regime team",
            "format": "int64",
            "example": 1
          },
          "eligibilityRuleIds": {
            "type": "array",
            "description": "A list of eligibility rules ids which apply to this activity.",
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer",
              "description": "A list of eligibility rules ids which apply to this activity.",
              "format": "int64"
            }
          },
          "pay": {
            "type": "array",
            "description": "The list of pay rates that can apply to this activity",
            "items": {
              "$ref": "#/components/schemas/ActivityPayCreateRequest"
            }
          },
          "riskLevel": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The most recent risk assessment level for this activity",
            "example": "high"
          },
          "minimumIncentiveNomisCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The NOMIS code for the minimum incentive/earned privilege level for this activity",
            "example": "BAS"
          },
          "minimumIncentiveLevel": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The minimum incentive/earned privilege level for this activity",
            "example": "Basic"
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this activity will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-12-23"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.",
            "format": "date",
            "example": "2022-12-23"
          },
          "minimumEducationLevel": {
            "type": "array",
            "description": "The list of minimum education levels that apply to this activity",
            "items": {
              "$ref": "#/components/schemas/ActivityMinimumEducationLevelCreateRequest"
            }
          },
          "locationId": {
            "type": "integer",
            "description": "The optional NOMIS internal location id for this schedule",
            "format": "int64",
            "example": 98877667
          },
          "capacity": {
            "type": "integer",
            "description": "The maximum number of prisoners allowed for a scheduled instance of this schedule",
            "format": "int32",
            "example": 10
          },
          "slots": {
            "type": "array",
            "description": "The days and times an activity schedule can take place",
            "items": {
              "$ref": "#/components/schemas/Slot"
            }
          },
          "runsOnBankHoliday": {
            "type": "boolean",
            "description": "Whether the schedule runs on bank holidays",
            "example": true
          }
        },
        "description": "The create request with the new activity details"
      },
      "ActivityMinimumEducationLevelCreateRequest": {
        "required": [
          "educationLevelCode",
          "educationLevelDescription"
        ],
        "type": "object",
        "properties": {
          "educationLevelCode": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The Education level code",
            "example": "1"
          },
          "educationLevelDescription": {
            "maxLength": 60,
            "minLength": 0,
            "type": "string",
            "description": "The Education level description",
            "example": "Reading Measure 1.0"
          }
        },
        "description": "Describes the minimum education levels to be created for an activity"
      },
      "ActivityPayCreateRequest": {
        "required": [
          "incentiveLevel",
          "incentiveNomisCode",
          "payBandId"
        ],
        "type": "object",
        "properties": {
          "incentiveNomisCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The NOMIS code for the incentive/earned privilege level",
            "example": "BAS"
          },
          "incentiveLevel": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The incentive/earned privilege level",
            "example": "Basic"
          },
          "payBandId": {
            "type": "integer",
            "description": "The id of the prison pay band used",
            "format": "int64",
            "example": 1
          },
          "rate": {
            "type": "integer",
            "description": "The earning rate for one half day session for someone of this incentive level and pay band (in pence)",
            "format": "int32",
            "example": 150
          },
          "pieceRate": {
            "type": "integer",
            "description": "Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced",
            "format": "int32",
            "example": 150
          },
          "pieceRateItems": {
            "type": "integer",
            "description": "Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate",
            "format": "int32",
            "example": 10
          }
        },
        "description": "Describes the pay rates and bands to be created for an activity"
      },
      "Slot": {
        "required": [
          "friday",
          "monday",
          "saturday",
          "sunday",
          "thursday",
          "timeSlot",
          "tuesday",
          "wednesday"
        ],
        "type": "object",
        "properties": {
          "timeSlot": {
            "type": "string",
            "description": "The time slot of the activity schedule, morning afternoon or evening e.g. AM, PM or ED",
            "example": "AM"
          },
          "monday": {
            "type": "boolean"
          },
          "tuesday": {
            "type": "boolean"
          },
          "wednesday": {
            "type": "boolean"
          },
          "thursday": {
            "type": "boolean"
          },
          "friday": {
            "type": "boolean"
          },
          "saturday": {
            "type": "boolean"
          },
          "sunday": {
            "type": "boolean"
          }
        },
        "description": "\n    Describes time slot and day (or days) the scheduled activity would run. At least one day must be specified.\n    \n    e.g. 'AM, Monday, Wednesday and Friday' or 'PM Tuesday, Thursday, Sunday'\n  "
      },
      "AppointmentOccurrenceUpdateRequest": {
        "required": [
          "applyTo"
        ],
        "type": "object",
        "properties": {
          "categoryCode": {
            "type": "string",
            "description": "\n    The updated NOMIS reference code for the parent appointment. Must exist and be active.\n    NOTE: updating the category will apply to all appointment occurrences as the category is associated with the\n    parent appointment only. The value for applyTo will be ignored.\n    ",
            "example": "GYMW"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The updated NOMIS internal location id within the specified prison. This must be supplied if inCell is false.\n    The internal location id must exist, must be within the prison specified by the prisonCode property on the\n    parent appointment and be active. \n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment occurrence is in cell rather than an internal prison location.\n    Internal location id will be ignored if inCell is true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "\n    The updated date of the appointment occurrence. NOTE: this property specifies the day or date of all or all future\n    occurrences when used in conjunction with the applyTo property\n    ",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The updated starting time of the appointment occurrence",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The updated end time of the appointment occurrence",
            "format": "partial-time",
            "example": "10:30"
          },
          "comment": {
            "type": "string",
            "description": "Updated notes relating to the appointment occurrence",
            "example": "This appointment occurrence has been rescheduled due to staff availability"
          },
          "prisonerNumbers": {
            "type": "array",
            "description": "The replacement prisoner or prisoners to allocate to the appointment occurrence",
            "example": [
              "A1234BC"
            ],
            "items": {
              "type": "string",
              "description": "The replacement prisoner or prisoners to allocate to the appointment occurrence",
              "example": "[\"A1234BC\"]"
            }
          },
          "applyTo": {
            "type": "string",
            "description": "\n    Specifies which appointment occurrence or occurrences this update should apply to.\n    Defaults to THIS_OCCURRENCE meaning the update will be applied to the appointment occurrence specified by the\n    supplied id only.\n    ",
            "example": "THIS_OCCURRENCE",
            "enum": [
              "THIS_OCCURRENCE",
              "THIS_AND_ALL_FUTURE_OCCURRENCES",
              "ALL_FUTURE_OCCURRENCES"
            ]
          }
        },
        "description": "The update request with the new appointment occurrence details and how to apply the update"
      },
      "AttendanceSync": {
        "required": [
          "activityScheduleId",
          "attendanceId",
          "bookingId",
          "prisonerNumber",
          "scheduledInstanceId",
          "sessionDate",
          "sessionEndTime",
          "sessionStartTime",
          "status"
        ],
        "type": "object",
        "properties": {
          "attendanceId": {
            "type": "integer",
            "description": "The attendance primary key",
            "format": "int64",
            "example": 123456
          },
          "scheduledInstanceId": {
            "type": "integer",
            "description": "The scheduled instance primary key",
            "format": "int64",
            "example": 123456
          },
          "activityScheduleId": {
            "type": "integer",
            "description": "The activity schedule primary key",
            "format": "int64",
            "example": 123456
          },
          "sessionDate": {
            "type": "string",
            "description": "The scheduled instance date",
            "format": "date",
            "example": "2023-03-30"
          },
          "sessionStartTime": {
            "type": "string",
            "description": "The scheduled instance start time",
            "format": "partial-time",
            "example": "10:00"
          },
          "sessionEndTime": {
            "type": "string",
            "description": "The scheduled instance end time",
            "format": "partial-time",
            "example": "11:00"
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The offender's unique identifier",
            "example": "A1234BC"
          },
          "bookingId": {
            "type": "integer",
            "description": "The offender booking primary key",
            "format": "int64",
            "example": 123456
          },
          "attendanceReasonCode": {
            "type": "string",
            "description": "The reason for attending or not"
          },
          "comment": {
            "type": "string",
            "description": "Free text to allow comments to be put against the attendance",
            "example": "Prisoner was too unwell to attend the activity."
          },
          "status": {
            "type": "string",
            "description": "WAITING, COMPLETED, LOCKED.",
            "example": "WAITING"
          },
          "payAmount": {
            "type": "integer",
            "description": "The amount in pence to pay the prisoner for the activity",
            "format": "int32",
            "example": 100
          },
          "bonusAmount": {
            "type": "integer",
            "description": "The bonus amount in pence to pay the prisoner for the activity",
            "format": "int32",
            "example": 50
          },
          "issuePayment": {
            "type": "boolean",
            "description": "Should payment be issued for SICK, REST or OTHER",
            "example": true
          }
        },
        "description": "\n  Represents the key data required to synchronise an attendance with Nomis \n  "
      },
      "ActivityCandidate": {
        "required": [
          "educationLevels",
          "name",
          "otherAllocations",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The candidate's name",
            "example": "Joe Bloggs"
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The candidate's prisoner number",
            "example": "GF10101"
          },
          "cellLocation": {
            "type": "string",
            "description": "The candidate's cell location",
            "example": "MDI-1-1-101"
          },
          "otherAllocations": {
            "type": "array",
            "description": "Any activities the candidate is currently allocated to",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          },
          "releaseDate": {
            "type": "string",
            "description": "The candidate's earliest release date",
            "format": "date",
            "example": "2027-01-24"
          },
          "educationLevels": {
            "type": "array",
            "description": "The qualifications this candidate holds",
            "items": {
              "$ref": "#/components/schemas/Education"
            }
          }
        },
        "description": "Describes a candidate for allocation to an activity"
      },
      "AddressDto": {
        "required": [
          "noFixedAddress",
          "primary"
        ],
        "type": "object",
        "properties": {
          "primary": {
            "type": "boolean",
            "description": "Primary Address",
            "example": false
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "No Fixed Address",
            "example": false
          },
          "addressId": {
            "type": "integer",
            "description": "Address Id",
            "format": "int64",
            "example": 543524
          },
          "addressType": {
            "type": "string",
            "description": "Address Type. Note: Reference domain is ADDR_TYPE",
            "example": "BUS"
          },
          "flat": {
            "type": "string",
            "description": "Flat",
            "example": "3B"
          },
          "premise": {
            "type": "string",
            "description": "Premise",
            "example": "Liverpool Prison"
          },
          "street": {
            "type": "string",
            "description": "Street",
            "example": "Slinn Street"
          },
          "locality": {
            "type": "string",
            "description": "Locality",
            "example": "Brincliffe"
          },
          "town": {
            "type": "string",
            "description": "Town/City. Note: Reference domain is CITY",
            "example": "Liverpool"
          },
          "postalCode": {
            "type": "string",
            "description": "Postal Code",
            "example": "LI1 5TH"
          },
          "county": {
            "type": "string",
            "description": "County. Note: Reference domain is COUNTY",
            "example": "HEREFORD"
          },
          "country": {
            "type": "string",
            "description": "Country. Note: Reference domain is COUNTRY",
            "example": "ENG"
          },
          "comment": {
            "type": "string",
            "description": "Comment",
            "example": "This is a comment text"
          },
          "startDate": {
            "type": "string",
            "description": "Date Added",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "description": "Date ended",
            "format": "date"
          },
          "phones": {
            "type": "array",
            "description": "The phone number associated with the address",
            "items": {
              "$ref": "#/components/schemas/Telephone"
            },
            "example": null
          },
          "addressUsages": {
            "type": "array",
            "description": "The address usages/types",
            "items": {
              "$ref": "#/components/schemas/AddressUsageDto"
            },
            "example": null
          }
        }
      },
      "AddressUsageDto": {
        "type": "object",
        "properties": {
          "addressId": {
            "type": "integer",
            "description": "Address ID of the associated address",
            "format": "int64",
            "example": 23422313
          },
          "addressUsage": {
            "type": "string",
            "description": "The address usages",
            "example": "HDC"
          },
          "addressUsageDescription": {
            "type": "string",
            "description": "The address usages description",
            "example": "HDC Address"
          },
          "activeFlag": {
            "type": "boolean",
            "description": "Active Flag",
            "example": true
          }
        },
        "description": "The address usages/types",
        "example": null
      },
      "Education": {
        "required": [
          "addresses",
          "bookingId",
          "comment",
          "educationLevel",
          "endDate",
          "graduationYear",
          "isSpecialEducation",
          "numberOfYears",
          "schedule",
          "school",
          "startDate",
          "studyArea"
        ],
        "type": "object",
        "properties": {
          "bookingId": {
            "type": "integer",
            "format": "int64"
          },
          "startDate": {
            "type": "string",
            "format": "date"
          },
          "endDate": {
            "type": "string",
            "format": "date"
          },
          "studyArea": {
            "type": "string"
          },
          "educationLevel": {
            "type": "string"
          },
          "numberOfYears": {
            "type": "integer",
            "format": "int32"
          },
          "graduationYear": {
            "type": "string"
          },
          "comment": {
            "type": "string"
          },
          "school": {
            "type": "string"
          },
          "isSpecialEducation": {
            "type": "boolean"
          },
          "schedule": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AddressDto"
            }
          }
        },
        "description": "The qualifications this candidate holds"
      },
      "PageActivityCandidate": {
        "type": "object",
        "properties": {
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActivityCandidate"
            }
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "last": {
            "type": "boolean"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "$ref": "#/components/schemas/SortObject"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "empty": {
            "type": "boolean"
          },
          "sorted": {
            "type": "boolean"
          },
          "unsorted": {
            "type": "boolean"
          }
        }
      },
      "Telephone": {
        "required": [
          "number",
          "type"
        ],
        "type": "object",
        "properties": {
          "number": {
            "type": "string",
            "description": "Telephone number",
            "example": "0114 2345678"
          },
          "type": {
            "type": "string",
            "description": "Telephone type",
            "example": "TEL"
          },
          "phoneId": {
            "type": "integer",
            "description": "Phone Id",
            "format": "int64",
            "example": 2234232
          },
          "ext": {
            "type": "string",
            "description": "Telephone extension number",
            "example": "123"
          }
        },
        "description": "The phone number associated with the address",
        "example": null
      },
      "CapacityAndAllocated": {
        "required": [
          "allocated",
          "capacity"
        ],
        "type": "object",
        "properties": {
          "capacity": {
            "type": "integer",
            "description": "The maximum number of people who can attend the category or activity",
            "format": "int32",
            "example": 30
          },
          "allocated": {
            "type": "integer",
            "description": "The number of slots currently filled in the activity or category",
            "format": "int32",
            "example": 27
          }
        },
        "description": "Describes the capacity and allocated slots of an activity or category"
      },
      "ActivityScheduleInstance": {
        "required": [
          "activitySchedule",
          "attendances",
          "cancelled",
          "date",
          "endTime",
          "id",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this scheduled instance",
            "format": "int64",
            "example": 123456
          },
          "date": {
            "type": "string",
            "description": "The specific date for this scheduled instance",
            "format": "date",
            "example": "2022-09-30"
          },
          "startTime": {
            "type": "string",
            "description": "The start time for this scheduled instance",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time for this scheduled instance",
            "format": "partial-time",
            "example": "10:00"
          },
          "cancelled": {
            "type": "boolean",
            "description": "Flag to indicate if this scheduled instance has been cancelled since being scheduled",
            "example": false
          },
          "cancelledTime": {
            "type": "string",
            "description": "Date and time this scheduled instance was cancelled (or null if not cancelled)",
            "format": "date-time"
          },
          "cancelledBy": {
            "type": "string",
            "description": "The person who cancelled this scheduled instance (or null if not cancelled)",
            "example": "Adam Smith"
          },
          "cancelledReason": {
            "type": "string",
            "description": "The reason this scheduled instance was cancelled",
            "example": "Staff unavailable"
          },
          "previousScheduledInstanceId": {
            "type": "integer",
            "description": "The id for the previous scheduled instance",
            "format": "int64",
            "example": 123456
          },
          "previousScheduledInstanceDate": {
            "type": "string",
            "description": "The date for the previous scheduled instance",
            "format": "date",
            "example": "2022-09-30"
          },
          "nextScheduledInstanceId": {
            "type": "integer",
            "description": "The id for the next scheduled instance",
            "format": "int64",
            "example": 123456
          },
          "nextScheduledInstanceDate": {
            "type": "string",
            "description": "The date for the next scheduled instance",
            "format": "date",
            "example": "2022-09-30"
          },
          "attendances": {
            "type": "array",
            "description": "The list of attendees",
            "items": {
              "$ref": "#/components/schemas/Attendance"
            }
          },
          "activitySchedule": {
            "$ref": "#/components/schemas/ActivityScheduleLite"
          }
        },
        "description": "Describes one instance of an activity schedule"
      },
      "ActivityScheduleLite": {
        "required": [
          "activity",
          "capacity",
          "description",
          "id",
          "slots",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity schedule",
            "format": "int64",
            "example": 123456
          },
          "description": {
            "type": "string",
            "description": "The description of this activity schedule",
            "example": "Monday AM Houseblock 3"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "capacity": {
            "type": "integer",
            "description": "The maximum number of prisoners allowed for a scheduled instance of this schedule",
            "format": "int32",
            "example": 10
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityLite"
          },
          "slots": {
            "type": "array",
            "description": "The slots associated with this activity schedule",
            "items": {
              "$ref": "#/components/schemas/ActivityScheduleSlot"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this schedule will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-09-21"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this schedule will end. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-10-21"
          }
        },
        "description": "\n  Describes the weekly schedule for an activity. There can be several of these defined for one activity.\n  An activity schedule describes when, during the week, an activity will be run and where.\n  e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.\n  e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.\n  this 'lite' version of ActivitySchedule does not have allocated or instances.\n  "
      },
      "RolloutPrisonPlan": {
        "required": [
          "activitiesRolledOut",
          "appointmentsRolledOut",
          "prisonCode"
        ],
        "type": "object",
        "properties": {
          "prisonCode": {
            "type": "string",
            "description": "The prison code of the requested prison",
            "example": "PVI"
          },
          "activitiesRolledOut": {
            "type": "boolean",
            "description": "Flag to indicate if this prison is presently rolled out for activities",
            "example": true
          },
          "activitiesRolloutDate": {
            "type": "string",
            "description": "The date activities rolled out. Can be null if the prison is not yet scheduled for rollout.",
            "format": "date",
            "example": "2022-09-30"
          },
          "appointmentsRolledOut": {
            "type": "boolean",
            "description": "Flag to indicate if this prison is presently rolled out for appointments",
            "example": true
          },
          "appointmentsRolloutDate": {
            "type": "string",
            "description": "The date appointments rolled out. Can be null if the prison is not yet scheduled for rollout.",
            "format": "date",
            "example": "2022-09-30"
          }
        },
        "description": "Describes the rollout plan of a prison which may or may not be rolled out"
      },
      "GetDlqResult": {
        "required": [
          "messages",
          "messagesFoundCount",
          "messagesReturnedCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "messagesReturnedCount": {
            "type": "integer",
            "format": "int32"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DlqMessage"
            }
          }
        }
      },
      "PrisonRegime": {
        "required": [
          "amFinish",
          "amStart",
          "edFinish",
          "edStart",
          "id",
          "pmFinish",
          "pmStart",
          "prisonCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this prison regime",
            "format": "int64",
            "example": 123456
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "MDI"
          },
          "amStart": {
            "type": "string",
            "description": "The start time for the am slot",
            "format": "partial-time",
            "example": "09:00"
          },
          "amFinish": {
            "type": "string",
            "description": "The end time for the am slot",
            "format": "partial-time",
            "example": "12:00"
          },
          "pmStart": {
            "type": "string",
            "description": "The start time for the pm slot",
            "format": "partial-time",
            "example": "13:00"
          },
          "pmFinish": {
            "type": "string",
            "description": "The end time for the pm slot",
            "format": "partial-time",
            "example": "16:30"
          },
          "edStart": {
            "type": "string",
            "description": "The start time for the ed slot",
            "format": "partial-time",
            "example": "18:00"
          },
          "edFinish": {
            "type": "string",
            "description": "The end time for the ed slot",
            "format": "partial-time",
            "example": "20:00"
          }
        },
        "description": "Describes a top-level activity"
      },
      "Location": {
        "required": [
          "agencyId",
          "description",
          "locationId",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "Location identifier.",
            "format": "int64",
            "example": 721705
          },
          "locationType": {
            "type": "string",
            "description": "Location type.",
            "example": "CELL"
          },
          "description": {
            "type": "string",
            "description": "Location description.",
            "example": "MDI-RES-HB1-ALE"
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of Agency this location is associated with.",
            "example": "MDI"
          },
          "locationUsage": {
            "type": "string",
            "description": "What events this room can be used for.",
            "example": "APP"
          },
          "parentLocationId": {
            "type": "integer",
            "description": "Identifier of this location's parent location.",
            "format": "int64",
            "example": 26960
          },
          "currentOccupancy": {
            "type": "integer",
            "description": "Current occupancy of location.",
            "format": "int32",
            "example": 10
          },
          "locationPrefix": {
            "type": "string",
            "description": "Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations.",
            "example": "RES-HB1-ALE"
          },
          "operationalCapacity": {
            "type": "integer",
            "description": "Operational capacity of the location.",
            "format": "int32",
            "example": 20
          },
          "userDescription": {
            "type": "string",
            "description": "User-friendly location description.",
            "example": "RES-HB1-ALE"
          },
          "internalLocationCode": {
            "type": "string",
            "description": "Internal location code"
          }
        }
      },
      "LocationPrefixDto": {
        "required": [
          "locationPrefix"
        ],
        "type": "object",
        "properties": {
          "locationPrefix": {
            "type": "string",
            "description": "Location prefix translated from group name",
            "example": "MDI-1-"
          }
        },
        "description": "Location prefix response"
      },
      "LocationGroup": {
        "required": [
          "children",
          "key",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "Block A"
          },
          "key": {
            "type": "string",
            "description": "A key for the group",
            "example": "A"
          },
          "children": {
            "type": "array",
            "description": "The child groups of this group",
            "example": [
              {
                "name": "Landing A/1",
                "key": "1"
              },
              {
                "name": "Landing A/2",
                "key": "2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/LocationGroup"
            }
          }
        }
      },
      "AppointmentOccurrenceDetails": {
        "required": [
          "appointmentId",
          "appointmentType",
          "category",
          "comment",
          "created",
          "createdBy",
          "id",
          "inCell",
          "isCancelled",
          "isEdited",
          "prisonCode",
          "prisoners",
          "sequenceNumber",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment occurrence",
            "format": "int64",
            "example": 123456
          },
          "appointmentId": {
            "type": "integer",
            "description": "The internally generated identifier for the parent appointment",
            "format": "int64",
            "example": 12345
          },
          "appointmentType": {
            "type": "string",
            "description": "The appointment type (INDIVIDUAL or GROUP)",
            "example": "INDIVIDUAL",
            "enum": [
              "INDIVIDUAL",
              "GROUP"
            ]
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number of this appointment occurrence within the recurring appointment series",
            "format": "int32",
            "example": 3
          },
          "prisonCode": {
            "type": "string",
            "description": "\n    The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.\n    Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences\n    ",
            "example": "SKI"
          },
          "prisoners": {
            "type": "array",
            "description": "\n    Summary of the prisoner or prisoners allocated to this appointment occurrence. Prisoners are allocated at the\n    occurrence level to allow for per occurrence allocation changes.\n    ",
            "items": {
              "$ref": "#/components/schemas/PrisonerSummary"
            }
          },
          "category": {
            "$ref": "#/components/schemas/AppointmentCategorySummary"
          },
          "appointmentDescription": {
            "type": "string",
            "description": "\n    Free text description for an appointment.  This is used to add more context to the appointment category.\n    ",
            "example": "Meeting with the governor"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/AppointmentLocationSummary"
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location will be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date this appointment occurrence is taking place on",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to this appointment occurrence. Can be different to the parent appointment if this occurrence has\n    been edited.\n    ",
            "example": "This appointment occurrence has been rescheduled due to staff availability"
          },
          "repeat": {
            "$ref": "#/components/schemas/AppointmentRepeat"
          },
          "isEdited": {
            "type": "boolean",
            "description": "\n    Indicates that this appointment occurrence has been independently changed from the original state it was in when\n    it was created as part of a recurring series\n    ",
            "example": false
          },
          "isCancelled": {
            "type": "boolean",
            "description": "\n    Indicates that this appointment occurrence has been cancelled\n    ",
            "example": false
          },
          "created": {
            "type": "string",
            "description": "The date and time the parent appointment was created. Will not change",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserSummary"
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment occurrence was last edited.\n    Will be null if the appointment occurrence has not been independently changed from the original state it was in when\n    it was created as part of a recurring series\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserSummary"
          }
        },
        "description": "\n  Details of a specific appointment occurrence. Will contain copies of the parent appointment's properties unless they\n  have been changed on this appointment occurrence. Contains only properties needed to make additional API calls\n  and to display.\n  "
      },
      "PrisonerSummary": {
        "required": [
          "bookingId",
          "cellLocation",
          "firstName",
          "lastName",
          "prisonCode",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS",
            "example": "A1234BC"
          },
          "bookingId": {
            "type": "integer",
            "description": "The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS",
            "format": "int64",
            "example": 456
          },
          "firstName": {
            "type": "string",
            "description": "The prisoner's first name",
            "example": "Albert"
          },
          "lastName": {
            "type": "string",
            "description": "The prisoner's first name",
            "example": "Abbot"
          },
          "prisonCode": {
            "type": "string",
            "description": "\n    The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.\n    ",
            "example": "SKI"
          },
          "cellLocation": {
            "type": "string",
            "description": "\n    The prisoner's residential cell location when inside the prison.\n    ",
            "example": "A-1-002"
          }
        },
        "description": "\n    Summary of the prisoner or prisoners allocated to the first future occurrence (or most recent past occurrence if all\n    occurrences are in the past) of this appointment. Prisoners are allocated at the occurrence level to allow for per\n    occurrence allocation changes. The occurrence summary contains a count of allocated prisoners rather than the full\n    list as the expected usage is to show a summary of the occurrences then a link to display the full occurrence details.\n    "
      },
      "UserSummary": {
        "required": [
          "firstName",
          "id",
          "lastName",
          "username"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The NOMIS STAFF_MEMBERS.STAFF_ID value for mapping to NOMIS.",
            "format": "int64",
            "example": 36
          },
          "username": {
            "type": "string",
            "description": "The NOMIS STAFF_USER_ACCOUNTS.USERNAME value for mapping to NOMIS",
            "example": "AAA01U"
          },
          "firstName": {
            "type": "string",
            "description": "The user's first name",
            "example": "Alice"
          },
          "lastName": {
            "type": "string",
            "description": "The user's last name",
            "example": "Akbar"
          }
        },
        "description": "\n    The summary of the last user to edit this appointment occurrence. Will be null if the appointment occurrence has not\n    been independently changed from the original state it was in when it was created as part of a recurring series\n    "
      },
      "AppointmentInstance": {
        "required": [
          "appointmentDate",
          "appointmentId",
          "appointmentOccurrenceAllocationId",
          "appointmentOccurrenceId",
          "appointmentType",
          "bookingId",
          "categoryCode",
          "created",
          "createdBy",
          "id",
          "inCell",
          "prisonCode",
          "prisonerNumber",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment instance",
            "format": "int64",
            "example": 123456
          },
          "appointmentId": {
            "type": "integer",
            "description": "The internally generated identifier for the parent appointment",
            "format": "int64",
            "example": 1234
          },
          "appointmentOccurrenceId": {
            "type": "integer",
            "description": "The internally generated identifier for the parent appointment occurrence",
            "format": "int64",
            "example": 12345
          },
          "appointmentOccurrenceAllocationId": {
            "type": "integer",
            "description": "The internally generated identifier for the parent appointment occurrence allocation",
            "format": "int64",
            "example": 123456
          },
          "appointmentType": {
            "type": "string",
            "description": "The appointment type (INDIVIDUAL or GROUP)",
            "example": "INDIVIDUAL",
            "enum": [
              "INDIVIDUAL",
              "GROUP"
            ]
          },
          "prisonCode": {
            "type": "string",
            "description": "The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS",
            "example": "SKI"
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS",
            "example": "A1234BC"
          },
          "bookingId": {
            "type": "integer",
            "description": "The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS",
            "format": "int64",
            "example": 456
          },
          "categoryCode": {
            "type": "string",
            "description": "The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS",
            "example": "CHAP"
          },
          "appointmentDescription": {
            "type": "string",
            "description": "\n    Free text description for an appointment.  This is used to add more context to the appointment category.\n    ",
            "example": "Meeting with the governor"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.\n    Will be null if in cell = true\n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location id should be null if in cell = true\n    ",
            "example": false
          },
          "appointmentDate": {
            "type": "string",
            "description": "The date of the appointment instance",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of the appointment instance",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the appointment instance",
            "format": "partial-time",
            "example": "10:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to the appointment instance.\n    Could support adding a note specific to an individual prisoner's attendance of a specific group appointment\n    occurrence. Something that is supported within existing systems\n    ",
            "example": "This appointment will help prisoner A1234BC adjust to life outside of prison"
          },
          "created": {
            "type": "string",
            "description": "The date and time this appointment instance was created. Will not change",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that created the appointment instance.\n    Usually a NOMIS username\n    ",
            "example": "AAA01U"
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment instance was last changed.\n    Will be null if the appointment instance has not been altered since it was created\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that edited the appointment instance.\n    Will be null if the appointment instance has not been altered since it was created\n    ",
            "example": "AAA01U"
          }
        },
        "description": "\n  Represents an appointment instance for a specific prisoner to attend at the specified location, date and time.\n  The fully denormalised representation of the appointment occurrences and allocations.\n  "
      },
      "AppointmentDetails": {
        "required": [
          "appointmentType",
          "category",
          "comment",
          "created",
          "createdBy",
          "id",
          "inCell",
          "occurrences",
          "prisonCode",
          "prisoners",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment",
            "format": "int64",
            "example": 12345
          },
          "appointmentType": {
            "type": "string",
            "description": "The appointment type (INDIVIDUAL or GROUP)",
            "example": "INDIVIDUAL",
            "enum": [
              "INDIVIDUAL",
              "GROUP"
            ]
          },
          "prisonCode": {
            "type": "string",
            "description": "\n    The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.\n    Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences\n    ",
            "example": "SKI"
          },
          "prisoners": {
            "type": "array",
            "description": "\n    Summary of the prisoner or prisoners allocated to the first future occurrence (or most recent past occurrence if all\n    occurrences are in the past) of this appointment. Prisoners are allocated at the occurrence level to allow for per\n    occurrence allocation changes. The occurrence summary contains a count of allocated prisoners rather than the full\n    list as the expected usage is to show a summary of the occurrences then a link to display the full occurrence details.\n    ",
            "items": {
              "$ref": "#/components/schemas/PrisonerSummary"
            }
          },
          "category": {
            "$ref": "#/components/schemas/AppointmentCategorySummary"
          },
          "appointmentDescription": {
            "type": "string",
            "description": "\n    Free text description for an appointment.  This is used to add more context to the appointment category.\n    ",
            "example": "Meeting with the governor"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/AppointmentLocationSummary"
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location will be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date of the appointment or first appointment occurrence in the series",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "10:30"
          },
          "repeat": {
            "$ref": "#/components/schemas/AppointmentRepeat"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to the appointment\n    ",
            "example": "This appointment will help adjusting to life outside of prison"
          },
          "created": {
            "type": "string",
            "description": "The date and time this appointment was created. Will not change",
            "format": "date-time"
          },
          "createdBy": {
            "$ref": "#/components/schemas/UserSummary"
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment was last changed.\n    Will be null if the appointment has not been edited since it was created\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserSummary"
          },
          "occurrences": {
            "type": "array",
            "description": "\n    Summary of the individual occurrence or occurrences of this appointment. Non recurring appointments will have a single\n    appointment occurrence containing the same property values as the parent appointment. The same start date, time\n    and end time. Recurring appointments will have a series of occurrences. The first in the series will also\n    contain the same property values as the parent appointment and subsequent occurrences will have start dates\n    following on from the original start date incremented as specified by the appointment's schedule. Each occurrence\n    can be edited independently of the parent. All properties of an occurrence override those of the parent appointment\n    with a null coalesce back to the parent for nullable properties. The full series of occurrences specified by the\n    schedule will be created in advance.\n    ",
            "items": {
              "$ref": "#/components/schemas/AppointmentOccurrenceSummary"
            }
          }
        },
        "description": "\n  The top level appointment details for display purposes. Contains only properties needed to make additional API calls\n  and to display.\n  "
      },
      "AppointmentOccurrenceSummary": {
        "required": [
          "comment",
          "id",
          "inCell",
          "isCancelled",
          "isEdited",
          "prisonerCount",
          "sequenceNumber",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment occurrence",
            "format": "int64",
            "example": 123456
          },
          "sequenceNumber": {
            "type": "integer",
            "description": "The sequence number of this appointment occurrence within the recurring appointment series",
            "format": "int32",
            "example": 3
          },
          "prisonerCount": {
            "type": "integer",
            "description": "\n    The number of prisoners allocated to this appointment occurrence\n    ",
            "format": "int32",
            "example": 3
          },
          "internalLocation": {
            "$ref": "#/components/schemas/AppointmentLocationSummary"
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location will be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date this appointment occurrence is taking place on",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to this appointment occurrence. Can be different to the parent appointment if this occurrence has\n    been edited.\n    ",
            "example": "This appointment occurrence has been rescheduled due to staff availability"
          },
          "isEdited": {
            "type": "boolean",
            "description": "\n    Indicates that this appointment occurrence has been independently changed from the original state it was in when\n    it was created as part of a recurring series\n    ",
            "example": false
          },
          "isCancelled": {
            "type": "boolean",
            "description": "\n    Indicates that this appointment occurrence has been cancelled\n    ",
            "example": false
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment occurrence was last edited.\n    Will be null if the appointment occurrence has not been independently changed from the original state it was in when\n    it was created as part of a recurring series\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "$ref": "#/components/schemas/UserSummary"
          }
        },
        "description": "\n  Summarises a specific appointment occurrence. Will contain copies of the parent appointment's properties unless they\n  have been changed on this appointment occurrence.\n  "
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
