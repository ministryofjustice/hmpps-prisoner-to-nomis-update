{
  "openapi" : "3.1.0",
  "info" : {
    "title" : "Incident Reporting API",
    "description" : "API for viewing and managing incident reports",
    "contact" : {
      "name" : "HMPPS Digital Studio",
      "email" : "feedback@digital.justice.gov.uk"
    },
    "license" : {
      "name" : "MIT",
      "identifier" : "MIT"
    },
    "version" : "2025-07-22.75.77615d0"
  },
  "servers" : [ {
    "url" : "/",
    "description" : "Current url"
  } ],
  "security" : [ {
    "bearer-jwt" : [ "read", "write" ]
  }, {
    "hmpps-auth" : [ ]
  } ],
  "tags" : [ {
    "name" : "Constants",
    "description" : "Constants and enumerations used in incident reports"
  }, {
    "name" : "Questions and responses forming an incident report",
    "description" : "Create, retrieve and delete question-response pairs that form incident reports"
  }, {
    "name" : "Incident reports",
    "description" : "Create, retrieve, update and delete incident reports"
  }, {
    "name" : "Objects related to incident reports",
    "description" : "Create, retrieve, update and delete objects that are related to incident reports"
  }, {
    "name" : "Migrate/Upsert NOMIS Incident Report",
    "description" : "Migrate or synchronise NOMIS incident report to Incident Report Service"
  } ],
  "paths" : {
    "/queue-admin/retry-dlq/{dlqName}" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "retryDlq",
        "parameters" : [ {
          "name" : "dlqName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/RetryDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-all-dlqs" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "retryAllDlqs",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/RetryDlqResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/purge-queue/{queueName}" : {
      "put" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "purgeQueue",
        "parameters" : [ {
          "name" : "queueName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/PurgeQueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/questions" : {
      "get" : {
        "tags" : [ "Questions and responses forming an incident report" ],
        "summary" : "Returns all non-historic questions in an incident report with their responses",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "getQuestionsAndResponses",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns all questions and responses in report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Questions and responses forming an incident report" ],
        "summary" : "Add new questions with responses to the end of the current list or update them in place if question codes match",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "addOrUpdateQuestionsWithResponses",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "array",
                "description" : "List of question and responses to add or update in place",
                "items" : {
                  "$ref" : "#/components/schemas/AddOrUpdateQuestionWithResponses",
                  "minItems" : 1
                },
                "minItems" : 1
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns all questions and responses in report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Questions and responses forming an incident report" ],
        "summary" : "Deletes questions (identified by code) from an incident report along with their responses",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "deleteQuestionsAndResponses",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "code",
          "in" : "query",
          "description" : "Codes for questions to delete",
          "required" : false,
          "schema" : {
            "type" : "array",
            "items" : {
              "type" : "string",
              "example" : 40102,
              "minLength" : 1
            },
            "maxItems" : 2147483647,
            "minItems" : 1
          },
          "example" : [ 40102, 40103 ]
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns all remaining questions and responses in report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/Question"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/upsert" : {
      "post" : {
        "tags" : [ "Migrate/Upsert NOMIS Incident Report" ],
        "summary" : "Migrate a report",
        "description" : "Requires role MIGRATE_INCIDENT_REPORTS and write scope",
        "operationId" : "upsertIncidentReport",
        "requestBody" : {
          "description" : "Incident report created or updated in NOMIS",
          "content" : {
            "application/json" : {
              "schema" : {
                "type" : "string",
                "oneOf" : [ {
                  "$ref" : "#/components/schemas/NomisSyncRequest"
                }, {
                  "$ref" : "#/components/schemas/NomisSyncCreateRequest"
                }, {
                  "$ref" : "#/components/schemas/NomisSyncUpdateRequest"
                } ],
                "writeOnly" : true
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MIGRATE_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Migrated NOMIS incident report id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NomisSyncReportId"
                }
              }
            }
          },
          "200" : {
            "description" : "Updated NOMIS incident report id",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/NomisSyncReportId"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found, when id is provided",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports" : {
      "get" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Returns pages of filtered incident reports (with only basic information)",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "getBasicReports",
        "parameters" : [ {
          "name" : "reference",
          "in" : "query",
          "description" : "Filter by given human-readable report reference",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "null",
            "description" : "Filter by given human-readable report reference",
            "example" : "11124143",
            "maxLength" : 25,
            "minLength" : 1,
            "pattern" : "^\\d+$"
          },
          "example" : "11124143"
        }, {
          "name" : "location",
          "in" : "query",
          "description" : "Filter by given locations, typically prison IDs",
          "required" : false,
          "schema" : {
            "type" : "array",
            "default" : null,
            "items" : {
              "type" : "string",
              "example" : "MDI",
              "maxLength" : 20,
              "minLength" : 2
            }
          },
          "example" : "[LEI,MDI]"
        }, {
          "name" : "source",
          "in" : "query",
          "description" : "Filter by given information source",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "null",
            "description" : "Filter by given information source",
            "enum" : [ "DPS", "NOMIS" ],
            "example" : "DPS"
          },
          "example" : "DPS"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter by given statuses",
          "required" : false,
          "schema" : {
            "type" : "array",
            "default" : null,
            "items" : {
              "type" : "string",
              "enum" : [ "DRAFT", "AWAITING_REVIEW", "ON_HOLD", "NEEDS_UPDATING", "UPDATED", "CLOSED", "POST_INCIDENT_UPDATE", "DUPLICATE", "NOT_REPORTABLE", "REOPENED", "WAS_CLOSED" ]
            }
          },
          "example" : "[CLOSED,DUPLICATE]"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Filter by given incident types (not type families)",
          "required" : false,
          "schema" : {
            "type" : "array",
            "default" : null,
            "items" : {
              "type" : "string",
              "enum" : [ "ABSCOND_1", "ASSAULT_1", "ASSAULT_2", "ASSAULT_3", "ASSAULT_4", "ASSAULT_5", "ATTEMPTED_ESCAPE_FROM_PRISON_1", "ATTEMPTED_ESCAPE_FROM_ESCORT_1", "BARRICADE_1", "BOMB_1", "BREACH_OF_SECURITY_1", "CLOSE_DOWN_SEARCH_1", "CONCERTED_INDISCIPLINE_1", "DAMAGE_1", "DEATH_PRISONER_1", "DEATH_OTHER_1", "DISORDER_1", "DISORDER_2", "DRONE_SIGHTING_1", "DRONE_SIGHTING_2", "DRONE_SIGHTING_3", "DRUGS_1", "ESCAPE_FROM_PRISON_1", "ESCAPE_FROM_ESCORT_1", "FIND_1", "FIND_2", "FIND_3", "FIND_4", "FIND_5", "FIND_6", "FIRE_1", "FIREARM_1", "FOOD_REFUSAL_1", "HOSTAGE_1", "INCIDENT_AT_HEIGHT_1", "KEY_OR_LOCK_1", "KEY_OR_LOCK_2", "MISCELLANEOUS_1", "MOBILE_PHONE_1", "RADIO_COMPROMISE_1", "RELEASE_IN_ERROR_1", "SELF_HARM_1", "TEMPORARY_RELEASE_FAILURE_1", "TEMPORARY_RELEASE_FAILURE_2", "TEMPORARY_RELEASE_FAILURE_3", "TEMPORARY_RELEASE_FAILURE_4", "TOOL_LOSS_1" ]
            }
          },
          "example" : "[DAMAGE_1]"
        }, {
          "name" : "incidentDateFrom",
          "in" : "query",
          "description" : "Filter for incidents occurring since this date (inclusive)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "default" : null,
            "description" : "Filter for incidents occurring since this date (inclusive)",
            "example" : "2024-01-01"
          },
          "example" : "2024-01-01"
        }, {
          "name" : "incidentDateUntil",
          "in" : "query",
          "description" : "Filter for incidents occurring until this date (inclusive)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "default" : null,
            "description" : "Filter for incidents occurring until this date (inclusive)",
            "example" : "2024-05-31"
          },
          "example" : "2024-05-31"
        }, {
          "name" : "reportedDateFrom",
          "in" : "query",
          "description" : "Filter for incidents reported since this date (inclusive)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "default" : null,
            "description" : "Filter for incidents reported since this date (inclusive)",
            "example" : "2024-01-01"
          },
          "example" : "2024-01-01"
        }, {
          "name" : "reportedDateUntil",
          "in" : "query",
          "description" : "Filter for incidents reported until this date (inclusive)",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date",
            "default" : null,
            "description" : "Filter for incidents reported until this date (inclusive)",
            "example" : "2024-05-31"
          },
          "example" : "2024-05-31"
        }, {
          "name" : "reportedByUsername",
          "in" : "query",
          "description" : "Filter for incidents reported by username",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : null,
            "description" : "Filter for incidents reported by username",
            "example" : "abc12a",
            "maxLength" : 2147483647,
            "minLength" : 3
          },
          "example" : "abc12a"
        }, {
          "name" : "involvingStaffUsername",
          "in" : "query",
          "description" : "Filter for incidents involving staff identified by username",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : null,
            "description" : "Filter for incidents involving staff identified by username",
            "example" : "abc12a",
            "maxLength" : 2147483647,
            "minLength" : 3
          },
          "example" : "abc12a"
        }, {
          "name" : "involvingPrisonerNumber",
          "in" : "query",
          "description" : "Filter for incidents involving prisoners identified by prisoner number",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : null,
            "description" : "Filter for incidents involving prisoners identified by prisoner number",
            "example" : "A1234AA",
            "maxLength" : 10,
            "minLength" : 7
          },
          "example" : "A1234AA"
        }, {
          "name" : "page",
          "in" : "query",
          "description" : "Zero-based page index (0..N)",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 0,
            "minimum" : 0
          }
        }, {
          "name" : "size",
          "in" : "query",
          "description" : "The size of the page to be returned",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "default" : 20,
            "minimum" : 1
          }
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "Sorting criteria in the format: property,(asc|desc). Default sort order is ascending. Multiple sort criteria are supported.",
          "required" : false,
          "schema" : {
            "type" : "array",
            "default" : [ "incidentDateAndTime,DESC" ],
            "items" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "When input parameters are not valid",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns a page of incident reports",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SimplePageReportBasic"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Creates a draft incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s creator.",
        "operationId" : "createReport",
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/CreateReportRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns created draft incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportWithDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/staff-involved" : {
      "get" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Returns staff involvement for this incident report",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "listObjects",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns staff involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StaffInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Adds an involved member of staff to this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "addObject",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddStaffInvolvement"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns staff involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StaffInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/prisoners-involved" : {
      "get" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Returns prisoner involvement for this incident report",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "listObjects_1",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns prisoner involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Adds an involved prisoner to this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "addObject_1",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddPrisonerInvolvement"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns prisoner involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/description-addendums" : {
      "get" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Returns description addendums for this incident report",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "listObjects_2",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns description addendums",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DescriptionAddendum"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Adds a description addendum to this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report modifier and possibly as addendum author.",
        "operationId" : "addObject_2",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddDescriptionAddendum"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns description addendums",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DescriptionAddendum"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/correction-requests" : {
      "get" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Returns correction requests for this incident report",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "listObjects_3",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns correction requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CorrectionRequest"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Adds a correction request to this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the correction requester and report modifier.",
        "operationId" : "addObject_3",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/AddCorrectionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201" : {
            "description" : "Returns correction requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CorrectionRequest"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/staff-involved/{index}" : {
      "delete" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Remove an involved member of staff from this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "removeObject",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to delete (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to delete (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns staff involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StaffInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Update an involved member of staff in this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "updateObject",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to update (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to update (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateStaffInvolvement"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns staff involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StaffInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/prisoners-involved/{index}" : {
      "delete" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Remove an involved prisoner from this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "removeObject_1",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to delete (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to delete (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns prisoner involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Update an involved prisoner in this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "updateObject_1",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to update (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to update (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdatePrisonerInvolvement"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns prisoner involvement",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerInvolvement"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/description-addendums/{index}" : {
      "delete" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Remove a description addendum from this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "removeObject_2",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to delete (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to delete (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns description addendums",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DescriptionAddendum"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Update a description addendum in this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which overrides current report modifier.",
        "operationId" : "updateObject_2",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to update (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to update (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateDescriptionAddendum"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns description addendums",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/DescriptionAddendum"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{reportId}/correction-requests/{index}" : {
      "delete" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Remove a correction request from this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "removeObject_3",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to delete (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to delete (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns correction requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CorrectionRequest"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Objects related to incident reports" ],
        "summary" : "Update a correction request in this incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which overrides current correction requester and report modifier.",
        "operationId" : "updateObject_3",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        }, {
          "name" : "index",
          "in" : "path",
          "description" : "The index of the object to update (starts from 1)",
          "required" : true,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The index of the object to update (starts from 1)",
            "example" : 1
          },
          "example" : 1
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateCorrectionRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns correction requests",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/CorrectionRequest"
                  }
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{id}" : {
      "get" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Returns the incident report (with only basic information) for this ID",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "getBasicReportById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns an incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportBasic"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Deletes an incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope.",
        "operationId" : "deleteReport",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns deleted incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportWithDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Updates key properties of an existing incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "updateReport",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The internal ID of the report to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The internal ID of the report to update",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/UpdateReportRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportBasic"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{id}/type" : {
      "patch" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Changes the type of an existing incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "changeReportType",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The internal ID of the report to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The internal ID of the report to update",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangeTypeRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportWithDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{id}/status" : {
      "patch" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Changes the status of an existing incident report",
        "description" : "Requires role MAINTAIN_INCIDENT_REPORTS and write scope. Authentication token must provide a username which is recorded as the report’s modifier.",
        "operationId" : "changeReportStatus",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The internal ID of the report to update",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The internal ID of the report to update",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "requestBody" : {
          "content" : {
            "application/json" : {
              "schema" : {
                "$ref" : "#/components/schemas/ChangeStatusRequest"
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the MAINTAIN_INCIDENT_REPORTS role with write scope.",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Invalid request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns updated incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportWithDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/subject-access-request" : {
      "get" : {
        "tags" : [ "Subject Access Request" ],
        "summary" : "Provides content for a prisoner to satisfy the needs of a subject access request on their behalf",
        "description" : "Requires role SAR_DATA_ACCESS or additional role as specified by hmpps.sar.additionalAccessRole configuration.",
        "operationId" : "getSarContentByReference",
        "parameters" : [ {
          "name" : "prn",
          "in" : "query",
          "description" : "NOMIS Prison Reference Number",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "crn",
          "in" : "query",
          "description" : "nDelius Case Reference Number",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fromDate",
          "in" : "query",
          "description" : "Optional parameter denoting minimum date of event occurrence which should be returned in the response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        }, {
          "name" : "toDate",
          "in" : "query",
          "description" : "Optional parameter denoting maximum date of event occurrence which should be returned in the response",
          "required" : false,
          "schema" : {
            "type" : "string",
            "format" : "date"
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden, requires an appropriate role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Unexpected error occurred",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Request successfully processed - content found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/HmppsSubjectAccessRequestContent"
                }
              }
            }
          },
          "204" : {
            "description" : "Request successfully processed - no content found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "209" : {
            "description" : "Subject Identifier is not recognised by this service",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "object"
                }
              }
            }
          },
          "401" : {
            "description" : "The client does not have authorisation to make this request",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reports/{reportId}/{reportVariantId}" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiDataset",
        "parameters" : [ {
          "name" : "selectedPage",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 1,
            "minimum" : 1
          }
        }, {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 10,
            "minimum" : 1
          }
        }, {
          "name" : "sortColumn",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "sortedAsc",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "object",
                    "additionalProperties" : { }
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/{fieldId}" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the dataset for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiDynamicFilter",
        "parameters" : [ {
          "name" : "pageSize",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int64",
            "default" : 10,
            "minimum" : 1
          }
        }, {
          "name" : "sortedAsc",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "boolean"
          }
        }, {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "prefix",
          "in" : "query",
          "description" : "The value to match the start of the fieldId",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "Lond"
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "fieldId",
          "in" : "path",
          "description" : "The name of the schema field which will be used as a dynamic filter.",
          "required" : true,
          "schema" : {
            "type" : "string",
            "minLength" : 1
          },
          "example" : "name"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "type" : "string"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/reports/{reportId}/{reportVariantId}/count" : {
      "get" : {
        "tags" : [ "Data API - Synchronous" ],
        "description" : "Returns the number of records for the given report ID and report variant ID filtered by the filters provided in the query.",
        "operationId" : "configuredApiCount",
        "parameters" : [ {
          "name" : "filters",
          "in" : "query",
          "description" : "The filter query parameters have to start with the prefix \"filters.\" followed by the name of the filter.\n      For range filters, like date for instance, these need to be followed by a .start or .end suffix accordingly.\n      For multiselect filters, these are passed as one query parameter per filter with a comma separated list of values:\n      filters.someMultiselectFilter=a,b,c\n    ",
          "required" : true,
          "schema" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "string"
            }
          },
          "example" : {
            "filters.date.start" : "2023-04-25",
            "filters.date.end" : "2023-05-30",
            "filters.someMultiselectFilter" : "a,b,c"
          }
        }, {
          "name" : "reportId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "reportVariantId",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "default" : {
            "description" : "default response",
            "headers" : {
              "x-no-data-warning" : {
                "description" : "Provides additional information about why no data has been returned.",
                "style" : "simple",
                "schema" : {
                  "type" : "string"
                }
              }
            },
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/Count"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/queue-admin/get-dlq-messages/{dlqName}" : {
      "get" : {
        "tags" : [ "hmpps-queue-resource" ],
        "operationId" : "getDlqMessages",
        "parameters" : [ {
          "name" : "dlqName",
          "in" : "path",
          "required" : true,
          "schema" : {
            "type" : "string"
          }
        }, {
          "name" : "maxMessages",
          "in" : "query",
          "required" : false,
          "schema" : {
            "type" : "integer",
            "format" : "int32",
            "default" : 100
          }
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/GetDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/{id}/with-details" : {
      "get" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Returns the incident report (with all related details) for this ID",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "getReportWithDetailsById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The incident report id",
          "required" : true,
          "schema" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The incident report id",
            "example" : "11111111-2222-3333-4444-555555555555"
          },
          "example" : "11111111-2222-3333-4444-555555555555"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns an incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportWithDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/reference/{reportReference}" : {
      "get" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Returns the incident report (with only basic information) for this reference",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "getBasicReportByReference",
        "parameters" : [ {
          "name" : "reportReference",
          "in" : "path",
          "description" : "The incident report reference",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The incident report reference",
            "example" : "11124143"
          },
          "example" : "11124143"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns an incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportBasic"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/incident-reports/reference/{reportReference}/with-details" : {
      "get" : {
        "tags" : [ "Incident reports" ],
        "summary" : "Returns the incident report (with all related details) for this reference",
        "description" : "Requires role VIEW_INCIDENT_REPORTS",
        "operationId" : "getReportWithDetailsByReference",
        "parameters" : [ {
          "name" : "reportReference",
          "in" : "path",
          "description" : "The incident report reference",
          "required" : true,
          "schema" : {
            "type" : "string",
            "description" : "The incident report reference",
            "example" : "11124143"
          },
          "example" : "11124143"
        } ],
        "responses" : {
          "403" : {
            "description" : "Missing required role. Requires the VIEW_INCIDENT_REPORTS role",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns an incident report",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ReportWithDetails"
                }
              }
            }
          },
          "401" : {
            "description" : "Unauthorized to access this endpoint",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404" : {
            "description" : "Data not found",
            "content" : {
              "application/json" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/definitions" : {
      "get" : {
        "tags" : [ "Report Definition API" ],
        "description" : "Gets summaries of all report definitions",
        "operationId" : "definitions",
        "parameters" : [ {
          "name" : "renderMethod",
          "in" : "query",
          "description" : "Set this parameter to filter the list to only include reports for the given rendering method.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "enum" : [ "HTML", "PDF", "SVG" ]
          },
          "example" : "HTML"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ReportDefinitionSummary"
                  }
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/definitions/{reportId}/{variantId}" : {
      "get" : {
        "tags" : [ "Report Definition API" ],
        "description" : "Gets report definition containing a single variant.",
        "operationId" : "definition",
        "parameters" : [ {
          "name" : "reportId",
          "in" : "path",
          "description" : "The ID of the report definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "external-movements"
        }, {
          "name" : "variantId",
          "in" : "path",
          "description" : "The ID of the variant definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "list"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/SingleVariantReportDefinition"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/definitions/{dataProductDefinitionId}/dashboards/{dashboardId}" : {
      "get" : {
        "tags" : [ "Metric Definition API" ],
        "description" : "Gets the metric dashboard definition.",
        "operationId" : "dashboardDefinition",
        "parameters" : [ {
          "name" : "dataProductDefinitionId",
          "in" : "path",
          "description" : "The ID of the Data Product Definition.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "external-movements"
        }, {
          "name" : "dashboardId",
          "in" : "path",
          "description" : "The ID of the dashboard.",
          "required" : true,
          "schema" : {
            "type" : "string"
          },
          "example" : "dashboardId"
        }, {
          "name" : "dataProductDefinitionsPath",
          "in" : "query",
          "description" : "This optional parameter sets the path of the directory of the data product definition files your application will use.\n      \"This query parameter is intended to be used in conjunction with the `dpr.lib.dataProductDefinitions.host` property to retrieve definition files from another application by using a web client.",
          "required" : false,
          "schema" : {
            "type" : "string",
            "default" : "definitions/prisons/orphanage"
          },
          "example" : "definitions/prisons/orphanage"
        } ],
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "OK",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/DashboardDefinition"
                }
              }
            }
          }
        },
        "security" : [ {
          "bearer-jwt" : [ ]
        } ]
      }
    },
    "/constants/types" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes and descriptions of incident types",
        "operationId" : "types",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TypeConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constants/type-families" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes and descriptions of incident types families",
        "operationId" : "typeFamilies",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/TypeFamilyConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constants/statuses" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes and descriptions of incident statuses",
        "operationId" : "statuses",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StatusConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constants/staff-roles" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes and descriptions of roles of staff involvement in an incident",
        "operationId" : "staffRoles",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/StaffRoleConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constants/prisoner-roles" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes and descriptions of roles of a prisoner’s involvement in an incident",
        "operationId" : "prisonerRoles",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerRoleConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constants/prisoner-outcomes" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes and descriptions of outcomes from a prisoner’s involvement in an incident",
        "operationId" : "prisonerOutcomes",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/PrisonerOutcomeConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constants/information-sources" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes and descriptions of information sources for incident reports",
        "operationId" : "informationSource",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes and descriptions",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/constants/error-codes" : {
      "get" : {
        "tags" : [ "Constants" ],
        "summary" : "List codes used to discriminate between error types",
        "operationId" : "errorCodes",
        "responses" : {
          "403" : {
            "description" : "Forbidden",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400" : {
            "description" : "Bad Request",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "429" : {
            "description" : "Too Many Requests",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "500" : {
            "description" : "Internal Server Error",
            "content" : {
              "*/*" : {
                "schema" : {
                  "$ref" : "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200" : {
            "description" : "Returns codes",
            "content" : {
              "application/json" : {
                "schema" : {
                  "type" : "array",
                  "items" : {
                    "$ref" : "#/components/schemas/ConstantDescription"
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components" : {
    "schemas" : {
      "ErrorResponse" : {
        "type" : "object",
        "description" : "Error response",
        "properties" : {
          "status" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "HTTP status code",
            "example" : 500
          },
          "userMessage" : {
            "type" : "string",
            "description" : "User message for the error",
            "example" : "No incident report found for ID `55544222`"
          },
          "developerMessage" : {
            "type" : "string",
            "description" : "More detailed error message",
            "example" : "Details, sometimes a stack trace"
          },
          "errorCode" : {
            "type" : "integer",
            "format" : "int32",
            "default" : "null",
            "description" : "When present, uniquely identifies the type of error making it easier for clients to discriminate without relying on error description or HTTP status code; see ` uk.gov.justice.digital.hmpps.incidentreporting.resource.ErrorCode` enumeration in hmpps-incident-reporting-api",
            "example" : 101
          },
          "moreInfo" : {
            "type" : "string",
            "default" : "null",
            "description" : "More information about the error",
            "example" : "[Rarely used, error-specific]"
          }
        },
        "readOnly" : true,
        "required" : [ "developerMessage", "status", "userMessage" ]
      },
      "RetryDlqResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "messagesFoundCount" ]
      },
      "PurgeQueueResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          }
        },
        "required" : [ "messagesFoundCount" ]
      },
      "AddOrUpdateQuestionResponse" : {
        "type" : "object",
        "description" : "A response to a question",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The response code; used as a unique identifier within one report",
            "maxLength" : 60,
            "minLength" : 1
          },
          "response" : {
            "type" : "string",
            "description" : "The response text as seen by downstream data consumers",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "label" : {
            "type" : "string",
            "description" : "The response text as seen by the user at the point of entry",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "default" : "null",
            "description" : "Optional response as a date",
            "example" : "2024-04-29"
          },
          "additionalInformation" : {
            "type" : "string",
            "default" : "null",
            "description" : "Optional additional information"
          }
        },
        "required" : [ "label", "response" ],
        "writeOnly" : true
      },
      "AddOrUpdateQuestionWithResponses" : {
        "type" : "object",
        "description" : "Payload to add question with responses to an incident report or, if the question code exists in the report, update the question and overwrite responses",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The question code; used as a unique identifier within one report",
            "maxLength" : 60,
            "minLength" : 1
          },
          "question" : {
            "type" : "string",
            "description" : "The question text as seen by downstream data consumers",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "label" : {
            "type" : "string",
            "description" : "The question text as seen by the user at the point of entry",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "responses" : {
            "type" : "array",
            "description" : "The responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/AddOrUpdateQuestionResponse"
            },
            "maxItems" : 2147483647,
            "minItems" : 1,
            "minLength" : 1
          },
          "additionalInformation" : {
            "type" : "string",
            "default" : "null",
            "description" : "Optional additional information"
          }
        },
        "required" : [ "code", "label", "question", "responses" ],
        "writeOnly" : true
      },
      "Question" : {
        "type" : "object",
        "description" : "Question with responses making up an incident report",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The question code; used as a unique identifier within one report and typically refers to a specific question for an incident type"
          },
          "question" : {
            "type" : "string",
            "description" : "The question text as seen by downstream data consumers"
          },
          "label" : {
            "type" : "string",
            "description" : "The question text as seen by the user at the point of entry"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the questions"
          },
          "responses" : {
            "type" : "array",
            "description" : "The responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/Response"
            }
          },
          "additionalInformation" : {
            "type" : "string",
            "description" : "Optional additional information"
          }
        },
        "readOnly" : true,
        "required" : [ "code", "label", "question", "responses", "sequence" ]
      },
      "Response" : {
        "type" : "object",
        "description" : "Response to a question making up an incident report",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Unique identifier for a response to a question"
          },
          "response" : {
            "type" : "string",
            "description" : "The response text as seen by downstream data consumers"
          },
          "label" : {
            "type" : "string",
            "description" : "The response text as seen by the user at the point of entry"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the responses"
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Optional response as a date",
            "example" : "2024-04-29"
          },
          "additionalInformation" : {
            "type" : "string",
            "default" : "null",
            "description" : "Optional additional information"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "Username of person who responded to the question"
          },
          "recordedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the response was made",
            "example" : "2024-04-29T12:34:56.789012"
          }
        },
        "readOnly" : true,
        "required" : [ "label", "recordedAt", "recordedBy", "response", "sequence" ]
      },
      "DescriptionAddendum" : {
        "type" : "object",
        "description" : "Addendum to the description of an incident",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the addendums for this report"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "Username of user who added this addendum",
            "example" : "USER_1"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When addendum was added",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of person that added this addendum",
            "example" : "John"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of person that added this addendum",
            "example" : "Doe"
          },
          "text" : {
            "type" : "string",
            "description" : "Addendum text"
          }
        },
        "readOnly" : true,
        "required" : [ "createdAt", "createdBy", "firstName", "lastName", "sequence", "text" ]
      },
      "NomisCode" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Code"
          },
          "description" : {
            "type" : "string",
            "description" : "Description"
          }
        },
        "required" : [ "code", "description" ]
      },
      "NomisHistory" : {
        "type" : "object",
        "properties" : {
          "questionnaireId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The history questionnaire id for the incident"
          },
          "type" : {
            "type" : "string",
            "description" : "The questionnaire type"
          },
          "description" : {
            "type" : "string",
            "description" : "The questionnaire description"
          },
          "questions" : {
            "type" : "array",
            "description" : "Questions asked for the questionnaire",
            "items" : {
              "$ref" : "#/components/schemas/NomisHistoryQuestion"
            }
          },
          "incidentChangeDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the questionnaire was changed with time"
          },
          "incidentChangeStaff" : {
            "$ref" : "#/components/schemas/NomisStaff",
            "description" : "Who changed the questionnaire"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the historical incident questionnaire was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the historical incident questionnaire"
          }
        },
        "required" : [ "createDateTime", "createdBy", "incidentChangeStaff", "questionnaireId", "questions", "type" ]
      },
      "NomisHistoryQuestion" : {
        "type" : "object",
        "properties" : {
          "questionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The sequence number of the response question for this incident"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the question for this incident"
          },
          "question" : {
            "type" : "string",
            "description" : "The Question being asked"
          },
          "answers" : {
            "type" : "array",
            "description" : "Historical list of Responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/NomisHistoryResponse"
            }
          }
        },
        "required" : [ "answers", "question", "questionId", "sequence" ]
      },
      "NomisHistoryResponse" : {
        "type" : "object",
        "properties" : {
          "questionResponseId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the questionnaire question answer"
          },
          "responseSequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the response for this incident"
          },
          "answer" : {
            "type" : "string",
            "description" : "The answer text"
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Response date added to the response by recording staff"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment added to the response by recording staff"
          },
          "recordingStaff" : {
            "$ref" : "#/components/schemas/NomisStaff",
            "description" : "Recording staff"
          }
        },
        "required" : [ "recordingStaff", "responseSequence" ]
      },
      "NomisOffender" : {
        "type" : "object",
        "properties" : {
          "offenderNo" : {
            "type" : "string",
            "description" : "NOMIS id"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of offender"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of offender"
          }
        },
        "required" : [ "firstName", "lastName", "offenderNo" ]
      },
      "NomisOffenderParty" : {
        "type" : "object",
        "properties" : {
          "offender" : {
            "$ref" : "#/components/schemas/NomisOffender",
            "description" : "Offender involved in the incident"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number providing an order for a list of offender parties"
          },
          "role" : {
            "$ref" : "#/components/schemas/NomisCode",
            "description" : "Offender role in the incident"
          },
          "outcome" : {
            "$ref" : "#/components/schemas/NomisCode",
            "description" : "The outcome of the incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "General information about the incident"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the offender party was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the offender party"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the offender party was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the offender party"
          }
        },
        "required" : [ "createDateTime", "createdBy", "offender", "role", "sequence" ]
      },
      "NomisQuestion" : {
        "type" : "object",
        "properties" : {
          "questionId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The questionnaire question id"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the question for this incident"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the question was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the question"
          },
          "question" : {
            "type" : "string",
            "description" : "The Question being asked"
          },
          "answers" : {
            "type" : "array",
            "description" : "List of Responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/NomisResponse"
            }
          }
        },
        "required" : [ "answers", "createDateTime", "createdBy", "question", "questionId", "sequence" ]
      },
      "NomisReport" : {
        "type" : "object",
        "description" : "NOMIS Incident Report Details",
        "properties" : {
          "incidentId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The Incident id"
          },
          "questionnaireId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the questionnaire associated with this incident"
          },
          "title" : {
            "type" : "string",
            "description" : "A summary of the incident"
          },
          "description" : {
            "type" : "string",
            "description" : "The incident details"
          },
          "prison" : {
            "$ref" : "#/components/schemas/NomisCode",
            "description" : "Prison where the incident occurred"
          },
          "status" : {
            "$ref" : "#/components/schemas/NomisStatus",
            "description" : "Status details"
          },
          "type" : {
            "type" : "string",
            "description" : "The incident questionnaire type"
          },
          "lockedResponse" : {
            "type" : "boolean",
            "description" : "If the response is locked ie if the response is completed"
          },
          "incidentDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time of the incident"
          },
          "reportingStaff" : {
            "$ref" : "#/components/schemas/NomisStaff",
            "description" : "The staff member who reported the incident"
          },
          "reportedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the incident was reported"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the incident was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the incident"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the incident was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the incident"
          },
          "followUpDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "The follow up date for the incident"
          },
          "staffParties" : {
            "type" : "array",
            "description" : "Staff involved in the incident",
            "items" : {
              "$ref" : "#/components/schemas/NomisStaffParty"
            }
          },
          "offenderParties" : {
            "type" : "array",
            "description" : "Offenders involved in the incident",
            "items" : {
              "$ref" : "#/components/schemas/NomisOffenderParty"
            }
          },
          "requirements" : {
            "type" : "array",
            "description" : "Requirements for completing the incident report",
            "items" : {
              "$ref" : "#/components/schemas/NomisRequirement"
            }
          },
          "questions" : {
            "type" : "array",
            "description" : "Questions asked for the incident",
            "items" : {
              "$ref" : "#/components/schemas/NomisQuestion"
            }
          },
          "history" : {
            "type" : "array",
            "description" : "Historical questionnaire details for the incident",
            "items" : {
              "$ref" : "#/components/schemas/NomisHistory"
            }
          },
          "descriptionParts" : {
            "$ref" : "#/components/schemas/PairStringListDescriptionAddendum"
          }
        },
        "required" : [ "createDateTime", "createdBy", "descriptionParts", "history", "incidentDateTime", "incidentId", "lockedResponse", "offenderParties", "prison", "questionnaireId", "questions", "reportedDateTime", "reportingStaff", "requirements", "staffParties", "status", "type" ]
      },
      "NomisRequirement" : {
        "type" : "object",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number providing an order for a list of requirements"
          },
          "comment" : {
            "type" : "string",
            "description" : "The update required to the incident report"
          },
          "recordedDate" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "Date and time the requirement was recorded"
          },
          "staff" : {
            "$ref" : "#/components/schemas/NomisStaff",
            "description" : "The staff member who made the requirement request"
          },
          "prisonId" : {
            "type" : "string",
            "description" : "The reporting location of the staff"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the requirement was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the requirement"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the requirement was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the requirement"
          }
        },
        "required" : [ "createDateTime", "createdBy", "prisonId", "recordedDate", "sequence", "staff" ]
      },
      "NomisResponse" : {
        "type" : "object",
        "properties" : {
          "questionResponseId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The id of the questionnaire question answer"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number of the response for this incident"
          },
          "answer" : {
            "type" : "string",
            "description" : "The answer text"
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Response date added to the response by recording staff"
          },
          "comment" : {
            "type" : "string",
            "description" : "Comment added to the response by recording staff"
          },
          "recordingStaff" : {
            "$ref" : "#/components/schemas/NomisStaff",
            "description" : "Recording staff"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the response was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the response"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the response was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the response"
          }
        },
        "required" : [ "createDateTime", "createdBy", "recordingStaff", "sequence" ]
      },
      "NomisStaff" : {
        "type" : "object",
        "properties" : {
          "username" : {
            "type" : "string",
            "description" : "Username of first account related to staff"
          },
          "staffId" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "NOMIS staff id"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of staff member"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of staff member"
          }
        },
        "required" : [ "firstName", "lastName", "staffId", "username" ]
      },
      "NomisStaffParty" : {
        "type" : "object",
        "properties" : {
          "staff" : {
            "$ref" : "#/components/schemas/NomisStaff",
            "description" : "Staff involved in the incident"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "The sequence number providing an order for a list of staff parties"
          },
          "role" : {
            "$ref" : "#/components/schemas/NomisCode",
            "description" : "Staff role in the incident"
          },
          "comment" : {
            "type" : "string",
            "description" : "General information about the incident"
          },
          "createDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the staff party was created"
          },
          "createdBy" : {
            "type" : "string",
            "description" : "The username of the person who created the staff party"
          },
          "lastModifiedDateTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "The date and time the staff party was last updated"
          },
          "lastModifiedBy" : {
            "type" : "string",
            "description" : "The username of the person who last updated the staff party"
          }
        },
        "required" : [ "createDateTime", "createdBy", "role", "sequence", "staff" ]
      },
      "NomisStatus" : {
        "type" : "object",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Status Code"
          },
          "description" : {
            "type" : "string",
            "description" : "Status Description"
          }
        },
        "required" : [ "code", "description" ]
      },
      "NomisSyncRequest" : {
        "type" : "object",
        "description" : "Incident report created or updated in NOMIS",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Incident report ID, required for updates and must be omitted for initial migration",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "initialMigration" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Set to true for initial migration, omit or set to false for updates",
            "example" : true
          },
          "incidentReport" : {
            "$ref" : "#/components/schemas/NomisReport",
            "description" : "Complete incident report payload"
          }
        },
        "required" : [ "incidentReport" ],
        "writeOnly" : true
      },
      "PairStringListDescriptionAddendum" : {
        "type" : "object",
        "properties" : {
          "first" : {
            "type" : "string"
          },
          "second" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DescriptionAddendum"
            }
          }
        },
        "required" : [ "first", "second" ]
      },
      "NomisSyncCreateRequest" : {
        "type" : "object",
        "description" : "Incident report created in NOMIS",
        "properties" : {
          "incidentReport" : {
            "$ref" : "#/components/schemas/NomisReport",
            "description" : "Complete incident report payload"
          },
          "initialMigration" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Set to true for initial migration",
            "example" : true
          }
        },
        "required" : [ "incidentReport" ],
        "writeOnly" : true
      },
      "NomisSyncUpdateRequest" : {
        "type" : "object",
        "description" : "Incident report updated in NOMIS",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "Incident report ID",
            "example" : "123e4567-e89b-12d3-a456-426614174000"
          },
          "incidentReport" : {
            "$ref" : "#/components/schemas/NomisReport",
            "description" : "Complete incident report payload"
          },
          "initialMigration" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Omit or set to false for updates"
          }
        },
        "required" : [ "id", "incidentReport" ],
        "writeOnly" : true
      },
      "NomisSyncReportId" : {
        "type" : "object",
        "description" : "Incident report ID",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The internal ID of this report"
          }
        },
        "readOnly" : true,
        "required" : [ "id" ]
      },
      "CreateReportRequest" : {
        "type" : "object",
        "description" : "Payload to create a new draft incident report",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Incident report type",
            "enum" : [ "ABSCOND_1", "ASSAULT_1", "ASSAULT_2", "ASSAULT_3", "ASSAULT_4", "ASSAULT_5", "ATTEMPTED_ESCAPE_FROM_PRISON_1", "ATTEMPTED_ESCAPE_FROM_ESCORT_1", "BARRICADE_1", "BOMB_1", "BREACH_OF_SECURITY_1", "CLOSE_DOWN_SEARCH_1", "CONCERTED_INDISCIPLINE_1", "DAMAGE_1", "DEATH_PRISONER_1", "DEATH_OTHER_1", "DISORDER_1", "DISORDER_2", "DRONE_SIGHTING_1", "DRONE_SIGHTING_2", "DRONE_SIGHTING_3", "DRUGS_1", "ESCAPE_FROM_PRISON_1", "ESCAPE_FROM_ESCORT_1", "FIND_1", "FIND_2", "FIND_3", "FIND_4", "FIND_5", "FIND_6", "FIRE_1", "FIREARM_1", "FOOD_REFUSAL_1", "HOSTAGE_1", "INCIDENT_AT_HEIGHT_1", "KEY_OR_LOCK_1", "KEY_OR_LOCK_2", "MISCELLANEOUS_1", "MOBILE_PHONE_1", "RADIO_COMPROMISE_1", "RELEASE_IN_ERROR_1", "SELF_HARM_1", "TEMPORARY_RELEASE_FAILURE_1", "TEMPORARY_RELEASE_FAILURE_2", "TEMPORARY_RELEASE_FAILURE_3", "TEMPORARY_RELEASE_FAILURE_4", "TOOL_LOSS_1" ]
          },
          "incidentDateAndTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the incident took place",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "location" : {
            "type" : "string",
            "description" : "The location where incident took place, typically a NOMIS prison ID",
            "example" : "MDI",
            "maxLength" : 20,
            "minLength" : 2
          },
          "title" : {
            "type" : "string",
            "description" : "Brief title describing the incident",
            "maxLength" : 255,
            "minLength" : 5
          },
          "description" : {
            "type" : "string",
            "description" : "Longer summary of the incident",
            "maxLength" : 2147483647,
            "minLength" : 1
          }
        },
        "required" : [ "description", "incidentDateAndTime", "location", "title", "type" ],
        "writeOnly" : true
      },
      "CorrectionRequest" : {
        "type" : "object",
        "description" : "Request to make a correction to incident report",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the correction requests for this report"
          },
          "descriptionOfChange" : {
            "type" : "string",
            "description" : "The changes being requested"
          },
          "correctionRequestedBy" : {
            "type" : "string",
            "description" : "Member of staff requesting changed"
          },
          "correctionRequestedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the changes were requested",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "location" : {
            "type" : "string",
            "description" : "The reporting location of the staff"
          }
        },
        "readOnly" : true,
        "required" : [ "correctionRequestedAt", "correctionRequestedBy", "descriptionOfChange", "sequence" ]
      },
      "HistoricalQuestion" : {
        "type" : "object",
        "description" : "Previous question with responses making up a previous version of an incident report",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "The question code; used as a unique identifier within one report and typically refers to a specific question for an incident type"
          },
          "question" : {
            "type" : "string",
            "description" : "The question text as seen by downstream data consumers"
          },
          "label" : {
            "type" : "string",
            "description" : "The question text as seen by the user at the point of entry"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the questions"
          },
          "responses" : {
            "type" : "array",
            "description" : "The responses to this question",
            "items" : {
              "$ref" : "#/components/schemas/HistoricalResponse"
            }
          },
          "additionalInformation" : {
            "type" : "string",
            "description" : "Optional additional information"
          }
        },
        "readOnly" : true,
        "required" : [ "code", "label", "question", "responses", "sequence" ]
      },
      "HistoricalResponse" : {
        "type" : "object",
        "description" : "Previous response to a question making up a previous version of an incident report",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Unique identifier for a response to a question"
          },
          "response" : {
            "type" : "string",
            "description" : "The response text as seen by downstream data consumers"
          },
          "label" : {
            "type" : "string",
            "description" : "The response text as seen by the user at the point of entry"
          },
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the responses"
          },
          "responseDate" : {
            "type" : "string",
            "format" : "date",
            "description" : "Optional response as a date",
            "example" : "2024-04-29"
          },
          "additionalInformation" : {
            "type" : "string",
            "description" : "Optional additional information"
          },
          "recordedBy" : {
            "type" : "string",
            "description" : "Username of person who responded to the question"
          },
          "recordedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the response was made",
            "example" : "2024-04-29T12:34:56.789012"
          }
        },
        "readOnly" : true,
        "required" : [ "label", "recordedAt", "recordedBy", "response", "sequence" ]
      },
      "History" : {
        "type" : "object",
        "description" : "Prior version of an incident report",
        "properties" : {
          "type" : {
            "type" : "string",
            "description" : "Previous incident report type",
            "enum" : [ "ABSCOND_1", "ASSAULT_1", "ASSAULT_2", "ASSAULT_3", "ASSAULT_4", "ASSAULT_5", "ATTEMPTED_ESCAPE_FROM_PRISON_1", "ATTEMPTED_ESCAPE_FROM_ESCORT_1", "BARRICADE_1", "BOMB_1", "BREACH_OF_SECURITY_1", "CLOSE_DOWN_SEARCH_1", "CONCERTED_INDISCIPLINE_1", "DAMAGE_1", "DEATH_PRISONER_1", "DEATH_OTHER_1", "DISORDER_1", "DISORDER_2", "DRONE_SIGHTING_1", "DRONE_SIGHTING_2", "DRONE_SIGHTING_3", "DRUGS_1", "ESCAPE_FROM_PRISON_1", "ESCAPE_FROM_ESCORT_1", "FIND_1", "FIND_2", "FIND_3", "FIND_4", "FIND_5", "FIND_6", "FIRE_1", "FIREARM_1", "FOOD_REFUSAL_1", "HOSTAGE_1", "INCIDENT_AT_HEIGHT_1", "KEY_OR_LOCK_1", "KEY_OR_LOCK_2", "MISCELLANEOUS_1", "MOBILE_PHONE_1", "RADIO_COMPROMISE_1", "RELEASE_IN_ERROR_1", "SELF_HARM_1", "TEMPORARY_RELEASE_FAILURE_1", "TEMPORARY_RELEASE_FAILURE_2", "TEMPORARY_RELEASE_FAILURE_3", "TEMPORARY_RELEASE_FAILURE_4", "TOOL_LOSS_1" ]
          },
          "changedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the report type was changed",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "changedBy" : {
            "type" : "string",
            "description" : "The member of staff who changed the report type"
          },
          "questions" : {
            "type" : "array",
            "description" : "Previous set of question-response pairs",
            "items" : {
              "$ref" : "#/components/schemas/HistoricalQuestion"
            }
          },
          "nomisType" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Previous NOMIS incident report type code, which may be null for newer incident types"
          }
        },
        "readOnly" : true,
        "required" : [ "changedAt", "changedBy", "questions", "type" ]
      },
      "PrisonerInvolvement" : {
        "type" : "object",
        "description" : "Prisoner involved in an incident",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the prisoner involvement for this report"
          },
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner’s NOMIS number"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname"
          },
          "prisonerRole" : {
            "type" : "string",
            "description" : "Their role",
            "enum" : [ "ABSCONDER", "ACTIVE_INVOLVEMENT", "ASSAILANT", "ASSISTED_STAFF", "DECEASED", "ESCAPE", "FIGHTER", "HOSTAGE", "IMPEDED_STAFF", "IN_POSSESSION", "INTENDED_RECIPIENT", "LICENSE_FAILURE", "PERPETRATOR", "PRESENT_AT_SCENE", "SUSPECTED_ASSAILANT", "SUSPECTED_INVOLVED", "TEMPORARY_RELEASE_FAILURE", "VICTIM" ]
          },
          "outcome" : {
            "type" : "string",
            "description" : "Optional outcome of prisoner’s involvement",
            "enum" : [ "ACCT", "CHARGED_BY_POLICE", "CONVICTED", "CORONER_INFORMED", "DEATH", "FURTHER_CHARGES", "LOCAL_INVESTIGATION", "NEXT_OF_KIN_INFORMED", "PLACED_ON_REPORT", "POLICE_INVESTIGATION", "REMAND", "SEEN_DUTY_GOV", "SEEN_HEALTHCARE", "SEEN_IMB", "SEEN_OUTSIDE_HOSP", "TRANSFER", "TRIAL" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "Optional comment on prisoner’s involvement"
          }
        },
        "readOnly" : true,
        "required" : [ "firstName", "lastName", "prisonerNumber", "prisonerRole", "sequence" ]
      },
      "ReportWithDetails" : {
        "type" : "object",
        "description" : "Incident report with all related information",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid"
          },
          "reportReference" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "ABSCOND_1", "ASSAULT_1", "ASSAULT_2", "ASSAULT_3", "ASSAULT_4", "ASSAULT_5", "ATTEMPTED_ESCAPE_FROM_PRISON_1", "ATTEMPTED_ESCAPE_FROM_ESCORT_1", "BARRICADE_1", "BOMB_1", "BREACH_OF_SECURITY_1", "CLOSE_DOWN_SEARCH_1", "CONCERTED_INDISCIPLINE_1", "DAMAGE_1", "DEATH_PRISONER_1", "DEATH_OTHER_1", "DISORDER_1", "DISORDER_2", "DRONE_SIGHTING_1", "DRONE_SIGHTING_2", "DRONE_SIGHTING_3", "DRUGS_1", "ESCAPE_FROM_PRISON_1", "ESCAPE_FROM_ESCORT_1", "FIND_1", "FIND_2", "FIND_3", "FIND_4", "FIND_5", "FIND_6", "FIRE_1", "FIREARM_1", "FOOD_REFUSAL_1", "HOSTAGE_1", "INCIDENT_AT_HEIGHT_1", "KEY_OR_LOCK_1", "KEY_OR_LOCK_2", "MISCELLANEOUS_1", "MOBILE_PHONE_1", "RADIO_COMPROMISE_1", "RELEASE_IN_ERROR_1", "SELF_HARM_1", "TEMPORARY_RELEASE_FAILURE_1", "TEMPORARY_RELEASE_FAILURE_2", "TEMPORARY_RELEASE_FAILURE_3", "TEMPORARY_RELEASE_FAILURE_4", "TOOL_LOSS_1" ]
          },
          "incidentDateAndTime" : {
            "type" : "string",
            "format" : "date-time"
          },
          "location" : {
            "type" : "string"
          },
          "title" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "descriptionAddendums" : {
            "type" : "array",
            "description" : "Addendums to the description",
            "items" : {
              "$ref" : "#/components/schemas/DescriptionAddendum"
            }
          },
          "reportedBy" : {
            "type" : "string"
          },
          "reportedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "status" : {
            "type" : "string",
            "enum" : [ "DRAFT", "AWAITING_REVIEW", "ON_HOLD", "NEEDS_UPDATING", "UPDATED", "CLOSED", "POST_INCIDENT_UPDATE", "DUPLICATE", "NOT_REPORTABLE", "REOPENED", "WAS_CLOSED" ]
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifiedAt" : {
            "type" : "string",
            "format" : "date-time"
          },
          "modifiedBy" : {
            "type" : "string"
          },
          "createdInNomis" : {
            "type" : "boolean"
          },
          "lastModifiedInNomis" : {
            "type" : "boolean"
          },
          "questions" : {
            "type" : "array",
            "description" : "The question-response pairs that make up this report",
            "items" : {
              "$ref" : "#/components/schemas/Question"
            }
          },
          "history" : {
            "type" : "array",
            "description" : "Prior versions of this report, created when the report type changes",
            "items" : {
              "$ref" : "#/components/schemas/History"
            }
          },
          "historyOfStatuses" : {
            "type" : "array",
            "description" : "Previous statuses the incident report transitioned to",
            "items" : {
              "$ref" : "#/components/schemas/StatusHistory"
            }
          },
          "staffInvolved" : {
            "type" : "array",
            "description" : "Which members of staff were involved?",
            "items" : {
              "$ref" : "#/components/schemas/StaffInvolvement"
            }
          },
          "prisonersInvolved" : {
            "type" : "array",
            "description" : "Which prisoners were involved?",
            "items" : {
              "$ref" : "#/components/schemas/PrisonerInvolvement"
            }
          },
          "correctionRequests" : {
            "type" : "array",
            "description" : "The corrections that were requested of this report",
            "items" : {
              "$ref" : "#/components/schemas/CorrectionRequest"
            }
          },
          "staffInvolvementDone" : {
            "type" : "boolean",
            "description" : "Internal flag which, if false, is used to indicate that addition of staff involvements is unfinished"
          },
          "prisonerInvolvementDone" : {
            "type" : "boolean",
            "description" : "Internal flag which, if false, is used to indicate that addition of prisoner involvements is unfinished"
          },
          "nomisStatus" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Previous NOMIS incident report status code, which may be null for statuses that cannot be mapped"
          },
          "nomisType" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "NOMIS incident report type code, which may be null for newer incident types"
          }
        },
        "readOnly" : true,
        "required" : [ "correctionRequests", "createdAt", "createdInNomis", "description", "descriptionAddendums", "history", "historyOfStatuses", "id", "incidentDateAndTime", "lastModifiedInNomis", "location", "modifiedAt", "modifiedBy", "prisonerInvolvementDone", "prisonersInvolved", "questions", "reportReference", "reportedAt", "reportedBy", "staffInvolved", "staffInvolvementDone", "status", "title", "type" ]
      },
      "StaffInvolvement" : {
        "type" : "object",
        "description" : "Member of staff involved in an incident",
        "properties" : {
          "sequence" : {
            "type" : "integer",
            "format" : "int32",
            "deprecated" : true,
            "description" : "Sequence of the staff involvement for this report"
          },
          "staffUsername" : {
            "type" : "string",
            "description" : "Username, absent for manually-added staff or those without NOMIS/DPS accounts"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name"
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname"
          },
          "staffRole" : {
            "type" : "string",
            "description" : "Their role",
            "enum" : [ "ACTIVELY_INVOLVED", "AUTHORISING_OFFICER", "CR_HEAD", "CR_LEFT_ARM", "CR_LEGS", "CR_RIGHT_ARM", "CR_SUPERVISOR", "DECEASED", "FIRST_ON_SCENE", "HEALTHCARE", "HOSTAGE", "IN_POSSESSION", "NEGOTIATOR", "PRESENT_AT_SCENE", "SUSPECTED_INVOLVEMENT", "VICTIM", "WITNESS" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "Optional comment on staff member involvement"
          }
        },
        "readOnly" : true,
        "required" : [ "firstName", "lastName", "sequence", "staffRole" ]
      },
      "StatusHistory" : {
        "type" : "object",
        "description" : "Previous statuses an incident report transitioned to",
        "properties" : {
          "status" : {
            "type" : "string",
            "description" : "Previous status of an incident report",
            "enum" : [ "DRAFT", "AWAITING_REVIEW", "ON_HOLD", "NEEDS_UPDATING", "UPDATED", "CLOSED", "POST_INCIDENT_UPDATE", "DUPLICATE", "NOT_REPORTABLE", "REOPENED", "WAS_CLOSED" ]
          },
          "changedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the report status was changed",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "changedBy" : {
            "type" : "string",
            "description" : "The member of staff who changed the report status"
          },
          "nomisStatus" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Previous NOMIS incident report status code, which may be null for statuses that cannot be mapped"
          }
        },
        "readOnly" : true,
        "required" : [ "changedAt", "changedBy", "status" ]
      },
      "AddStaffInvolvement" : {
        "type" : "object",
        "description" : "Add an involved member of staff to an incident report",
        "properties" : {
          "staffUsername" : {
            "type" : "string",
            "description" : "Username, absent for manually-added staff or those without NOMIS/DPS accounts",
            "maxLength" : 120,
            "minLength" : 3
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name",
            "maxLength" : 255,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname",
            "maxLength" : 255,
            "minLength" : 1
          },
          "staffRole" : {
            "type" : "string",
            "description" : "Their role",
            "enum" : [ "ACTIVELY_INVOLVED", "AUTHORISING_OFFICER", "CR_HEAD", "CR_LEFT_ARM", "CR_LEGS", "CR_RIGHT_ARM", "CR_SUPERVISOR", "DECEASED", "FIRST_ON_SCENE", "HEALTHCARE", "HOSTAGE", "IN_POSSESSION", "NEGOTIATOR", "PRESENT_AT_SCENE", "SUSPECTED_INVOLVEMENT", "VICTIM", "WITNESS" ]
          },
          "comment" : {
            "type" : "string",
            "default" : "null",
            "description" : "Optional comment on staff member involvement"
          }
        },
        "required" : [ "firstName", "lastName", "staffRole" ],
        "writeOnly" : true
      },
      "AddPrisonerInvolvement" : {
        "type" : "object",
        "description" : "Add an involved prisoner to an incident report",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "description" : "Prisoner’s NOMIS number",
            "maxLength" : 10,
            "minLength" : 7
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name",
            "maxLength" : 255,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "Surname",
            "maxLength" : 255,
            "minLength" : 1
          },
          "prisonerRole" : {
            "type" : "string",
            "description" : "Their role",
            "enum" : [ "ABSCONDER", "ACTIVE_INVOLVEMENT", "ASSAILANT", "ASSISTED_STAFF", "DECEASED", "ESCAPE", "FIGHTER", "HOSTAGE", "IMPEDED_STAFF", "IN_POSSESSION", "INTENDED_RECIPIENT", "LICENSE_FAILURE", "PERPETRATOR", "PRESENT_AT_SCENE", "SUSPECTED_ASSAILANT", "SUSPECTED_INVOLVED", "TEMPORARY_RELEASE_FAILURE", "VICTIM" ]
          },
          "outcome" : {
            "type" : "string",
            "default" : "null",
            "description" : "Optional outcome of prisoner’s involvement",
            "enum" : [ "ACCT", "CHARGED_BY_POLICE", "CONVICTED", "CORONER_INFORMED", "DEATH", "FURTHER_CHARGES", "LOCAL_INVESTIGATION", "NEXT_OF_KIN_INFORMED", "PLACED_ON_REPORT", "POLICE_INVESTIGATION", "REMAND", "SEEN_DUTY_GOV", "SEEN_HEALTHCARE", "SEEN_IMB", "SEEN_OUTSIDE_HOSP", "TRANSFER", "TRIAL" ]
          },
          "comment" : {
            "type" : "string",
            "default" : "null",
            "description" : "Optional comment on prisoner’s involvement"
          }
        },
        "required" : [ "firstName", "lastName", "prisonerNumber", "prisonerRole" ],
        "writeOnly" : true
      },
      "AddDescriptionAddendum" : {
        "type" : "object",
        "description" : "Add to the description of an incident report by appending an addendum",
        "properties" : {
          "createdBy" : {
            "type" : "string",
            "description" : "Username of user who added this addendum, defaulting to request token user",
            "example" : "USER_1",
            "maxLength" : 120,
            "minLength" : 3
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When addendum was added, defaulting to “now”",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of person that added this addendum",
            "example" : "John",
            "maxLength" : 255,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of person that added this addendum",
            "example" : "Doe",
            "maxLength" : 255,
            "minLength" : 1
          },
          "text" : {
            "type" : "string",
            "description" : "Addendum text",
            "example" : "Internal investigation has concluded",
            "maxLength" : 2147483647,
            "minLength" : 1
          }
        },
        "required" : [ "firstName", "lastName", "text" ],
        "writeOnly" : true
      },
      "AddCorrectionRequest" : {
        "type" : "object",
        "description" : "Add a correction request to an incident report",
        "properties" : {
          "descriptionOfChange" : {
            "type" : "string",
            "description" : "The changes being requested",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "location" : {
            "type" : "string",
            "default" : "null",
            "description" : "The location where the staff member is raising the correction",
            "maxLength" : 20,
            "minLength" : 2
          }
        },
        "required" : [ "descriptionOfChange" ],
        "writeOnly" : true
      },
      "UpdateStaffInvolvement" : {
        "type" : "object",
        "description" : "Update an involved member of staff in an incident report",
        "properties" : {
          "staffUsername" : {
            "type" : "string",
            "description" : "Username, absent for manually-added staff or those without NOMIS/DPS accounts– omit to preserve existing username, provide null to clear it",
            "maxLength" : 120,
            "minLength" : 3
          },
          "firstName" : {
            "type" : "string",
            "default" : "null",
            "description" : "First name",
            "maxLength" : 255,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "default" : "null",
            "description" : "Surname",
            "maxLength" : 255,
            "minLength" : 1
          },
          "staffRole" : {
            "type" : "string",
            "default" : "null",
            "description" : "Their role",
            "enum" : [ "ACTIVELY_INVOLVED", "AUTHORISING_OFFICER", "CR_HEAD", "CR_LEFT_ARM", "CR_LEGS", "CR_RIGHT_ARM", "CR_SUPERVISOR", "DECEASED", "FIRST_ON_SCENE", "HEALTHCARE", "HOSTAGE", "IN_POSSESSION", "NEGOTIATOR", "PRESENT_AT_SCENE", "SUSPECTED_INVOLVEMENT", "VICTIM", "WITNESS" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "Optional comment on staff member involvement – omit to preserve existing comment, provide null to clear it"
          }
        },
        "writeOnly" : true
      },
      "UpdatePrisonerInvolvement" : {
        "type" : "object",
        "description" : "Update an involved prisoner in an incident report",
        "properties" : {
          "prisonerNumber" : {
            "type" : "string",
            "default" : "null",
            "description" : "Prisoner’s NOMIS number",
            "maxLength" : 10,
            "minLength" : 7
          },
          "firstName" : {
            "type" : "string",
            "default" : "null",
            "description" : "First name",
            "maxLength" : 255,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "default" : "null",
            "description" : "Surname",
            "maxLength" : 255,
            "minLength" : 1
          },
          "prisonerRole" : {
            "type" : "string",
            "default" : "null",
            "description" : "Their role",
            "enum" : [ "ABSCONDER", "ACTIVE_INVOLVEMENT", "ASSAILANT", "ASSISTED_STAFF", "DECEASED", "ESCAPE", "FIGHTER", "HOSTAGE", "IMPEDED_STAFF", "IN_POSSESSION", "INTENDED_RECIPIENT", "LICENSE_FAILURE", "PERPETRATOR", "PRESENT_AT_SCENE", "SUSPECTED_ASSAILANT", "SUSPECTED_INVOLVED", "TEMPORARY_RELEASE_FAILURE", "VICTIM" ]
          },
          "outcome" : {
            "type" : "string",
            "description" : "Optional outcome of prisoner’s involvement – omit to preserve existing outcome, provide null to clear it",
            "enum" : [ "ACCT", "CHARGED_BY_POLICE", "CONVICTED", "CORONER_INFORMED", "DEATH", "FURTHER_CHARGES", "LOCAL_INVESTIGATION", "NEXT_OF_KIN_INFORMED", "PLACED_ON_REPORT", "POLICE_INVESTIGATION", "REMAND", "SEEN_DUTY_GOV", "SEEN_HEALTHCARE", "SEEN_IMB", "SEEN_OUTSIDE_HOSP", "TRANSFER", "TRIAL" ]
          },
          "comment" : {
            "type" : "string",
            "description" : "Optional comment on prisoner’s involvement – omit to preserve existing comment, provide null to clear it"
          }
        },
        "writeOnly" : true
      },
      "UpdateDescriptionAddendum" : {
        "type" : "object",
        "description" : "Update a description addendum in an incident report",
        "properties" : {
          "createdBy" : {
            "type" : "string",
            "description" : "Username of user who added this addendum",
            "example" : "USER_1",
            "maxLength" : 120,
            "minLength" : 3
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When addendum was added – omit to preserve existing date, provide null to set it to “now”",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "firstName" : {
            "type" : "string",
            "description" : "First name of person that added this addendum",
            "example" : "John",
            "maxLength" : 255,
            "minLength" : 1
          },
          "lastName" : {
            "type" : "string",
            "description" : "Last name of person that added this addendum",
            "example" : "Doe",
            "maxLength" : 255,
            "minLength" : 1
          },
          "text" : {
            "type" : "string",
            "description" : "Addendum text",
            "example" : "Correction made to the report",
            "maxLength" : 2147483647,
            "minLength" : 1
          }
        },
        "writeOnly" : true
      },
      "UpdateCorrectionRequest" : {
        "type" : "object",
        "description" : "Update a correction request in an incident report",
        "properties" : {
          "descriptionOfChange" : {
            "type" : "string",
            "default" : "null",
            "description" : "The changes being requested",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "location" : {
            "type" : "string",
            "description" : "The location where the staff member is raising the correction",
            "maxLength" : 20,
            "minLength" : 2
          }
        },
        "writeOnly" : true
      },
      "UpdateReportRequest" : {
        "type" : "object",
        "description" : "Payload to update key properties of an incident report",
        "properties" : {
          "incidentDateAndTime" : {
            "type" : "string",
            "format" : "date-time",
            "default" : "null",
            "description" : "When the incident took place",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "location" : {
            "type" : "string",
            "default" : "null",
            "description" : "The location where incident took place, typically a NOMIS prison ID",
            "example" : "MDI",
            "maxLength" : 20,
            "minLength" : 2
          },
          "title" : {
            "type" : "string",
            "default" : "null",
            "description" : "Brief title describing the incident",
            "maxLength" : 255,
            "minLength" : 5
          },
          "description" : {
            "type" : "string",
            "default" : "null",
            "description" : "Longer summary of the incident",
            "maxLength" : 2147483647,
            "minLength" : 1
          },
          "staffInvolvementDone" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Internal flag which, if false, is used to indicate that addition of staff involvements is unfinished"
          },
          "prisonerInvolvementDone" : {
            "type" : "boolean",
            "default" : false,
            "description" : "Internal flag which, if false, is used to indicate that addition of prisoner involvements is unfinished"
          }
        },
        "writeOnly" : true
      },
      "ReportBasic" : {
        "type" : "object",
        "description" : "Incident report with only key information",
        "properties" : {
          "id" : {
            "type" : "string",
            "format" : "uuid",
            "description" : "The internal ID of this report"
          },
          "reportReference" : {
            "type" : "string",
            "description" : "The human-readable identifier of this report"
          },
          "type" : {
            "type" : "string",
            "description" : "Incident report type",
            "enum" : [ "ABSCOND_1", "ASSAULT_1", "ASSAULT_2", "ASSAULT_3", "ASSAULT_4", "ASSAULT_5", "ATTEMPTED_ESCAPE_FROM_PRISON_1", "ATTEMPTED_ESCAPE_FROM_ESCORT_1", "BARRICADE_1", "BOMB_1", "BREACH_OF_SECURITY_1", "CLOSE_DOWN_SEARCH_1", "CONCERTED_INDISCIPLINE_1", "DAMAGE_1", "DEATH_PRISONER_1", "DEATH_OTHER_1", "DISORDER_1", "DISORDER_2", "DRONE_SIGHTING_1", "DRONE_SIGHTING_2", "DRONE_SIGHTING_3", "DRUGS_1", "ESCAPE_FROM_PRISON_1", "ESCAPE_FROM_ESCORT_1", "FIND_1", "FIND_2", "FIND_3", "FIND_4", "FIND_5", "FIND_6", "FIRE_1", "FIREARM_1", "FOOD_REFUSAL_1", "HOSTAGE_1", "INCIDENT_AT_HEIGHT_1", "KEY_OR_LOCK_1", "KEY_OR_LOCK_2", "MISCELLANEOUS_1", "MOBILE_PHONE_1", "RADIO_COMPROMISE_1", "RELEASE_IN_ERROR_1", "SELF_HARM_1", "TEMPORARY_RELEASE_FAILURE_1", "TEMPORARY_RELEASE_FAILURE_2", "TEMPORARY_RELEASE_FAILURE_3", "TEMPORARY_RELEASE_FAILURE_4", "TOOL_LOSS_1" ]
          },
          "incidentDateAndTime" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the incident took place",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "location" : {
            "type" : "string",
            "description" : "The location where incident took place, typically a NOMIS prison ID",
            "example" : "MDI"
          },
          "title" : {
            "type" : "string",
            "description" : "Brief title describing the incident"
          },
          "description" : {
            "type" : "string",
            "description" : "Longer summary of the incident"
          },
          "reportedBy" : {
            "type" : "string",
            "description" : "Username of person who created the incident report"
          },
          "reportedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the incident report was created",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "status" : {
            "type" : "string",
            "description" : "The current status of this report",
            "enum" : [ "DRAFT", "AWAITING_REVIEW", "ON_HOLD", "NEEDS_UPDATING", "UPDATED", "CLOSED", "POST_INCIDENT_UPDATE", "DUPLICATE", "NOT_REPORTABLE", "REOPENED", "WAS_CLOSED" ],
            "example" : "DRAFT"
          },
          "createdAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the report was first created",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "modifiedAt" : {
            "type" : "string",
            "format" : "date-time",
            "description" : "When the report was last changed",
            "example" : "2024-04-29T12:34:56.789012"
          },
          "modifiedBy" : {
            "type" : "string",
            "description" : "Username of the person who last changed this report"
          },
          "createdInNomis" : {
            "type" : "boolean"
          },
          "lastModifiedInNomis" : {
            "type" : "boolean"
          }
        },
        "readOnly" : true,
        "required" : [ "createdAt", "createdInNomis", "description", "id", "incidentDateAndTime", "lastModifiedInNomis", "location", "modifiedAt", "modifiedBy", "reportReference", "reportedAt", "reportedBy", "status", "title", "type" ]
      },
      "ChangeTypeRequest" : {
        "type" : "object",
        "description" : "Changes an incident report’s type",
        "properties" : {
          "newType" : {
            "type" : "string",
            "description" : "The new type",
            "enum" : [ "ABSCOND_1", "ASSAULT_1", "ASSAULT_2", "ASSAULT_3", "ASSAULT_4", "ASSAULT_5", "ATTEMPTED_ESCAPE_FROM_PRISON_1", "ATTEMPTED_ESCAPE_FROM_ESCORT_1", "BARRICADE_1", "BOMB_1", "BREACH_OF_SECURITY_1", "CLOSE_DOWN_SEARCH_1", "CONCERTED_INDISCIPLINE_1", "DAMAGE_1", "DEATH_PRISONER_1", "DEATH_OTHER_1", "DISORDER_1", "DISORDER_2", "DRONE_SIGHTING_1", "DRONE_SIGHTING_2", "DRONE_SIGHTING_3", "DRUGS_1", "ESCAPE_FROM_PRISON_1", "ESCAPE_FROM_ESCORT_1", "FIND_1", "FIND_2", "FIND_3", "FIND_4", "FIND_5", "FIND_6", "FIRE_1", "FIREARM_1", "FOOD_REFUSAL_1", "HOSTAGE_1", "INCIDENT_AT_HEIGHT_1", "KEY_OR_LOCK_1", "KEY_OR_LOCK_2", "MISCELLANEOUS_1", "MOBILE_PHONE_1", "RADIO_COMPROMISE_1", "RELEASE_IN_ERROR_1", "SELF_HARM_1", "TEMPORARY_RELEASE_FAILURE_1", "TEMPORARY_RELEASE_FAILURE_2", "TEMPORARY_RELEASE_FAILURE_3", "TEMPORARY_RELEASE_FAILURE_4", "TOOL_LOSS_1" ],
            "example" : "DAMAGE"
          }
        },
        "required" : [ "newType" ],
        "writeOnly" : true
      },
      "ChangeStatusRequest" : {
        "type" : "object",
        "description" : "Changes an incident report’s status",
        "properties" : {
          "newStatus" : {
            "type" : "string",
            "description" : "The new status",
            "enum" : [ "DRAFT", "AWAITING_REVIEW", "ON_HOLD", "NEEDS_UPDATING", "UPDATED", "CLOSED", "POST_INCIDENT_UPDATE", "DUPLICATE", "NOT_REPORTABLE", "REOPENED", "WAS_CLOSED" ],
            "example" : "CLOSED"
          }
        },
        "required" : [ "newStatus" ],
        "writeOnly" : true
      },
      "HmppsSubjectAccessRequestContent" : {
        "type" : "object",
        "properties" : {
          "content" : {
            "description" : "The content of the subject access request response"
          }
        },
        "required" : [ "content" ]
      },
      "Count" : {
        "type" : "object",
        "properties" : {
          "count" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "The total number of records",
            "example" : 501
          }
        },
        "required" : [ "count" ]
      },
      "DlqMessage" : {
        "type" : "object",
        "properties" : {
          "body" : {
            "type" : "object",
            "additionalProperties" : { }
          },
          "messageId" : {
            "type" : "string"
          }
        },
        "required" : [ "body", "messageId" ]
      },
      "GetDlqResult" : {
        "type" : "object",
        "properties" : {
          "messagesFoundCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messagesReturnedCount" : {
            "type" : "integer",
            "format" : "int32"
          },
          "messages" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DlqMessage"
            }
          }
        },
        "required" : [ "messages", "messagesFoundCount", "messagesReturnedCount" ]
      },
      "SimplePageReportBasic" : {
        "type" : "object",
        "description" : "Page of results",
        "properties" : {
          "content" : {
            "type" : "array",
            "description" : "Elements in this pages",
            "example" : "[Item1,Item2]",
            "items" : {
              "$ref" : "#/components/schemas/ReportBasic"
            }
          },
          "number" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Page number (0-based)",
            "example" : 0
          },
          "size" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Page size",
            "example" : 20
          },
          "totalElements" : {
            "type" : "integer",
            "format" : "int64",
            "description" : "Total number of elements in all pages",
            "example" : 55
          },
          "sort" : {
            "type" : "array",
            "description" : "Sort orders",
            "example" : [ "property,ASC" ],
            "items" : {
              "type" : "string"
            }
          },
          "totalPages" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Total number of pages",
            "example" : 3
          },
          "numberOfElements" : {
            "type" : "integer",
            "format" : "int32",
            "description" : "Number of elements in this page",
            "example" : 20
          }
        },
        "readOnly" : true,
        "required" : [ "content", "number", "numberOfElements", "size", "sort", "totalElements", "totalPages" ]
      },
      "DashboardDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "loadType" : {
            "type" : "string",
            "enum" : [ "sync", "async" ]
          }
        },
        "required" : [ "id", "name" ]
      },
      "ReportDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "variants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/VariantDefinitionSummary"
            }
          },
          "dashboards" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardDefinitionSummary"
            }
          },
          "authorised" : {
            "type" : "boolean"
          }
        },
        "required" : [ "authorised", "id", "name", "variants" ]
      },
      "VariantDefinitionSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "isMissing" : {
            "type" : "boolean"
          },
          "loadType" : {
            "type" : "string",
            "enum" : [ "sync", "async" ]
          }
        },
        "required" : [ "id", "isMissing", "name" ]
      },
      "ChildVariantDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "specification" : {
            "$ref" : "#/components/schemas/Specification"
          },
          "joinFields" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "id", "joinFields", "name", "resourceName" ]
      },
      "DynamicFilterOption" : {
        "type" : "object",
        "properties" : {
          "minimumLength" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      },
      "FieldDefinition" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "wordWrap" : {
            "type" : "string",
            "enum" : [ "none", "normal", "break-words" ]
          },
          "filter" : {
            "$ref" : "#/components/schemas/FilterDefinition"
          },
          "sortable" : {
            "type" : "boolean"
          },
          "defaultsort" : {
            "type" : "boolean"
          },
          "sortDirection" : {
            "type" : "string",
            "enum" : [ "asc", "desc" ]
          },
          "type" : {
            "type" : "string",
            "enum" : [ "boolean", "date", "double", "HTML", "long", "string", "time" ]
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "visible" : {
            "type" : "boolean"
          },
          "calculated" : {
            "type" : "boolean"
          },
          "header" : {
            "type" : "boolean"
          }
        },
        "required" : [ "calculated", "defaultsort", "display", "header", "mandatory", "name", "sortable", "type", "visible" ]
      },
      "FilterDefinition" : {
        "type" : "object",
        "properties" : {
          "type" : {
            "type" : "string",
            "enum" : [ "Radio", "Select", "multiselect", "daterange", "autocomplete", "text", "date", "granulardaterange" ]
          },
          "mandatory" : {
            "type" : "boolean"
          },
          "pattern" : {
            "type" : "string"
          },
          "staticOptions" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FilterOption"
            }
          },
          "dynamicOptions" : {
            "$ref" : "#/components/schemas/DynamicFilterOption"
          },
          "defaultValue" : {
            "type" : "string"
          },
          "min" : {
            "type" : "string"
          },
          "max" : {
            "type" : "string"
          },
          "interactive" : {
            "type" : "boolean"
          },
          "defaultGranularity" : {
            "type" : "string",
            "enum" : [ "hourly", "daily", "weekly", "monthly", "quarterly", "annually" ]
          },
          "defaultQuickFilterValue" : {
            "type" : "string",
            "enum" : [ "today", "yesterday", "last-seven-days", "last-thirty-days", "last-month", "last-full-month", "last-ninety-days", "last-three-months", "last-full-three-months", "last-year", "last-full-year", "tomorrow", "next-seven-days", "next-thirty-days", "next-month", "next-full-month", "next-ninety-days", "next-three-months", "next-full-three-months", "next-year", "next-full-year" ]
          }
        },
        "required" : [ "mandatory", "type" ]
      },
      "FilterOption" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          }
        },
        "required" : [ "display", "name" ]
      },
      "ReportSummary" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "template" : {
            "type" : "string",
            "enum" : [ "table-header", "table-footer", "section-header", "section-footer", "page-header", "page-footer" ]
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/SummaryField"
            }
          }
        },
        "required" : [ "fields", "id", "template" ]
      },
      "SingleVariantReportDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "variant" : {
            "$ref" : "#/components/schemas/VariantDefinition"
          }
        },
        "required" : [ "id", "name", "variant" ]
      },
      "Specification" : {
        "type" : "object",
        "properties" : {
          "template" : {
            "type" : "string",
            "enum" : [ "list", "list-section", "list-tab", "summary", "summary-section", "parent-child", "parent-child-section", "row-section", "row-section-child" ]
          },
          "fields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        },
        "required" : [ "fields", "sections", "template" ]
      },
      "SummaryField" : {
        "type" : "object",
        "properties" : {
          "name" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "boolean", "date", "double", "HTML", "long", "string", "time" ]
          },
          "header" : {
            "type" : "boolean"
          },
          "mergeRows" : {
            "type" : "boolean"
          }
        },
        "required" : [ "name" ]
      },
      "VariantDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "resourceName" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "specification" : {
            "$ref" : "#/components/schemas/Specification"
          },
          "classification" : {
            "type" : "string"
          },
          "printable" : {
            "type" : "boolean"
          },
          "summaries" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ReportSummary"
            }
          },
          "interactive" : {
            "type" : "boolean"
          },
          "childVariants" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ChildVariantDefinition"
            }
          }
        },
        "required" : [ "id", "name", "resourceName" ]
      },
      "DashboardDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "name" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "sections" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardSectionDefinition"
            }
          },
          "filterFields" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/FieldDefinition"
            }
          }
        },
        "required" : [ "id", "name", "sections" ]
      },
      "DashboardSectionDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "visualisations" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationDefinition"
            }
          }
        },
        "required" : [ "id", "visualisations" ]
      },
      "DashboardVisualisationColumnDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "display" : {
            "type" : "string"
          },
          "aggregate" : {
            "type" : "string",
            "enum" : [ "sum", "average" ]
          },
          "unit" : {
            "type" : "string",
            "enum" : [ "NUMBER", "PERCENTAGE" ]
          },
          "displayValue" : {
            "type" : "boolean"
          },
          "axis" : {
            "type" : "string"
          }
        },
        "required" : [ "display", "id" ]
      },
      "DashboardVisualisationColumnsDefinition" : {
        "type" : "object",
        "properties" : {
          "keys" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationColumnDefinition"
            }
          },
          "measures" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/DashboardVisualisationColumnDefinition"
            }
          },
          "filters" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/components/schemas/ValueVisualisationColumnDefinition"
            }
          },
          "expectNulls" : {
            "type" : "boolean"
          }
        },
        "required" : [ "expectNulls", "measures" ]
      },
      "DashboardVisualisationDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "type" : {
            "type" : "string",
            "enum" : [ "list", "doughnut", "bar", "bar-timeseries", "line", "scorecard", "scorecard-group" ]
          },
          "display" : {
            "type" : "string"
          },
          "description" : {
            "type" : "string"
          },
          "columns" : {
            "$ref" : "#/components/schemas/DashboardVisualisationColumnsDefinition"
          }
        },
        "required" : [ "columns", "id", "type" ]
      },
      "ValueVisualisationColumnDefinition" : {
        "type" : "object",
        "properties" : {
          "id" : {
            "type" : "string"
          },
          "equals" : {
            "type" : "string"
          }
        },
        "required" : [ "equals", "id" ]
      },
      "TypeConstantDescription" : {
        "type" : "object",
        "description" : "Report incident type constant",
        "properties" : {
          "familyCode" : {
            "type" : "string",
            "description" : "Machine-readable identifier for this family of incident types",
            "example" : "DISORDER"
          },
          "code" : {
            "type" : "string",
            "description" : "Machine-readable identifier of this incident type",
            "example" : "DISORDER"
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of this family of incident types (all incident types in one family share a description)",
            "example" : "Disorder"
          },
          "active" : {
            "type" : "boolean",
            "description" : "Whether this type is currently active and usable in new reports",
            "example" : true
          },
          "nomisCode" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Machine-readable NOMIS identifier of this incident type, which may be null for newer ones",
            "example" : "DISORDER1"
          }
        },
        "readOnly" : true,
        "required" : [ "active", "code", "description", "familyCode" ]
      },
      "TypeFamilyConstantDescription" : {
        "type" : "object",
        "description" : "Report incident type family constant",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Machine-readable identifier of this family",
            "example" : "DRONE_SIGHTING"
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of this family",
            "example" : "Drone sighting"
          }
        },
        "readOnly" : true,
        "required" : [ "code", "description" ]
      },
      "StatusConstantDescription" : {
        "type" : "object",
        "description" : "Report status constant",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Machine-readable identifier of this value",
            "example" : "ON_HOLD"
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of this value",
            "example" : "On hold"
          },
          "nomisCode" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Machine-readable NOMIS identifier of this value, which may be null for statuses that cannot be mapped",
            "example" : "INAN"
          }
        },
        "readOnly" : true,
        "required" : [ "code", "description" ]
      },
      "StaffRoleConstantDescription" : {
        "type" : "object",
        "description" : "Staff role constant",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Machine-readable identifier of this value",
            "example" : "ACTIVELY_INVOLVED"
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of this value",
            "example" : "Actively involved"
          },
          "nomisCodes" : {
            "type" : "array",
            "deprecated" : true,
            "description" : "Machine-readable NOMIS identifiers of this value, which may be empty for newer staff roles",
            "example" : "[AI, INV]",
            "items" : {
              "type" : "string"
            }
          }
        },
        "readOnly" : true,
        "required" : [ "code", "description", "nomisCodes" ]
      },
      "PrisonerRoleConstantDescription" : {
        "type" : "object",
        "description" : "Prisoner role constant",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Machine-readable identifier of this value",
            "example" : "IMPEDED_STAFF"
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of this value",
            "example" : "Impeded staff"
          },
          "nomisCode" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Machine-readable NOMIS identifier of this value, which may be null for newer prisoner roles",
            "example" : "IMPED"
          }
        },
        "readOnly" : true,
        "required" : [ "code", "description" ]
      },
      "PrisonerOutcomeConstantDescription" : {
        "type" : "object",
        "description" : "Prisoner outcome constant",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Machine-readable identifier of this value",
            "example" : "POLICE_INVESTIGATION"
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of this value",
            "example" : "Investigation (Police)"
          },
          "nomisCode" : {
            "type" : "string",
            "deprecated" : true,
            "description" : "Machine-readable NOMIS identifier of this value, which may be null for newer prisoner outcomes",
            "example" : "IPOL"
          }
        },
        "readOnly" : true,
        "required" : [ "code", "description" ]
      },
      "ConstantDescription" : {
        "type" : "object",
        "description" : "Code and description of a constant or enumeration member",
        "properties" : {
          "code" : {
            "type" : "string",
            "description" : "Machine-readable identifier of this value",
            "example" : "VICTIM"
          },
          "description" : {
            "type" : "string",
            "description" : "Human-readable description of this value",
            "example" : "Victim"
          }
        },
        "readOnly" : true,
        "required" : [ "code", "description" ]
      }
    },
    "securitySchemes" : {
      "bearer-jwt" : {
        "type" : "http",
        "scheme" : "bearer",
        "bearerFormat" : "JWT"
      },
      "hmpps-auth" : {
        "type" : "oauth2",
        "flows" : {
          "clientCredentials" : {
            "tokenUrl" : "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes" : {
              "read" : "Allows read of data",
              "write" : "Allows write of data"
            }
          },
          "authorizationCode" : {
            "authorizationUrl" : "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/authorize",
            "tokenUrl" : "https://sign-in-dev.hmpps.service.justice.gov.uk/auth/oauth/token",
            "scopes" : {
              "read" : "Allows read of data",
              "write" : "Allows write of data"
            }
          }
        }
      }
    }
  }
}