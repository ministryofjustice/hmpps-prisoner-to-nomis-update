{
  "openapi": "3.0.1",
  "info": {
    "title": "Contacts API",
    "description": "API for management of contacts",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2024-12-03.1822.e306f88"
  },
  "servers": [
    {
      "url": "https://contacts-api-dev.hmpps.service.justice.gov.uk",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "tags": [
    {
      "name": "Contact Global Restrictions",
      "description": "Global restrictions for a contact, a.k.a. estate-wide restrictions or contact restrictions"
    }
  ],
  "paths": {
    "/sync/prisoner-contact/{prisonerContactId}": {
      "get": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Returns the data for a prisoner contact by prisonerContactId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one prisoner contact.\n      ",
        "operationId": "syncGetPrisonerContactById",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The internal ID for a prisoner contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the prisoner contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No prisoner contact reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Updates a prisoner contact with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a prisoner contact.\n      ",
        "operationId": "syncUpdatePrisonerContact",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The internal ID for the prisoner contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdatePrisonerContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated prisoner contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Deletes one prisoner contact by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a prisoner contact.\n      ",
        "operationId": "syncDeletePrisonerContactById",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The internal ID for the prisoner contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted prisoner contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "404": {
            "description": "No prisoner contact reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact-restriction/{prisonerContactRestrictionId}": {
      "get": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Returns the data for a prisoner contact restriction by id",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one prisoner contact restriction.\n      ",
        "operationId": "syncGetPrisonerContactRestrictionById",
        "parameters": [
          {
            "name": "prisonerContactRestrictionId",
            "in": "path",
            "description": "The internal ID for a prisoner contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "404": {
            "description": "No prisoner contact restriction reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Updates a prisoner contact restriction with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a prisoner contact restriction.\n      ",
        "operationId": "syncUpdatePrisonerContactRestriction",
        "parameters": [
          {
            "name": "prisonerContactRestrictionId",
            "in": "path",
            "description": "The internal ID for the prisoner contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner contact restriction or relationship was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Deletes one prisoner contact restriction by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a prisoner contact restriction.\n      ",
        "operationId": "syncDeletePrisonerContactRestrictionById",
        "parameters": [
          {
            "name": "prisonerContactRestrictionId",
            "in": "path",
            "description": "The internal ID for the prisoner contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No prisoner contact restriction reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact/{contactId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Returns the data for a contact by contactId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact.\n      ",
        "operationId": "syncGetContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The internal ID for a contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No contact reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Updates a contact with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact.\n      ",
        "operationId": "syncUpdateContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The internal ID for the contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Deletes one contact by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact.\n      ",
        "operationId": "syncDeleteContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The internal ID for the contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No contact reference with that id could be found"
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted contact"
          }
        }
      }
    },
    "/sync/contact-restriction/{contactRestrictionId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Returns the data for a contact restriction by contactRestrictionId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact restriction.\n      ",
        "operationId": "syncGetContactRestrictionById",
        "parameters": [
          {
            "name": "contactRestrictionId",
            "in": "path",
            "description": "The internal ID for a contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "404": {
            "description": "No contact restriction reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Updates a contact restriction with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact restriction.\n      ",
        "operationId": "syncUpdateContactRestriction",
        "parameters": [
          {
            "name": "contactRestrictionId",
            "in": "path",
            "description": "The internal ID for the contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdateContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "404": {
            "description": "Contact restriction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Deletes one contact restriction by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact restriction.\n      ",
        "operationId": "syncDeleteContactRestrictionById",
        "parameters": [
          {
            "name": "contactRestrictionId",
            "in": "path",
            "description": "The internal ID for the contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          },
          "404": {
            "description": "No contact restriction reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-phone/{contactPhoneId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Returns the data for a contact phone by contactPhoneId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact phone.\n      ",
        "operationId": "syncGetContactPhoneById",
        "parameters": [
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The internal ID for a contact phone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "200": {
            "description": "Found the contact phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Updates a phone number for a contact",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact's phone number.\n      ",
        "operationId": "syncUpdateContactPhone",
        "parameters": [
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The internal ID for the contact phone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdateContactPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Contact phone not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated contact phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Deletes one contact phone by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact phone.\n      ",
        "operationId": "syncDeleteContactPhoneById",
        "parameters": [
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The internal ID for the contact phone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact phone with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted contact phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-identity/{contactIdentityId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Returns the data for a contact identity by contactIdentityId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact identity.\n      ",
        "operationId": "syncGetContactIdentityById",
        "parameters": [
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The internal ID for a contact identity.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact identity with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "200": {
            "description": "Found the contact identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Updates a contact identity with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact identity.\n      ",
        "operationId": "syncUpdateContactIdentity",
        "parameters": [
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The internal ID for the contact identity.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdateContactIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "404": {
            "description": "Contact identity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Deletes one contact identity by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact identity.\n      ",
        "operationId": "syncDeleteContactIdentityById",
        "parameters": [
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The internal ID for the contact identity.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact identity with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted contact identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-email/{contactEmailId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Returns the data for a contact email by contactEmailId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact email.\n      ",
        "operationId": "syncGetContactEmailById",
        "parameters": [
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The internal ID for a contact email.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "404": {
            "description": "No contact email reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Updates a contact email with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact email.\n      ",
        "operationId": "syncUpdateContactEmail",
        "parameters": [
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The internal ID for the contact email.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdateContactEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Contact email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated contact email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Deletes one contact email by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact email.\n      ",
        "operationId": "syncDeleteContactEmailById",
        "parameters": [
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The internal ID for the contact email.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "404": {
            "description": "No contact email reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address/{contactAddressId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Returns the data for a contact address by contactAddressId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact address.\n      ",
        "operationId": "syncGetContactAddressById",
        "parameters": [
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The internal ID for a contact address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "404": {
            "description": "No contact address reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Updates a contact address with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact address.\n      ",
        "operationId": "syncUpdateContactAddress",
        "parameters": [
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The internal ID for the contact address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdateContactAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "404": {
            "description": "Contact address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Deletes a contact address by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact address.\n      ",
        "operationId": "syncDeleteContactAddressById",
        "parameters": [
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The internal ID for the contact address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "404": {
            "description": "No contact address reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address-phone/{contactAddressPhoneId}": {
      "get": {
        "tags": [
          "Sync endpoints - address-specific phone numbers"
        ],
        "summary": "Returns the data for an address-soecific phone number by contactAddressPhoneId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one address-specific phone number.\n      ",
        "operationId": "syncGetContactPhoneById_1",
        "parameters": [
          {
            "name": "contactAddressPhoneId",
            "in": "path",
            "description": "The internal ID for an address-specific phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No address-specific phone number with this ID could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "200": {
            "description": "The details of the address-specific phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - address-specific phone numbers"
        ],
        "summary": "Updates an address-specific phone number",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update an address-specific phone number for a contact.\n      ",
        "operationId": "syncUpdateContactAddressPhone",
        "parameters": [
          {
            "name": "contactAddressPhoneId",
            "in": "path",
            "description": "The internal ID for an address-specific phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUpdateContactAddressPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "The address-specific phone number was not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated an address-specific phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "400": {
            "description": "Invalid data provided in the request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - address-specific phone numbers"
        ],
        "summary": "Deletes an addres-specific phone number by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Delete an address-specific phone number by internal ID.\n      ",
        "operationId": "syncDeleteContactAddressPhoneById",
        "parameters": [
          {
            "name": "contactAddressPhoneId",
            "in": "path",
            "description": "The internal ID for the address-specific phone number",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted an address-specific phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "404": {
            "description": "No address-specific phone number with this ID could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact/{prisonerContactId}/restriction/{prisonerContactRestrictionId}": {
      "put": {
        "tags": [
          "prisoner-contact"
        ],
        "summary": "Update prisoner contact restriction",
        "description": "Updates a prisoner contact restriction for the specified prisoner contact relationship and restriction ids",
        "operationId": "updatePrisonerContactRestriction",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The id of the prisoner contact relationship",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "prisonerContactRestrictionId",
            "in": "path",
            "description": "The id of the  restriction",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the prisoner contact relationship or prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated the prisoner contact restriction successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestrictionDetails"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/restriction/{contactRestrictionId}": {
      "put": {
        "tags": [
          "Contact Global Restrictions"
        ],
        "summary": "Update global restriction for a contact",
        "description": "Updates a global (estate-wide) restriction for the specified contact and restriction id",
        "operationId": "updateContactGlobalRestriction",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactRestrictionId",
            "in": "path",
            "description": "The id of the global restriction",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated the global restriction successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestrictionDetails"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact or global restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/phone/{contactPhoneId}": {
      "get": {
        "tags": [
          "Contact Phone"
        ],
        "summary": "Get a phone number",
        "description": "Gets a contacts phone number by id",
        "operationId": "getPhone",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The id of the contact phone",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "responses": {
          "200": {
            "description": "Found the phone successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact or phone this request is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact Phone"
        ],
        "summary": "Update contact phone number",
        "description": "Updates an existing contact phone by id",
        "operationId": "updatePhone",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The id of the contact phone",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Updated the contact phone successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact or phone by their ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact Phone"
        ],
        "summary": "Delete contact phone number",
        "description": "Deletes an existing contact phone by id",
        "operationId": "deletePhone",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The id of the contact phone",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "responses": {
          "404": {
            "description": "Could not find the the contact or phone by their ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Deleted the contact phone successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/identity/{contactIdentityId}": {
      "get": {
        "tags": [
          "Contact Identity"
        ],
        "summary": "Get an identity",
        "description": "Gets a contacts identity by id",
        "operationId": "getIdentityNumber",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The id of the contact identity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "responses": {
          "200": {
            "description": "Found the identity successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact or identity this request is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact Identity"
        ],
        "summary": "Update contact identity",
        "description": "Updates an existing contact identity by id",
        "operationId": "updateIdentityNumber",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The id of the contact identity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Could not find the the contact or identity by their ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated the contact identity successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact Identity"
        ],
        "summary": "Delete contact identity",
        "description": "Deletes an existing contact identity by id",
        "operationId": "deleteIdentityNumber",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The id of the contact identity",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "responses": {
          "404": {
            "description": "Could not find the the contact or identity by their ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Deleted the contact identity successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/email/{contactEmailId}": {
      "get": {
        "tags": [
          "Contact Email"
        ],
        "summary": "Get an email",
        "description": "Gets a contacts email by id",
        "operationId": "getEmailAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The id of the contact email",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "responses": {
          "404": {
            "description": "Could not find the the contact or email this request is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the email successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact Email"
        ],
        "summary": "Update contact email",
        "description": "Updates an existing contact email by id",
        "operationId": "updateEmailAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The id of the contact email",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Could not find the the contact or email by their ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated the contact email successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact Email"
        ],
        "summary": "Delete contact email",
        "description": "Deletes an existing contact email by id",
        "operationId": "deleteEmailAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The id of the contact email",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 987654
          }
        ],
        "responses": {
          "404": {
            "description": "Could not find the the contact or email by their ids",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Deleted the contact email successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/address/{contactAddressId}": {
      "get": {
        "tags": [
          "Contact Address"
        ],
        "summary": "Get a contact address",
        "description": "Get a contact address by its ID",
        "operationId": "getContactAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The contact ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The contact address ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 122
          }
        ],
        "responses": {
          "200": {
            "description": "Found the address successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact or address by their IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Contact Address"
        ],
        "summary": "Update a contact address",
        "description": "Updates an existing contact address by its ID",
        "operationId": "updateContactAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The contact ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          },
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The contact address ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 1233
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact or address by ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Updated the contact address successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Contact Address"
        ],
        "summary": "Delete contact address",
        "description": "Deletes a contact address by its ID",
        "operationId": "deleteContactAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The contact ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123
          },
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The contact address ID",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 456
          }
        ],
        "responses": {
          "404": {
            "description": "Could not find the the contact or address by the provided IDs",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Deleted the contact address successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact": {
      "post": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Creates a new prisoner contact",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a prisoner contact.\n      ",
        "operationId": "syncCreatePrisonerContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreatePrisonerContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created prisoner contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContact"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact-restriction": {
      "post": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Creates a new prisoner contact restriction",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a prisoner contact restriction.\n      ",
        "operationId": "syncCreatePrisonerContactRestriction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncPrisonerContactRestriction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact": {
      "post": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Creates a new contact",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact and associate it with a contact.\n      ",
        "operationId": "syncCreateContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "409": {
            "description": "Conflict. The personId provided in the request already exists as a contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-restriction": {
      "post": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Creates a new contact restriction",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact restriction and associate it with a contact.\n      ",
        "operationId": "syncCreateContactRestriction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreateContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactRestriction"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-phone": {
      "post": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Creates a new contact phone",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact phone and associate it with a contact.\n      ",
        "operationId": "syncCreateContactPhone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreateContactPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created contact phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactPhone"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-identity": {
      "post": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Creates a new contact identity",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact identity and associate it with a contact.\n      ",
        "operationId": "syncCreateContactIdentity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreateContactIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created contact identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactIdentity"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-email": {
      "post": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Creates a new contact email",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact email and associate it with a contact.\n      ",
        "operationId": "syncCreateContactEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreateContactEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created contact email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactEmail"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address": {
      "post": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Creates a new contact address",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact address and associate it with a contact.\n      ",
        "operationId": "syncCreateContactAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreateContactAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created contact address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddress"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address-phone": {
      "post": {
        "tags": [
          "Sync endpoints - address-specific phone numbers"
        ],
        "summary": "Creates a new address-specific phone number",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create an address-specific phone number.\n      ",
        "operationId": "syncCreateContactAddressPhone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncCreateContactAddressPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created an address-specific phone number",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SyncContactAddressPhone"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The contact address phone number was not found for the provided ID",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact": {
      "post": {
        "tags": [
          "prisoner-contact"
        ],
        "summary": "Add a new prisoner contact relationship",
        "description": "Creates a new relationship between the contact and a prisoner.",
        "operationId": "addContactRelationship",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactRelationshipRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Could not find the prisoner or contact that this relationship relates to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created the relationship successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRelationshipDetails"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact/{prisonerContactId}/restriction": {
      "get": {
        "tags": [
          "prisoner-contact"
        ],
        "summary": "Get the prisoner contact restrictions",
        "description": "\n      Get the restrictions that apply for this relationship.\n      \n      This includes prisoner-contact restrictions for this specific relationship only and any global (estate-wide) restrictions for the contact.\n      \n      If the prisoner and contact have multiple relationships, the prisoner-contact restrictions for the other relationships will not be returned. \n    ",
        "operationId": "getPrisonerContactRestrictionsByPrisonerContactId",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The id of the prisoner contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": "1L"
          }
        ],
        "responses": {
          "404": {
            "description": "The Prisoner contact relationship was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Prisoner Contact relationship",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestrictionsResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "prisoner-contact"
        ],
        "summary": "Create new prisoner contact restriction",
        "description": "Creates a new prisoner contact restriction for the specified prisoner contact relationship",
        "operationId": "createPrisonerContactRestriction",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The id of the prisoner contact relationship",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created the prisoner contact restriction successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestrictionDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the prisoner contact relationship this prisoner contact restriction is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/migrate/contact": {
      "post": {
        "tags": [
          "Migration"
        ],
        "summary": "Migrate a contact",
        "description": "Migrate a contact from NOMIS with all of its associated data.",
        "operationId": "migrateContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The contact and associated data was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrateContactResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request failed validation with invalid or missing data supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict. The request contained a personId which already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a new contact",
        "description": "Creates a new contact that is not yet associated with any prisoner.",
        "operationId": "createContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Could not find the prisoner that this contact has a relationship to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created the contact successfully",
            "headers": {
              "Location": {
                "description": "The URL where you can load the contact",
                "style": "simple",
                "example": "/contact/123456"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactCreationResult"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/restriction": {
      "get": {
        "tags": [
          "Contact Global Restrictions"
        ],
        "summary": "Get a contacts global restrictions",
        "description": "\n      Get a contacts global restrictions only. Global restrictions apply to all of a contacts relationships and are known as estate-wide restrictions in NOMIS.\n\n      Additional restrictions between the contact and specific prisoners may also apply.\n      ",
        "operationId": "getContactGlobalRestrictions",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the contact and their restrictions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ContactRestrictionDetails"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No contact with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Contact Global Restrictions"
        ],
        "summary": "Create new global restriction",
        "description": "Creates a new global (estate-wide) restriction for the specified contact",
        "operationId": "createContactGlobalRestriction",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created the global restriction successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestrictionDetails"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact this global restriction is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/phone": {
      "post": {
        "tags": [
          "Contact Phone"
        ],
        "summary": "Create new contact phone number",
        "description": "Creates a new phone number for the specified contact",
        "operationId": "createPhone",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Could not find the the contact this phone is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created the contact phone successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhoneDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/identity": {
      "post": {
        "tags": [
          "Contact Identity"
        ],
        "summary": "Create new contact identity",
        "description": "Creates a new identity for the specified contact",
        "operationId": "createIdentityNumber",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created the contact identity successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentityDetails"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact this identity is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/email": {
      "post": {
        "tags": [
          "Contact Email"
        ],
        "summary": "Create new contact email",
        "description": "Creates a new email for the specified contact",
        "operationId": "createEmailAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created the contact email successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmailDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the contact this email is for",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/address": {
      "post": {
        "tags": [
          "Contact Address"
        ],
        "summary": "Create new contact address",
        "description": "Creates a new address for the specified contact",
        "operationId": "createContactAddress",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created the contact address successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddressResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the the email address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner-contact/{prisonerContactId}": {
      "get": {
        "tags": [
          "prisoner-contact"
        ],
        "summary": "Endpoint to get a prisoner contact relationship by relationship id",
        "operationId": "getPrisonerContactById",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The id of the prisoner contact relationship to be returned",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": "1L"
          }
        ],
        "responses": {
          "404": {
            "description": "The Prisoner contact relationship was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Prisoner Contact relationship",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRelationshipDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "prisoner-contact"
        ],
        "summary": "Update prisoner contact relationship",
        "description": "Update the relationship between the contact and a prisoner.",
        "operationId": "patchContactRelationship",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The id of the prisoner contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateRelationshipRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Could not find the prisoner contact that this relationship relates to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Updated the relationship successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get contact",
        "description": "Gets a contact by their id",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No contact with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Contact"
        ],
        "summary": "Update a contact",
        "description": "Update a contact",
        "operationId": "patchContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PatchContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The contact was updated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PatchContactResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No contact with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reference-codes/group/{groupCode}": {
      "get": {
        "tags": [
          "Reference Codes Controller"
        ],
        "summary": "Endpoint to return reference data for a provided group key. Sorted by display order then description by default.",
        "operationId": "getReferenceDataByGroup",
        "parameters": [
          {
            "name": "groupCode",
            "in": "path",
            "description": "The group code of the reference codes to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "PHONE_TYPE"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort configuration - default displayOrder, description",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Sort"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "Whether to only return active codes or not, defaults to true",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reference data codes/values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonNumber}": {
      "get": {
        "tags": [
          "Prisoner"
        ],
        "summary": "Endpoint to get a specific prisoner by prison number",
        "operationId": "getPrisoner",
        "parameters": [
          {
            "name": "prisonNumber",
            "in": "path",
            "description": "The prison number of the prisoner who's contacts will be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234BC"
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of all contacts for the prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactSummary"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonNumber}/contact": {
      "get": {
        "tags": [
          "Prisoner"
        ],
        "summary": "Endpoint to fetch all contacts for a specific prisoner by prisoner number and active status",
        "operationId": "getAllContacts",
        "parameters": [
          {
            "name": "prisonNumber",
            "in": "path",
            "description": "The prison number of the prisoner who's contacts will be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234BC"
          },
          {
            "name": "active",
            "in": "query",
            "description": "Whether to include only active (true) or inactive (false) contacts",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pageable configurations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The Prisoner was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of all contacts for the prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactSummaryPage"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets all language references",
        "operationId": "getAllLanguages",
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/{id}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their id",
        "operationId": "getLanguageById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No language reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their nomis code",
        "operationId": "getLanguageByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No language reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/iso-alpha3/{code}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their by ISO Alpha 3 code",
        "operationId": "getLanguageByIsoAlpha3",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "404": {
            "description": "No language reference with that ISO Alpha 3 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/iso-alpha2/{code}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their ISO Alpha 2 code",
        "operationId": "getLanguageByIsoAlpha2",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No language reference with that ISO Alpha 2 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/county-reference": {
      "get": {
        "tags": [
          "county-reference"
        ],
        "summary": "Get county reference",
        "description": "Gets all county references",
        "operationId": "getAllCounties",
        "responses": {
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the county reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/county-reference/{id}": {
      "get": {
        "tags": [
          "county-reference"
        ],
        "summary": "Get county reference",
        "description": "Gets a county reference by their id",
        "operationId": "getCountyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No county reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the county reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/county-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "county-reference"
        ],
        "summary": "Get county reference",
        "description": "Gets a county reference by their nomis code",
        "operationId": "getCountyByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No county reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the county reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets all country references",
        "operationId": "getAllCountries",
        "responses": {
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/{id}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their id",
        "operationId": "getCountryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "404": {
            "description": "No country reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their nomis code",
        "operationId": "getCountryByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No country reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/iso-alpha3/{code}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their by ISO Alpha 3 code",
        "operationId": "getCountryByIsoAlpha3",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No country reference with that ISO Alpha 3 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/iso-alpha2/{code}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their ISO Alpha 2 code",
        "operationId": "getCountryByIsoAlpha2",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "404": {
            "description": "No country reference with that ISO Alpha 2 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/search": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Search contacts",
        "description": "Search all contacts by their last name or first name or middle name or date of birth",
        "operationId": "searchContacts",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "description": "Pageable configurations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "request",
            "in": "query",
            "description": "Contact search criteria",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContactSearchRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSearchResultItemPage"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/city-reference": {
      "get": {
        "tags": [
          "city-reference"
        ],
        "summary": "Get city reference",
        "description": "Gets all city references",
        "operationId": "getAllCities",
        "responses": {
          "200": {
            "description": "Found the city reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/city-reference/{id}": {
      "get": {
        "tags": [
          "city-reference"
        ],
        "summary": "Get city reference",
        "description": "Gets a city reference by their id",
        "operationId": "getCityById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No city reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "200": {
            "description": "Found the city reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/city-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "city-reference"
        ],
        "summary": "Get city reference",
        "description": "Gets a city reference by their nomis code",
        "operationId": "getCityByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No city reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "200": {
            "description": "Found the city reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "SyncUpdatePrisonerContactRequest": {
        "required": [
          "active",
          "approvedVisitor",
          "contactId",
          "contactType",
          "currentTerm",
          "emergencyContact",
          "nextOfKin",
          "prisonerNumber",
          "relationshipType",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The ID of the prisoner contact",
            "format": "int64",
            "example": 12345
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234BC"
          },
          "contactType": {
            "type": "string",
            "description": "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value from the group code CONTACT_TYPE in reference data.\n      Known values are (S) Social/Family or (O) official.\n      ",
            "example": "S"
          },
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship",
            "example": "Friend"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is next of kin",
            "example": true
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an emergency contact",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the prisoner contact",
            "nullable": true,
            "example": "Close family friend"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is active",
            "example": true
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an approved visitor",
            "example": false
          },
          "currentTerm": {
            "type": "boolean",
            "description": "Indicates if this relationship applies to the latest booking",
            "example": true
          },
          "approvedBy": {
            "type": "string",
            "description": "The user who approved the prisoner contact",
            "nullable": true,
            "example": "officer123"
          },
          "approvedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was approved",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T14:00:00Z"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of the prisoner contact",
            "format": "date",
            "nullable": true,
            "example": "2025-01-01"
          },
          "createdAtPrison": {
            "type": "string",
            "description": "The prison where the prisoner contact was created",
            "nullable": true,
            "example": "HMP Belmarsh"
          },
          "updatedBy": {
            "type": "string",
            "description": "The user who last updated the prisoner contact",
            "nullable": true,
            "example": "adminUser"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the prisoner contact was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request object to update prisoner contact details"
      },
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "string"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "SyncPrisonerContact": {
        "required": [
          "active",
          "approvedVisitor",
          "contactId",
          "contactType",
          "createdBy",
          "createdTime",
          "currentTerm",
          "emergencyContact",
          "id",
          "nextOfKin",
          "prisonerNumber",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The ID of the prisoner contact",
            "format": "int64",
            "example": 12345
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234BC"
          },
          "contactType": {
            "type": "string",
            "description": "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value (from the group code CONTACT_TYPE in reference data).\n      Known values are (S) Social/Family or (O) official.\n      ",
            "example": "S"
          },
          "relationshipType": {
            "type": "string",
            "description": "The relationship code from reference data",
            "example": "Friend"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is next of kin",
            "example": true
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an emergency contact",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the prisoner contact",
            "nullable": true,
            "example": "Close family friend"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is active",
            "example": true
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an approved visitor",
            "example": true
          },
          "currentTerm": {
            "type": "boolean",
            "description": "Indicates if this relationship applies to the latest booking",
            "example": true
          },
          "approvedBy": {
            "type": "string",
            "description": "The user who approved the prisoner contact",
            "nullable": true,
            "example": "officer123"
          },
          "approvedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was approved",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T14:00:00Z"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of the prisoner contact",
            "format": "date",
            "nullable": true,
            "example": "2025-01-01"
          },
          "createdAtPrison": {
            "type": "string",
            "description": "The prison where the prisoner contact was created",
            "nullable": true,
            "example": "HMP Belmarsh"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the prisoner contact",
            "example": "system"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "The user who last updated the prisoner contact",
            "nullable": true,
            "example": "adminUser"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was last updated",
            "format": "date-time",
            "nullable": true,
            "example": "2024-02-01T16:00:00Z"
          }
        },
        "description": "Response object with prisoner contact details"
      },
      "SyncUpdatePrisonerContactRestrictionRequest": {
        "required": [
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction applied",
            "example": "NoContact"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the restriction",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the restriction, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2024-12-31"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the restriction",
            "nullable": true,
            "example": "Restriction applied due to safety concerns"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who last updated the restriction record",
            "nullable": true,
            "example": "editor"
          },
          "updatedTime": {
            "type": "string",
            "description": "Time when the restriction record was last updated",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-02T15:30:00Z"
          }
        },
        "description": "Request object to update te  prisoner contact restriction details"
      },
      "SyncPrisonerContactRestriction": {
        "required": [
          "contactId",
          "prisonerContactId",
          "prisonerContactRestrictionId",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerContactRestrictionId": {
            "type": "integer",
            "description": "ID of the prisoner contact restriction",
            "format": "int64",
            "example": 232
          },
          "prisonerContactId": {
            "type": "integer",
            "description": "ID of the prisoner contact (relationship) to which the restriction applies",
            "format": "int64",
            "example": 12345
          },
          "contactId": {
            "type": "integer",
            "description": "ID of the contact (person) to which the restriction applies",
            "format": "int64",
            "example": 12345
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number involved in this relationship restriction",
            "example": "A1234AA"
          },
          "restrictionType": {
            "type": "string",
            "description": "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "nullable": true,
            "example": "NONCON"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the restriction",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the restriction, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2024-12-31"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the restriction",
            "nullable": true,
            "example": "Restriction applied due to safety concerns"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the restriction record",
            "nullable": true,
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Time when the restriction record was created",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-01T12:00:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who last updated the restriction record",
            "nullable": true,
            "example": "editor"
          },
          "updatedTime": {
            "type": "string",
            "description": "Time when the restriction record was last updated",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-02T15:30:00Z"
          }
        },
        "description": "Response object with prisoner contact restriction details"
      },
      "SyncUpdateContactRequest": {
        "required": [
          "firstName",
          "isStaff",
          "lastName",
          "remitter",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "\n    The title code for the contact.\n    This is a coded value (from the group code TITLE in reference data).\n    Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n    ",
            "nullable": true,
            "example": "MR"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "Whether the contact is over 18, based on their date of birth if it is known",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "isStaff": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "example": false
          },
          "remitter": {
            "type": "boolean",
            "description": "Whether the contact is a remitter",
            "example": false
          },
          "deceasedFlag": {
            "type": "boolean",
            "description": "Whether the contact is deceased",
            "nullable": true,
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact was deceased, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2023-05-01"
          },
          "gender": {
            "type": "string",
            "description": "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "nullable": true,
            "example": "M"
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "nullable": true,
            "example": false
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "staff": {
            "type": "boolean",
            "writeOnly": true
          }
        },
        "description": "Request to update a new contact "
      },
      "SyncContact": {
        "required": [
          "createdBy",
          "createdTime",
          "firstName",
          "id",
          "isStaff",
          "lastName",
          "remitter"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "title": {
            "type": "string",
            "description": "\n    The title code for the contact.\n    This is a coded value (from the group code TITLE in reference data).\n    Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n    ",
            "nullable": true,
            "example": "MR"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "Whether the contact is over 18, based on their date of birth if it is known",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "isStaff": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "example": false
          },
          "remitter": {
            "type": "boolean",
            "description": "Whether the contact is a remitter",
            "example": false
          },
          "deceasedFlag": {
            "type": "boolean",
            "description": "Whether the contact is deceased",
            "nullable": true,
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact was deceased, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2023-05-01"
          },
          "gender": {
            "type": "string",
            "description": "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "nullable": true,
            "example": "M"
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "nullable": true,
            "example": false
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          },
          "staff": {
            "type": "boolean",
            "writeOnly": true
          }
        },
        "description": "The details of a contact as an individual"
      },
      "SyncUpdateContactRestrictionRequest": {
        "required": [
          "contactId",
          "restrictionType",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction",
            "example": "MOBILE"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Any comments about the restriction ",
            "example": "N/A"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact restriction",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact restriction was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a contact restriction "
      },
      "SyncContactRestriction": {
        "required": [
          "contactId",
          "contactRestrictionId",
          "createdBy",
          "createdTime",
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "contactRestrictionId": {
            "type": "integer",
            "description": "Unique identifier for the contact restriction",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction",
            "example": "MOBILE"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction created date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Comments for the restriction ",
            "example": "N/A"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Restriction related to a contact"
      },
      "SyncUpdateContactPhoneRequest": {
        "required": [
          "contactId",
          "phoneNumber",
          "phoneType",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact phone",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact phone was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a new contact phone number for sync API"
      },
      "SyncContactPhone": {
        "required": [
          "contactId",
          "contactPhoneId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType"
        ],
        "type": "object",
        "properties": {
          "contactPhoneId": {
            "type": "integer",
            "description": "Unique identifier for the contact phone",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Phone related to a contact for sync API"
      },
      "SyncUpdateContactIdentityRequest": {
        "required": [
          "contactId",
          "identityType",
          "identityValue",
          "issuingAuthority",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "example": "DL"
          },
          "identityValue": {
            "type": "string",
            "description": "Identity ",
            "example": "S99PH898989L"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Issuing authority",
            "example": "DVLA"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact identity",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact identity was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a new contact identity "
      },
      "SyncContactIdentity": {
        "required": [
          "contactId",
          "contactIdentityId",
          "createdBy",
          "createdTime",
          "identityType"
        ],
        "type": "object",
        "properties": {
          "contactIdentityId": {
            "type": "integer",
            "description": "Unique identifier for the contact identity",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "example": "DL"
          },
          "identityValue": {
            "type": "string",
            "description": "Identity ",
            "example": "DL090 0909 909"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Issuing authority",
            "example": "DVLA"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Identity related to a contact"
      },
      "SyncUpdateContactEmailRequest": {
        "required": [
          "contactId",
          "emailAddress",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "test@example.com"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact email",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact email was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a contact email address by sync with NOMIS"
      },
      "SyncContactEmail": {
        "required": [
          "contactEmailId",
          "contactId",
          "createdBy",
          "createdTime",
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "contactEmailId": {
            "type": "integer",
            "description": "Unique identifier for the contact email",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "test@example.com"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Email related to a contact"
      },
      "SyncUpdateContactAddressRequest": {
        "required": [
          "addressType",
          "contactId",
          "primaryAddress",
          "updatedBy",
          "updatedTime",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The id of the contact linked to this address",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "\n    The type of address.\n    This is a coded value (from the group code ADDRESS_TYPE in reference data).\n    The known values are HOME, WORK or BUS (business address).\n    ",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code - from NOMIS reference data",
            "nullable": true,
            "example": "BIRM"
          },
          "countyCode": {
            "type": "string",
            "description": "County code - from NOMIS reference data",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code - from NOMIS reference data",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Whether the address can be used for mailing",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address can be considered active from",
            "format": "date",
            "example": "2023-01-12"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address can be considered active until",
            "format": "date",
            "example": "2023-01-12"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate this address should be considered as no fixed address",
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the address",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the address was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a contact address"
      },
      "SyncContactAddress": {
        "required": [
          "contactAddressId",
          "contactId",
          "createdBy",
          "createdTime",
          "mailFlag",
          "noFixedAddress",
          "primaryAddress",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactAddressId": {
            "type": "integer",
            "description": "The id of the contact address",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "\n    The type of address.\n    This is a coded value (from the group code ADDRESS_TYPE in reference data).\n    The known values are HOME, WORK or BUS (business address).\n    ",
            "nullable": true,
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code - from NOMIS",
            "nullable": true,
            "example": "BIRM"
          },
          "countyCode": {
            "type": "string",
            "description": "County code - from NOMIS",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code - from NOMIS",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "verifiedBy": {
            "type": "string",
            "description": "Which username ran the postcode lookup check",
            "example": "NJKG44D"
          },
          "verifiedTime": {
            "type": "string",
            "description": "The timestamp of when the postcode lookup was done",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Flag to indicate whether mail is allowed to be sent to this address",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address is to be considered active from",
            "format": "date",
            "example": "2024-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address is to be considered no longer active",
            "format": "date",
            "example": "2024-01-01"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate whether this address indicates no fixed address",
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated the contact address",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact address was last updated",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "An address related to a contact"
      },
      "SyncUpdateContactAddressPhoneRequest": {
        "required": [
          "phoneNumber",
          "phoneType",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "updatedBy": {
            "type": "string",
            "description": "The username of the person who made the update",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The time when the update was made",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update an address-specific phone number via sync"
      },
      "SyncContactAddressPhone": {
        "required": [
          "contactAddressId",
          "contactAddressPhoneId",
          "contactId",
          "contactPhoneId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType"
        ],
        "type": "object",
        "properties": {
          "contactAddressPhoneId": {
            "type": "integer",
            "description": "Unique identifier for the address-specific phone number",
            "format": "int64",
            "example": 1
          },
          "contactAddressId": {
            "type": "integer",
            "description": "Unique identifier for the address to which this phone number is linked",
            "format": "int64",
            "example": 1
          },
          "contactPhoneId": {
            "type": "integer",
            "description": "Unique identifier for the phone record",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact linked to this address",
            "format": "int64",
            "example": 1
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "An address-specific phone number used in sync"
      },
      "UpdatePrisonerContactRestrictionRequest": {
        "required": [
          "restrictionType",
          "startDate",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "restrictionType": {
            "type": "string",
            "description": "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example": "BAN"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "comments": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comments for the restriction",
            "nullable": true,
            "example": "N/A"
          },
          "updatedBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin"
          }
        },
        "description": "Request to update an existing new restriction between a prisoner and a contact"
      },
      "PrisonerContactRestrictionDetails": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "enteredByDisplayName",
          "enteredByUsername",
          "prisonerContactId",
          "prisonerContactRestrictionId",
          "prisonerNumber",
          "restrictionType",
          "restrictionTypeDescription"
        ],
        "type": "object",
        "properties": {
          "prisonerContactRestrictionId": {
            "type": "integer",
            "description": "The unique identifier for the prisoner contact restriction",
            "format": "int64",
            "example": 123456
          },
          "prisonerContactId": {
            "type": "integer",
            "description": "The unique identifier for the prisoner contact",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The unique identifier for the contact",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234BC"
          },
          "restrictionType": {
            "type": "string",
            "description": "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example": "BAN"
          },
          "restrictionTypeDescription": {
            "type": "string",
            "description": "The description of restrictionType",
            "example": "Banned"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction created date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Comments for the restriction ",
            "example": "N/A"
          },
          "enteredByUsername": {
            "type": "string",
            "description": "The username of either the person who created the restriction or the last person to update it if it has been modified.",
            "example": "admin"
          },
          "enteredByDisplayName": {
            "type": "string",
            "description": "The display name of either the person who created the restriction or the last person to update it if it has been modified.",
            "example": "John Smith"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Restriction related to a prisoner and contacts relationship"
      },
      "UpdateContactRestrictionRequest": {
        "required": [
          "restrictionType",
          "startDate",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "restrictionType": {
            "type": "string",
            "description": "\n    The coded type of restriction that applies to this contact.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example": "BAN"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "comments": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comments for the restriction",
            "nullable": true,
            "example": "N/A"
          },
          "updatedBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin"
          }
        },
        "description": "Request to update an existing global restriction on a contact, a.k.a an estate-wide restriction"
      },
      "ContactRestrictionDetails": {
        "required": [
          "contactId",
          "contactRestrictionId",
          "createdBy",
          "createdTime",
          "enteredByDisplayName",
          "enteredByUsername",
          "restrictionType",
          "restrictionTypeDescription"
        ],
        "type": "object",
        "properties": {
          "contactRestrictionId": {
            "type": "integer",
            "description": "Unique identifier for the contact restriction",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "type": "string",
            "description": "\n    The coded type of restriction that applies to this contact.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example": "BAN"
          },
          "restrictionTypeDescription": {
            "type": "string",
            "description": "The description of restrictionType",
            "example": "Banned"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction created date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Comments for the restriction ",
            "example": "N/A"
          },
          "enteredByUsername": {
            "type": "string",
            "description": "The username of either the person who created the restriction or the last person to update it if it has been modified.",
            "example": "admin"
          },
          "enteredByDisplayName": {
            "type": "string",
            "description": "The display name of either the person who created the restriction or the last person to update it if it has been modified.",
            "example": "John Smith"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Global restriction related to a contact, a.k.a estate-wide restrictions"
      },
      "UpdatePhoneRequest": {
        "required": [
          "phoneNumber",
          "phoneType",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "phoneType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "maxLength": 7,
            "minLength": 0,
            "type": "string",
            "description": "Extension number",
            "nullable": true,
            "example": "123"
          },
          "updatedBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin"
          }
        },
        "description": "Request to update an existing phone number"
      },
      "ContactPhoneDetails": {
        "required": [
          "contactId",
          "contactPhoneId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType",
          "phoneTypeDescription"
        ],
        "type": "object",
        "properties": {
          "contactPhoneId": {
            "type": "integer",
            "description": "Unique identifier for the contact phone",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneTypeDescription": {
            "type": "string",
            "description": "Description of the type of phone",
            "example": "Mobile"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "A phone number related to a contact with descriptions of all reference data"
      },
      "UpdateIdentityRequest": {
        "required": [
          "identityType",
          "identityValue",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "identityType": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Type of identity",
            "example": "DL"
          },
          "identityValue": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The identity value such as driving licence number",
            "example": "DL123456789"
          },
          "issuingAuthority": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The authority who issued the identity",
            "nullable": true,
            "example": "DVLA"
          },
          "updatedBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin"
          }
        },
        "description": "Request to update an existing contact identity"
      },
      "ContactIdentityDetails": {
        "required": [
          "contactId",
          "contactIdentityId",
          "createdBy",
          "createdTime",
          "identityTypeIsActive"
        ],
        "type": "object",
        "properties": {
          "contactIdentityId": {
            "type": "integer",
            "description": "Unique identifier for the contact identity",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "nullable": true,
            "example": "PASS"
          },
          "identityTypeDescription": {
            "type": "string",
            "description": "Description of the type of identity",
            "nullable": true,
            "example": "Passport number"
          },
          "identityTypeIsActive": {
            "type": "boolean",
            "description": "Whether this type of identity is still active. If not active, the identity cannot be updated.",
            "example": true
          },
          "identityValue": {
            "type": "string",
            "description": "Identity ",
            "nullable": true,
            "example": "GB123456789"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "The authority who issued the identity ",
            "nullable": true,
            "example": "UK Passport Office"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Identity related to a contact"
      },
      "UpdateEmailRequest": {
        "required": [
          "emailAddress",
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Email address",
            "example": "test@example.com"
          },
          "updatedBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin"
          }
        },
        "description": "Request to update an email address"
      },
      "ContactEmailDetails": {
        "required": [
          "contactEmailId",
          "contactId",
          "createdBy",
          "createdTime",
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "contactEmailId": {
            "type": "integer",
            "description": "Unique identifier for the contact email",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "test@example.com"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          }
        },
        "description": "Email related to a contact"
      },
      "UpdateContactAddressRequest": {
        "required": [
          "addressType",
          "primaryAddress",
          "updatedBy",
          "verified"
        ],
        "type": "object",
        "properties": {
          "addressType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "\n    The type of address.\n    This is a coded value (from the group code ADDRESS_TYPE in reference data).\n    The known values are HOME, WORK or BUS (business address).\n    ",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "City code - from NOMIS reference data",
            "nullable": true,
            "example": "BIRM"
          },
          "countyCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "County code - from NOMIS reference data",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Country code - from NOMIS reference data",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Whether the address can be used for mailing",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address can be considered active from",
            "format": "date",
            "example": "2023-01-12"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address can be considered active until",
            "format": "date",
            "example": "2023-01-12"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate this address should be considered as no fixed address",
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          },
          "updatedBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The id of the user who updated the address",
            "example": "JD000001"
          }
        },
        "description": "Request to update a contact address"
      },
      "ContactAddressResponse": {
        "required": [
          "contactAddressId",
          "contactId",
          "createdBy",
          "createdTime",
          "mailFlag",
          "noFixedAddress",
          "primaryAddress",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactAddressId": {
            "type": "integer",
            "description": "The id of the contact address",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "\n      The type of address (optional).\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "nullable": true,
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code",
            "nullable": true,
            "example": "25343"
          },
          "countyCode": {
            "type": "string",
            "description": "County code",
            "nullable": true,
            "example": "S.YORKSHIRE"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true,
            "example": "ENG"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "verifiedBy": {
            "type": "string",
            "description": "Which username ran the postcode lookup check",
            "nullable": true,
            "example": "NJKG44D"
          },
          "verifiedTime": {
            "type": "string",
            "description": "The timestamp of when the postcode lookup was done",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Flag to indicate whether mail is allowed to be sent to this address",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address is to be considered active from",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address is to be considered no longer active",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate whether this address indicates no fixed address",
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated the contact address",
            "nullable": true,
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact address was last updated",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "A contact address response"
      },
      "SyncCreatePrisonerContactRequest": {
        "required": [
          "contactId",
          "contactType",
          "createdBy",
          "createdTime",
          "emergencyContact",
          "nextOfKin",
          "prisonerNumber",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The ID of the prisoner contact",
            "format": "int64",
            "example": 12345
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234BC"
          },
          "contactType": {
            "type": "string",
            "description": "\n      Coded value indicating either a social or official contact (mandatory).\n      This is a coded value (from the group code CONTACT_TYPE in reference data).\n      Known values are (S) Social/Family or (O) official.\n      ",
            "example": "S"
          },
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship",
            "example": "Friend"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is next of kin",
            "example": true
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an emergency contact",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the prisoner contact",
            "nullable": true,
            "example": "Close family friend"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the prisoner contact",
            "example": "system"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was created",
            "format": "date-time"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is active",
            "nullable": true,
            "example": true
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an approved visitor",
            "nullable": true,
            "example": false
          },
          "currentTerm": {
            "type": "boolean",
            "description": "Indicates if this relationship is current and applies to the latest booking",
            "nullable": true,
            "example": true
          },
          "approvedBy": {
            "type": "string",
            "description": "The user who approved the prisoner contact",
            "nullable": true,
            "example": "officer123"
          },
          "approvedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was approved",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T14:00:00Z"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of the prisoner contact",
            "format": "date",
            "nullable": true,
            "example": "2025-01-01"
          },
          "createdAtPrison": {
            "type": "string",
            "description": "The prison where the prisoner contact was created",
            "nullable": true,
            "example": "HMP Belmarsh"
          }
        },
        "description": "Request object to create a prisoner contact details"
      },
      "SyncCreatePrisonerContactRestrictionRequest": {
        "required": [
          "createdBy",
          "createdTime",
          "prisonerContactId",
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "prisonerContactId": {
            "type": "integer",
            "description": "ID of the prisoner contact (relationship) on which the restriction applies",
            "format": "int64",
            "example": 12345
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction applied",
            "example": "NoContact"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the restriction",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the restriction, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2024-12-31"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the restriction",
            "nullable": true,
            "example": "Restriction applied due to safety concerns"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the restriction record",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Time when the restriction record was created",
            "format": "date-time",
            "example": "2024-10-01T12:00:00Z"
          }
        },
        "description": "Request object to create a prisoner contact restriction"
      },
      "ContactRelationship": {
        "required": [
          "isEmergencyContact",
          "isNextOfKin",
          "prisonerNumber",
          "relationshipCode"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner number (NOMS ID)",
            "example": "A1234BC"
          },
          "relationshipCode": {
            "type": "string",
            "description": "The relationship code between the prisoner and the contact",
            "example": "FRI"
          },
          "isNextOfKin": {
            "type": "boolean",
            "description": "Whether they are the next of kin for the prisoner",
            "example": true
          },
          "isEmergencyContact": {
            "type": "boolean",
            "description": "Whether they are the emergency contact for the prisoner",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Comments about the contacts relationship with the prisoner",
            "nullable": true,
            "example": "Some additional information"
          }
        },
        "description": "A description of the relationship if the contact should be linked to a prisoner",
        "nullable": true
      },
      "SyncCreateContactRequest": {
        "required": [
          "createdBy",
          "createdTime",
          "firstName",
          "isStaff",
          "lastName",
          "personId",
          "remitter"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person ID from NOMIS",
            "format": "int64",
            "example": 1233323
          },
          "title": {
            "maxLength": 12,
            "type": "string",
            "description": "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n      ",
            "nullable": true,
            "example": "MR"
          },
          "lastName": {
            "maxLength": 35,
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "maxLength": 35,
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleName": {
            "maxLength": 35,
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "If the date of birth is not known, this indicates whether they are believed to be over 18 or not",
            "nullable": true,
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "relationship": {
            "$ref": "#/components/schemas/ContactRelationship"
          },
          "isStaff": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "example": false
          },
          "remitter": {
            "type": "boolean",
            "description": "Whether the contact is a remitter",
            "example": false
          },
          "deceasedFlag": {
            "type": "boolean",
            "description": "Whether the contact is deceased",
            "nullable": true,
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact was deceased, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2023-05-01"
          },
          "gender": {
            "type": "string",
            "description": "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "nullable": true,
            "example": "M"
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "nullable": true,
            "example": false
          },
          "createdBy": {
            "maxLength": 100,
            "type": "string",
            "description": "The id of the user creating the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "staff": {
            "type": "boolean",
            "writeOnly": true
          }
        },
        "description": "Request to create a new contact"
      },
      "SyncCreateContactRestrictionRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction",
            "example": "MOBILE"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Comments for the restriction ",
            "example": "N/A"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the restriction was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact restriction "
      },
      "SyncCreateContactPhoneRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the phone was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact phone number for sync API"
      },
      "SyncCreateContactIdentityRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "identityType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "example": "DL"
          },
          "identityValue": {
            "type": "string",
            "description": "Identity number or reference",
            "example": "HP9909SM1883"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Issuing authority ",
            "example": "DVLA"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "JJ99821"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the identity was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact identity "
      },
      "SyncCreateContactEmailRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "test@example.com"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the email was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact email address by sync with NOMIS"
      },
      "SyncCreateContactAddressRequest": {
        "required": [
          "addressType",
          "contactId",
          "createdBy",
          "createdTime",
          "primaryAddress"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The id of the contact this address is linked with",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "\n      The type of address.\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code - from NOMIS",
            "nullable": true,
            "example": "13232"
          },
          "countyCode": {
            "type": "string",
            "description": "County code - from NOMIS",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code - from NOMIS",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Whether the address can be used for mailing",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address can be considered active from",
            "format": "date",
            "example": "2023-01-12"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address can be considered active until",
            "format": "date",
            "example": "2023-01-12"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate this address should be considered as no fixed address",
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact address"
      },
      "SyncCreateContactAddressPhoneRequest": {
        "required": [
          "contactAddressId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType"
        ],
        "type": "object",
        "properties": {
          "contactAddressId": {
            "type": "integer",
            "description": "Unique identifier for the contact address",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the phone was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new address-linked phone number via sync"
      },
      "AddContactRelationshipRequest": {
        "required": [
          "contactId",
          "createdBy",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The id of the contact this relationship is for",
            "format": "int64",
            "example": 123456
          },
          "relationship": {
            "$ref": "#/components/schemas/ContactRelationship"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The id of the user creating the contact",
            "example": "JD000001"
          }
        }
      },
      "PrisonerContactRelationshipDetails": {
        "required": [
          "contactId",
          "emergencyContact",
          "isRelationshipActive",
          "nextOfKin",
          "prisonerContactId",
          "prisonerNumber",
          "relationshipCode",
          "relationshipDescription"
        ],
        "type": "object",
        "properties": {
          "prisonerContactId": {
            "type": "integer",
            "description": "The unique identifier for the prisoner contact",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The unique identifier for the contact",
            "format": "int64",
            "example": 654321
          },
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner number (NOMS ID)",
            "example": "A1234BC"
          },
          "relationshipCode": {
            "type": "string",
            "description": "The relationship code between the prisoner and the contact",
            "example": "FRI"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "The description of the relationship",
            "example": "Friend"
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Is this contact the prisoner's emergency contact?",
            "example": true
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Is this contact the prisoner's next of kin?",
            "example": false
          },
          "isRelationshipActive": {
            "type": "boolean",
            "description": "Is this prisoner's contact relationship active?",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Any additional comments",
            "nullable": true,
            "example": "Close family friend"
          }
        },
        "description": "Describes the prisoner contact relationship"
      },
      "CreatePrisonerContactRestrictionRequest": {
        "required": [
          "createdBy",
          "restrictionType",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "restrictionType": {
            "type": "string",
            "description": "\n    The coded type of restriction that applies to this relationship.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example": "BAN"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "comments": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comments for the restriction",
            "nullable": true,
            "example": "N/A"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          }
        },
        "description": "Request to create a new restriction between a prisoner and a contact"
      },
      "CodedValue": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "A coded value from NOMIS reference data",
            "example": "CODE"
          },
          "description": {
            "type": "string",
            "description": "The description for this coded value in NOMIS",
            "example": "Description"
          }
        },
        "description": "Coded value for this restriction type"
      },
      "Corporate": {
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The corporate ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "name": {
            "type": "string",
            "description": "The name of the corporate organisation",
            "example": "West Midlands Police"
          }
        },
        "description": "The corporate organisation this person works for",
        "nullable": true
      },
      "MigrateAddress": {
        "required": [
          "addressId",
          "mailAddress",
          "noFixedAddress",
          "phoneNumbers",
          "primaryAddress",
          "validatedPAF"
        ],
        "type": "object",
        "properties": {
          "addressId": {
            "type": "integer",
            "description": "Unique address ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "flat": {
            "type": "string",
            "description": "Flat number or identifier",
            "nullable": true,
            "example": "1B"
          },
          "premise": {
            "type": "string",
            "description": "House name or number",
            "nullable": true,
            "example": "43"
          },
          "street": {
            "type": "string",
            "description": "Street or road",
            "nullable": true,
            "example": "Main Street"
          },
          "locality": {
            "type": "string",
            "description": "Locality",
            "nullable": true,
            "example": "Keighley"
          },
          "postCode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "BD12 8RD"
          },
          "city": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "county": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "country": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "validatedPAF": {
            "type": "boolean",
            "description": "Address validated by postcode lookup",
            "nullable": true,
            "example": false
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "If true this address should be considered as no fixed address",
            "nullable": true,
            "example": false
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "If true this address should be considered as the primary residential address",
            "nullable": true,
            "example": true
          },
          "mailAddress": {
            "type": "boolean",
            "description": "If true this address should be considered for sending mail to",
            "nullable": true,
            "example": true
          },
          "comment": {
            "type": "string",
            "description": "Comments relating to this address",
            "nullable": true,
            "example": "A comment"
          },
          "startDate": {
            "type": "string",
            "description": "The date this address should be considered valid from",
            "format": "date",
            "nullable": true,
            "example": "2018-10-01"
          },
          "endDate": {
            "type": "string",
            "description": "The date this address should be considered valid to",
            "format": "date",
            "nullable": true,
            "example": "2022-04-04"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "A list of phone numbers which are linked to this address",
            "items": {
              "$ref": "#/components/schemas/MigratePhoneNumber"
            }
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "Addresses"
      },
      "MigrateContactRequest": {
        "required": [
          "addresses",
          "contacts",
          "emailAddresses",
          "employments",
          "firstName",
          "identifiers",
          "interpreterRequired",
          "lastName",
          "personId",
          "phoneNumbers",
          "remitter",
          "restrictions",
          "staff"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person ID from NOMIS",
            "format": "int64",
            "example": 1233323
          },
          "firstName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "lastName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "middleName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "gender": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "title": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "language": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Interpreter required",
            "nullable": true
          },
          "domesticStatus": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date this persons was marked as deceased",
            "format": "date",
            "nullable": true
          },
          "staff": {
            "type": "boolean",
            "description": "This person is staff"
          },
          "remitter": {
            "type": "boolean",
            "description": "This person is a remitter"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "Telephone numbers",
            "items": {
              "$ref": "#/components/schemas/MigratePhoneNumber"
            }
          },
          "addresses": {
            "type": "array",
            "description": "Addresses",
            "items": {
              "$ref": "#/components/schemas/MigrateAddress"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "Email addresses",
            "items": {
              "$ref": "#/components/schemas/MigrateEmailAddress"
            }
          },
          "employments": {
            "type": "array",
            "description": "Employments for official contacts only",
            "items": {
              "$ref": "#/components/schemas/MigrateEmployment"
            }
          },
          "identifiers": {
            "type": "array",
            "description": "Proofs of identity",
            "items": {
              "$ref": "#/components/schemas/MigrateIdentifier"
            }
          },
          "contacts": {
            "type": "array",
            "description": "The relationships with prisoners including specific restrictions for each",
            "items": {
              "$ref": "#/components/schemas/MigrateRelationship"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "The restrictions which apply to this person only",
            "items": {
              "$ref": "#/components/schemas/MigrateRestriction"
            }
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "Request to migrate a contact and all of its sub-elements from NOMIS into this service"
      },
      "MigrateEmailAddress": {
        "required": [
          "email",
          "emailAddressId"
        ],
        "type": "object",
        "properties": {
          "emailAddressId": {
            "type": "integer",
            "description": "Unique email ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "example": "test@example.com"
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "Email addresses"
      },
      "MigrateEmployment": {
        "required": [
          "active",
          "sequence"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Unique sequence ID in NOMIS for this employment",
            "format": "int64",
            "example": 123
          },
          "corporate": {
            "$ref": "#/components/schemas/Corporate"
          },
          "active": {
            "type": "boolean",
            "description": "Comments relating to this restriction",
            "example": true
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "Employments for official contacts only"
      },
      "MigrateIdentifier": {
        "required": [
          "identifier",
          "sequence",
          "type"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Unique sequence ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "identifier": {
            "type": "string",
            "description": "The identifying information e.g. driving licence number",
            "example": "KJ 45544 JFKJK"
          },
          "issuedAuthority": {
            "type": "string",
            "description": "The issuing authority for this identifier",
            "nullable": true,
            "example": "DVLA"
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "Proofs of identity"
      },
      "MigratePhoneNumber": {
        "required": [
          "number",
          "phoneId",
          "type"
        ],
        "type": "object",
        "properties": {
          "phoneId": {
            "type": "integer",
            "description": "Unique phone ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "number": {
            "type": "string",
            "description": "Telephone number",
            "example": "098989 98989893"
          },
          "extension": {
            "type": "string",
            "description": "Extension number (optional)",
            "nullable": true,
            "example": "100"
          },
          "type": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "A list of phone numbers which are linked to this address"
      },
      "MigratePrisonerContactRestriction": {
        "required": [
          "id",
          "restrictionType",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "comment": {
            "type": "string",
            "description": "Comment on this restriction",
            "nullable": true,
            "example": "Comment on restriction"
          },
          "startDate": {
            "type": "string",
            "description": "The date that this restriction took effect",
            "format": "date",
            "example": "2024-03-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "The date that this restriction expires",
            "format": "date",
            "example": "2024-03-01"
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "The restrictions for this prisoner contact relationship"
      },
      "MigrateRelationship": {
        "required": [
          "active",
          "approvedVisitor",
          "contactType",
          "currentTerm",
          "emergencyContact",
          "id",
          "nextOfKin",
          "prisonerNumber",
          "relationshipType",
          "restrictions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "contactType": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "relationshipType": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "currentTerm": {
            "type": "boolean",
            "description": "True if this relationship applies to the latest or current term in prison, false if a previous term",
            "example": true
          },
          "active": {
            "type": "boolean",
            "description": "The relationship is active",
            "example": true
          },
          "expiryDate": {
            "type": "string",
            "description": "The date that this relationship expired",
            "format": "date",
            "nullable": true,
            "example": "2024-03-01"
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Approved visitor",
            "example": true
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Next of kin",
            "example": true
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Emergency contact",
            "example": true
          },
          "comment": {
            "type": "string",
            "description": "Comment on this relationship",
            "nullable": true,
            "example": "This is an optional comment"
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number (NOMS ID) related",
            "example": "A1234AA"
          },
          "restrictions": {
            "type": "array",
            "description": "The restrictions for this prisoner contact relationship",
            "items": {
              "$ref": "#/components/schemas/MigratePrisonerContactRestriction"
            }
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "The relationships with prisoners including specific restrictions for each"
      },
      "MigrateRestriction": {
        "required": [
          "effectiveDate",
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Unique ID in NOMIS for this restriction",
            "format": "int64",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "comment": {
            "type": "string",
            "description": "Comments relating to this restriction",
            "nullable": true,
            "example": "A comment"
          },
          "effectiveDate": {
            "type": "string",
            "description": "The date that this restriction is effective from",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "The date that this restriction expires and stops being enforced",
            "format": "date",
            "nullable": true,
            "example": "2024-03-01"
          },
          "createDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "createUsername": {
            "type": "string"
          },
          "modifyDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "modifyUsername": {
            "type": "string"
          }
        },
        "description": "The restrictions which apply to this person only"
      },
      "AddressAndPhones": {
        "required": [
          "address",
          "phones"
        ],
        "type": "object",
        "properties": {
          "address": {
            "$ref": "#/components/schemas/IdPair"
          },
          "phones": {
            "type": "array",
            "description": "The pairs of IDs in NOMIS and DPS for address-specific phone numbers",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          }
        },
        "description": "List of Nomis and DPS IDs for addresses and address-specific phone numbers"
      },
      "ContactsAndRestrictions": {
        "required": [
          "relationship",
          "restrictions"
        ],
        "type": "object",
        "properties": {
          "relationship": {
            "$ref": "#/components/schemas/IdPair"
          },
          "restrictions": {
            "type": "array",
            "description": "The pairs of IDs in NOMIS and DPS for relationship-specific restrictions",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          }
        },
        "description": "List of Nomis and DPS IDs for relationships and relationship-specific restrictions"
      },
      "IdPair": {
        "required": [
          "dpsId",
          "elementType",
          "nomisId"
        ],
        "type": "object",
        "properties": {
          "elementType": {
            "type": "string",
            "description": "The category of information returned",
            "example": "PHONE",
            "enum": [
              "CONTACT",
              "PHONE",
              "EMAIL",
              "ADDRESS",
              "ADDRESS_PHONE",
              "IDENTITY",
              "RESTRICTION",
              "PRISONER_CONTACT",
              "PRISONER_CONTACT_RESTRICTION",
              "EMPLOYMENT"
            ]
          },
          "nomisId": {
            "type": "integer",
            "description": "The unique ID for this piece of data provided in the request",
            "format": "int64",
            "example": 123435
          },
          "dpsId": {
            "type": "integer",
            "description": "The unique ID created in the DPS contacts service",
            "format": "int64",
            "example": 1234
          }
        },
        "description": "List of Nomis and DPS IDs for employments (official contact types only)",
        "nullable": true
      },
      "MigrateContactResponse": {
        "required": [
          "addresses",
          "contact",
          "emailAddresses",
          "identities",
          "lastName",
          "phoneNumbers",
          "relationships",
          "restrictions"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "$ref": "#/components/schemas/IdPair"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact created",
            "example": "Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "List of Nomis and DPS IDs for person phone numbers",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of Nomis and DPS IDs for addresses and address-specific phone numbers",
            "items": {
              "$ref": "#/components/schemas/AddressAndPhones"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "List of Nomis and DPS IDs for person email addresses",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "identities": {
            "type": "array",
            "description": "List of Nomis and DPS IDs for person proofs of identity",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "List of Nomis and DPS IDs for person restrictions (visitor restrictions)",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "relationships": {
            "type": "array",
            "description": "List of Nomis and DPS IDs for relationships and relationship-specific restrictions",
            "items": {
              "$ref": "#/components/schemas/ContactsAndRestrictions"
            }
          },
          "employments": {
            "type": "array",
            "description": "List of Nomis and DPS IDs for employments (official contact types only)",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          }
        },
        "description": "The migration response for a contact/person and all of its sub-entities"
      },
      "CreateContactRequest": {
        "required": [
          "createdBy",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n      ",
            "nullable": true,
            "example": "MR"
          },
          "lastName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The middle names of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "If the date of birth is not known, this indicates whether they are believed to be over 18 or not",
            "nullable": true,
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "relationship": {
            "$ref": "#/components/schemas/ContactRelationship"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The id of the user creating the contact",
            "example": "JD000001"
          }
        },
        "description": "Request to create a new contact"
      },
      "ContactAddressDetails": {
        "required": [
          "contactAddressId",
          "contactId",
          "createdBy",
          "createdTime",
          "mailFlag",
          "noFixedAddress",
          "phoneNumbers",
          "primaryAddress",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactAddressId": {
            "type": "integer",
            "description": "The id of the contact address",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "\n      The type of address (optional).\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "nullable": true,
            "example": "HOME"
          },
          "addressTypeDescription": {
            "type": "string",
            "description": "The description of the address type",
            "nullable": true,
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code",
            "nullable": true,
            "example": "25343"
          },
          "cityDescription": {
            "type": "string",
            "description": "The description of city code",
            "nullable": true,
            "example": "Sheffield"
          },
          "countyCode": {
            "type": "string",
            "description": "County code",
            "nullable": true,
            "example": "S.YORKSHIRE"
          },
          "countyDescription": {
            "type": "string",
            "description": "The description of county code",
            "nullable": true,
            "example": "South Yorkshire"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true,
            "example": "ENG"
          },
          "countryDescription": {
            "type": "string",
            "description": "The description of country code",
            "nullable": true,
            "example": "England"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "verifiedBy": {
            "type": "string",
            "description": "Which username ran the postcode lookup check",
            "nullable": true,
            "example": "NJKG44D"
          },
          "verifiedTime": {
            "type": "string",
            "description": "The timestamp of when the postcode lookup was done",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Flag to indicate whether mail is allowed to be sent to this address",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address is to be considered active from",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address is to be considered no longer active",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate whether this address indicates no fixed address",
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "Phone numbers that are related to this address",
            "items": {
              "$ref": "#/components/schemas/ContactPhoneDetails"
            }
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who last updated the contact address",
            "nullable": true,
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact address was last updated",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "An address related to a contact with descriptions of all reference data"
      },
      "ContactCreationResult": {
        "required": [
          "createdContact"
        ],
        "type": "object",
        "properties": {
          "createdContact": {
            "$ref": "#/components/schemas/ContactDetails"
          },
          "createdRelationship": {
            "$ref": "#/components/schemas/PrisonerContactRelationshipDetails"
          }
        },
        "description": "The result of creating a contact and optionally a new relationship to a prisoner"
      },
      "ContactDetails": {
        "required": [
          "addresses",
          "createdBy",
          "createdTime",
          "emailAddresses",
          "firstName",
          "id",
          "identities",
          "interpreterRequired",
          "isDeceased",
          "isStaff",
          "lastName",
          "phoneNumbers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "title": {
            "type": "string",
            "description": "\n      The title code for the contact.\n      This is a coded value (from the group code TITLE in reference data).\n      Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n      ",
            "nullable": true,
            "example": "MR"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "Whether the contact is over 18, based on their date of birth if it is known",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "isStaff": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "example": false
          },
          "isDeceased": {
            "type": "boolean",
            "description": "The date the contact deceased, if known",
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact deceased, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "languageCode": {
            "type": "string",
            "description": "The NOMIS code for the contacts language",
            "nullable": true,
            "example": "ENG"
          },
          "languageDescription": {
            "type": "string",
            "description": "The description of the language code",
            "nullable": true,
            "example": "English"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required for this contact",
            "nullable": true,
            "example": true
          },
          "addresses": {
            "type": "array",
            "description": "All addresses for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactAddressDetails"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "description": "All phone numbers for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactPhoneDetails"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "All email addresses for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactEmailDetails"
            }
          },
          "identities": {
            "type": "array",
            "description": "All identities for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactIdentityDetails"
            }
          },
          "domesticStatusCode": {
            "type": "string",
            "description": "The NOMIS code for the contacts domestic status",
            "nullable": true,
            "example": "S"
          },
          "domesticStatusDescription": {
            "type": "string",
            "description": "The description of the domestic status code",
            "nullable": true,
            "example": "Single"
          },
          "gender": {
            "type": "string",
            "description": "The NOMIS code for the contacts gender. See reference data with group code 'GENDER'",
            "nullable": true
          },
          "genderDescription": {
            "type": "string",
            "description": "The description of gender code. See reference data with group code 'GENDER'",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "staff": {
            "type": "boolean",
            "writeOnly": true
          }
        },
        "description": "The details of a contact as an individual"
      },
      "CreateContactRestrictionRequest": {
        "required": [
          "createdBy",
          "restrictionType",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "restrictionType": {
            "type": "string",
            "description": "\n    The coded type of restriction that applies to this contact.\n    This is a coded value from the group RESTRICTION in reference codes.\n    Example values include ACC, BAN, CHILD, CLOSED, RESTRICTED, DIHCON, NONCON.\n    ",
            "example": "BAN"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "comments": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Comments for the restriction",
            "nullable": true,
            "example": "N/A"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          }
        },
        "description": "Request to create a new global restriction on a contact, a.k.a an estate-wide restriction"
      },
      "CreatePhoneRequest": {
        "required": [
          "createdBy",
          "phoneNumber",
          "phoneType"
        ],
        "type": "object",
        "properties": {
          "phoneType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Type of phone",
            "example": "MOB"
          },
          "phoneNumber": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "maxLength": 7,
            "minLength": 0,
            "type": "string",
            "description": "Extension number",
            "nullable": true,
            "example": "123"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          }
        },
        "description": "Request to create a new phone number"
      },
      "CreateIdentityRequest": {
        "required": [
          "createdBy",
          "identityType",
          "identityValue"
        ],
        "type": "object",
        "properties": {
          "identityType": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "Type of identity",
            "example": "DL"
          },
          "identityValue": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "description": "The identity value such as driving licence number",
            "example": "DL123456789"
          },
          "issuingAuthority": {
            "maxLength": 40,
            "minLength": 0,
            "type": "string",
            "description": "The authority who issued the identity",
            "nullable": true,
            "example": "DVLA"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          }
        },
        "description": "Request to create a new contact identity"
      },
      "CreateEmailRequest": {
        "required": [
          "createdBy",
          "emailAddress"
        ],
        "type": "object",
        "properties": {
          "emailAddress": {
            "maxLength": 240,
            "minLength": 0,
            "type": "string",
            "description": "Email address",
            "example": "test@example.com"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          }
        },
        "description": "Request to create a new email address"
      },
      "CreateContactAddressRequest": {
        "required": [
          "addressType",
          "createdBy",
          "primaryAddress"
        ],
        "type": "object",
        "properties": {
          "addressType": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "\n      The type of address.\n      This is a coded value (from the group code ADDRESS_TYPE in reference data).\n      The known values are HOME, WORK or BUS (business address).\n    ",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "City code - from NOMIS",
            "nullable": true,
            "example": "13232"
          },
          "countyCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "County code - from NOMIS",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "Country code - from NOMIS",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Whether the address can be used for mailing",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address can be considered active from",
            "format": "date",
            "example": "2023-01-12"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address can be considered active until",
            "format": "date",
            "example": "2023-01-12"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate this address should be considered as no fixed address",
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          }
        },
        "description": "Request to create a new contact address"
      },
      "UpdateRelationshipRequest": {
        "required": [
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "relationshipCode": {
            "type": "string",
            "description": "The relationship code between the prisoner and the contact",
            "example": "FRI"
          },
          "isEmergencyContact": {
            "type": "string",
            "description": "Whether they are the emergency contact for the prisoner",
            "example": "boolean"
          },
          "isNextOfKin": {
            "type": "boolean",
            "description": "Whether they are the next of kin for the prisoner",
            "example": true
          },
          "isRelationshipActive": {
            "type": "boolean",
            "description": "Whether the relationship is active",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Comments about the contacts relationship with the prisoner",
            "nullable": true,
            "example": "Some additional information"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact",
            "example": "JD000001"
          }
        },
        "description": "Request to update an existing relationship details"
      },
      "PatchContactRequest": {
        "required": [
          "updatedBy"
        ],
        "type": "object",
        "properties": {
          "isStaff": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "example": false
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "example": false
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "yyyy-MM-dd",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "If the date of birth is not known, this indicates whether they are believed to be over 18 or not",
            "nullable": true,
            "example": "YES"
          },
          "title": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "The title code for the contact, if any",
            "nullable": true,
            "example": "MR"
          },
          "middleNames": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The middle names of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "gender": {
            "type": "string",
            "description": "\n    The optional gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "nullable": true,
            "example": "M"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact",
            "example": "JD000001"
          }
        },
        "description": "Request to patch a new contact. firstName and lastName are not updatable so are intentionally missing from this request."
      },
      "PatchContactResponse": {
        "required": [
          "createdBy",
          "createdTime",
          "firstName",
          "id",
          "isStaff",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "title": {
            "type": "string",
            "description": "\n    The title code for the contact.\n    This is a coded value (from the group code TITLE in reference data).\n    Known values are MR, MRS, MISS, DR, MS, REV, SIR, BR, SR.\n    ",
            "nullable": true,
            "example": "MR"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "Whether the contact is over 18, based on their date of birth if it is known",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "isStaff": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "example": false
          },
          "deceasedFlag": {
            "type": "boolean",
            "description": "Whether the contact is deceased",
            "nullable": true,
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact was deceased, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2023-05-01"
          },
          "gender": {
            "type": "string",
            "description": "\n    The gender code for the contact.\n    This is a coded value (from the group code GENDER in reference data).\n    Known values are (M) Male, (F) Female, (NK) Not Known, (NS) Not Specified.\n    ",
            "nullable": true,
            "example": "M"
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "nullable": true,
            "example": false
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "User who updated the entry",
            "example": "admin2"
          },
          "updatedTime": {
            "type": "string",
            "description": "Timestamp when the entry was updated",
            "format": "date-time"
          },
          "staff": {
            "type": "boolean",
            "writeOnly": true
          }
        },
        "description": "The details of a updated contact as an individual"
      },
      "Sort": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReferenceCode": {
        "required": [
          "code",
          "description",
          "displayOrder",
          "groupCode",
          "isActive",
          "referenceCodeId"
        ],
        "type": "object",
        "properties": {
          "referenceCodeId": {
            "type": "integer",
            "description": "An internally-generated unique identifier for this reference code.",
            "format": "int64",
            "example": 12345
          },
          "groupCode": {
            "type": "string",
            "description": "The group name for related reference codes.",
            "example": "PHONE_TYPE"
          },
          "code": {
            "type": "string",
            "description": "The code for this reference data",
            "example": "MOB"
          },
          "description": {
            "type": "string",
            "description": "A fuller description of the reference code",
            "example": "Mobile"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The default order configured for the reference code, lowest number first.",
            "format": "int32",
            "example": 5
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether the reference code is still in use. Old reference codes are maintained for compatability with legacy data.",
            "example": true
          }
        },
        "description": "Describes the details of a reference code"
      },
      "PrisonerContactSummary": {
        "required": [
          "approvedVisitor",
          "contactId",
          "currentTerm",
          "emergencyContact",
          "firstName",
          "isRelationshipActive",
          "lastName",
          "nextOfKin",
          "prisonerContactId",
          "prisonerNumber",
          "relationshipCode",
          "relationshipDescription"
        ],
        "type": "object",
        "properties": {
          "prisonerContactId": {
            "type": "integer",
            "description": "The unique identifier for the prisoner contact",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The unique identifier for the contact",
            "format": "int64",
            "example": 654321
          },
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner number (NOMS ID)",
            "example": "A1234BC"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "type": "string",
            "description": "The middle names of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact",
            "format": "date",
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "YES if the contact is over 18 years old, NO if under, null if unknown",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "relationshipCode": {
            "type": "string",
            "description": "The relationship code between the prisoner and the contact",
            "example": "FRI"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "The description of the relationship",
            "example": "Friend"
          },
          "flat": {
            "type": "string",
            "description": "Flat number in the address, if any",
            "nullable": true,
            "example": "Flat 1"
          },
          "property": {
            "type": "string",
            "description": "Property name or number",
            "example": "123"
          },
          "street": {
            "type": "string",
            "description": "Street name",
            "example": "Baker Street"
          },
          "area": {
            "type": "string",
            "description": "Area or locality, if any",
            "nullable": true,
            "example": "Marylebone"
          },
          "cityCode": {
            "type": "string",
            "description": "City code",
            "example": "25343"
          },
          "cityDescription": {
            "type": "string",
            "description": "The description of city code",
            "example": "Sheffield"
          },
          "countyCode": {
            "type": "string",
            "description": "County code",
            "example": "S.YORKSHIRE"
          },
          "countyDescription": {
            "type": "string",
            "description": "The description of county code",
            "example": "South Yorkshire"
          },
          "postCode": {
            "type": "string",
            "description": "Postal code",
            "example": "NW1 6XE"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "example": "ENG"
          },
          "countryDescription": {
            "type": "string",
            "description": "The description of country code",
            "example": "England"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "If true this address should be considered as the primary residential address",
            "nullable": true,
            "example": true
          },
          "mailAddress": {
            "type": "boolean",
            "description": "If true this address should be considered for sending mail to",
            "nullable": true,
            "example": true
          },
          "phoneType": {
            "type": "string",
            "description": "Type of the latest phone number",
            "nullable": true,
            "example": "MOB"
          },
          "phoneTypeDescription": {
            "type": "string",
            "description": "Description of the type of the latest phone number",
            "nullable": true,
            "example": "Mobile"
          },
          "phoneNumber": {
            "type": "string",
            "description": "The latest phone number, if there are any",
            "nullable": true,
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "The extension number of the latest phone number",
            "nullable": true,
            "example": "123"
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates whether the contact is an approved visitor",
            "example": true
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Is this contact the prisoner's next of kin?",
            "example": false
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Is this contact the prisoner's emergency contact?",
            "example": true
          },
          "isRelationshipActive": {
            "type": "boolean",
            "description": "Is this prisoner's contact relationship active?",
            "example": true
          },
          "currentTerm": {
            "type": "boolean",
            "description": "Is this relationship active for the current booking?",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Any additional comments",
            "nullable": true,
            "example": "Close family friend"
          }
        },
        "description": "Describes the details of a prisoner's contact"
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "PrisonerContactSummaryPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerContactSummary"
            }
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string"
          },
          "nullHandling": {
            "type": "string"
          },
          "ascending": {
            "type": "boolean"
          },
          "property": {
            "type": "string"
          },
          "ignoreCase": {
            "type": "boolean"
          }
        }
      },
      "PrisonerContactRestrictionsResponse": {
        "required": [
          "contactGlobalRestrictions",
          "prisonerContactRestrictions"
        ],
        "type": "object",
        "properties": {
          "prisonerContactRestrictions": {
            "type": "array",
            "description": "Relationship specific restrictions",
            "items": {
              "$ref": "#/components/schemas/PrisonerContactRestrictionDetails"
            }
          },
          "contactGlobalRestrictions": {
            "type": "array",
            "description": "Global (estate-wide) restrictions for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactRestrictionDetails"
            }
          }
        },
        "description": "Restriction related to a specific relationship between a prisoner and contact"
      },
      "Language": {
        "required": [
          "displaySequence",
          "isoAlpha2",
          "isoAlpha3",
          "isoLanguageDesc",
          "languageId",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "languageId": {
            "type": "integer",
            "description": "Unique identifier of the language",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the language",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the language",
            "example": "United Kingdom"
          },
          "isoAlpha2": {
            "type": "string",
            "description": "ISO Alpha-2 code of the language",
            "example": "GB"
          },
          "isoAlpha3": {
            "type": "string",
            "description": "ISO Alpha-3 code of the language",
            "example": "GBR"
          },
          "isoLanguageDesc": {
            "type": "string",
            "description": "ISO language description",
            "example": "United Kingdom of Great Britain and Northern Ireland"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the language",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Language reference entity"
      },
      "County": {
        "required": [
          "countyId",
          "displaySequence",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "countyId": {
            "type": "integer",
            "description": "Unique identifier of the county",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the county",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the county",
            "example": "United Kingdom"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the county",
            "format": "int32",
            "example": 1
          }
        },
        "description": "County reference entity"
      },
      "Country": {
        "required": [
          "countryId",
          "displaySequence",
          "isoAlpha2",
          "isoAlpha3",
          "isoCountryDesc",
          "isoNumeric",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "countryId": {
            "type": "integer",
            "description": "Unique identifier of the country",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the country",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the country",
            "example": "United Kingdom"
          },
          "isoNumeric": {
            "type": "integer",
            "description": "ISO numeric code of the country",
            "format": "int32",
            "example": 826
          },
          "isoAlpha2": {
            "type": "string",
            "description": "ISO Alpha-2 code of the country",
            "example": "GB"
          },
          "isoAlpha3": {
            "type": "string",
            "description": "ISO Alpha-3 code of the country",
            "example": "GBR"
          },
          "isoCountryDesc": {
            "type": "string",
            "description": "ISO country description",
            "example": "United Kingdom of Great Britain and Northern Ireland"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the country",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Country reference entity"
      },
      "ContactSearchRequest": {
        "required": [
          "lastName"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 12,
            "type": "string",
            "description": "Last name of the contact",
            "example": "Jones"
          },
          "firstName": {
            "maxLength": 12,
            "type": "string",
            "description": "First name of the contact",
            "nullable": true,
            "example": "Elton"
          },
          "middleNames": {
            "maxLength": 12,
            "type": "string",
            "description": "Middle names of the contact",
            "nullable": true,
            "example": "Simon"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of Birth of the contact in ISO format",
            "format": "date",
            "nullable": true
          }
        },
        "description": "Contact Search Request"
      },
      "ContactSearchResultItem": {
        "required": [
          "firstName",
          "id",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "flat": {
            "type": "string",
            "description": "The flat of the contact address, if known",
            "nullable": true,
            "example": "01"
          },
          "property": {
            "type": "string",
            "description": "The property of the contact address, if known",
            "nullable": true,
            "example": "01"
          },
          "street": {
            "type": "string",
            "description": "The street of the contact address, if known",
            "nullable": true,
            "example": "Bluebell Crescent"
          },
          "area": {
            "type": "string",
            "description": "The area of the contact address, if known",
            "nullable": true,
            "example": "Birmingham"
          },
          "cityCode": {
            "type": "string",
            "description": "The city code of the contact address, if known",
            "nullable": true,
            "example": "25343"
          },
          "cityDescription": {
            "type": "string",
            "description": "The description of city code, if known",
            "nullable": true,
            "example": "Sheffield"
          },
          "countyCode": {
            "type": "string",
            "description": "The county code of the contact address, if known",
            "nullable": true,
            "example": "S.YORKSHIRE"
          },
          "countyDescription": {
            "type": "string",
            "description": "The description of county code, if known",
            "nullable": true,
            "example": "South Yorkshire"
          },
          "postCode": {
            "type": "string",
            "description": "The postcode of the contact address, if known",
            "nullable": true,
            "example": "B42 2QJ"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of the contact address, if known",
            "nullable": true,
            "example": "ENG"
          },
          "countryDescription": {
            "type": "string",
            "description": "The description of country code, if known",
            "nullable": true,
            "example": "England"
          },
          "mailAddress": {
            "type": "boolean",
            "description": "If true this address should be considered for sending mail to",
            "nullable": true,
            "example": true
          },
          "startDate": {
            "type": "string",
            "description": "The date from which this address can be considered active",
            "format": "date",
            "nullable": true,
            "example": "2022-10-01"
          },
          "endDate": {
            "type": "string",
            "description": "The date after which this address should be considered inactive",
            "format": "date",
            "nullable": true,
            "example": "2023-10-02"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "A flag to indicate that this address is effectively no fixed address",
            "nullable": true,
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Any additional information or comments about the address",
            "nullable": true,
            "example": "Some additional information"
          }
        },
        "description": "The details of a contact as an individual"
      },
      "ContactSearchResultItemPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactSearchResultItem"
            }
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "first": {
            "type": "boolean"
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "City": {
        "required": [
          "cityId",
          "displaySequence",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "cityId": {
            "type": "integer",
            "description": "Unique identifier of the city",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the city",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the city",
            "example": "United Kingdom"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the city",
            "format": "int32",
            "example": 1
          }
        },
        "description": "City reference entity"
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
