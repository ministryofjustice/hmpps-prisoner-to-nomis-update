{
  "openapi": "3.0.1",
  "info": {
    "title": "Contacts API",
    "description": "API for management of contacts",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2024-10-15.740.ca86fb3"
  },
  "servers": [
    {
      "url": "https://contacts-api-dev.hmpps.service.justice.gov.uk",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/sync/prisoner-contact/{prisonerContactId}": {
      "get": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Returns the data for a prisoner contact by prisonerContactId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one prisoner contact.\n      ",
        "operationId": "getPrisonerContactById",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The internal ID for a prisoner contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the prisoner contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No prisoner contact reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContact"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Updates a prisoner contact with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a prisoner contact.\n      ",
        "operationId": "updatePrisonerContact",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The internal ID for the prisoner contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrisonerContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContact"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated prisoner contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContact"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Prisoner contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContact"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Deletes one prisoner contact by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a prisoner contact.\n      ",
        "operationId": "deletePrisonerContactById",
        "parameters": [
          {
            "name": "prisonerContactId",
            "in": "path",
            "description": "The internal ID for the prisoner contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted prisoner contact"
          },
          "404": {
            "description": "No prisoner contact reference with that id could be found"
          }
        }
      }
    },
    "/sync/prisoner-contact-restriction/{id}": {
      "get": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Returns the data for a prisoner contact restriction by id",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one prisoner contact restriction.\n      ",
        "operationId": "getPrisonerContactRestrictionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The internal ID for a prisoner contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestriction"
                }
              }
            }
          },
          "404": {
            "description": "No prisoner contact restriction reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestriction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Updates a prisoner contact restriction with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a prisoner contact restriction.\n      ",
        "operationId": "updatePrisonerContactRestriction",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The internal ID for the prisoner contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Prisoner contact restriction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestriction"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestriction"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestriction"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Deletes one prisoner contact restriction by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a prisoner contact restriction.\n      ",
        "operationId": "deletePrisonerContactRestrictionById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "The internal ID for the prisoner contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No prisoner contact restriction reference with that id could be found"
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted prisoner contact restriction"
          }
        }
      }
    },
    "/sync/contact/{contactId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Returns the data for a contact by contactId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact.\n      ",
        "operationId": "getContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The internal ID for a contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No contact reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Updates a contact with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact.\n      ",
        "operationId": "updateContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The internal ID for the contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "404": {
            "description": "Contact not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Deletes one contact by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact.\n      ",
        "operationId": "deleteContactById",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The internal ID for the contact.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No contact reference with that id could be found"
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "204": {
            "description": "Successfully deleted contact"
          }
        }
      }
    },
    "/sync/contact-restriction/{contactRestrictionId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Returns the data for a contact restriction by contactRestrictionId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact restriction.\n      ",
        "operationId": "getContactRestrictionById",
        "parameters": [
          {
            "name": "contactRestrictionId",
            "in": "path",
            "description": "The internal ID for a contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestriction"
                }
              }
            }
          },
          "404": {
            "description": "No contact restriction reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestriction"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Updates a contact restriction with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact restriction.\n      ",
        "operationId": "updateContactRestriction",
        "parameters": [
          {
            "name": "contactRestrictionId",
            "in": "path",
            "description": "The internal ID for the contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestriction"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestriction"
                }
              }
            }
          },
          "404": {
            "description": "Contact restriction not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestriction"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Deletes one contact restriction by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact restriction.\n      ",
        "operationId": "deleteContactRestrictionById",
        "parameters": [
          {
            "name": "contactRestrictionId",
            "in": "path",
            "description": "The internal ID for the contact restriction.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact restriction"
          },
          "404": {
            "description": "No contact restriction reference with that id could be found"
          }
        }
      }
    },
    "/sync/contact-phone/{contactPhoneId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Returns the data for a contact phone by contactPhoneId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact phone.\n      ",
        "operationId": "getContactPhoneById",
        "parameters": [
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The internal ID for a contact phone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhone"
                }
              }
            }
          },
          "200": {
            "description": "Found the contact phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhone"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Updates a contact phone with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact phone.\n      ",
        "operationId": "updateContactPhone",
        "parameters": [
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The internal ID for the contact phone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Contact phone not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhone"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhone"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated contact phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhone"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Deletes one contact phone by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact phone.\n      ",
        "operationId": "deleteContactPhoneById",
        "parameters": [
          {
            "name": "contactPhoneId",
            "in": "path",
            "description": "The internal ID for the contact phone.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact phone with that id could be found"
          },
          "204": {
            "description": "Successfully deleted contact phone"
          }
        }
      }
    },
    "/sync/contact-identity/{contactIdentityId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Returns the data for a contact identity by contactIdentityId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact identity.\n      ",
        "operationId": "getContactIdentityById",
        "parameters": [
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The internal ID for a contact identity.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact identity with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentity"
                }
              }
            }
          },
          "200": {
            "description": "Found the contact identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentity"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Updates a contact identity with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact identity.\n      ",
        "operationId": "updateContactIdentity",
        "parameters": [
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The internal ID for the contact identity.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentity"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentity"
                }
              }
            }
          },
          "404": {
            "description": "Contact identity not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentity"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Deletes one contact identity by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact identity.\n      ",
        "operationId": "deleteContactIdentityById",
        "parameters": [
          {
            "name": "contactIdentityId",
            "in": "path",
            "description": "The internal ID for the contact identity.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No contact identity with that id could be found"
          },
          "204": {
            "description": "Successfully deleted contact identity"
          }
        }
      }
    },
    "/sync/contact-email/{contactEmailId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Returns the data for a contact email by contactEmailId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact email.\n      ",
        "operationId": "getContactEmailById",
        "parameters": [
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The internal ID for a contact email.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmail"
                }
              }
            }
          },
          "404": {
            "description": "No contact email reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmail"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Updates a contact email with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact email.\n      ",
        "operationId": "updateContactEmail",
        "parameters": [
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The internal ID for the contact email.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Contact email not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmail"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmail"
                }
              }
            }
          },
          "200": {
            "description": "Successfully updated contact email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmail"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Deletes one contact email by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact email.\n      ",
        "operationId": "deleteContactEmailById",
        "parameters": [
          {
            "name": "contactEmailId",
            "in": "path",
            "description": "The internal ID for the contact email.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact email"
          },
          "404": {
            "description": "No contact email reference with that id could be found"
          }
        }
      }
    },
    "/sync/contact-address/{contactAddressId}": {
      "get": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Returns the data for a contact address by contactAddressId",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to get the details for one contact address.\n      ",
        "operationId": "getContactAddressById",
        "parameters": [
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The internal ID for a contact address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the contact address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddress"
                }
              }
            }
          },
          "404": {
            "description": "No contact address reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddress"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Updates a contact address with new or extra detail",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to update a contact address.\n      ",
        "operationId": "updateContactAddress",
        "parameters": [
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The internal ID for the contact address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateContactAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successfully updated contact address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddress"
                }
              }
            }
          },
          "400": {
            "description": "Invalid input data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddress"
                }
              }
            }
          },
          "404": {
            "description": "Contact address not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddress"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Deletes one contact address by internal ID",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to delete a contact address.\n      ",
        "operationId": "deleteContactAddressById",
        "parameters": [
          {
            "name": "contactAddressId",
            "in": "path",
            "description": "The internal ID for the contact address.",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Successfully deleted contact address"
          },
          "404": {
            "description": "No contact address reference with that id could be found"
          }
        }
      }
    },
    "/sync/prisoner-contact": {
      "post": {
        "tags": [
          "Sync endpoints - prisoner contact"
        ],
        "summary": "Creates a new prisoner contact",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a prisoner contact.\n      ",
        "operationId": "createPrisonerContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonerContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created prisoner contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/prisoner-contact-restriction": {
      "post": {
        "tags": [
          "Sync endpoints - prisoner contact restriction"
        ],
        "summary": "Creates a new prisoner contact restriction",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a prisoner contact restriction.\n      ",
        "operationId": "createPrisonerContactRestriction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreatePrisonerContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created prisoner contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactRestriction"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact": {
      "post": {
        "tags": [
          "Sync endpoints - contact"
        ],
        "summary": "Creates a new contact",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact and associate it with a contact.\n      ",
        "operationId": "createContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Contact"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-restriction": {
      "post": {
        "tags": [
          "Sync endpoints - contact restriction"
        ],
        "summary": "Creates a new contact restriction",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact restriction and associate it with a contact.\n      ",
        "operationId": "createContactRestriction",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactRestrictionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created contact restriction",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactRestriction"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-phone": {
      "post": {
        "tags": [
          "Sync endpoints - contact phone"
        ],
        "summary": "Creates a new contact phone",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact phone and associate it with a contact.\n      ",
        "operationId": "createContactPhone",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactPhoneRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created contact phone",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactPhone"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-identity": {
      "post": {
        "tags": [
          "Sync endpoints - contact identity"
        ],
        "summary": "Creates a new contact identity",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact identity and associate it with a contact.\n      ",
        "operationId": "createContactIdentity",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactIdentityRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Successfully created contact identity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactIdentity"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-email": {
      "post": {
        "tags": [
          "Sync endpoints - contact email"
        ],
        "summary": "Creates a new contact email",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact email and associate it with a contact.\n      ",
        "operationId": "createContactEmail",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactEmailRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created contact email",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactEmail"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/sync/contact-address": {
      "post": {
        "tags": [
          "Sync endpoints - contact address"
        ],
        "summary": "Creates a new contact address",
        "description": "\n      Requires role: ROLE_CONTACTS_MIGRATION.\n      Used to create a contact address and associate it with a contact.\n      ",
        "operationId": "createContactAddress",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactAddressRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Successfully created contact address",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactAddress"
                }
              }
            }
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/migrate/contact": {
      "post": {
        "tags": [
          "Migration"
        ],
        "summary": "Migrate a contact",
        "description": "Migrate a contact from NOMIS with all of its associated data.",
        "operationId": "migrateContact",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MigrateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "The contact and associated data was created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MigrateContactResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "The request failed validation with invalid or missing data supplied",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Create a new contact",
        "description": "Creates a new contact that is not yet associated with any prisoner.",
        "operationId": "createContact_1",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateContactRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Could not find the prisoner that this contact has a relationship to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created the contact successfully",
            "headers": {
              "Location": {
                "description": "The URL where you can load the contact",
                "style": "simple",
                "example": "/contact/123456"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContactResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}/relationship": {
      "post": {
        "tags": [
          "Contact"
        ],
        "summary": "Add a new contact relationship",
        "description": "Creates a new relationship between the contact and a prisoner.",
        "operationId": "addContactRelationship",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddContactRelationshipRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "404": {
            "description": "Could not find the prisoner or contact that this relationship relates to",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "201": {
            "description": "Created the relationship successfully"
          },
          "400": {
            "description": "The request has invalid or missing fields",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/reference-codes/group/{groupCode}": {
      "get": {
        "tags": [
          "Reference Codes Controller"
        ],
        "summary": "Endpoint to return reference data for a provided group key. Sorted by display order then description by default.",
        "operationId": "getReferenceDataByGroup",
        "parameters": [
          {
            "name": "groupCode",
            "in": "path",
            "description": "The group code of the reference codes to load",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "PHONE_TYPE"
          },
          {
            "name": "sort",
            "in": "query",
            "description": "Sort configuration - default displayOrder, description",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Sort"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of reference data codes/values",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ReferenceCode"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonNumber}": {
      "get": {
        "tags": [
          "Prisoner"
        ],
        "summary": "Endpoint to get a specific prisoner by prison number",
        "operationId": "getPrisoner",
        "parameters": [
          {
            "name": "prisonNumber",
            "in": "path",
            "description": "The prison number of the prisoner who's contacts will be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234BC"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of all contacts for the prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactSummary"
                }
              }
            }
          }
        }
      }
    },
    "/prisoner/{prisonNumber}/contact": {
      "get": {
        "tags": [
          "Prisoner"
        ],
        "summary": "Endpoint to fetch all contacts for a specific prisoner by prisoner number and active status",
        "operationId": "getAllContacts",
        "parameters": [
          {
            "name": "prisonNumber",
            "in": "path",
            "description": "The prison number of the prisoner who's contacts will be returned",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "A1234BC"
          },
          {
            "name": "active",
            "in": "query",
            "description": "Whether to include only active (true) or inactive (false) contacts",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          },
          {
            "name": "pageable",
            "in": "query",
            "description": "Pageable configurations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The Prisoner was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "List of all contacts for the prisoner",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerContactSummaryPage"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets all language references",
        "operationId": "getAllCountries",
        "responses": {
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/{id}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their id",
        "operationId": "getLanguageById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "404": {
            "description": "No language reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their nomis code",
        "operationId": "getLanguageByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No language reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/iso-alpha3/{code}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their by ISO Alpha 3 code",
        "operationId": "getLanguageByIsoAlpha3",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No language reference with that ISO Alpha 3 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/language-reference/iso-alpha2/{code}": {
      "get": {
        "tags": [
          "language-reference"
        ],
        "summary": "Get language reference",
        "description": "Gets a language reference by their ISO Alpha 2 code",
        "operationId": "getLanguageByIsoAlpha2",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the language reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "404": {
            "description": "No language reference with that ISO Alpha 2 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Language"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/county-reference": {
      "get": {
        "tags": [
          "county-reference"
        ],
        "summary": "Get county reference",
        "description": "Gets all county references",
        "operationId": "getAllCountries_1",
        "responses": {
          "200": {
            "description": "Found the county reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/county-reference/{id}": {
      "get": {
        "tags": [
          "county-reference"
        ],
        "summary": "Get county reference",
        "description": "Gets a county reference by their id",
        "operationId": "getCountyById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No county reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "200": {
            "description": "Found the county reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/county-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "county-reference"
        ],
        "summary": "Get county reference",
        "description": "Gets a county reference by their nomis code",
        "operationId": "getCountyByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No county reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "200": {
            "description": "Found the county reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/County"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets all country references",
        "operationId": "getAllCountries_2",
        "responses": {
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/{id}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their id",
        "operationId": "getCountryById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No country reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their nomis code",
        "operationId": "getCountryByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "No country reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/iso-alpha3/{code}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their by ISO Alpha 3 code",
        "operationId": "getCountryByIsoAlpha3",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No country reference with that ISO Alpha 3 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/country-reference/iso-alpha2/{code}": {
      "get": {
        "tags": [
          "country-reference"
        ],
        "summary": "Get country reference",
        "description": "Gets a country reference by their ISO Alpha 2 code",
        "operationId": "getCountryByIsoAlpha2",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the country reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "404": {
            "description": "No country reference with that ISO Alpha 2 code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Country"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/{contactId}": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Get contact",
        "description": "Gets a contact by their id",
        "operationId": "getContact",
        "parameters": [
          {
            "name": "contactId",
            "in": "path",
            "description": "The id of the contact",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            },
            "example": 123456
          }
        ],
        "responses": {
          "404": {
            "description": "No contact with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found the contact",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetContactResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/contact/search": {
      "get": {
        "tags": [
          "Contact"
        ],
        "summary": "Search contacts",
        "description": "Search all contacts by their last name or first name or middle name or date of birth",
        "operationId": "searchContacts",
        "parameters": [
          {
            "name": "pageable",
            "in": "query",
            "description": "Pageable configurations",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Pageable"
            }
          },
          {
            "name": "request",
            "in": "query",
            "description": "Contact search criteria",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/ContactSearchRequest"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Found contacts",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ContactSearchResultItemPage"
                }
              }
            }
          }
        }
      }
    },
    "/city-reference": {
      "get": {
        "tags": [
          "city-reference"
        ],
        "summary": "Get city reference",
        "description": "Gets all city references",
        "operationId": "getAllCountries_3",
        "responses": {
          "200": {
            "description": "Found the city reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/city-reference/{id}": {
      "get": {
        "tags": [
          "city-reference"
        ],
        "summary": "Get city reference",
        "description": "Gets a city reference by their id",
        "operationId": "getCityById",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "No city reference with that id could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "200": {
            "description": "Found the city reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/city-reference/nomis-code/{code}": {
      "get": {
        "tags": [
          "city-reference"
        ],
        "summary": "Get city reference",
        "description": "Gets a city reference by their nomis code",
        "operationId": "getCityByNomisCode",
        "parameters": [
          {
            "name": "code",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Found the city reference",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "404": {
            "description": "No city reference with that nomis code could be found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/City"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "UpdatePrisonerContactRequest": {
        "required": [
          "contactId",
          "contactType",
          "emergencyContact",
          "nextOfKin",
          "prisonerNumber",
          "relationshipType",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The ID of the prisoner contact",
            "format": "int64",
            "example": 12345
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234BC"
          },
          "contactType": {
            "type": "string",
            "description": "The type of the contact",
            "example": "SOCIAL or OFFICIAL"
          },
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship",
            "example": "Friend"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is next of kin",
            "example": true
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an emergency contact",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the prisoner contact",
            "nullable": true,
            "example": "Close family friend"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is active",
            "nullable": true,
            "example": true
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an approved visitor",
            "nullable": true,
            "example": true
          },
          "awareOfCharges": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is aware of charges",
            "nullable": true,
            "example": true
          },
          "canBeContacted": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact can be contacted",
            "nullable": true,
            "example": true
          },
          "approvedBy": {
            "type": "string",
            "description": "The user who approved the prisoner contact",
            "nullable": true,
            "example": "officer123"
          },
          "approvedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was approved",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T14:00:00Z"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of the prisoner contact",
            "format": "date",
            "nullable": true,
            "example": "2025-01-01"
          },
          "createdAtPrison": {
            "type": "string",
            "description": "The prison where the prisoner contact was created",
            "nullable": true,
            "example": "HMP Belmarsh"
          },
          "amendedBy": {
            "type": "string",
            "description": "The user who last amended the prisoner contact",
            "nullable": true,
            "example": "adminUser"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the prisoner contact was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request object to update prisoner contact details"
      },
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "string"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "PrisonerContact": {
        "required": [
          "contactId",
          "contactType",
          "createdBy",
          "createdTime",
          "emergencyContact",
          "id",
          "nextOfKin",
          "prisonerNumber",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The ID of the prisoner contact",
            "format": "int64",
            "example": 12345
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234BC"
          },
          "contactType": {
            "type": "string",
            "description": "The type of the contact",
            "example": "SOCIAL or OFFICIAL"
          },
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship",
            "example": "Friend"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is next of kin",
            "example": true
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an emergency contact",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the prisoner contact",
            "nullable": true,
            "example": "Close family friend"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is active",
            "nullable": true,
            "example": true
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an approved visitor",
            "nullable": true,
            "example": true
          },
          "awareOfCharges": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is aware of charges",
            "nullable": true,
            "example": true
          },
          "canBeContacted": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact can be contacted",
            "nullable": true,
            "example": true
          },
          "approvedBy": {
            "type": "string",
            "description": "The user who approved the prisoner contact",
            "nullable": true,
            "example": "officer123"
          },
          "approvedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was approved",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T14:00:00Z"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of the prisoner contact",
            "format": "date",
            "nullable": true,
            "example": "2025-01-01"
          },
          "createdAtPrison": {
            "type": "string",
            "description": "The prison where the prisoner contact was created",
            "nullable": true,
            "example": "HMP Belmarsh"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the prisoner contact",
            "example": "system"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "The user who last amended the prisoner contact",
            "nullable": true,
            "example": "adminUser"
          },
          "amendedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was last amended",
            "format": "date-time",
            "nullable": true,
            "example": "2024-02-01T16:00:00Z"
          }
        },
        "description": "Response object with prisoner contact details"
      },
      "UpdatePrisonerContactRestrictionRequest": {
        "required": [
          "contactId",
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "ID of the contact to which the restriction applies",
            "format": "int64",
            "example": 12345
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction applied",
            "example": "NoContact"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the restriction",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the restriction, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2024-12-31"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the restriction",
            "nullable": true,
            "example": "Restriction applied due to safety concerns"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Person who authorized the restriction",
            "nullable": true,
            "example": "John Doe"
          },
          "authorisedTime": {
            "type": "string",
            "description": "Time when the restriction was authorized",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-01T12:00:00Z"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who last amended the restriction record",
            "nullable": true,
            "example": "editor"
          },
          "amendedTime": {
            "type": "string",
            "description": "Time when the restriction record was last amended",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-02T15:30:00Z"
          }
        },
        "description": "Request object to update prisoner contact restriction details"
      },
      "PrisonerContactRestriction": {
        "required": [
          "contactId",
          "prisonerContactRestrictionId"
        ],
        "type": "object",
        "properties": {
          "prisonerContactRestrictionId": {
            "type": "integer",
            "description": "ID of the prisoner contact restriction to which the restriction applies",
            "format": "int64",
            "example": 232
          },
          "contactId": {
            "type": "integer",
            "description": "ID of the contact to which the restriction applies",
            "format": "int64",
            "example": 12345
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction applied",
            "nullable": true,
            "example": "NoContact"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the restriction",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the restriction, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2024-12-31"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the restriction",
            "nullable": true,
            "example": "Restriction applied due to safety concerns"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Person who authorized the restriction",
            "nullable": true,
            "example": "John Doe"
          },
          "authorisedTime": {
            "type": "string",
            "description": "Time when the restriction was authorized",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-01T12:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the restriction record",
            "nullable": true,
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Time when the restriction record was created",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-01T12:00:00Z"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who last amended the restriction record",
            "nullable": true,
            "example": "editor"
          },
          "amendedTime": {
            "type": "string",
            "description": "Time when the restriction record was last amended",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-02T15:30:00Z"
          }
        },
        "description": "Response object with prisoner contact restriction details"
      },
      "UpdateContactRequest": {
        "required": [
          "firstName",
          "lastName",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of the contact, if any",
            "nullable": true,
            "example": "Mr"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "Whether the contact is over 18, based on their date of birth if it is known",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "placeOfBirth": {
            "type": "string",
            "description": "The place of birth of the contact",
            "nullable": true,
            "example": "London"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the contact is active",
            "nullable": true,
            "example": true
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether the contact is suspended",
            "nullable": true,
            "example": false
          },
          "staffFlag": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "nullable": true,
            "example": false
          },
          "deceasedFlag": {
            "type": "boolean",
            "description": "Whether the contact is deceased",
            "nullable": true,
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact was deceased, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2023-05-01"
          },
          "coronerNumber": {
            "type": "string",
            "description": "The coroner's number, if applicable",
            "nullable": true,
            "example": "CRN12345"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the contact",
            "nullable": true,
            "example": "Male"
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "nationalityCode": {
            "type": "string",
            "description": "The nationality code of the contact",
            "nullable": true,
            "example": "GB"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "nullable": true,
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the contact",
            "nullable": true,
            "example": "This contact has special dietary requirements."
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a new contact "
      },
      "Contact": {
        "required": [
          "createdBy",
          "createdTime",
          "firstName",
          "id",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "title": {
            "type": "string",
            "description": "The title of the contact, if any",
            "nullable": true,
            "example": "Mr"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleName": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "Whether the contact is over 18, based on their date of birth if it is known",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "placeOfBirth": {
            "type": "string",
            "description": "The place of birth of the contact",
            "nullable": true,
            "example": "London"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the contact is active",
            "nullable": true,
            "example": true
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether the contact is suspended",
            "nullable": true,
            "example": false
          },
          "staffFlag": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "nullable": true,
            "example": false
          },
          "deceasedFlag": {
            "type": "boolean",
            "description": "Whether the contact is deceased",
            "nullable": true,
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact was deceased, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2023-05-01"
          },
          "coronerNumber": {
            "type": "string",
            "description": "The coroner's number, if applicable",
            "nullable": true,
            "example": "CRN12345"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the contact",
            "nullable": true,
            "example": "Male"
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "nationalityCode": {
            "type": "string",
            "description": "The nationality code of the contact",
            "nullable": true,
            "example": "GB"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "nullable": true,
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the contact",
            "nullable": true,
            "example": "This contact has special dietary requirements."
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "The details of a contact as an individual"
      },
      "UpdateContactRestrictionRequest": {
        "required": [
          "contactId",
          "restrictionType",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction",
            "example": "MOBILE"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Any comments about the restriction ",
            "example": "N/A"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact restriction",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact restriction was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a contact restriction "
      },
      "ContactRestriction": {
        "required": [
          "contactId",
          "contactRestrictionId",
          "createdBy",
          "createdTime",
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "contactRestrictionId": {
            "type": "integer",
            "description": "Unique identifier for the contact restriction",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction",
            "example": "MOBILE"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction created date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Comments for the restriction ",
            "example": "N/A"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "Restriction related to a contact"
      },
      "UpdateContactPhoneRequest": {
        "required": [
          "contactId",
          "phoneNumber",
          "phoneType",
          "primaryPhone",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOBILE"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "primaryPhone": {
            "type": "boolean",
            "description": "Indicates if this is the primary phone number",
            "example": true
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact phone",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact phone was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a new contact phone number"
      },
      "ContactPhone": {
        "required": [
          "contactId",
          "contactPhoneId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType",
          "primaryPhone"
        ],
        "type": "object",
        "properties": {
          "contactPhoneId": {
            "type": "integer",
            "description": "Unique identifier for the contact phone",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOBILE"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "primaryPhone": {
            "type": "boolean",
            "description": "Indicates if this is the primary phone number",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "Phone related to a contact"
      },
      "UpdateContactIdentityRequest": {
        "required": [
          "contactId",
          "identityType",
          "identityValue",
          "issuingAuthority",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "example": "DRIVING_LICENCE"
          },
          "identityValue": {
            "type": "string",
            "description": "Identity ",
            "example": "S99PH898989L"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Issuing authority",
            "example": "DVLA"
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact identity",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact identity was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a new contact identity "
      },
      "ContactIdentity": {
        "required": [
          "contactId",
          "contactIdentityId",
          "createdBy",
          "createdTime",
          "identityType"
        ],
        "type": "object",
        "properties": {
          "contactIdentityId": {
            "type": "integer",
            "description": "Unique identifier for the contact identity",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "example": "DRIVING_LICENCE"
          },
          "identityValue": {
            "type": "string",
            "description": "Identity ",
            "example": "DL090 0909 909"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Issuing authority",
            "example": "DVLA"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "Identity related to a contact"
      },
      "UpdateContactEmailRequest": {
        "required": [
          "contactId",
          "emailAddress",
          "emailType",
          "primaryEmail",
          "updatedBy",
          "updatedTime"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailType": {
            "type": "string",
            "description": "Type of email",
            "example": "MOBILE"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "+1234567890"
          },
          "primaryEmail": {
            "type": "boolean",
            "description": "Indicates if this is the primary email address",
            "example": true
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the contact email",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the contact email was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a new contact email address"
      },
      "ContactEmail": {
        "required": [
          "contactEmailId",
          "contactId",
          "createdBy",
          "createdTime",
          "emailAddress",
          "emailType",
          "primaryEmail"
        ],
        "type": "object",
        "properties": {
          "contactEmailId": {
            "type": "integer",
            "description": "Unique identifier for the contact email",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailType": {
            "type": "string",
            "description": "Type of email",
            "example": "WORK"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "work@example.com"
          },
          "primaryEmail": {
            "type": "boolean",
            "description": "Indicates if this is the primary Email address",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "Email related to a contact"
      },
      "UpdateContactAddressRequest": {
        "required": [
          "addressType",
          "contactId",
          "primaryAddress",
          "updatedBy",
          "updatedTime",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The id of the contact linked to this address",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "The type of address",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code - from NOMIS reference data",
            "nullable": true,
            "example": "BIRM"
          },
          "countyCode": {
            "type": "string",
            "description": "County code - from NOMIS reference data",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code - from NOMIS reference data",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Whether the address can be used for mailing",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address can be considered active from",
            "format": "date",
            "example": "2023-01-12"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address can be considered active until",
            "format": "date",
            "example": "2023-01-12"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate this address should be considered as no fixed address",
            "example": false
          },
          "updatedBy": {
            "type": "string",
            "description": "The id of the user who updated the address",
            "example": "JD000001"
          },
          "updatedTime": {
            "type": "string",
            "description": "The timestamp of when the address was changed",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to update a contact address"
      },
      "ContactAddress": {
        "required": [
          "contactAddressId",
          "contactId",
          "createdBy",
          "createdTime",
          "mailFlag",
          "noFixedAddress",
          "primaryAddress",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactAddressId": {
            "type": "integer",
            "description": "The id of the contact address",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "The type of address",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code - from NOMIS",
            "nullable": true,
            "example": "BIRM"
          },
          "countyCode": {
            "type": "string",
            "description": "County code - from NOMIS",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code - from NOMIS",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "verifiedBy": {
            "type": "string",
            "description": "Which username ran the postcode lookup check",
            "example": "NJKG44D"
          },
          "verifiedTime": {
            "type": "string",
            "description": "The timestamp of when the postcode lookup was done",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Flag to indicate whether mail is allowed to be sent to this address",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address is to be considered active from",
            "format": "date",
            "example": "2024-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address is to be considered no longer active",
            "format": "date",
            "example": "2024-01-01"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate whether this address indicates no fixed address",
            "example": false
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "amendedBy": {
            "type": "string",
            "description": "The id of the user who last amended the contact address",
            "example": "JD000001"
          },
          "amendedTime": {
            "type": "string",
            "description": "The timestamp of when the contact address was last amended",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "An address related to a contact"
      },
      "CreatePrisonerContactRequest": {
        "required": [
          "contactId",
          "contactType",
          "createdBy",
          "createdTime",
          "emergencyContact",
          "nextOfKin",
          "prisonerNumber",
          "relationshipType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The ID of the prisoner contact",
            "format": "int64",
            "example": 12345
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "A1234BC"
          },
          "contactType": {
            "type": "string",
            "description": "The type of the contact",
            "example": "SOCIAL or OFFICIAL"
          },
          "relationshipType": {
            "type": "string",
            "description": "The type of relationship",
            "example": "Friend"
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is next of kin",
            "example": true
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an emergency contact",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the prisoner contact",
            "nullable": true,
            "example": "Close family friend"
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the prisoner contact",
            "example": "system"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was created",
            "format": "date-time"
          },
          "active": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is active",
            "nullable": true,
            "example": true
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is an approved visitor",
            "nullable": true,
            "example": true
          },
          "awareOfCharges": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact is aware of charges",
            "nullable": true,
            "example": true
          },
          "canBeContacted": {
            "type": "boolean",
            "description": "Indicates if the prisoner contact can be contacted",
            "nullable": true,
            "example": true
          },
          "approvedBy": {
            "type": "string",
            "description": "The user who approved the prisoner contact",
            "nullable": true,
            "example": "officer123"
          },
          "approvedTime": {
            "type": "string",
            "description": "The timestamp when the prisoner contact was approved",
            "format": "date-time",
            "nullable": true,
            "example": "2024-01-01T14:00:00Z"
          },
          "expiryDate": {
            "type": "string",
            "description": "The expiry date of the prisoner contact",
            "format": "date",
            "nullable": true,
            "example": "2025-01-01"
          },
          "createdAtPrison": {
            "type": "string",
            "description": "The prison where the prisoner contact was created",
            "nullable": true,
            "example": "HMP Belmarsh"
          }
        },
        "description": "Request object to create a prisoner contact details"
      },
      "CreatePrisonerContactRestrictionRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "ID of the contact to which the restriction applies",
            "format": "int64",
            "example": 12345
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction applied",
            "example": "NoContact"
          },
          "startDate": {
            "type": "string",
            "description": "Start date of the restriction",
            "format": "date",
            "nullable": true,
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Expiry date of the restriction, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2024-12-31"
          },
          "comments": {
            "type": "string",
            "description": "Comments regarding the restriction",
            "nullable": true,
            "example": "Restriction applied due to safety concerns"
          },
          "authorisedBy": {
            "type": "string",
            "description": "Person who authorized the restriction",
            "nullable": true,
            "example": "John Doe"
          },
          "authorisedTime": {
            "type": "string",
            "description": "Time when the restriction was authorized",
            "format": "date-time",
            "nullable": true,
            "example": "2024-10-01T12:00:00Z"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the restriction record",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Time when the restriction record was created",
            "format": "date-time",
            "example": "2024-10-01T12:00:00Z"
          }
        },
        "description": "Request object to create a prisoner contact request details"
      },
      "ContactRelationship": {
        "required": [
          "isEmergencyContact",
          "isNextOfKin",
          "prisonerNumber",
          "relationshipCode"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner number (NOMS ID)",
            "example": "A1234BC"
          },
          "relationshipCode": {
            "type": "string",
            "description": "The relationship code between the prisoner and the contact",
            "example": "FRI"
          },
          "isNextOfKin": {
            "type": "boolean",
            "description": "Whether they are the next of kin for the prisoner",
            "example": true
          },
          "isEmergencyContact": {
            "type": "boolean",
            "description": "Whether they are the emergency contact for the prisoner",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Comments about the contacts relationship with the prisoner",
            "nullable": true,
            "example": "Some additional information"
          }
        },
        "description": "A description of the relationship if the contact should be linked to a prisoner",
        "nullable": true
      },
      "CreateContactRequest": {
        "required": [
          "createdBy",
          "createdTime",
          "firstName",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "title": {
            "maxLength": 12,
            "type": "string",
            "description": "The title of the contact, if any",
            "nullable": true,
            "example": "Mr"
          },
          "lastName": {
            "maxLength": 35,
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "maxLength": 35,
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleName": {
            "maxLength": 35,
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "If the date of birth is not known, this indicates whether they are believed to be over 18 or not",
            "nullable": true,
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "relationship": {
            "$ref": "#/components/schemas/ContactRelationship"
          },
          "placeOfBirth": {
            "type": "string",
            "description": "The place of birth of the contact",
            "nullable": true,
            "example": "London"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the contact is active",
            "nullable": true,
            "example": true
          },
          "suspended": {
            "type": "boolean",
            "description": "Whether the contact is suspended",
            "nullable": true,
            "example": false
          },
          "staffFlag": {
            "type": "boolean",
            "description": "Whether the contact is a staff member",
            "nullable": true,
            "example": false
          },
          "deceasedFlag": {
            "type": "boolean",
            "description": "Whether the contact is deceased",
            "nullable": true,
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact was deceased, if applicable",
            "format": "date",
            "nullable": true,
            "example": "2023-05-01"
          },
          "coronerNumber": {
            "type": "string",
            "description": "The coroner's number, if applicable",
            "nullable": true,
            "example": "CRN12345"
          },
          "gender": {
            "type": "string",
            "description": "The gender of the contact",
            "nullable": true,
            "example": "Male"
          },
          "domesticStatus": {
            "type": "string",
            "description": "The domestic status code of the contact",
            "nullable": true,
            "example": "S"
          },
          "languageCode": {
            "type": "string",
            "description": "The language code of the contact",
            "nullable": true,
            "example": "EN"
          },
          "nationalityCode": {
            "type": "string",
            "description": "The nationality code of the contact",
            "nullable": true,
            "example": "GB"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required",
            "nullable": true,
            "example": false
          },
          "comments": {
            "type": "string",
            "description": "Additional comments about the contact",
            "nullable": true,
            "example": "This contact has special dietary requirements."
          },
          "createdBy": {
            "maxLength": 100,
            "type": "string",
            "description": "The id of the user creating the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact"
      },
      "CreateContactRestrictionRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "restrictionType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "restrictionType": {
            "type": "string",
            "description": "Type of restriction",
            "example": "MOBILE"
          },
          "startDate": {
            "type": "string",
            "description": "Restriction start date",
            "format": "date",
            "example": "2024-01-01"
          },
          "expiryDate": {
            "type": "string",
            "description": "Restriction end date ",
            "format": "date",
            "example": "2024-01-01"
          },
          "comments": {
            "type": "string",
            "description": "Comments for the restriction ",
            "example": "N/A"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the restriction was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact restriction "
      },
      "CreateContactPhoneRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType",
          "primaryPhone"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOBILE"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "primaryPhone": {
            "type": "boolean",
            "description": "Indicates if this is the primary phone number",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the phone was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact phone number"
      },
      "CreateContactIdentityRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "identityType"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "example": "DRIVING_LICENCE"
          },
          "identityValue": {
            "type": "string",
            "description": "Identity number or reference",
            "example": "HP9909SM1883"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "Issuing authority ",
            "example": "DVLA"
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "JJ99821"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the identity was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact identity "
      },
      "CreateContactEmailRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "emailAddress",
          "emailType",
          "primaryEmail"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailType": {
            "type": "string",
            "description": "Type of email",
            "example": "MOBILE"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "+1234567890"
          },
          "primaryEmail": {
            "type": "boolean",
            "description": "Indicates if this is the primary email address",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the email was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact email address"
      },
      "CreateContactAddressRequest": {
        "required": [
          "contactId",
          "createdBy",
          "createdTime",
          "primaryAddress"
        ],
        "type": "object",
        "properties": {
          "contactId": {
            "type": "integer",
            "description": "The id of the contact this address is linked with",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "The type of address",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code - from NOMIS",
            "nullable": true,
            "example": "BIRM"
          },
          "countyCode": {
            "type": "string",
            "description": "County code - from NOMIS",
            "nullable": true,
            "example": "WMIDS"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code - from NOMIS",
            "nullable": true,
            "example": "UK"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Whether the address can be used for mailing",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address can be considered active from",
            "format": "date",
            "example": "2023-01-12"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address can be considered active until",
            "format": "date",
            "example": "2023-01-12"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate this address should be considered as no fixed address",
            "example": false
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "Request to create a new contact address"
      },
      "CodedValue": {
        "required": [
          "code",
          "description"
        ],
        "type": "object",
        "properties": {
          "code": {
            "maxLength": 12,
            "minLength": 0,
            "type": "string",
            "description": "A code representation a NOMIS reference data item"
          },
          "description": {
            "type": "string",
            "description": "The text description for this coded value in NOMIS"
          }
        },
        "description": "Coded value for proof of ID type",
        "example": "XXX"
      },
      "MigrateAddress": {
        "required": [
          "addressId",
          "mailAddress",
          "noFixedAddress",
          "phoneNumbers",
          "primaryAddress",
          "type",
          "validatedPAF"
        ],
        "type": "object",
        "properties": {
          "addressId": {
            "type": "integer",
            "description": "Unique address ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "flat": {
            "type": "string",
            "description": "Flat number or identifier",
            "nullable": true,
            "example": "1B"
          },
          "premise": {
            "type": "string",
            "description": "House name or number",
            "nullable": true,
            "example": "43"
          },
          "street": {
            "type": "string",
            "description": "Street or road",
            "nullable": true,
            "example": "Main Street"
          },
          "locality": {
            "type": "string",
            "description": "Locality",
            "nullable": true,
            "example": "Keighley"
          },
          "postCode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "BD12 8RD"
          },
          "city": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "county": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "country": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "validatedPAF": {
            "type": "boolean",
            "description": "Address validated by postcode lookup",
            "nullable": true,
            "example": false
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "If true this address should be considered as no fixed address",
            "nullable": true,
            "example": false
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "If true this address should be considered as the primary residential address",
            "nullable": true,
            "example": true
          },
          "mailAddress": {
            "type": "boolean",
            "description": "If true this address should be considered for sending mail to",
            "nullable": true,
            "example": true
          },
          "comment": {
            "type": "string",
            "description": "Comments relating to this address",
            "nullable": true,
            "example": "A comment"
          },
          "startDate": {
            "type": "string",
            "description": "The date this address should be considered valid from",
            "format": "date",
            "nullable": true,
            "example": "2018-10-01"
          },
          "endDate": {
            "type": "string",
            "description": "The date this address should be considered valid to",
            "format": "date",
            "nullable": true,
            "example": "2022-04-04"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "A list of phone numbers which are linked to this address",
            "items": {
              "$ref": "#/components/schemas/MigratePhoneNumber"
            }
          }
        },
        "description": "Addresses",
        "nullable": true
      },
      "MigrateAuditInfo": {
        "type": "object",
        "properties": {
          "createDateTime": {
            "type": "string",
            "description": "The data and time the record was created",
            "format": "date-time",
            "nullable": true
          },
          "createUsername": {
            "type": "string",
            "description": "The username who created the row",
            "nullable": true
          },
          "createDisplayName": {
            "type": "string",
            "description": "The display name of the user who created the row",
            "nullable": true
          },
          "modifyUserId": {
            "type": "string",
            "description": "The username who last modified the row",
            "nullable": true
          },
          "modifyDisplayName": {
            "type": "string",
            "description": "The display name of the user who last modified the row",
            "nullable": true
          },
          "modifyDateTime": {
            "type": "string",
            "description": "The date and time the record was last amended",
            "format": "date-time",
            "nullable": true
          },
          "auditTimestamp": {
            "type": "string",
            "description": "The date and time of the audit record",
            "format": "date-time",
            "nullable": true
          },
          "auditUserId": {
            "type": "string",
            "description": "The audit username",
            "nullable": true
          },
          "auditModuleName": {
            "type": "string",
            "description": "The audit module name",
            "nullable": true
          },
          "auditClientUserId": {
            "type": "string",
            "description": "The audit client id",
            "nullable": true
          },
          "auditClientIpAddress": {
            "type": "string",
            "description": "The audit client IP address",
            "nullable": true
          },
          "auditClientWorkstationName": {
            "type": "string",
            "description": "The audit client workstation",
            "nullable": true
          },
          "auditAdditionalInfo": {
            "type": "string",
            "description": "Audit additional info",
            "nullable": true
          }
        },
        "description": "Auditing information",
        "nullable": true
      },
      "MigrateContactRequest": {
        "required": [
          "addresses",
          "emailAddresses",
          "firstName",
          "identifiers",
          "interpreterRequired",
          "keepBiometrics",
          "lastName",
          "personId",
          "phoneNumbers",
          "remitter",
          "staff"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "type": "integer",
            "description": "The person ID from NOMIS",
            "format": "int64",
            "example": 1233323
          },
          "title": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "lastName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleName": {
            "maxLength": 35,
            "minLength": 0,
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "gender": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "language": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Interpreter required",
            "nullable": true
          },
          "domesticStatus": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date this persons was marked as deceased",
            "format": "date",
            "nullable": true
          },
          "remitter": {
            "type": "boolean",
            "description": "This person is a remitter of funds to one or more prisoners"
          },
          "staff": {
            "type": "boolean",
            "description": "This person is staff"
          },
          "keepBiometrics": {
            "type": "boolean",
            "description": "Retain photo and fingerprint images for this person"
          },
          "audit": {
            "$ref": "#/components/schemas/MigrateAuditInfo"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "Telephone numbers",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MigratePhoneNumber"
            }
          },
          "addresses": {
            "type": "array",
            "description": "Addresses",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MigrateAddress"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "Email addresses",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MigrateEmailAddress"
            }
          },
          "identifiers": {
            "type": "array",
            "description": "Proofs of identity",
            "nullable": true,
            "items": {
              "$ref": "#/components/schemas/MigrateIdentifier"
            }
          }
        },
        "description": "Request to migrate a contact and all of its sub-elements from NOMIS into this service"
      },
      "MigrateEmailAddress": {
        "required": [
          "email",
          "emailAddressId"
        ],
        "type": "object",
        "properties": {
          "emailAddressId": {
            "type": "integer",
            "description": "Unique email ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "email": {
            "type": "string",
            "description": "Email address",
            "nullable": true,
            "example": "sender@a.com"
          }
        },
        "description": "Email addresses",
        "nullable": true
      },
      "MigrateIdentifier": {
        "required": [
          "sequence",
          "type"
        ],
        "type": "object",
        "properties": {
          "sequence": {
            "type": "integer",
            "description": "Unique sequence ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "type": {
            "$ref": "#/components/schemas/CodedValue"
          },
          "identifier": {
            "type": "string",
            "description": "The identifying information e.g. driving licence number",
            "example": "KJ 45544 JFKJK"
          },
          "issuedAuthority": {
            "type": "string",
            "description": "The issuing authority for this identifier",
            "example": "DVLA"
          }
        },
        "description": "Proofs of identity",
        "nullable": true
      },
      "MigratePhoneNumber": {
        "required": [
          "extension",
          "number",
          "phoneId",
          "type"
        ],
        "type": "object",
        "properties": {
          "phoneId": {
            "type": "integer",
            "description": "Unique phone ID in NOMIS",
            "format": "int64",
            "example": 123
          },
          "number": {
            "type": "string",
            "description": "Telephone number",
            "example": "098989 98989893"
          },
          "extension": {
            "type": "string",
            "description": "Extension number",
            "nullable": true,
            "example": "100"
          },
          "type": {
            "$ref": "#/components/schemas/CodedValue"
          }
        },
        "description": "A list of phone numbers which are linked to this address"
      },
      "IdPair": {
        "required": [
          "dpsId",
          "elementType",
          "nomisId"
        ],
        "type": "object",
        "properties": {
          "elementType": {
            "type": "string",
            "description": "The category of information returned",
            "example": "PHONE",
            "enum": [
              "CONTACT",
              "PHONE",
              "EMAIL",
              "ADDRESS",
              "IDENTITY",
              "RESTRICTION",
              "PRISONER_CONTACT",
              "PRISONER_CONTACT_RESTRICTION"
            ]
          },
          "nomisId": {
            "type": "integer",
            "description": "The unique ID for this piece of data provided in the request",
            "format": "int64",
            "example": 123435
          },
          "dpsId": {
            "type": "integer",
            "description": "The unique ID created in the DPS contacts service",
            "format": "int64",
            "example": 1234
          }
        },
        "description": "List of Nomis Id and DPS Id for prisoner contact restrictions"
      },
      "MigrateContactResponse": {
        "required": [
          "addresses",
          "dpsContactId",
          "emailAddresses",
          "identities",
          "lastName",
          "nomisPersonId",
          "phoneNumbers",
          "prisonerContactRestrictions",
          "prisonerContacts",
          "restrictions"
        ],
        "type": "object",
        "properties": {
          "nomisPersonId": {
            "type": "integer",
            "description": "The original ID of the person in NOMIS",
            "format": "int64",
            "example": 123456
          },
          "dpsContactId": {
            "type": "integer",
            "description": "The new ID of this contact in the DPS contacts service",
            "format": "int64",
            "example": 123456
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact created",
            "example": "Doe"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "phoneNumbers": {
            "type": "array",
            "description": "List of Nomis Id and DPS Id for phone numbers",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "addresses": {
            "type": "array",
            "description": "List of Nomis Id and DPS Id for addresses",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "List of Nomis Id and DPS Id for email addresses",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "identities": {
            "type": "array",
            "description": "List of Nomis Id and DPS Id for proofs of identity",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "restrictions": {
            "type": "array",
            "description": "List of Nomis Id and DPS Id for restrictions",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "prisonerContacts": {
            "type": "array",
            "description": "List of Nomis Id and DPS Id for prisoner contacts",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          },
          "prisonerContactRestrictions": {
            "type": "array",
            "description": "List of Nomis Id and DPS Id for prisoner contact restrictions",
            "items": {
              "$ref": "#/components/schemas/IdPair"
            }
          }
        },
        "description": "The migration response for a contact and all of its sub-elements"
      },
      "ContactAddressDetails": {
        "required": [
          "contactAddressId",
          "contactId",
          "createdBy",
          "createdTime",
          "mailFlag",
          "noFixedAddress",
          "phoneNumbers",
          "primaryAddress",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactAddressId": {
            "type": "integer",
            "description": "The id of the contact address",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "addressType": {
            "type": "string",
            "description": "The type of address",
            "example": "HOME"
          },
          "addressTypeDescription": {
            "type": "string",
            "description": "The description of the address type",
            "example": "HOME"
          },
          "primaryAddress": {
            "type": "boolean",
            "description": "True if this is the primary address otherwise false",
            "example": true
          },
          "flat": {
            "type": "string",
            "description": "Flat number or name",
            "nullable": true,
            "example": "Flat 2B"
          },
          "property": {
            "type": "string",
            "description": "Building or house number or name",
            "nullable": true,
            "example": "Mansion House"
          },
          "street": {
            "type": "string",
            "description": "Street or road name",
            "nullable": true,
            "example": "Acacia Avenue"
          },
          "area": {
            "type": "string",
            "description": "Area",
            "nullable": true,
            "example": "Morton Heights"
          },
          "cityCode": {
            "type": "string",
            "description": "City code",
            "nullable": true,
            "example": "25343"
          },
          "cityDescription": {
            "type": "string",
            "description": "The description of city code",
            "nullable": true,
            "example": "Sheffield"
          },
          "countyCode": {
            "type": "string",
            "description": "County code",
            "nullable": true,
            "example": "S.YORKSHIRE"
          },
          "countyDescription": {
            "type": "string",
            "description": "The description of county code",
            "nullable": true,
            "example": "South Yorkshire"
          },
          "postcode": {
            "type": "string",
            "description": "Postcode",
            "nullable": true,
            "example": "S13 4FH"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "nullable": true,
            "example": "ENG"
          },
          "countryDescription": {
            "type": "string",
            "description": "The description of country code",
            "nullable": true,
            "example": "England"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the address has been verified by postcode lookup",
            "example": false
          },
          "verifiedBy": {
            "type": "string",
            "description": "Which username ran the postcode lookup check",
            "example": "NJKG44D"
          },
          "verifiedTime": {
            "type": "string",
            "description": "The timestamp of when the postcode lookup was done",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Flag to indicate whether mail is allowed to be sent to this address",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The start date when this address is to be considered active from",
            "format": "date",
            "example": "2024-01-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date when this address is to be considered no longer active",
            "format": "date",
            "example": "2024-01-01"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "Flag to indicate whether this address indicates no fixed address",
            "example": false
          },
          "phoneNumbers": {
            "type": "array",
            "description": "Phone numbers that are related to this address",
            "items": {
              "$ref": "#/components/schemas/ContactPhoneNumberDetails"
            }
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "amendedBy": {
            "type": "string",
            "description": "The id of the user who last amended the contact address",
            "example": "JD000001"
          },
          "amendedTime": {
            "type": "string",
            "description": "The timestamp of when the contact address was last amended",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "An address related to a contact with descriptions of all reference data"
      },
      "ContactEmailDetails": {
        "required": [
          "contactEmailId",
          "contactId",
          "createdBy",
          "createdTime",
          "emailAddress",
          "emailType",
          "emailTypeDescription",
          "primaryEmail"
        ],
        "type": "object",
        "properties": {
          "contactEmailId": {
            "type": "integer",
            "description": "Unique identifier for the contact email",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "emailType": {
            "type": "string",
            "description": "Type of email",
            "example": "WORK"
          },
          "emailTypeDescription": {
            "type": "string",
            "description": "Type of email",
            "example": "Work email"
          },
          "emailAddress": {
            "type": "string",
            "description": "Email address",
            "example": "work@example.com"
          },
          "primaryEmail": {
            "type": "boolean",
            "description": "Indicates if this is the primary Email address",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "Email related to a contact"
      },
      "ContactIdentityDetails": {
        "required": [
          "contactId",
          "contactIdentityId",
          "createdBy",
          "createdTime",
          "verified"
        ],
        "type": "object",
        "properties": {
          "contactIdentityId": {
            "type": "integer",
            "description": "Unique identifier for the contact identity",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "identityType": {
            "type": "string",
            "description": "Type of identity",
            "nullable": true,
            "example": "PASSPORT"
          },
          "identityTypeDescription": {
            "type": "string",
            "description": "Description of the type of identity",
            "nullable": true,
            "example": "Passport number"
          },
          "identityValue": {
            "type": "string",
            "description": "Identity ",
            "nullable": true,
            "example": "GB123456789"
          },
          "issuingAuthority": {
            "type": "string",
            "description": "The authority who issued the identity ",
            "nullable": true,
            "example": "UK Passport Office"
          },
          "verified": {
            "type": "boolean",
            "description": "Whether the identity has been verified",
            "example": false
          },
          "verifiedBy": {
            "type": "string",
            "description": "The user id of the user who verified the identity",
            "nullable": true,
            "example": "USER1"
          },
          "verifiedTime": {
            "type": "string",
            "description": "Timestamp when the identity was verified",
            "format": "date-time",
            "nullable": true
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "Identity related to a contact"
      },
      "ContactPhoneNumberDetails": {
        "required": [
          "contactId",
          "contactPhoneId",
          "createdBy",
          "createdTime",
          "phoneNumber",
          "phoneType",
          "phoneTypeDescription",
          "primaryPhone"
        ],
        "type": "object",
        "properties": {
          "contactPhoneId": {
            "type": "integer",
            "description": "Unique identifier for the contact phone",
            "format": "int64",
            "example": 1
          },
          "contactId": {
            "type": "integer",
            "description": "Unique identifier for the contact",
            "format": "int64",
            "example": 123
          },
          "phoneType": {
            "type": "string",
            "description": "Type of phone",
            "example": "MOBILE"
          },
          "phoneTypeDescription": {
            "type": "string",
            "description": "Description of the type of phone",
            "example": "Mobile phone"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Phone number",
            "example": "+1234567890"
          },
          "extNumber": {
            "type": "string",
            "description": "Extension number",
            "example": "123"
          },
          "primaryPhone": {
            "type": "boolean",
            "description": "Indicates if this is the primary phone number",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User who created the entry",
            "example": "admin"
          },
          "createdTime": {
            "type": "string",
            "description": "Timestamp when the entry was created",
            "format": "date-time"
          },
          "amendedBy": {
            "type": "string",
            "description": "User who amended the entry",
            "example": "admin2"
          },
          "amendedTime": {
            "type": "string",
            "description": "Timestamp when the entry was amended",
            "format": "date-time"
          }
        },
        "description": "A phone number related to a contact with descriptions of all reference data"
      },
      "GetContactResponse": {
        "required": [
          "addresses",
          "createdBy",
          "createdTime",
          "emailAddresses",
          "firstName",
          "id",
          "identities",
          "interpreterRequired",
          "isDeceased",
          "lastName",
          "phoneNumbers"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "title": {
            "type": "string",
            "description": "The title of the contact, if any",
            "nullable": true,
            "example": "Mr"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "Whether the contact is over 18, based on their date of birth if it is known",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "isDeceased": {
            "type": "boolean",
            "description": "The date the contact deceased, if known",
            "example": false
          },
          "deceasedDate": {
            "type": "string",
            "description": "The date the contact deceased, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "languageCode": {
            "type": "string",
            "description": "The NOMIS code for the contacts language",
            "nullable": true,
            "example": "ENG"
          },
          "languageDescription": {
            "type": "string",
            "description": "The description of the language code",
            "nullable": true,
            "example": "English"
          },
          "interpreterRequired": {
            "type": "boolean",
            "description": "Whether an interpreter is required for this contact",
            "nullable": true,
            "example": true
          },
          "addresses": {
            "type": "array",
            "description": "All addresses for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactAddressDetails"
            }
          },
          "phoneNumbers": {
            "type": "array",
            "description": "All phone numbers for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactPhoneNumberDetails"
            }
          },
          "emailAddresses": {
            "type": "array",
            "description": "All email addresses for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactEmailDetails"
            }
          },
          "identities": {
            "type": "array",
            "description": "All identities for the contact",
            "items": {
              "$ref": "#/components/schemas/ContactIdentityDetails"
            }
          },
          "domesticStatusCode": {
            "type": "string",
            "description": "The NOMIS code for the contacts domestic status",
            "nullable": true,
            "example": "S"
          },
          "domesticStatusDescription": {
            "type": "string",
            "description": "The description of the domestic status code",
            "nullable": true,
            "example": "Single"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          }
        },
        "description": "The details of a contact as an individual"
      },
      "AddContactRelationshipRequest": {
        "required": [
          "createdBy",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "relationship": {
            "$ref": "#/components/schemas/ContactRelationship"
          },
          "createdBy": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "description": "The id of the user creating the contact",
            "example": "JD000001"
          }
        }
      },
      "Sort": {
        "type": "object",
        "properties": {
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReferenceCode": {
        "required": [
          "code",
          "displayOrder",
          "groupCode",
          "referenceCodeId"
        ],
        "type": "object",
        "properties": {
          "referenceCodeId": {
            "type": "integer",
            "description": "An internally-generated unique identifier for this reference code.",
            "format": "int64",
            "example": 12345
          },
          "groupCode": {
            "type": "string",
            "description": "The group name for related reference codes.",
            "example": "PHONE_TYPE"
          },
          "code": {
            "type": "string",
            "description": "The code for this reference data",
            "example": "MOBILE"
          },
          "description": {
            "type": "string",
            "description": "A fuller description of the reference code",
            "example": "Mobile"
          },
          "displayOrder": {
            "type": "integer",
            "description": "The default order configured for the reference code, lowest number first.",
            "format": "int32",
            "example": 5
          }
        },
        "description": "Describes the details of a reference code"
      },
      "PrisonerContactSummary": {
        "required": [
          "approvedVisitor",
          "awareOfCharges",
          "cityCode",
          "cityDescription",
          "contactId",
          "countryCode",
          "countryDescription",
          "countyCode",
          "countyDescription",
          "emergencyContact",
          "firstName",
          "lastName",
          "nextOfKin",
          "postCode",
          "prisonerContactId",
          "prisonerNumber",
          "property",
          "relationshipCode",
          "relationshipDescription",
          "street"
        ],
        "type": "object",
        "properties": {
          "prisonerContactId": {
            "type": "integer",
            "description": "The unique identifier for the prisoner contact",
            "format": "int64",
            "example": 123456
          },
          "contactId": {
            "type": "integer",
            "description": "The unique identifier for the contact",
            "format": "int64",
            "example": 654321
          },
          "prisonerNumber": {
            "type": "string",
            "description": "Prisoner number (NOMS ID)",
            "example": "A1234BC"
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "type": "string",
            "description": "The middle names of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact",
            "format": "date",
            "example": "1980-01-01"
          },
          "estimatedIsOverEighteen": {
            "type": "string",
            "description": "YES if the contact is over 18 years old, NO if under, null if unknown",
            "example": "YES",
            "enum": [
              "YES",
              "NO",
              "DO_NOT_KNOW"
            ]
          },
          "relationshipCode": {
            "type": "string",
            "description": "The relationship code between the prisoner and the contact",
            "example": "FRI"
          },
          "relationshipDescription": {
            "type": "string",
            "description": "The description of the relationship",
            "example": "Friend"
          },
          "flat": {
            "type": "string",
            "description": "Flat number in the address, if any",
            "nullable": true,
            "example": "Flat 1"
          },
          "property": {
            "type": "string",
            "description": "Property name or number",
            "example": "123"
          },
          "street": {
            "type": "string",
            "description": "Street name",
            "example": "Baker Street"
          },
          "area": {
            "type": "string",
            "description": "Area or locality, if any",
            "nullable": true,
            "example": "Marylebone"
          },
          "cityCode": {
            "type": "string",
            "description": "City code",
            "example": "25343"
          },
          "cityDescription": {
            "type": "string",
            "description": "The description of city code",
            "example": "Sheffield"
          },
          "countyCode": {
            "type": "string",
            "description": "County code",
            "example": "S.YORKSHIRE"
          },
          "countyDescription": {
            "type": "string",
            "description": "The description of county code",
            "example": "South Yorkshire"
          },
          "postCode": {
            "type": "string",
            "description": "Postal code",
            "example": "NW1 6XE"
          },
          "countryCode": {
            "type": "string",
            "description": "Country code",
            "example": "ENG"
          },
          "countryDescription": {
            "type": "string",
            "description": "The description of country code",
            "example": "England"
          },
          "approvedVisitor": {
            "type": "boolean",
            "description": "Indicates whether the contact is an approved visitor",
            "example": true
          },
          "nextOfKin": {
            "type": "boolean",
            "description": "Is this contact the prisoner's next of kin?",
            "example": false
          },
          "emergencyContact": {
            "type": "boolean",
            "description": "Is this contact the prisoner's emergency contact?",
            "example": true
          },
          "awareOfCharges": {
            "type": "boolean",
            "description": "Is this contact aware of the prisoner's charges?",
            "example": true
          },
          "comments": {
            "type": "string",
            "description": "Any additional comments",
            "nullable": true,
            "example": "Close family friend"
          }
        },
        "description": "Describes the details of a prisoner's contact"
      },
      "Pageable": {
        "type": "object",
        "properties": {
          "page": {
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "size": {
            "minimum": 1,
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "PageableObject": {
        "type": "object",
        "properties": {
          "offset": {
            "type": "integer",
            "format": "int64"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "paged": {
            "type": "boolean"
          },
          "pageNumber": {
            "type": "integer",
            "format": "int32"
          },
          "unpaged": {
            "type": "boolean"
          }
        }
      },
      "PrisonerContactSummaryPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PrisonerContactSummary"
            }
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "SortObject": {
        "type": "object",
        "properties": {
          "direction": {
            "type": "string"
          },
          "nullHandling": {
            "type": "string"
          },
          "ascending": {
            "type": "boolean"
          },
          "property": {
            "type": "string"
          },
          "ignoreCase": {
            "type": "boolean"
          }
        }
      },
      "Language": {
        "required": [
          "displaySequence",
          "isoAlpha2",
          "isoAlpha3",
          "isoLanguageDesc",
          "languageId",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "languageId": {
            "type": "integer",
            "description": "Unique identifier of the language",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the language",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the language",
            "example": "United Kingdom"
          },
          "isoAlpha2": {
            "type": "string",
            "description": "ISO Alpha-2 code of the language",
            "example": "GB"
          },
          "isoAlpha3": {
            "type": "string",
            "description": "ISO Alpha-3 code of the language",
            "example": "GBR"
          },
          "isoLanguageDesc": {
            "type": "string",
            "description": "ISO language description",
            "example": "United Kingdom of Great Britain and Northern Ireland"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the language",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Language reference entity"
      },
      "County": {
        "required": [
          "countyId",
          "displaySequence",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "countyId": {
            "type": "integer",
            "description": "Unique identifier of the county",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the county",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the county",
            "example": "United Kingdom"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the county",
            "format": "int32",
            "example": 1
          }
        },
        "description": "County reference entity"
      },
      "Country": {
        "required": [
          "countryId",
          "displaySequence",
          "isoAlpha2",
          "isoAlpha3",
          "isoCountryDesc",
          "isoNumeric",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "countryId": {
            "type": "integer",
            "description": "Unique identifier of the country",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the country",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the country",
            "example": "United Kingdom"
          },
          "isoNumeric": {
            "type": "integer",
            "description": "ISO numeric code of the country",
            "format": "int32",
            "example": 826
          },
          "isoAlpha2": {
            "type": "string",
            "description": "ISO Alpha-2 code of the country",
            "example": "GB"
          },
          "isoAlpha3": {
            "type": "string",
            "description": "ISO Alpha-3 code of the country",
            "example": "GBR"
          },
          "isoCountryDesc": {
            "type": "string",
            "description": "ISO country description",
            "example": "United Kingdom of Great Britain and Northern Ireland"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the country",
            "format": "int32",
            "example": 1
          }
        },
        "description": "Country reference entity"
      },
      "ContactSearchRequest": {
        "required": [
          "lastName"
        ],
        "type": "object",
        "properties": {
          "lastName": {
            "maxLength": 12,
            "type": "string",
            "description": "Last name of the contact",
            "example": "Jones"
          },
          "firstName": {
            "maxLength": 12,
            "type": "string",
            "description": "First name of the contact",
            "nullable": true,
            "example": "Elton"
          },
          "middleNames": {
            "maxLength": 12,
            "type": "string",
            "description": "Middle names of the contact",
            "nullable": true,
            "example": "Simon"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "Date of Birth of the contact in ISO format",
            "format": "date",
            "nullable": true
          }
        },
        "description": "Contact Search Request"
      },
      "ContactSearchResultItem": {
        "required": [
          "firstName",
          "id",
          "lastName"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The id of the contact",
            "format": "int64",
            "example": 123456
          },
          "lastName": {
            "type": "string",
            "description": "The last name of the contact",
            "example": "Doe"
          },
          "firstName": {
            "type": "string",
            "description": "The first name of the contact",
            "example": "John"
          },
          "middleNames": {
            "type": "string",
            "description": "The middle name of the contact, if any",
            "nullable": true,
            "example": "William"
          },
          "dateOfBirth": {
            "type": "string",
            "description": "The date of birth of the contact, if known",
            "format": "date",
            "nullable": true,
            "example": "1980-01-01"
          },
          "createdBy": {
            "type": "string",
            "description": "The id of the user who created the contact",
            "example": "JD000001"
          },
          "createdTime": {
            "type": "string",
            "description": "The timestamp of when the contact was created",
            "format": "date-time",
            "example": "2024-01-01T00:00:00Z"
          },
          "flat": {
            "type": "string",
            "description": "The flat of the contact address, if known",
            "nullable": true,
            "example": "01"
          },
          "property": {
            "type": "string",
            "description": "The property of the contact address, if known",
            "nullable": true,
            "example": "01"
          },
          "street": {
            "type": "string",
            "description": "The street of the contact address, if known",
            "nullable": true,
            "example": "Bluebell Crescent"
          },
          "area": {
            "type": "string",
            "description": "The area of the contact address, if known",
            "nullable": true,
            "example": "Birmingham"
          },
          "cityCode": {
            "type": "string",
            "description": "The city code of the contact address, if known",
            "nullable": true,
            "example": "25343"
          },
          "cityDescription": {
            "type": "string",
            "description": "The description of city code, if known",
            "nullable": true,
            "example": "Sheffield"
          },
          "countyCode": {
            "type": "string",
            "description": "The county code of the contact address, if known",
            "nullable": true,
            "example": "S.YORKSHIRE"
          },
          "countyDescription": {
            "type": "string",
            "description": "The description of county code, if known",
            "nullable": true,
            "example": "South Yorkshire"
          },
          "postCode": {
            "type": "string",
            "description": "The postcode of the contact address, if known",
            "nullable": true,
            "example": "B42 2QJ"
          },
          "countryCode": {
            "type": "string",
            "description": "The country code of the contact address, if known",
            "nullable": true,
            "example": "ENG"
          },
          "countryDescription": {
            "type": "string",
            "description": "The description of country code, if known",
            "nullable": true,
            "example": "England"
          },
          "mailFlag": {
            "type": "boolean",
            "description": "Flag to indicate if mail can be sent to this address",
            "nullable": true,
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date from which this address can be considered active",
            "format": "date",
            "nullable": true,
            "example": "2022-10-01"
          },
          "endDate": {
            "type": "string",
            "description": "The date after which this address should be considered inactive",
            "format": "date",
            "nullable": true,
            "example": "2023-10-02"
          },
          "noFixedAddress": {
            "type": "boolean",
            "description": "A flag to indicate that this address is effectively no fixed address",
            "nullable": true,
            "example": false
          }
        },
        "description": "The details of a contact as an individual"
      },
      "ContactSearchResultItemPage": {
        "type": "object",
        "properties": {
          "content": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ContactSearchResultItem"
            }
          },
          "pageable": {
            "$ref": "#/components/schemas/PageableObject"
          },
          "total": {
            "type": "integer",
            "format": "int64",
            "writeOnly": true
          },
          "last": {
            "type": "boolean"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "totalElements": {
            "type": "integer",
            "format": "int64"
          },
          "first": {
            "type": "boolean"
          },
          "size": {
            "type": "integer",
            "format": "int32"
          },
          "number": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortObject"
            }
          },
          "numberOfElements": {
            "type": "integer",
            "format": "int32"
          },
          "empty": {
            "type": "boolean"
          }
        }
      },
      "City": {
        "required": [
          "cityId",
          "displaySequence",
          "nomisCode",
          "nomisDescription"
        ],
        "type": "object",
        "properties": {
          "cityId": {
            "type": "integer",
            "description": "Unique identifier of the city",
            "format": "int64",
            "nullable": true,
            "example": 1
          },
          "nomisCode": {
            "type": "string",
            "description": "Nomis code of the city",
            "example": "GBR"
          },
          "nomisDescription": {
            "type": "string",
            "description": "Nomis description of the city",
            "example": "United Kingdom"
          },
          "displaySequence": {
            "type": "integer",
            "description": "Display sequence for the city",
            "format": "int32",
            "example": 1
          }
        },
        "description": "City reference entity"
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "name": "Authorization",
        "in": "header",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
