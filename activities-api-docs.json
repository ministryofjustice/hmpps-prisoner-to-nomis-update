{
  "openapi": "3.0.1",
  "info": {
    "title": "Activities management API",
    "description": "API for management of prisoner activities",
    "contact": {
      "name": "HMPPS Digital Studio",
      "email": "feedback@digital.justice.gov.uk"
    },
    "version": "2023-02-16.2884.9a74e5f"
  },
  "servers": [
    {
      "url": "https://activities-api-dev.prison.service.justice.gov.uk",
      "description": "Generated server url"
    }
  ],
  "security": [
    {
      "bearer-jwt": [
        "read",
        "write"
      ]
    }
  ],
  "paths": {
    "/queue-admin/retry-dlq/{dlqName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryDlq",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/RetryDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/retry-all-dlqs": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "retryAllDlqs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/RetryDlqResult"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/purge-queue/{queueName}": {
      "put": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "purgeQueue",
        "parameters": [
          {
            "name": "queueName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/PurgeQueueResult"
                }
              }
            }
          }
        }
      }
    },
    "/attendances": {
      "put": {
        "tags": [
          "attendance-controller"
        ],
        "summary": "Updates attendance records.",
        "description": "Updates the given attendance records with the supplied update request details. Requires the 'ACTIVITY_ADMIN' role.",
        "operationId": "markAttendances",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/AttendanceUpdateRequest"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The attendance records were updated.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduleId}/allocations": {
      "get": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Get a list of activity schedule allocations",
        "description": "Returns zero or more activity schedule allocations.",
        "operationId": "getAllocationsBy",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "If true will only return active allocations. Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The allocations for an activity schedule",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Allocation"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Schedule ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Allocate offender to schedule",
        "description": "Allocates the supplied offender allocation request to the activity schedule. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].",
        "operationId": "allocate",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrisonerAllocationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "204": {
            "description": "The allocation was created and added to the schedule.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          },
          "404": {
            "description": "The activity schedule for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-events/prison/{prisonCode}": {
      "get": {
        "tags": [
          "scheduled-event-controller"
        ],
        "summary": "Get a list of scheduled events for a prison, prisoner, date range (max 3 months) and optional time slot.",
        "description": "\n      Returns scheduled events for the prison, prisoner, date range (max 3 months) and optional time slot.\n      Court hearings, appointments and visits always come from NOMIS (via prison API).\n      Activities come from either NOMIS or the new Activities database, depending on whether the prison is\n      marked as rolled-out in the activities database.\n      (Intended usage: Prisoner calendar)\n    ",
        "operationId": "getScheduledEventsByPrisonAndPrisonerAndDateRange",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "description": "The 3-digit prison code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "prisonerNumber",
            "in": "query",
            "description": "Prisoner number (required). Format A9999AA.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of query (required). Format YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of query (required). Format YYYY-MM-DD. The end date must be within 3 months of the start date)",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "Time slot for the events (optional). If supplied, one of AM, PM or ED.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call - zero or more scheduled events found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerScheduledEvents"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "scheduled-event-controller"
        ],
        "summary": "Get a list of scheduled events for a prison and list of prisoner numbers for a date and time slot",
        "description": "\n      Returns scheduled events for the prison, prisoner numbers, single date and an optional time slot.\n      Court hearings, appointments and visits always come from NOMIS (via prison API).\n      Activities come from either NOMIS or the new activities database, depending on whether the prison is\n      marked as rolled-out in the activities database.\n      (Intended usage: Unlock list)\n    ",
        "operationId": "getScheduledEventsByPrisonAndPrisonersAndDateRange",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "description": "The 3-character prison code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "The exact date to return events for (required) in format YYYY-MM-DD",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "Time slot of the events (optional). If supplied, one of AM, PM or ED.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "uniqueItems": true,
                "type": "array",
                "description": "Set of prisoner numbers (required). Example ['G11234YI', 'B5234YI'].",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful call - zero or more scheduled events found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonerScheduledEvents"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prisons/{prisonCode}/prisoner-allocations": {
      "post": {
        "tags": [
          "prisoner-allocation-controller"
        ],
        "summary": "Get all allocations for prisoners",
        "description": "Returns zero or more allocations for the supplied list of prisoners.",
        "operationId": "prisonerAllocations",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "activeOnly",
            "in": "query",
            "description": "If true will only return active allocations. Defaults to true.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "array",
                "description": "The required prisoner numbers (mandatory)",
                "items": {
                  "type": "string"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "The allocations for the prisoners",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonerAllocations"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/job/create-scheduled-instances": {
      "post": {
        "tags": [
          "job-trigger-controller"
        ],
        "summary": "Trigger the job to create the scheduled instances in advance for the active schedules on activities",
        "description": "Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.",
        "operationId": "triggerCreateScheduledInstancesJob",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/job/create-attendance-records": {
      "post": {
        "tags": [
          "job-trigger-controller"
        ],
        "summary": "Trigger the job to create attendance records in advance",
        "description": "Can only be accessed from within the ingress. Requests from elsewhere will result in a 401 response code.",
        "operationId": "triggerCreateAttendanceRecordsJob",
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/appointments": {
      "post": {
        "tags": [
          "appointment-controller"
        ],
        "summary": "Create an appointment or series of appointment occurrences",
        "description": "\n    Create an appointment or series of appointment occurrences and allocate the supplied prisoner or prisoners to them.\n    Does not require any specific roles\n    ",
        "operationId": "createAppointment",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AppointmentCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The appointment or series of appointment occurrences was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities": {
      "post": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Create an activity",
        "description": "Create an activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].",
        "operationId": "create",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The activity was created.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/schedules": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity",
        "operationId": "getActivitySchedules",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Activity ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity schedules",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityScheduleLite"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Adds a new schedule to an existing activity",
        "description": "Adds a new schedule to an existing activity. Requires any one of the following roles ['ACTIVITY_HUB', 'ACTIVITY_HUB_LEAD', 'ACTIVITY_ADMIN'].",
        "operationId": "addSchedule",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ActivityScheduleCreateRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "The schedule was created and added to the activity.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityScheduleLite"
                }
              }
            }
          },
          "404": {
            "description": "Activity ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{scheduleId}": {
      "get": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Get an activity schedule by its id",
        "description": "Returns a single activity schedule by its unique identifier.",
        "operationId": "getScheduleId",
        "parameters": [
          {
            "name": "scheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The activity for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivitySchedule"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/schedules/{activityScheduleId}/capacity": {
      "get": {
        "tags": [
          "activity-schedule-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity schedule",
        "operationId": "getActivityScheduleCapacity",
        "parameters": [
          {
            "name": "activityScheduleId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Schedule ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity schedule capacity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapacityAndAllocated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-instances/{instanceId}": {
      "get": {
        "tags": [
          "scheduled-instance-controller"
        ],
        "summary": "Get a scheduled instance by ID",
        "description": "Returns a scheduled instance.",
        "operationId": "getScheduledInstanceById",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Scheduled instance found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActivityScheduleInstance"
                }
              }
            }
          },
          "404": {
            "description": "The scheduled instance was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/scheduled-instances/{instanceId}/attendances": {
      "get": {
        "tags": [
          "scheduled-instance-controller"
        ],
        "summary": "Get a list of attendances for a scheduled instance",
        "description": "Returns one or more attendance records for a particular scheduled activity for a given scheduled instance.",
        "operationId": "getAttendancesByScheduledInstance",
        "parameters": [
          {
            "name": "instanceId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Attendance records found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Attendance"
                  }
                }
              }
            }
          },
          "404": {
            "description": "The scheduled instance was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/rollout/{prisonCode}": {
      "get": {
        "tags": [
          "rollout-controller"
        ],
        "summary": "Get a prison by its code",
        "description": "Returns a single prison and its details by its unique code.",
        "operationId": "getPrisonByCode",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The prison for this code was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Prison found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RolloutPrison"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/queue-admin/get-dlq-messages/{dlqName}": {
      "get": {
        "tags": [
          "hmpps-queue-resource"
        ],
        "operationId": "getDlqMessages",
        "parameters": [
          {
            "name": "dlqName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "maxMessages",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 100
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/GetDlqResult"
                }
              }
            }
          }
        }
      }
    },
    "/prisons/{prisonCode}/scheduled-instances": {
      "get": {
        "tags": [
          "activity-schedule-instance-controller"
        ],
        "summary": "Get a list of scheduled instances for a prison, date range (max 3 months) and time slot (AM, PM or ED - optional)",
        "description": "Returns zero or more scheduled instances for a prison and date range (max 3 months).",
        "operationId": "getActivityScheduleInstancesByDateRange",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "description": "The 3-character prison code.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "description": "Start date of query (required). Format YYYY-MM-DD.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "description": "End date of query (required). The end date must be within 3 months of the start date.",
            "required": true,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "slot",
            "in": "query",
            "description": "The time slot (optional). If supplied, one of AM, PM or ED.",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call - zero or more scheduled instance records found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityScheduleInstance"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/schedules": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get a list of activity schedules at a given prison",
        "description": "Returns zero or more activity schedules at a given prison.",
        "operationId": "getSchedulesByPrisonCode",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of activity, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          },
          {
            "name": "locationId",
            "in": "query",
            "description": "The internal NOMIS location id of the activity",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activity schedules found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivitySchedule"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/prison-pay-bands": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get a list of pay bands at a given prison",
        "description": "Returns the pay bands at a given prison or a default list of values if none present.",
        "operationId": "getPrisonPayBands",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Prison pay bands found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/PrisonPayBand"
                  }
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/locations": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get scheduled prison locations",
        "description": "Returns a list of zero or more scheduled prison locations for the supplied criteria.",
        "operationId": "getScheduledPrisonLocations",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "date",
            "in": "query",
            "description": "Date of activity, default today",
            "required": false,
            "schema": {
              "type": "string",
              "format": "date"
            }
          },
          {
            "name": "timeSlot",
            "in": "query",
            "description": "AM, PM or ED",
            "required": false,
            "schema": {
              "type": "string",
              "enum": [
                "AM",
                "PM",
                "ED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Locations found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/InternalLocation"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/activity-categories/{categoryId}/capacity": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity category within a prison",
        "operationId": "getActivityCategoryCapacity",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Category ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity category capacity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapacityAndAllocated"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/activity-categories/{categoryId}/activities": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get list of activities within a category at a specified prison",
        "operationId": "getActivitiesInCategory",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "categoryId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activities within the category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityLite"
                  }
                }
              }
            }
          },
          "404": {
            "description": "Category ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/{prisonCode}/activities": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get list of activities at a specified prison",
        "operationId": "getActivities",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Activities",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityLite"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/prison/prison-regime/{prisonCode}": {
      "get": {
        "tags": [
          "prison-controller"
        ],
        "summary": "Get a prison regime by its code",
        "description": "Returns a single prison regime and its details by its unique prison code.",
        "operationId": "getPrisonRegimeByPrisonCode",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Prison regime found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PrisonRegime"
                }
              }
            }
          },
          "404": {
            "description": "The prison regime for this prison code was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonCode}": {
      "get": {
        "tags": [
          "location-controller"
        ],
        "summary": "List of cell locations for a prison group supplied as a query parameter",
        "description": "List of cell locations for a prison group supplied as a query parameter",
        "operationId": "getCellLocationsForGroup",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call - zero or more cell locations found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Location"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonCode}/location-prefix": {
      "get": {
        "tags": [
          "location-controller"
        ],
        "summary": "Get the location prefix for a location group supplied as a query parameter",
        "description": "Get location prefix for a location group name supplied as a query parameter",
        "operationId": "getLocationPrefixForGroup",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "groupName",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call - Location prefix found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LocationPrefixDto"
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/locations/prison/{prisonCode}/location-groups": {
      "get": {
        "tags": [
          "location-controller"
        ],
        "summary": "List of all available location groups defined at a prison",
        "description": "List of all available location groups defined at a prison",
        "operationId": "getLocationGroups",
        "parameters": [
          {
            "name": "prisonCode",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful call - zero or more location groups found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/LocationGroup"
                  }
                }
              }
            }
          },
          "400": {
            "description": "Invalid request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Requested resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointments/{appointmentId}": {
      "get": {
        "tags": [
          "appointment-controller"
        ],
        "summary": "Get an appointment by its id",
        "description": "Returns an appointment and its details by its unique identifier.",
        "operationId": "getAppointmentById",
        "parameters": [
          {
            "name": "appointmentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Appointment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "404": {
            "description": "The appointment for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/appointment-categories": {
      "get": {
        "tags": [
          "appointment-category-controller"
        ],
        "summary": "Get the list of top-level appointment categories",
        "operationId": "getAppointmentCategories",
        "parameters": [
          {
            "name": "includeInactive",
            "in": "query",
            "description": "If true will return all appointment categories otherwise only active categories will be returned. Defaults to false.",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Appointment categories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AppointmentCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/allocations/id/{allocationId}": {
      "get": {
        "tags": [
          "allocation-controller"
        ],
        "summary": "Get an allocation by its id",
        "description": "Returns a single allocation and its details by its unique identifier.",
        "operationId": "getAllocationById",
        "parameters": [
          {
            "name": "allocationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "allocation found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Allocation"
                }
              }
            }
          },
          "404": {
            "description": "The allocation for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activity-categories": {
      "get": {
        "tags": [
          "activity-category-controller"
        ],
        "summary": "Get the list of top-level activity categories",
        "operationId": "getCategories",
        "responses": {
          "200": {
            "description": "Activity categories found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActivityCategory"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get an activity by its id",
        "description": "Returns a single activity and its details by its unique identifier.",
        "operationId": "getActivityById",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "The activity for this ID was not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Activity"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/activities/{activityId}/capacity": {
      "get": {
        "tags": [
          "activity-controller"
        ],
        "summary": "Get the capacity and number of allocated slots in an activity",
        "operationId": "getActivityCapacity",
        "parameters": [
          {
            "name": "activityId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int64"
            }
          }
        ],
        "responses": {
          "404": {
            "description": "Activity ID not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorised, requires a valid Oauth2 token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          },
          "200": {
            "description": "Activity capacity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CapacityAndAllocated"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden, requires an appropriate role",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DlqMessage": {
        "required": [
          "body",
          "messageId"
        ],
        "type": "object",
        "properties": {
          "body": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            }
          },
          "messageId": {
            "type": "string"
          }
        }
      },
      "RetryDlqResult": {
        "required": [
          "messages",
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DlqMessage"
            }
          }
        }
      },
      "PurgeQueueResult": {
        "required": [
          "messagesFoundCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "AttendanceUpdateRequest": {
        "required": [
          "attendanceReason",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this attendance",
            "format": "int64",
            "example": 123456
          },
          "attendanceReason": {
            "type": "string",
            "description": "The reason codes- ABS, ACCAB, ATT, CANC, NREQ, SUS, UNACAB, REST",
            "example": "ATT"
          }
        },
        "description": "Request object for updating an attendance record"
      },
      "ErrorResponse": {
        "required": [
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "format": "int32"
          },
          "errorCode": {
            "type": "integer",
            "format": "int32"
          },
          "userMessage": {
            "type": "string"
          },
          "developerMessage": {
            "type": "string"
          },
          "moreInfo": {
            "type": "string"
          }
        }
      },
      "PrisonerAllocationRequest": {
        "required": [
          "payBandId",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "maxLength": 7,
            "minLength": 0,
            "type": "string",
            "description": "The prisoner number (Nomis ID)",
            "example": "A1234AA"
          },
          "payBandId": {
            "type": "integer",
            "description": "Where a prison uses pay bands to differentiate earnings, this is the pay band code given to this prisoner",
            "format": "int64",
            "example": 1
          }
        },
        "description": "The prisoner allocation request details"
      },
      "PrisonerScheduledEvents": {
        "type": "object",
        "properties": {
          "prisonCode": {
            "type": "string",
            "description": "The prison code for these scheduled events",
            "example": "MDI"
          },
          "prisonerNumbers": {
            "uniqueItems": true,
            "type": "array",
            "description": "The set of prisoner numbers for theses scheduled events ",
            "example": "['GF10101', 'GR123YI']",
            "items": {
              "type": "string",
              "description": "The set of prisoner numbers for theses scheduled events ",
              "example": "['GF10101', 'GR123YI']"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The start date for this collection of scheduled events",
            "format": "date",
            "example": "2022-11-01"
          },
          "endDate": {
            "type": "string",
            "description": "The end date (inclusive) for this collection of scheduled events",
            "format": "date",
            "example": "2022-11-28"
          },
          "appointments": {
            "type": "array",
            "description": "A list of scheduled appointments for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "courtHearings": {
            "type": "array",
            "description": "A list of (active) scheduled court hearings for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "visits": {
            "type": "array",
            "description": "A list of scheduled visits for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          },
          "activities": {
            "type": "array",
            "description": "A list of scheduled activities for this prisoner in this date range",
            "items": {
              "$ref": "#/components/schemas/ScheduledEvent"
            }
          }
        },
        "description": "Describes a prisoners scheduled events"
      },
      "ScheduledEvent": {
        "required": [
          "startTime"
        ],
        "type": "object",
        "properties": {
          "prisonCode": {
            "type": "string",
            "description": "The prison code for this scheduled event",
            "example": "MDI"
          },
          "eventId": {
            "type": "integer",
            "description": "The event id for this scheduled event",
            "format": "int64",
            "example": 10001
          },
          "bookingId": {
            "type": "integer",
            "description": "The booking id for this scheduled event",
            "format": "int64",
            "example": 10001
          },
          "location": {
            "type": "string",
            "description": "The location of this scheduled event",
            "example": "INDUCTION CLASSROOM"
          },
          "locationId": {
            "type": "integer",
            "description": "The location id of this scheduled event",
            "format": "int64",
            "example": 10001
          },
          "eventClass": {
            "type": "string",
            "description": "Scheduled event class",
            "example": "INT_MOV"
          },
          "eventStatus": {
            "type": "string",
            "description": "Scheduled event status",
            "example": "SCH"
          },
          "eventType": {
            "type": "string",
            "description": "Scheduled event type",
            "example": "APP"
          },
          "eventTypeDesc": {
            "type": "string",
            "description": "Scheduled event type description",
            "example": "Appointment"
          },
          "event": {
            "type": "string",
            "description": "Scheduled event",
            "example": "GOVE"
          },
          "eventDesc": {
            "type": "string",
            "description": "Scheduled event description",
            "example": "Governor"
          },
          "details": {
            "type": "string",
            "description": "Details of this scheduled event",
            "example": "Dont be late"
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "GF10101"
          },
          "date": {
            "type": "string",
            "description": "The specific date for this scheduled instance",
            "format": "date",
            "example": "2022-09-30"
          },
          "startTime": {
            "type": "string",
            "description": "The start time for this scheduled instance",
            "format": "partial-time",
            "example": "9:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time for this scheduled instance",
            "format": "partial-time",
            "example": "10:00"
          },
          "priority": {
            "type": "integer",
            "description": "The event priority",
            "format": "int32"
          }
        },
        "description": "Describes a scheduled event"
      },
      "Allocation": {
        "required": [
          "activitySummary",
          "id",
          "prisonPayBand",
          "prisonerNumber",
          "scheduleDescription",
          "scheduleId",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this allocation",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number (Nomis ID)",
            "example": "A1234AA"
          },
          "bookingId": {
            "type": "integer",
            "description": "The offender booking id",
            "format": "int64",
            "example": 10001
          },
          "activitySummary": {
            "type": "string"
          },
          "scheduleId": {
            "type": "integer",
            "format": "int64"
          },
          "scheduleDescription": {
            "type": "string"
          },
          "prisonPayBand": {
            "$ref": "#/components/schemas/PrisonPayBand"
          },
          "startDate": {
            "type": "string",
            "description": "The date when the prisoner will start the activity",
            "format": "date",
            "example": "2022-09-10"
          },
          "endDate": {
            "type": "string",
            "description": "The date when the prisoner will stop attending the activity",
            "format": "date",
            "example": "2023-09-10"
          },
          "allocatedTime": {
            "type": "string",
            "description": "The date and time the prisoner was allocated to the activity",
            "format": "date-time"
          },
          "allocatedBy": {
            "type": "string",
            "description": "The person who allocated the prisoner to the activity",
            "example": "Mr Blogs"
          },
          "deallocatedTime": {
            "type": "string",
            "description": "The date and time the prisoner was deallocated from the activity",
            "format": "date-time"
          },
          "deallocatedBy": {
            "type": "string",
            "description": "The person who deallocated the prisoner from the activity",
            "example": "Mrs Blogs"
          },
          "deallocatedReason": {
            "type": "string",
            "description": "The descriptive reason why this prisoner was deallocated from the activity",
            "example": "Not attending regularly"
          }
        },
        "description": "A prisoner who is allocated to an activity"
      },
      "PrisonPayBand": {
        "required": [
          "alias",
          "description",
          "displaySequence",
          "id",
          "nomisPayBand",
          "prisonCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this prison pay band",
            "format": "int64",
            "example": 123456
          },
          "displaySequence": {
            "type": "integer",
            "description": "The order in which the pay band should be presented within a list e.g. dropdown",
            "format": "int32",
            "example": 1
          },
          "alias": {
            "type": "string",
            "description": "The alternative text to use in place of the description e.g. Low, Medium, High",
            "example": "Low"
          },
          "description": {
            "type": "string",
            "description": "The description of pay band in this prison",
            "example": "Pay band 1"
          },
          "nomisPayBand": {
            "type": "integer",
            "description": "The pay band number this is associated with in NOMIS (1-10)",
            "format": "int32",
            "example": 1
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code for the pay band. Can also be 'DEFAULT' if none set up for prison",
            "example": "MDI"
          }
        },
        "description": "Describes one instance of a prison pay band"
      },
      "PrisonerAllocations": {
        "required": [
          "allocations",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number",
            "example": "GF10101"
          },
          "allocations": {
            "type": "array",
            "description": "The list of allocations for the prisoner",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          }
        },
        "description": "Describes a prisoners allocations"
      },
      "AppointmentCreateRequest": {
        "required": [
          "categoryId",
          "comment",
          "endTime",
          "inCell",
          "prisonCode",
          "prisonerNumbers",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "categoryId": {
            "type": "integer",
            "description": "The category id for this appointment. Must exist and be active",
            "format": "int64",
            "example": 21
          },
          "prisonCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The NOMIS prison code where this appointment takes place",
            "example": "PVI"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS internal location id within the specified prison. This must be supplied if inCell is false.\n    The internal location id must exist, must be within the prison specified by the prisonCode property and be active. \n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location id will be ignored if inCell is true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date of the appointment or first appointment occurrence in the series",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "10:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to the appointment.\n    The default value if no notes are specified at the occurrence or instance levels\n    ",
            "example": "This appointment will help adjusting to life outside of prison"
          },
          "prisonerNumbers": {
            "type": "array",
            "description": "The prisoner or prisoners to allocate to the created appointment or series of appointment occurrences",
            "example": [
              "A1234BC"
            ],
            "items": {
              "type": "string",
              "description": "The prisoner or prisoners to allocate to the created appointment or series of appointment occurrences",
              "example": "[\"A1234BC\"]"
            }
          }
        },
        "description": "The create request with the new appointment or series of appointment occurrences details"
      },
      "Appointment": {
        "required": [
          "category",
          "comment",
          "created",
          "createdBy",
          "id",
          "inCell",
          "occurrences",
          "prisonCode",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment",
            "format": "int64",
            "example": 12345
          },
          "category": {
            "$ref": "#/components/schemas/AppointmentCategory"
          },
          "prisonCode": {
            "type": "string",
            "description": "\n    The NOMIS AGENCY_LOCATIONS.AGY_LOC_ID value for mapping to NOMIS.\n    Note, this property does not exist on the appointment occurrences and is therefore consistent across all occurrences\n    ",
            "example": "SKI"
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.\n    Should be null if in cell = true\n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location id should be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date of the appointment or first appointment occurrence in the series",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of the appointment or first appointment occurrence in the series",
            "format": "partial-time",
            "example": "10:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to the appointment.\n    The default value if no notes are specified at the occurrence or instance levels\n    ",
            "example": "This appointment will help adjusting to life outside of prison"
          },
          "created": {
            "type": "string",
            "description": "The date and time this appointment was created. Will not change",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that created the appointment.\n    Usually a NOMIS username\n    ",
            "example": "AAA01U"
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment was last changed.\n    Will be null if the appointment has not been altered since it was created\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that edited the appointment.\n    Usually a NOMIS username. Will be null if the appointment has not been altered since it was created\n    ",
            "example": "AAA01U"
          },
          "schedule": {
            "$ref": "#/components/schemas/AppointmentSchedule"
          },
          "occurrences": {
            "type": "array",
            "description": "\n    The individual occurrence or occurrences of this appointment. Non recurring appointments will have a single\n    appointment occurrence containing the same property values as the parent appointment. The same start date, time\n    and end time. Recurring appointments will have a series of occurrences. The first in the series will also\n    contain the same property values as the parent appointment and subsequent occurrences will have start dates\n    following on from the original start date incremented as specified by the appointment's schedule. Each occurrence\n    can be edited independently of the parent. All properties of an occurrence override those of the parent appointment\n    with a null coalesce back to the parent for nullable properties. The full series of occurrences specified by the\n    schedule will be created in advance.\n    ",
            "items": {
              "$ref": "#/components/schemas/AppointmentOccurrence"
            }
          }
        },
        "description": "\n  The top level appointment containing the initial values for all appointment properties.\n  Joins together one or more appointment occurrences and optionally a schedule if the appointment is recurring.\n  The child appointment occurrences will by default have the same property values.\n  The occurrence property values can be changed independently to support rescheduling, cancelling and altered\n  attendee lists at an individual occurrence level.\n  Editing a property at the appointment level will cascade the edit to all *future* child occurrences\n  "
      },
      "AppointmentCategory": {
        "required": [
          "active",
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment category",
            "format": "int64",
            "example": 51
          },
          "parent": {
            "$ref": "#/components/schemas/AppointmentCategory"
          },
          "code": {
            "type": "string",
            "description": "The NOMIS REFERENCE_CODES.CODE (DOMAIN = 'INT_SCH_RSN') value for mapping to NOMIS",
            "example": "CHAP"
          },
          "description": {
            "type": "string",
            "description": "The description of the appointment category",
            "example": "Chaplaincy"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if this (sub)category) is active. Only active (sub)categories are valid for create and update requests",
            "example": true
          },
          "displayOrder": {
            "type": "integer",
            "description": "Override to the default of ordering alphabetically by description supporting explicit ordering",
            "format": "int32",
            "example": 1
          }
        },
        "description": "\n  Describes an activity category. Categories can have a two level hierarchy, category and subcategory.\n  Subcategory level categories will have a parent.\n  Tables referencing appointment category should use the id primary key.\n  Mapping to NOMIS is via the code property.\n  The active property is a soft delete allowing categories that only exist in NOMIS to be maintained in the database\n  but not supported when creating or editing appointments.\n  Display order supports explicit ordering of categories and subcategories. Ordering will default to alphabetically\n  by description of display order is not specified.\n  "
      },
      "AppointmentOccurrence": {
        "required": [
          "allocations",
          "cancelled",
          "id",
          "inCell",
          "startDate",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment occurrence",
            "format": "int64",
            "example": 123456
          },
          "internalLocationId": {
            "type": "integer",
            "description": "\n    The NOMIS AGENCY_INTERNAL_LOCATIONS.INTERNAL_LOCATION_ID value for mapping to NOMIS.\n    Should be null if in cell = true\n    ",
            "format": "int64",
            "example": 123
          },
          "inCell": {
            "type": "boolean",
            "description": "\n    Flag to indicate if the location of the appointment is in cell rather than an internal prison location.\n    Internal location id should be null if in cell = true\n    ",
            "example": false
          },
          "startDate": {
            "type": "string",
            "description": "The date this appointment occurrence is taking place on",
            "format": "date"
          },
          "startTime": {
            "type": "string",
            "description": "The starting time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time of this appointment occurrence",
            "format": "partial-time",
            "example": "13:30"
          },
          "comment": {
            "type": "string",
            "description": "\n    Notes relating to this appointment occurrence.\n    The comment value from the parent appointment will be used if this is null\n    ",
            "example": "This appointment occurrence has been rescheduled due to staff availability"
          },
          "cancelled": {
            "type": "boolean",
            "description": "\n    Supports cancelling of this appointment occurrence. This is different from (soft) deleting the parent appointment\n    and can be used to highlight where an appointment has been cancelled on unlock lists and similar\n    ",
            "example": false
          },
          "updated": {
            "type": "string",
            "description": "\n    The date and time this appointment occurrence was last changed.\n    Will be null if the appointment occurrence has not been altered independently from the parent appointment\n    since it was created\n    ",
            "format": "date-time"
          },
          "updatedBy": {
            "type": "string",
            "description": "\n    The username of the user authenticated via HMPPS auth that edited this appointment instance.\n    Usually a NOMIS username. Will be null if the appointment occurrence has not been altered independently from the\n    parent appointment since it was created\n    ",
            "example": "AAA01U"
          },
          "allocations": {
            "type": "array",
            "description": "\n    The prisoner or prisoners attending this appointment occurrence. Single appointments such as medical will have one\n    allocation record. A group appointment e.g. gym or chaplaincy sessions will have more than one allocation record.\n    Allocations are at the occurrence level supporting alteration of attendees in any future occurrence.\n    When viewing or editing a recurring appointment, the allocations from the next appointment occurrence in the series\n    will be used.\n    ",
            "items": {
              "$ref": "#/components/schemas/AppointmentOccurrenceAllocation"
            }
          }
        },
        "description": "\n  Represents a specific appointment occurrence. Non recurring appointments will have a single appointment occurrence\n  containing the same property values as the parent appointment. The same start date, time and end time. Recurring\n  appointments will have a series of occurrences. The first in the series will also contain the same property values\n  as the parent appointment and subsequent occurrences will have start dates following on from the original start date\n  incremented as specified by the appointment's schedule. Each occurrence can be edited independently of the parent.\n  All properties of an occurrence override those of the parent appointment with a null coalesce back to the parent for\n  nullable properties. The full series of occurrences specified by the schedule will be created in advance.\n  "
      },
      "AppointmentOccurrenceAllocation": {
        "required": [
          "bookingId",
          "id",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment allocation",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The NOMIS OFFENDERS.OFFENDER_ID_DISPLAY value for mapping to a prisoner record in NOMIS",
            "example": "A1234BC"
          },
          "bookingId": {
            "type": "integer",
            "description": "The NOMIS OFFENDER_BOOKINGS.OFFENDER_BOOK_ID value for mapping to a prisoner booking record in NOMIS",
            "format": "int64",
            "example": 456
          }
        },
        "description": "\n  The allocation of a prisoner to an appointment occurrence. Standard single appointments will have one prisoner\n  allocated to its single appointment occurrence. More than one prisoner allocation record signifies the associated\n  appointment is a group appointment. Group appointments support additional checks such as non-associations.\n  "
      },
      "AppointmentSchedule": {
        "required": [
          "endDate",
          "fridayFlag",
          "id",
          "mondayFlag",
          "saturdayFlag",
          "sundayFlag",
          "thursdayFlag",
          "tuesdayFlag",
          "wednesdayFlag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally generated identifier for this appointment schedule",
            "format": "int64",
            "example": 12345
          },
          "endDate": {
            "type": "string",
            "description": "\n    The date the series of appointment occurrences should end. The UI will provide options to specify an end date or\n    a number of occurrences. The later case should be used to calculate the end date internally\n    ",
            "format": "date"
          },
          "mondayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Monday",
            "example": false
          },
          "tuesdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Tuesday",
            "example": true
          },
          "wednesdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Wednesday",
            "example": false
          },
          "thursdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Thursday",
            "example": false
          },
          "fridayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Friday",
            "example": false
          },
          "saturdayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Saturday",
            "example": false
          },
          "sundayFlag": {
            "type": "boolean",
            "description": "Indicates the appointment reoccurs every Sunday",
            "example": false
          }
        },
        "description": "\n  Describes the recurrence of an appointment. The days of the week an occurrence of the appointment will be scheduled\n  and the end date of the series.\n  "
      },
      "ActivityCreateRequest": {
        "required": [
          "attendanceRequired",
          "categoryId",
          "eligibilityRuleIds",
          "inCell",
          "minimumIncentiveLevel",
          "minimumIncentiveNomisCode",
          "outsideWork",
          "pay",
          "pieceWork",
          "prisonCode",
          "riskLevel",
          "summary"
        ],
        "type": "object",
        "properties": {
          "prisonCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "PVI"
          },
          "attendanceRequired": {
            "type": "boolean",
            "description": "Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance",
            "example": false
          },
          "inCell": {
            "type": "boolean",
            "description": "Flag to indicate if the location of the activity is in cell",
            "example": false
          },
          "pieceWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity is piece work",
            "example": false
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity carried out outside of the prison",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes). ",
            "example": "H",
            "enum": [
              "H",
              "F"
            ]
          },
          "summary": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "A brief summary description of this activity for use in forms and lists",
            "example": "Maths level 1"
          },
          "description": {
            "maxLength": 300,
            "minLength": 0,
            "type": "string",
            "description": "A detailed description for this activity",
            "example": "A basic maths course suitable for introduction to the subject"
          },
          "categoryId": {
            "type": "integer",
            "description": "The category id for this activity, one of the high-level categories",
            "format": "int64"
          },
          "tierId": {
            "type": "integer",
            "description": "The tier id for this activity, as defined by the Future Prison Regime team",
            "format": "int64",
            "example": 1
          },
          "eligibilityRuleIds": {
            "type": "array",
            "description": "A list of eligibility rules ids which apply to this activity.",
            "example": [
              1,
              2,
              3
            ],
            "items": {
              "type": "integer",
              "description": "A list of eligibility rules ids which apply to this activity.",
              "format": "int64"
            }
          },
          "pay": {
            "type": "array",
            "description": "The list of pay rates that can apply to this activity",
            "items": {
              "$ref": "#/components/schemas/ActivityPayCreateRequest"
            }
          },
          "riskLevel": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The most recent risk assessment level for this activity",
            "example": "high"
          },
          "minimumIncentiveNomisCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The NOMIS code for the minimum incentive/earned privilege level for this activity",
            "example": "BAS"
          },
          "minimumIncentiveLevel": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The minimum incentive/earned privilege level for this activity",
            "example": "Basic"
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this activity will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-12-23"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.",
            "format": "date",
            "example": "2022-12-23"
          }
        },
        "description": "The create request with the new activity details"
      },
      "ActivityPayCreateRequest": {
        "required": [
          "incentiveLevel",
          "incentiveNomisCode",
          "payBandId"
        ],
        "type": "object",
        "properties": {
          "incentiveNomisCode": {
            "maxLength": 3,
            "minLength": 0,
            "type": "string",
            "description": "The NOMIS code for the incentive/earned privilege level",
            "example": "BAS"
          },
          "incentiveLevel": {
            "maxLength": 10,
            "minLength": 0,
            "type": "string",
            "description": "The incentive/earned privilege level",
            "example": "Basic"
          },
          "payBandId": {
            "type": "integer",
            "description": "The id of the prison pay band used",
            "format": "int64",
            "example": 1
          },
          "rate": {
            "type": "integer",
            "description": "The earning rate for one half day session for someone of this incentive level and pay band (in pence)",
            "format": "int32",
            "example": 150
          },
          "pieceRate": {
            "type": "integer",
            "description": "Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced",
            "format": "int32",
            "example": 150
          },
          "pieceRateItems": {
            "type": "integer",
            "description": "Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate",
            "format": "int32",
            "example": 10
          }
        },
        "description": "Describes the pay rates and bands to be created for an activity"
      },
      "Activity": {
        "required": [
          "attendanceRequired",
          "category",
          "createdBy",
          "createdTime",
          "eligibilityRules",
          "id",
          "inCell",
          "minimumIncentiveLevel",
          "minimumIncentiveNomisCode",
          "outsideWork",
          "pay",
          "payPerSession",
          "pieceWork",
          "prisonCode",
          "riskLevel",
          "schedules",
          "startDate",
          "summary",
          "waitingList"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity",
            "format": "int64",
            "example": 123456
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "PVI"
          },
          "attendanceRequired": {
            "type": "boolean",
            "description": "Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance",
            "example": false
          },
          "inCell": {
            "type": "boolean",
            "description": "Flag to indicate if the location of the activity is in cell",
            "example": false
          },
          "pieceWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity is piece work",
            "example": false
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity carried out outside of the prison",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes). ",
            "example": "H",
            "enum": [
              "H",
              "F"
            ]
          },
          "summary": {
            "type": "string",
            "description": "A brief summary description of this activity for use in forms and lists",
            "example": "Maths level 1"
          },
          "description": {
            "type": "string",
            "description": "A detailed description for this activity",
            "example": "A basic maths course suitable for introduction to the subject"
          },
          "category": {
            "$ref": "#/components/schemas/ActivityCategory"
          },
          "tier": {
            "$ref": "#/components/schemas/ActivityTier"
          },
          "eligibilityRules": {
            "type": "array",
            "description": "A list of eligibility rules which apply to this activity. These can be positive (include) and negative (exclude)",
            "example": "[FEMALE_ONLY,AGED_18-25]",
            "items": {
              "$ref": "#/components/schemas/ActivityEligibility"
            }
          },
          "schedules": {
            "type": "array",
            "description": "A list of schedules for this activity. These contain the time slots / recurrence settings for instances of this activity.",
            "items": {
              "$ref": "#/components/schemas/ActivitySchedule"
            }
          },
          "waitingList": {
            "type": "array",
            "description": "A list of prisoners who are waiting for allocation to this activity. This list is held against the activity, though allocation is against particular schedules of the activity",
            "items": {
              "$ref": "#/components/schemas/PrisonerWaiting"
            }
          },
          "pay": {
            "type": "array",
            "description": "The list of pay rates by incentive level and pay band that can apply to this activity",
            "items": {
              "$ref": "#/components/schemas/ActivityPay"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this activity will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-09-21"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this activity ends. From this date, there will be no more planned instances of the activity. If null, the activity has no end date and will be scheduled indefinitely.",
            "format": "date",
            "example": "2022-12-21"
          },
          "riskLevel": {
            "type": "string",
            "description": "The most recent risk assessment level for this activity",
            "example": "high"
          },
          "minimumIncentiveNomisCode": {
            "type": "string",
            "description": "The NOMIS code for the minimum incentive/earned privilege level for this activity",
            "example": "BAS"
          },
          "minimumIncentiveLevel": {
            "type": "string",
            "description": "The minimum incentive/earned privilege level for this activity",
            "example": "Basic"
          },
          "createdTime": {
            "type": "string",
            "description": "The date and time when this activity was created",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The person who created this activity",
            "example": "Adam Smith"
          }
        },
        "description": "Describes a top-level activity"
      },
      "ActivityCategory": {
        "required": [
          "code",
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated identifier for this activity category",
            "format": "int64",
            "example": 1
          },
          "code": {
            "type": "string",
            "description": "The activity category code",
            "example": "LEISURE_SOCIAL"
          },
          "name": {
            "type": "string",
            "description": "The name of the activity category",
            "example": "Leisure and social"
          },
          "description": {
            "type": "string",
            "description": "The description of the activity category",
            "example": "Such as association, library time and social clubs, like music or art"
          }
        },
        "description": "Describes a top-level activity category"
      },
      "ActivityEligibility": {
        "required": [
          "eligibility",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internal ID of the activity that these rules apply to",
            "format": "int64",
            "example": 123456
          },
          "eligibility": {
            "$ref": "#/components/schemas/EligibilityRule"
          }
        },
        "description": "Describes an eligibility rule as applied to an activity",
        "example": "[FEMALE_ONLY,AGED_18-25]"
      },
      "ActivityLite": {
        "required": [
          "attendanceRequired",
          "category",
          "id",
          "inCell",
          "minimumIncentiveLevel",
          "minimumIncentiveNomisCode",
          "outsideWork",
          "payPerSession",
          "pieceWork",
          "prisonCode",
          "riskLevel",
          "summary"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity",
            "format": "int64",
            "example": 123456
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "PVI"
          },
          "attendanceRequired": {
            "type": "boolean",
            "description": "Flag to indicate if attendance is required for this activity, e.g. gym induction might not be mandatory attendance",
            "example": false
          },
          "inCell": {
            "type": "boolean",
            "description": "Flag to indicate if the location of the activity is in cell",
            "example": false
          },
          "pieceWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity is piece work",
            "example": false
          },
          "outsideWork": {
            "type": "boolean",
            "description": "Flag to indicate if the activity carried out outside of the prison",
            "example": false
          },
          "payPerSession": {
            "type": "string",
            "description": "Indicates whether the activity session is a (F)ull day or a (H)alf day (for payment purposes). ",
            "example": "H",
            "enum": [
              "H",
              "F"
            ]
          },
          "summary": {
            "type": "string",
            "description": "A brief summary description of this activity for use in forms and lists",
            "example": "Maths level 1"
          },
          "description": {
            "type": "string",
            "description": "A detailed description for this activity",
            "example": "A basic maths course suitable for introduction to the subject"
          },
          "category": {
            "$ref": "#/components/schemas/ActivityCategory"
          },
          "riskLevel": {
            "type": "string",
            "description": "The most recent risk assessment level for this activity",
            "example": "high"
          },
          "minimumIncentiveNomisCode": {
            "type": "string",
            "description": "The NOMIS code for the minimum incentive/earned privilege level for this activity",
            "example": "BAS"
          },
          "minimumIncentiveLevel": {
            "type": "string",
            "description": "The minimum incentive/earned privilege level for this activity",
            "example": "Basic"
          }
        },
        "description": "Describes a top-level activity"
      },
      "ActivityPay": {
        "required": [
          "id",
          "incentiveLevel",
          "incentiveNomisCode",
          "prisonPayBand"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity pay",
            "format": "int64",
            "example": 123456
          },
          "incentiveNomisCode": {
            "type": "string",
            "description": "The NOMIS code for the incentive/earned privilege level",
            "example": "BAS"
          },
          "incentiveLevel": {
            "type": "string",
            "description": "The incentive/earned privilege level",
            "example": "Basic"
          },
          "prisonPayBand": {
            "$ref": "#/components/schemas/PrisonPayBand"
          },
          "rate": {
            "type": "integer",
            "description": "The earning rate for one half day session for someone of this incentive level and pay band (in pence)",
            "format": "int32",
            "example": 150
          },
          "pieceRate": {
            "type": "integer",
            "description": "Where payment is related to produced amounts of a product, this indicates the payment rate (in pence) per pieceRateItems produced",
            "format": "int32",
            "example": 150
          },
          "pieceRateItems": {
            "type": "integer",
            "description": "Where payment is related to the number of items produced in a batch of a product, this is the batch size that attract 1 x pieceRate",
            "format": "int32",
            "example": 10
          }
        },
        "description": "Describes the pay rates and bands which apply to an activity"
      },
      "ActivitySchedule": {
        "required": [
          "activity",
          "allocations",
          "capacity",
          "description",
          "id",
          "instances",
          "slots",
          "startDate",
          "suspensions"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity schedule",
            "format": "int64",
            "example": 123456
          },
          "instances": {
            "type": "array",
            "description": "The planned instances associated with this activity schedule",
            "items": {
              "$ref": "#/components/schemas/ScheduledInstance"
            }
          },
          "allocations": {
            "type": "array",
            "description": "The list of allocated prisoners who are allocated to this schedule, at this time and location",
            "items": {
              "$ref": "#/components/schemas/Allocation"
            }
          },
          "description": {
            "type": "string",
            "description": "The description of this activity schedule",
            "example": "Entry level Maths 1"
          },
          "suspensions": {
            "type": "array",
            "description": "Indicates the dates between which the schedule has been suspended",
            "items": {
              "$ref": "#/components/schemas/Suspension"
            }
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "capacity": {
            "type": "integer",
            "description": "The maximum number of prisoners allowed for a scheduled instance of this schedule",
            "format": "int32",
            "example": 10
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityLite"
          },
          "slots": {
            "type": "array",
            "description": "The slots associated with this activity schedule",
            "items": {
              "$ref": "#/components/schemas/ActivityScheduleSlot"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this schedule will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-09-21"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this schedule will end. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-10-21"
          }
        },
        "description": "\n  Describes the weekly schedule for an activity. There can be several of these defined for one activity.\n  An activity schedule describes when, during the week, an activity will be run and where.\n  e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.\n  e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.\n  "
      },
      "ActivityScheduleSlot": {
        "required": [
          "daysOfWeek",
          "endTime",
          "fridayFlag",
          "id",
          "mondayFlag",
          "saturdayFlag",
          "startTime",
          "sundayFlag",
          "thursdayFlag",
          "tuesdayFlag",
          "wednesdayFlag"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity schedule slot",
            "format": "int64",
            "example": 123456
          },
          "startTime": {
            "type": "string",
            "description": "The time that any instances of this schedule slot will start",
            "format": "partial-time",
            "example": "9:00"
          },
          "endTime": {
            "type": "string",
            "description": "The time that any instances of this schedule slot will finish",
            "format": "partial-time",
            "example": "11:30"
          },
          "daysOfWeek": {
            "type": "array",
            "description": "The days of the week on which the schedule slot takes place",
            "example": "[Mon,Tue,Wed]",
            "items": {
              "type": "string",
              "description": "The days of the week on which the schedule slot takes place",
              "example": "[Mon,Tue,Wed]"
            }
          },
          "mondayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Monday",
            "example": true
          },
          "tuesdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Tuesday",
            "example": true
          },
          "wednesdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Wednesday",
            "example": true
          },
          "thursdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Thursday",
            "example": false
          },
          "fridayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Friday",
            "example": false
          },
          "saturdayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Saturday",
            "example": false
          },
          "sundayFlag": {
            "type": "boolean",
            "description": "Indicates whether the schedule slot takes place on a Sunday",
            "example": false
          }
        },
        "description": "\n  Describes a slot for an activity schedule. There can be several of these defined for one activity schedule.\n  An activity schedule slot describes when, during the week, an activity will be run.\n  e.g. Tuesday PM on a Monday and Thursday.\n  "
      },
      "ActivityTier": {
        "required": [
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity tier",
            "format": "int64",
            "example": 123456
          },
          "code": {
            "type": "string",
            "description": "The code for this activity tier",
            "example": "Tier1"
          },
          "description": {
            "type": "string",
            "description": "The detailed description for this activity tier",
            "example": "Work, education and maintenance"
          }
        },
        "description": "An activity tier",
        "example": "Tier 1, Tier 2, Foundation"
      },
      "Attendance": {
        "required": [
          "id",
          "posted",
          "prisonerNumber",
          "status"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this attendance",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prison number this attendance record is for",
            "example": "A1234AA"
          },
          "attendanceReason": {
            "$ref": "#/components/schemas/AttendanceReason"
          },
          "comment": {
            "type": "string",
            "description": "Free text to allow comments to be put against the attendance",
            "example": "Prisoner was too unwell to attend the activity."
          },
          "posted": {
            "type": "boolean"
          },
          "recordedTime": {
            "type": "string",
            "description": "The date and time the attendance was updated",
            "format": "date-time"
          },
          "recordedBy": {
            "type": "string",
            "description": "The person who updated the attendance",
            "example": "A.JONES"
          },
          "status": {
            "type": "string",
            "description": "SCHEDULED, COMPLETED, CANCELLED.",
            "example": "SCHEDULED"
          },
          "payAmount": {
            "type": "integer",
            "description": "The amount in pence to pay the prisoner for the activity",
            "format": "int32",
            "example": 100
          },
          "bonusAmount": {
            "type": "integer",
            "description": "The bonus amount in pence to pay the prisoner for the activity",
            "format": "int32",
            "example": 50
          },
          "pieces": {
            "type": "integer",
            "format": "int32"
          }
        },
        "description": "An attendance record for a prisoner, can be marked or unmarked"
      },
      "AttendanceReason": {
        "required": [
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this absence reason",
            "format": "int64",
            "example": 123456
          },
          "code": {
            "type": "string",
            "description": "The reason codes - ABS, ACCAB, ATT, CANC, NREQ, SUS, UNACAB, REST",
            "example": "ABS"
          },
          "description": {
            "type": "string",
            "description": "The detailed description for this attendance reason",
            "example": "Unacceptable absence"
          }
        },
        "description": "The reason for attending or not"
      },
      "EligibilityRule": {
        "required": [
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this eligibility rule",
            "format": "int64",
            "example": 123456
          },
          "code": {
            "type": "string",
            "description": "The code for this eligibility rule",
            "example": "OVER_21"
          },
          "description": {
            "type": "string",
            "description": "The description for this eligibility rule",
            "example": "The prisoner must be over 21 to attend"
          }
        },
        "description": "Defines one eligibility rule"
      },
      "InternalLocation": {
        "required": [
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The NOMIS internal location id for this schedule",
            "format": "int32",
            "example": 98877667
          },
          "code": {
            "type": "string",
            "description": "The NOMIS internal location code for this schedule",
            "example": "EDU-ROOM-1"
          },
          "description": {
            "type": "string",
            "description": "The NOMIS internal location description for this schedule",
            "example": "Education - R1"
          }
        },
        "description": "An internal NOMIS location for an activity to take place",
        "example": 98877667
      },
      "PrisonerWaiting": {
        "required": [
          "createdBy",
          "createdTime",
          "id",
          "priority",
          "prisonerNumber"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this prisoner waiting",
            "format": "int64",
            "example": 123456
          },
          "prisonerNumber": {
            "type": "string",
            "description": "The prisoner number (NomisId) of the person on the waiting list",
            "example": "A1234AA"
          },
          "priority": {
            "type": "integer",
            "description": "The priority of this person in the waiting list. The lower the number, the higher the priority",
            "format": "int32",
            "example": 1
          },
          "createdTime": {
            "type": "string",
            "description": "The date and time when this person was added to the waiting list",
            "format": "date-time"
          },
          "createdBy": {
            "type": "string",
            "description": "The staff members name who added this person to the waiting list",
            "example": "Adam Smith"
          }
        },
        "description": "Describes a person who is on a waiting list for an activity"
      },
      "ScheduledInstance": {
        "required": [
          "attendances",
          "cancelled",
          "date",
          "endTime",
          "id",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this scheduled instance",
            "format": "int64",
            "example": 123456
          },
          "date": {
            "type": "string",
            "description": "The specific date for this scheduled instance",
            "format": "date",
            "example": "2022-09-30"
          },
          "startTime": {
            "type": "string",
            "description": "The start time for this scheduled instance",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time for this scheduled instance",
            "format": "partial-time",
            "example": "10:00"
          },
          "cancelled": {
            "type": "boolean",
            "description": "Flag to indicate if this scheduled instance has been cancelled since being scheduled",
            "example": false
          },
          "cancelledTime": {
            "type": "string",
            "description": "Date and time this scheduled instance was cancelled (or null if not cancelled)",
            "format": "date-time"
          },
          "cancelledBy": {
            "type": "string",
            "description": "The person who cancelled this scheduled instance (or null if not cancelled)",
            "example": "Adam Smith"
          },
          "attendances": {
            "type": "array",
            "description": "The attendance records for this scheduled instance",
            "items": {
              "$ref": "#/components/schemas/Attendance"
            }
          }
        },
        "description": "Describes one instance of an activity schedule"
      },
      "Suspension": {
        "required": [
          "suspendedFrom"
        ],
        "type": "object",
        "properties": {
          "suspendedFrom": {
            "type": "string",
            "description": "The date from which the activity schedule was suspended",
            "format": "date",
            "example": "2022-09-02"
          },
          "suspendedUntil": {
            "type": "string",
            "description": "The date until which the activity schedule was suspended. If null, the schedule is suspended indefinitely",
            "format": "date",
            "example": "2022-09-02"
          }
        },
        "description": "Describes the period of time an activity schedule has been suspended"
      },
      "ActivityScheduleCreateRequest": {
        "required": [
          "description",
          "slots",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "description": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "description": "The unique description of this activity schedule",
            "example": "Entry level Maths 1"
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this activity scheduled will start. This cannot be before to the activity start date.",
            "format": "date",
            "example": "2022-12-23"
          },
          "endDate": {
            "type": "string",
            "description": "The (optional) date on which this activity scheduled will end. If supplied this must be after to the start date.",
            "format": "date",
            "example": "2023-12-23"
          },
          "locationId": {
            "type": "integer",
            "description": "The optional NOMIS internal location id for this schedule",
            "format": "int64",
            "example": 98877667
          },
          "capacity": {
            "type": "integer",
            "description": "The maximum number of prisoners allowed for a scheduled instance of this schedule",
            "format": "int32",
            "example": 10
          },
          "slots": {
            "type": "array",
            "description": "The days and times an activity schedule can take place",
            "items": {
              "$ref": "#/components/schemas/Slot"
            }
          }
        },
        "description": "The create request with the new activity schedule details"
      },
      "Slot": {
        "required": [
          "friday",
          "monday",
          "saturday",
          "sunday",
          "thursday",
          "timeSlot",
          "tuesday",
          "wednesday"
        ],
        "type": "object",
        "properties": {
          "timeSlot": {
            "type": "string",
            "description": "The time slot of the activity schedule, morning afternoon or evening e.g. AM, PM or ED",
            "example": "AM"
          },
          "monday": {
            "type": "boolean"
          },
          "tuesday": {
            "type": "boolean"
          },
          "wednesday": {
            "type": "boolean"
          },
          "thursday": {
            "type": "boolean"
          },
          "friday": {
            "type": "boolean"
          },
          "saturday": {
            "type": "boolean"
          },
          "sunday": {
            "type": "boolean"
          }
        },
        "description": "\n    Describes time slot and day (or days) the scheduled activity would run. At least one day must be specified.\n    \n    e.g. 'AM, Monday, Wednesday and Friday' or 'PM Tuesday, Thursday, Sunday'\n  "
      },
      "ActivityScheduleLite": {
        "required": [
          "activity",
          "capacity",
          "description",
          "id",
          "slots",
          "startDate"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this activity schedule",
            "format": "int64",
            "example": 123456
          },
          "description": {
            "type": "string",
            "description": "The description of this activity schedule",
            "example": "Monday AM Houseblock 3"
          },
          "internalLocation": {
            "$ref": "#/components/schemas/InternalLocation"
          },
          "capacity": {
            "type": "integer",
            "description": "The maximum number of prisoners allowed for a scheduled instance of this schedule",
            "format": "int32",
            "example": 10
          },
          "activity": {
            "$ref": "#/components/schemas/ActivityLite"
          },
          "slots": {
            "type": "array",
            "description": "The slots associated with this activity schedule",
            "items": {
              "$ref": "#/components/schemas/ActivityScheduleSlot"
            }
          },
          "startDate": {
            "type": "string",
            "description": "The date on which this schedule will start. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-09-21"
          },
          "endDate": {
            "type": "string",
            "description": "The date on which this schedule will end. From this date, any schedules will be created as real, planned instances",
            "format": "date",
            "example": "2022-10-21"
          }
        },
        "description": "\n  Describes the weekly schedule for an activity. There can be several of these defined for one activity.\n  An activity schedule describes when, during the week, an activity will be run and where.\n  e.g. Tuesday PM and Thursday AM - suitable for Houseblock 2 to attend.\n  e.g. Monday AM and Thursday PM - suitable for Houseblock 3 to attend.\n  this 'lite' version of ActivitySchedule does not have allocated or instances.\n  "
      },
      "CapacityAndAllocated": {
        "required": [
          "allocated",
          "capacity"
        ],
        "type": "object",
        "properties": {
          "capacity": {
            "type": "integer",
            "description": "The maximum number of people who can attend the category or activity",
            "format": "int32",
            "example": 30
          },
          "allocated": {
            "type": "integer",
            "description": "The number of slots currently filled in the activity or category",
            "format": "int32",
            "example": 27
          }
        },
        "description": "Describes the capacity and allocated slots of an activity or category"
      },
      "ActivityScheduleInstance": {
        "required": [
          "activitySchedule",
          "attendances",
          "cancelled",
          "date",
          "endTime",
          "id",
          "startTime"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this scheduled instance",
            "format": "int64",
            "example": 123456
          },
          "date": {
            "type": "string",
            "description": "The specific date for this scheduled instance",
            "format": "date",
            "example": "2022-09-30"
          },
          "startTime": {
            "type": "string",
            "description": "The start time for this scheduled instance",
            "format": "partial-time",
            "example": "09:00"
          },
          "endTime": {
            "type": "string",
            "description": "The end time for this scheduled instance",
            "format": "partial-time",
            "example": "10:00"
          },
          "cancelled": {
            "type": "boolean",
            "description": "Flag to indicate if this scheduled instance has been cancelled since being scheduled",
            "example": false
          },
          "cancelledTime": {
            "type": "string",
            "description": "Date and time this scheduled instance was cancelled (or null if not cancelled)",
            "format": "date-time"
          },
          "cancelledBy": {
            "type": "string",
            "description": "The person who cancelled this scheduled instance (or null if not cancelled)",
            "example": "Adam Smith"
          },
          "attendances": {
            "type": "array",
            "description": "The list of attendees",
            "items": {
              "$ref": "#/components/schemas/Attendance"
            }
          },
          "activitySchedule": {
            "$ref": "#/components/schemas/ActivityScheduleLite"
          }
        },
        "description": "Describes one instance of an activity schedule"
      },
      "RolloutPrison": {
        "required": [
          "active",
          "code",
          "description",
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this prison",
            "format": "int64",
            "example": 123456
          },
          "code": {
            "type": "string",
            "description": "The code for this prison",
            "example": "PVI"
          },
          "description": {
            "type": "string",
            "description": "The description for this prison",
            "example": "HMP Pentonville"
          },
          "active": {
            "type": "boolean",
            "description": "Flag to indicate if this prison is presently active",
            "example": true
          },
          "rolloutDate": {
            "type": "string",
            "description": "The date rolled out",
            "format": "date",
            "example": "2022-09-30"
          }
        },
        "description": "Describes one instance of a prison which may or may not be active (rolled out)"
      },
      "GetDlqResult": {
        "required": [
          "messages",
          "messagesFoundCount",
          "messagesReturnedCount"
        ],
        "type": "object",
        "properties": {
          "messagesFoundCount": {
            "type": "integer",
            "format": "int32"
          },
          "messagesReturnedCount": {
            "type": "integer",
            "format": "int32"
          },
          "messages": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DlqMessage"
            }
          }
        }
      },
      "PrisonRegime": {
        "required": [
          "amFinish",
          "amStart",
          "edFinish",
          "edStart",
          "id",
          "pmFinish",
          "pmStart",
          "prisonCode"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "The internally-generated ID for this prison regime",
            "format": "int64",
            "example": 123456
          },
          "prisonCode": {
            "type": "string",
            "description": "The prison code where this activity takes place",
            "example": "MDI"
          },
          "amStart": {
            "type": "string",
            "description": "The start time for the am slot",
            "format": "partial-time",
            "example": "09:00"
          },
          "amFinish": {
            "type": "string",
            "description": "The end time for the am slot",
            "format": "partial-time",
            "example": "12:00"
          },
          "pmStart": {
            "type": "string",
            "description": "The start time for the pm slot",
            "format": "partial-time",
            "example": "13:00"
          },
          "pmFinish": {
            "type": "string",
            "description": "The end time for the pm slot",
            "format": "partial-time",
            "example": "16:30"
          },
          "edStart": {
            "type": "string",
            "description": "The start time for the ed slot",
            "format": "partial-time",
            "example": "18:00"
          },
          "edFinish": {
            "type": "string",
            "description": "The end time for the ed slot",
            "format": "partial-time",
            "example": "20:00"
          }
        },
        "description": "Describes a top-level activity"
      },
      "Location": {
        "required": [
          "agencyId",
          "description",
          "locationId",
          "locationType"
        ],
        "type": "object",
        "properties": {
          "locationId": {
            "type": "integer",
            "description": "Location identifier.",
            "format": "int64",
            "example": 721705
          },
          "locationType": {
            "type": "string",
            "description": "Location type.",
            "example": "CELL"
          },
          "description": {
            "type": "string",
            "description": "Location description.",
            "example": "MDI-RES-HB1-ALE"
          },
          "agencyId": {
            "type": "string",
            "description": "Identifier of Agency this location is associated with.",
            "example": "MDI"
          },
          "locationUsage": {
            "type": "string",
            "description": "What events this room can be used for.",
            "example": "APP"
          },
          "parentLocationId": {
            "type": "integer",
            "description": "Identifier of this location's parent location.",
            "format": "int64",
            "example": 26960
          },
          "currentOccupancy": {
            "type": "integer",
            "description": "Current occupancy of location.",
            "format": "int32",
            "example": 10
          },
          "locationPrefix": {
            "type": "string",
            "description": "Location prefix. Defines search prefix that will constrain search to this location and its subordinate locations.",
            "example": "RES-HB1-ALE"
          },
          "operationalCapacity": {
            "type": "integer",
            "description": "Operational capacity of the location.",
            "format": "int32",
            "example": 20
          },
          "userDescription": {
            "type": "string",
            "description": "User-friendly location description.",
            "example": "RES-HB1-ALE"
          },
          "internalLocationCode": {
            "type": "string",
            "description": "Internal location code"
          }
        }
      },
      "LocationPrefixDto": {
        "required": [
          "locationPrefix"
        ],
        "type": "object",
        "properties": {
          "locationPrefix": {
            "type": "string",
            "description": "Location prefix translated from group name",
            "example": "MDI-1-"
          }
        },
        "description": "Location prefix response"
      },
      "LocationGroup": {
        "required": [
          "children",
          "key",
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "Block A"
          },
          "key": {
            "type": "string",
            "description": "A key for the group",
            "example": "A"
          },
          "children": {
            "type": "array",
            "description": "The child groups of this group",
            "example": [
              {
                "name": "Landing A/1",
                "key": "1"
              },
              {
                "name": "Landing A/2",
                "key": "2"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/LocationGroup"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "bearer-jwt": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}